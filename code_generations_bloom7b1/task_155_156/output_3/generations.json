[["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 1)\n    else:\n        return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = abs(num)\n    if num % 2 == 0:\n        return (num//2, num%2)\n    else:\n        return (num//2, num%2+1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    if num < 0:\n        num = num + 1\n    return (num // 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    def even(n):\n        return n % 2 == 0\n\n    def odd(n):\n        return not even(n)\n\n    return (even(num), odd(num))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (num, num - 1)\n    else:\n        digits = str(num)\n        count = 0\n        for digit in digits:\n            if digit % 2 == 0:\n                count += 1\n            else:\n                count -= 1\n        return (count, count)\n</s>", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    odd = 0\n    even = 0\n    for i in range(len(str(num))):\n        if num[i] % 2 == 1:\n            even += 1\n    for i in range(len(str(num))):\n        if num[i] % 2 == 0:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (0, 0)\n    else:\n        return (num // 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for digit in str(num):\n        if digit.isdigit():\n            count += int(digit)\n    return count, count - count % 2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    n = num\n    while n:\n        n //= 2\n        i, j = n % 2, n // 2\n        if i == 0:\n            i, j = j, i\n        n, i, j = j, i, n\n    return i, j", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    ret = (0, 0)\n    for i in xrange(1, num + 1):\n        if i % 2:\n            ret[0] += 1\n        if i % 2:\n            ret[1] += 1\n    return ret", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    num = abs(num)\n    num = num % 10\n    # ignore leading zeros\n    num = num // 10\n\n    # the number of even digits\n    ev = 0\n\n    # count of even digits\n    for num in range(num, 1, -1):\n        ev += num % 2\n\n    # the number of odd digits\n    ov = num - ev\n\n    return ev, ov", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    return (even_odd_count(num//2), even_odd_count(num % 2))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError('Negative numbers not supported')\n    if num == 0:\n        return (0, 0)\n    even = 0\n    odd = 0\n    for i in range(len(num)):\n        if num[i] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    i = 0\n    while num > 0:\n        if num % 10 == 0:\n            i += 1\n        num /= 10\n    return (i, i)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (1, 0)\n\n    if num < 0:\n        num = -num\n\n    divmod = divmod\n\n    # see if we can divide the number into two integers\n    if num % 2 == 0:\n        # yes, so just return the first two digits\n        return divmod(num, 2)\n\n    # we can only have an even number of digits\n    return divmod(num, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num // 2, 0)\n    else:\n        return (0, num // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd, even = 0, 0\n    while num:\n        num, num = num // 10, num % 10\n        odd += (num % 2)\n        even += (num // 2)\n    return (odd, even)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return num % 2 == 0, num // 2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    n = num\n    result = [0, 0]\n\n    while n >= 0:\n        n, m = divmod(n, 2)\n        if n > 0:\n            result[0] += 1\n        if m > 0:\n            result[1] += 1\n\n    return result", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Can only compute even/odd for positive values.\")\n    num = abs(num)\n    num = num % 2\n    num = 2 * num\n    num -= 1\n\n    if num == 0:\n        return (0, 0)\n\n    num = num / 2\n    num = 2 * num\n    num -= 1\n\n    if num == 0:\n        return (0, 1)\n\n    num = num / 2\n    num = 2 * num\n    num -= 1\n\n    return (num, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num//2), int(num%2))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (even_odd(num), odd_even(num))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    elif num % 2 == 0:\n        return (0, 1)\n    else:\n        return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (1, 1)\n    num2 = int(num)\n    for i in range(2, num2 + 1):\n        if num % i == 0:\n            return (1, i - 1)\n    return (1, num2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    elif num == 1:\n        return (1, 1)\n    else:\n        return (even_odd_count(num // 2)[0] + even_odd_count(num - even_odd_count(num // 2)[0])[0], even_odd_count(num % 2)[1])", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (0 if num % 2 == 0 else 1, 0 if num % 2 == 0 else 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError('Negative value passed to even_odd_count.')\n    if num % 2 == 0:\n        return (1, 1)\n    else:\n        return (2, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num == 0:\n        return (0, 0)\n\n    even = 0\n    odd = 0\n    count = 0\n    for i in xrange(0, len(str(num))):\n        if num[i] % 2 == 0:\n            even += 1\n        elif num[i] % 2 == 1:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    count = 0\n    for num in range(1, num+1):\n        count += num%2\n    return (count, count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    if num % 2 == 0:\n        return (num // 2, num % 2)\n    else:\n        return (num // 2 + 1, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    odd = 0\n    even = 0\n    # If we have odd digits, look for a digit that can be added to get an even number\n    while odd < num:\n        digit = num - odd - 1\n        if digit % 2 == 0:\n            even += 1\n            odd += 1\n        else:\n            odd += 1\n    # If we have even digits, look for a digit that can be subtracted to get an odd number\n    while even < num:\n        digit = num - even - 1\n        if digit % 2 == 0:\n            odd -= 1\n            even += 1\n        else:\n            even += 1\n    if even < num:\n        even += 1\n    if odd < num:\n        odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"num must be non-negative\")\n    num = abs(num)\n    n = 0\n    while num > 0:\n        if num & 1:\n            n += 1\n        num = num >> 1\n    return n, n + 1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    result = [ 1, 0 ]\n    for i in range(1, num):\n        if num % i == 0:\n            result[0] += 1\n        else:\n            result[1] += 1\n    return result", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError('Negative number passed to even_odd_count()')\n    num = abs(num)\n    if num % 2 == 0:\n        return (num // 2, 0)\n    else:\n        return (num // 2, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    num = int(num)\n    num = num % 2\n    num = 2 * num + 1\n    return num, num", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    result = []\n    count = 0\n    while num:\n        result.append(num % 2)\n        num //= 2\n        count += 1\n    return (count, count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    while num > 0:\n        num /= 10\n        count += 1\n    if count % 2 == 1:\n        return (count, count + 1)\n    else:\n        return (count, count - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num <= 0:\n        return (0, 0)\n    num = num // 2\n    count = 0\n    while num > 0:\n        num /= 2\n        count += 1\n    return (count, count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num += 1\n\n    if num == 0:\n        return (0, 0)\n\n    if num % 2 == 0:\n        return (0, num)\n\n    count = 0\n    carry = 0\n    remainder = num\n    while remainder > 0:\n        remainder /= 2\n        count += 1\n        carry += 1\n        if carry == 0:\n            if count % 2 == 0:\n                return (count, carry)\n            else:\n                return (count, 0)\n\n    return (0, count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    odd = 0\n    even = 1\n    while num > 0:\n        num /= 10\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n</s>", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    elif num%2 == 0:\n        return (1, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (sum(1 for x in range(len(str(num)))) % 2, sum(0 for x in range(len(str(num)))) % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = num + 1\n    odd = 0\n    even = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n            num = num // 2\n        else:\n            odd += 1\n            num = num // 2\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num < 0:\n        return (0, 0)\n    if num < 2:\n        return (0, 1)\n    if num % 2 == 0:\n        return (1, 1)\n    return (even_odd_count(num // 2), even_odd_count(num - 1))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (even_odd(num)[0], even_odd(num)[1])", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    for digit in num:\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    digits = []\n    for i in range(0, num):\n        if i % 2 == 0:\n            digits.append(i)\n    return digits", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd = num % 2\n    return (num//2, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n\n    if num < 0:\n        num = abs(num)\n    if num % 2 == 0:\n        return (num // 2, 0)\n    else:\n        return (0, 1 + even_odd_count(-num))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    while num:\n        num, num = divmod(num, 2)\n    return num // 2, num % 2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    n = num % 10\n    odd = n // 2\n    even = n - odd\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    n = 1\n    p = 0\n    while n < num:\n        if num % n == 0:\n            p += 1\n        n += 1\n\n    return (p, n - p)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    # Initialize the return value to an empty tuple.\n    ret = ()\n\n    # Initially, the result is empty.\n    if num < 0:\n        return ret\n\n    # Get the total number of digits.\n    total_digits = num\n\n    # If the total number of digits is odd.\n    if total_digits % 2 == 1:\n        # Get the even digits.\n        if total_digits > 2:\n            ret += even_odd_count(total_digits // 2)\n        # Get the odd digits.\n        if total_digits > 1:\n            ret += even_odd_count(total_digits % 2)\n    # If the total number of digits is even.\n    else:\n        # Get the even digits.\n        if total_digits > 1:\n            ret += even_odd_count(total_digits)\n        # Get the odd digits.\n        if total_digits > 2:\n            ret += even_odd_count(total_digits // 2)\n\n    # Return the result.\n    return ret", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    i, n = divmod(num, 2)\n    if n > 0:\n        i, n = i, n - 1\n    return i, n", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n\n    if num % 2 == 0:\n        return (0, 0)\n    else:\n        return (num // 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)\n\n    if num < 2:\n        return (1, 1)\n\n    if num % 2 == 0:\n        return (1, 1)\n\n    if num % 2 == 1:\n        return (1, 2)\n\n    even = 0\n    odd = 0\n\n    while num > 1:\n        num = num / 2\n\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = num % 2\n    return (num, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num < 0:\n        num = -num\n    if num == 0:\n        return (0, 0)\n\n    num = int(num)\n\n    odd = 0\n    even = 0\n    for i in range(len(num)):\n        if num[i] % 2 == 1:\n            even += 1\n        elif num[i] % 2 == 0:\n            odd += 1\n\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    n = int(num)\n    if n % 2 == 0:\n        return (n//2, n % 2)\n    else:\n        return (n//2 - 1, n % 2 + 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (0, 0)\n    if num % 2 == 1:\n        return (1, 0)\n    return (1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    result = (0, 0)\n    for i in range(len(str(num))):\n        if num % 10 == i:\n            result[0] += 1\n        if num % 2 == i:\n            result[1] += 1\n        num = num // 10\n\n    return result", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (-1, -1)\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (num, 1)\n    else:\n        return (num, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n\n    remainder = num % 2\n    return (remainder, num // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = num * -1\n\n    if num == 0:\n        return (0, 0)\n\n    num = num / 2\n    if num % 2 == 0:\n        return (num, 0)\n    else:\n        return (0, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (num//2, 1)\n    return (num//2, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num < 0:\n        return (0, 0)\n\n    remainder = num % 2\n\n    even = 0\n    odd = 0\n    for i in range(0, remainder, 2):\n        even += i\n\n    for i in range(remainder, len(num)):\n        odd += i\n\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    digits = list(map(int, num.split('')))\n    a = [int(i) for i in digits if i % 2 == 0]\n    b = [int(i) for i in digits if i % 2!= 0]\n    return tuple(a), tuple(b)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num > 0 and num % 2 == 0:\n        return (num//2, num%2)\n    else:\n        return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    if num > 0:\n        if num % 2 == 0:\n            count += 1\n    return count, even_odd_count(num - count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in range(num):\n        if num % 2 == 0:\n            even += 1\n        if num % 2 == 1:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, 0)\n    if num % 2 == 1:\n        return (1, 1)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0,0)\n    num = int(num)\n    if num % 2 == 0:\n        return (num//2,0)\n    else:\n        return (0,num//2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    n = num\n    i = 0\n    even_digits = 0\n    odd_digits = 0\n    while n > 1:\n        if n & 1:\n            n = n >> 1\n            even_digits += 1\n        else:\n            n = n >> 1\n            odd_digits += 1\n    return (even_digits, odd_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (0, 0)\n    else:\n        return (1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return num % 2 == 0, num // 2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 1)\n    if num % 2 == 0:\n        return (1, 1)\n    else:\n        return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2) + 1, (num - (num % 2)) / 2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(math.ceil(num / 2)), int(math.floor(num / 2)))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0,0)\n    odd = num%2\n    num /= 2\n    even = (num-1)//2\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    even = 0\n    odd = 0\n    if num > 0:\n        if num % 2 == 0:\n            even += 1\n    else:\n        odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Count the number of even digits.\n    return (len(str(num).count('0')) + len(str(num).count('1'))) / 2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    result = (0, 0)\n    for i in range(0, num):\n        if num % 2 == 1:\n            result[1] += 1\n        num //= 2\n    return result", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0 or num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (0, 0)\n    if num % 2 == 1:\n        return (1, 0)\n    num = num // 2\n    if num == 1:\n        return (0, 1)\n    return (1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (0, 1)\n    return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num < 0:\n        return (1, 1)\n\n    if num % 2 == 0:\n        return (1, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (\n        num % 2 == 0,\n        num % 2!= 0\n    )", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    total = 0\n    for i in xrange(len(str(num))):\n        if num[i] == 0:\n            total += 1\n        else:\n            total += 1 if num[i] % 2 == 0 else -1\n    return total, total // 2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num // 2, 1)\n    else:\n        return (num // 2, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (0, 1)\n    else:\n        return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (0, 1)\n    elif num % 2 == 1:\n        return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    result = 0\n    even = 0\n    odd = 0\n    num = str(num)\n    for i in num:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if even == odd:\n        result = (even, odd)\n    else:\n        result = (even, odd)\n    return result", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    s = str(num)\n    even = 0\n    odd = 0\n    for i in s.split(\".\"):\n        if i.isdigit():\n            even += i\n    if even == int(even):\n        even = 1\n    for i in s.split(\".\"):\n        if i.isdigit():\n            odd += i\n    if odd == int(odd):\n        odd = 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, 0)\n    elif num % 2!= 0:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError('Argument must be non-negative')\n    num = num % 2\n    if num < 1:\n        return (1, 0)\n    if num % 2:\n        return (0, 1)\n    return (1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = num + (2 ** 32)\n    return (num // 2) + 1, num % 2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        even = 1\n    else:\n        even = 0\n    return (even, even + 1 if num % 2 else 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    n = num\n    if n < 0:\n        return (n + 1, 1)\n    else:\n        return (n, n % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    if num == 0:\n        return (0, 0)\n\n    odd = num % 2\n    num = num // 2\n    even = even_odd_count(num)\n\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, 1)\n    return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return num, 0\n    else:\n        return num, num - 1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, 0)\n    else:\n        return (1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return num % 2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 0)\n    num = abs(num)\n    return (num // 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    num = num % 2\n    if num == 0:\n        return (1, 1)\n    if num == 1:\n        return (1, 0)\n    return (2, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    even = num % 2\n    odd = num // 2\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num > 0:\n        num = num % 10\n    else:\n        num = num + 10\n\n    if num == 0:\n        return (0, 0)\n    else:\n        return (even_odd_count(num // 2), even_odd_count(num % 2))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    even = 0\n    odd = 0\n    for i in range(2, num+1):\n        if num % i == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n</s>", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    #The number of even digits\n    even = 0\n\n    #The number of odd digits\n    odd = 0\n\n    for num in range(1, num+1):\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    return (num%2, num%2+1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    num = abs(num)\n    if num % 2 == 1:\n        return (num // 2, 1)\n    else:\n        return (num // 2, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    total = 0\n    while num:\n        num, remainder = divmod(num, 2)\n        if remainder:\n            total += 1\n    return total, total", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num < 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, 0)\n    if num % 2 == 1:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    odd = 0\n    even = 0\n    for i in range(0, len(str(num))):\n        if num[i].isdigit():\n            if num[i] % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n\n    num = int(num)\n\n    if num > 0 and num % 2 == 0:\n        return (1, 0)\n\n    if num > 0 and num % 2 == 1:\n        return (0, 1)\n\n    return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(num):\n        if num % i == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num//2)%2, num%2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    #check for conditions\n    if num < 0:\n        return (0, 0)\n    if num > 0:\n        return (0, 0)\n    num = int(num)\n    #check for parity\n    if num & 1:\n        return (0, 1)\n    else:\n        return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    result = (0, 0)\n    i = 1\n    while i < num:\n        result[0] += i % 2\n        i //= 2\n    return result", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    result = (0, 0)\n    if num < 0:\n        raise ValueError(\"invalid integer value, must be non-negative\")\n    if num % 2:\n        if num < 0:\n            return (0, 0)\n        else:\n            result[0] += 1\n            if num < 0:\n                return (0, 0)\n            else:\n                result[1] += 1\n    else:\n        if num < 0:\n            return (0, 0)\n        else:\n            result[1] += 1\n\n    return result", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    i = 0\n    while i < num:\n        if num % i == 0 and num % (i + 1) == 0:\n            return (i, i + 1)\n        i += 1\n    return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n\n    total = 0\n    for i in range(len(str(num))):\n        if num[i] % 2 == 0:\n            total += 1\n        else:\n            total -= 1\n\n    return (total % 2, total // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # this is a bit of a hack to get a list of digits (for this\n    # example we have a negative number so it's a bit harder)\n    digits = [num[i:i+2] for i in range(0, len(num), 2)]\n    digits.append(num[-2])\n    return digits", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num >= 0:\n        num = abs(num)\n    if num % 2 == 0:\n        return (num // 2, num % 2)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 0)\n    if num == 1:\n        return (0, 1)\n    if num % 2 == 0:\n        return (1, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    odd, num = divmod(num, 2)\n    even = num - odd\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 1)\n    if num == 0:\n        return (1, 0)\n    total = 0\n    for digit in str(num):\n        if digit.isdigit():\n            total += digit\n    if total % 2 == 0:\n        return (total // 2, total % 2)\n    else:\n        return (total // 2 + 1, total % 2 + 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    n = num.get_integer_value()\n    c = 0\n    while n > 0:\n        if n % 2 == 0:\n            c += 1\n        n = n // 2\n    return c, c", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num <= 0:\n        return (0, 0)\n    return (even_odd(num // 2), even_odd(num % 2))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # count the digits that are even\n    n = 0\n    for digit in str(num):\n        if digit.isdigit():\n            n += 1\n        if digit % 2 == 0:\n            n += 1\n\n    # count the digits that are odd\n    n = 0\n    for digit in str(num):\n        if digit.isdigit():\n            n += 1\n        if digit % 2 == 1:\n            n += 1\n    return n", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    def odd(num):\n        return num % 2 == 1\n\n    # This function is not so nice because it returns a tuple of length 2,\n    # but it works fine.\n    return [odd(num), even(num)]", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = abs(num)\n    if num == 0:\n        return (0, 0)\n    num = num // 10\n    if num % 2 == 0:\n        return (1, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 1)\n    else:\n        return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # We only need to worry about negative numbers.\n    if num < 0:\n        num = -num\n    # Change the number into a string\n    num = str(num)\n    # Split it into even and odd parts\n    even = num.split()\n    odd = num.split(\".\")\n    # Return the number of even parts\n    return len(even), len(odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    m = [0, 0]\n    for i in range(2, num + 1):\n        if num % i == 0:\n            m[0] += 1\n        else:\n            m[1] += 1\n    return (m[0], m[1])", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # assume that the input is in decimal form\n    if num > 0:\n        num = int(num)\n        return (num//2, num%2)\n    else:\n        return (0,0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num//2, 1)\n    else:\n        return (num//2, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Python 3.x, use enumerate instead of zip\n    if PY3:\n        num = list(num)\n        return zip(range(len(num)), enumerate(num))\n    return zip(range(len(num)), num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num += 2\n    if num % 2 == 0:\n        return (num, num)\n    else:\n        return (num, num - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # this seems to be working\n    # num = -123\n    num = 0\n    count = 0\n    while num:\n        if num % 2 == 0:\n            count += 1\n        num //= 2\n    return count, count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    for num in range(2, num + 1):\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n</s>", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    try:\n        if num > 0:\n            if num % 2 == 0:\n                return (1, 1)\n            else:\n                return (1, 2)\n        else:\n            return (0, 0)\n    except TypeError:\n        return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # The following line uses the fact that 0 and 1 are considered to be even\n    # numbers, and any integer greater than 0 is considered to be odd\n    num = num % 2\n    return (num // 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    if num < 0:\n        raise ValueError(\"negative number\")\n    if num == 0:\n        return (1, 1)\n    # take away leading zero\n    num = num - int(math.floor(num))\n    # calculate number of 0 digits\n    n = 0\n    while num:\n        n = n + 1\n        num = num - int(math.floor(num))\n    # get even and odd digits\n    if num & 1:\n        return (n, n)\n    return (n, n - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = num + 2147483647\n    num = num % 2147483647\n    return (num / 2147483647, num % 2147483647)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    total = 0\n    for num in range(0, num):\n        total += num % 2\n    return (total, total)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num // 2, 1)\n    else:\n        return (num // 2, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num < 0:\n        return (0,0)\n    if num % 2 == 0:\n        return (1,0)\n    else:\n        return (0,1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    result = (0, 0)\n    for i in range(len(str(num))):\n        digit = int(num[i])\n        if digit % 2 == 1:\n            result[0] += 1\n    result[1] = result[0] - 1\n    return result", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 1\n    odd = 0\n    for i in range(1, num + 1):\n        if i % 2 == 0:\n            odd += 1\n        else:\n            count += 1\n    return (count, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    num = int(num)\n    result = []\n    count = 1\n    while True:\n        if num % 2 == 0:\n            result.append(count)\n            count += 1\n        elif num % 2!= 0:\n            count = 0\n            break\n        num /= 2\n\n    return result", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    odd_count = 0\n    even_count = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 2\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 0)\n    num *= 10\n    num -= 1\n    num = int(num)\n    if num % 2 == 0:\n        return (1, 0)\n    else:\n        return (0, 1)\n</s>", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    num = num % 2\n    num = num // 2\n    if num == 1:\n        return (1, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    assert num < 0\n    num = abs(num)\n    num = num + 2\n    num = num - 1\n    num = num + 2\n    num = num - 1\n    if num % 2 == 0:\n        return (num, 0)\n    else:\n        return (num - 1, num + 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num > 0:\n        return ((num % 2) + 1) // 2, num // 2\n    else:\n        return 0, 0", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num == 0:\n        return (0, 0)\n    even = 0\n    odd = 0\n    for digit in range(0, num):\n        digit = int(digit)\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (0, 1)\n    return (even_odd_count(num // 2), 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)\n    if num % 2 == 0:\n        return (num // 2, num % 2)\n    else:\n        return (num // 2, num - num // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # This function uses the bitwise operator 'and' to find the number of even and odd digits. It works\n    # by first splitting the number into the number of even digits and the number of odd digits,\n    # then subtracting the number of odd digits from the number of even digits to get the number of even\n    # digits. Finally it divides the number of even digits by two to get the number of odd digits.\n    even = num & (~num & 1)\n    odd = num & 1\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    odd = 0\n    even = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 2\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in range(2, num):\n        if num % i == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 1)\n    else:\n        return (2, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    return (2 * even_digits(num) - odd_digits(num)) // 2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num // 2, num % 2)\n    return (num // 2 + 1, num % 2 + 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    remainder = num % 2\n    if remainder:\n        return (0, 1)\n    even = 0\n    odd = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError('num must be non-negative')\n    count = 0\n    while num > 0:\n        num /= 10\n        count += 1\n    count *= 2\n    return count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (1, 0)\n    return (num // 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = abs(num)\n        even_odd = (0, 1)\n    else:\n        even_odd = (1, 0)\n\n    digits = [str(i) for i in range(num)]\n    while len(digits) < 2:\n        digits.append('0')\n\n    even = 0\n    odd = 0\n\n    for i in range(num):\n        digit = digits[i]\n\n        if digit.isdigit():\n            digit = int(digit)\n            if digit % 2 == 0:\n                even += 1\n            elif digit % 2 == 1:\n                odd += 1\n\n    return even_odd, even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return 0, 0\n    elif num % 2 == 0:\n        return 0, 1\n    else:\n        return 1, 2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    total = 0\n    odd = 0\n    for i in range(0, num):\n        if num % 2 == 0:\n            total += i\n        elif num % 2!= 0:\n            odd += i\n    return (total, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (len(str(num))%2, len(str(num))/2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 1\n    odd = num // 2\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Negative number passed in\")\n    num = abs(num)\n\n    num = num % 2\n    if num == 0:\n        return (num, 0)\n    else:\n        return (num + 1, num - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num%2 == 0:\n        return (0, num/2)\n    else:\n        return (num/2, num/2-1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # find the total number of digits\n    total_digits = len(str(num))\n    # count even or odd digits\n    even_or_odd = int(num) % 2\n    # return a tuple with even or odd as the first element and the number of digits as the second element\n    return (even_or_odd, total_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (0, num//2)\n    else:\n        return (1, num%2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    i = 0\n    while i < num:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        i += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (0, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 1)\n    else:\n        return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    try:\n        return (int(str(num))%2, int(str(num))/2)\n    except:\n        return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num > 0:\n        n = int(num)\n        if n % 2:\n            return (1, 1)\n        else:\n            return (n / 2, 1)\n    else:\n        return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    while num:\n        if num % 2 == 0:\n            return (0, 1)\n        num //= 2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    def count(number):\n        if number < 0:\n            number *= -1\n        if number % 2 == 0:\n            return 0\n        else:\n            return 1\n    return tuple(count(x) for x in range(num))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num >= 0:\n        if num % 2 == 0:\n            return (num//2, 0)\n        else:\n            return (0, num%2+(num//2))\n    else:\n        return (0, num+(num//2))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (num // 2, 0)\n    return (num // 2, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = float(num)\n    return num%2, num//2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    while num:\n        if num % 2 == 0:\n            return (num // 2, num % 2)\n        num = num // 2\n    return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    # For some reason, xrange doesn't work here\n    digits = [str(x) for x in xrange(num)]\n    count = 0\n    for digit in digits:\n        count += digit.isdigit()\n    return (count, count + (digits[-1].isdigit() - count % 2))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 1)\n    else:\n        return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 0)\n    num = int(num)\n    even = 0\n    odd = 0\n    count = 0\n    for digit in str(num):\n        if digit.isdigit():\n            if digit % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        count += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # First let's count the even digits:\n    even_digits = 0\n    for i in range(1, num + 1):\n        if i % 2 == 0:\n            even_digits += 1\n    # Now let's count the odd digits:\n    odd_digits = num - even_digits\n    return (even_digits, odd_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num == 0:\n        return (0, 0)\n    elif num % 2 == 0:\n        return (1, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return 0, 0\n    num, remainder = divmod(num, 2)\n    even = num % 2\n    odd = num - even\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    even = 0\n    odd = 0\n    for i in range(0, len(str(num))):\n        if num[i] == '.':\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n\n    if num % 2 == 0:\n        return (1, 1)\n    elif num % 2 == 1:\n        return (1, 2)\n    else:\n        return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    odd = 0\n    even = 0\n    for i in xrange(0, num):\n        if num % 2 == 0:\n            count += 1\n            if num % 2 == 1:\n                even += 1\n        else:\n            odd += 1\n    return (count, even, odd)"]]