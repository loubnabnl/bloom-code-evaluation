[["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Init\n    list_of_ints = []\n    index = 0\n    list_of_ints.append(x[0])\n    while index < len(x) - 1:\n        index += 1\n        if x[index] % 2 == 0:\n            list_of_ints.append(x[index])\n        elif x[index] == x[index - 1]:\n            list_of_ints.append(x[index])\n        elif x[index] < x[index - 1]:\n            list_of_ints.append(x[index])\n        else:\n            list_of_ints.append(x[index - 1])\n    return list_of_ints", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    nums = []\n    first = True\n    for i in x:\n        if i % 2 == 0:\n            nums.append(i)\n        else:\n            nums.append(i)\n    if first:\n        return nums\n    else:\n        nums.sort()\n        return nums[0]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    i = 0\n    digits = []\n    while i < len(x):\n        if x[i] % 2 == 0:\n            digits.append(x[i])\n            i += 1\n        else:\n            break\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Use a dict to keep track of the number of each digit\n    # while we iterate over the list.\n    digs = {}\n    for i in xrange(len(x)):\n        digs[i] = 0\n    # Initialize a list to be the unique elements\n    res = []\n    # Iterate over the list in decreasing order of their digits\n    for i in reversed(x):\n        # Find the value of the digit that contains the element\n        if i % 2 == 0:\n            digs[i / 2] += 1\n        else:\n            digs[i] += 1\n        # Check if the element is unique or not\n        if not digs.has_key(i / 2):\n            # If not, add the element to the result list\n            res.append(i)\n    # Sort the result list\n    res.sort()\n    # Return the result\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == 0: return []\n    if x%2 == 0: return unique_digits(x//2)\n    return unique_digits(x//2+1)\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    list_of_integers = []\n    for i in x:\n        if i % 2 == 0:\n            list_of_integers.append(i)\n    unique_list = sorted(list_of_integers)\n    return unique_list", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = list(itertools.chain(*[itertools.isdigit(i) for i in x]))\n    digits = sorted(digits)\n    digits = sorted(set(digits))\n    return digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Just a simple mapping, which records if an element has even or odd\n    # number of digits. \n    digit_map = {}\n    for x in x:\n        # If x has even number of digits, then the corresponding digit\n        # map entry is added to the output.\n        digit_map[x] = digit_map.get(x, 0) + 1\n    # Sorted and return the list of unique elements.\n    return sorted(digit_map.keys())", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_indices = set(i for i, x in enumerate(x) if x%2!=0)\n    return [i for i in range(len(x)) if x[i] not in odd_indices]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # map all elements in x with a function that returns True/False \n    # based on whether the digit is even/odd.\n    even = lambda x: x % 2 == 0\n    # return sorted list of all elements that has no even digit.\n    return sorted(set(x for x in x if not even(x)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    ret = []\n    x_len = len(x)\n    for i in range(x_len):\n        if i % 2 == 0:\n            ret.append(x[i])\n    return sorted(ret)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    # Generate a list of all even numbers.\n    even = []\n    for i in xrange(1, len(x)):\n        even.append(2 * x[i])\n    even = sorted(even)\n    \n    # Remove all even numbers from the list.\n    valid = []\n    for item in x:\n        if item % 2!= 0:\n            valid.append(item)\n    return valid", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([int(x) for x in x if x % 2 == 0])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) < 2:\n        return []\n    try:\n        x.remove(x[-1])\n    except ValueError:\n        pass\n    try:\n        x.remove(x[-2])\n    except ValueError:\n        pass\n    result = []\n    i = len(x) // 2\n    while i:\n        tmp = x[i//2]\n        result.append(tmp)\n        tmp = x[i//2]\n        result.append(tmp)\n        i -= 1\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # count the even digits\n    even_digits = len(filter(lambda x: x % 2 == 0, x))\n    # make a new list with odd digits\n    odd_digits = x[-even_digits:]\n    # append to the final list\n    return odd_digits.append(x[:-even_digits])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Use a global list to store the results\n    global results\n    results = []\n\n    # If there is no even digit, then return the empty list\n    for i in x:\n        if 0 < i % 2:\n            break\n    # If there is an even digit, then break the loop to continue\n    else:\n        break\n    # Add the unique digits to the global list\n    for i in x:\n        if i % 2:\n            results.append(i)\n    # Return the unique list\n    return sorted(results)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    a = list(x)\n    a.sort(reverse=True)\n    return [x[i+1] for i in range(len(a)-2) if not any([ord(i)%2 == 0 for i in a[:i+2]])]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    n = len(x)\n    if n == 1:\n        return x\n    if n < 2:\n        return [x]\n    list = []\n    for i in xrange(n):\n        list.append(str(x[i]))\n    l = list.count('2')\n    i = l % 2\n    if i == 0:\n        list.remove(list[i])\n        list.insert(i, list[0])\n    return unique_digits(list)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd = []\n    for i in range(1, len(x) + 1):\n        if x[i] % 2 == 0:\n            odd.append(i)\n    return sorted(odd)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    # key = (x[i] + (x[i + 1] / 2) for i in range(len(x) - 1))\n    key = map(lambda x: (x[0] + (x[1] / 2), x[2]), x)\n    \n    key = sorted(key, key=lambda x: x[1])\n    \n    return list(map(lambda x: x[0], key))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(x)\n    list_digits = []\n    for i in range(len(x)):\n        if x[i] % 2 == 0:\n            list_digits.append(x[i])\n    return list_digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    count = 0\n    n = len(x)\n    return sorted(x)[-n:]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Gather all even digits\n    even = [e for e in x if e % 2 == 0]\n\n    # Sort the odd digits\n    odd = [e for e in x if e % 2 == 1]\n\n    # Return the list of all the unique odd digits\n    return unique(odd, key=lambda x: x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    temp = x[:]\n    temp.sort()\n    return list(set(temp))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    x.sort()\n    if not x[0] % 2:\n        return x[:]\n    t = []\n    a = x[0]\n    for i in x[1:]:\n        if i % 2 == 0:\n            continue\n        t.append(a + i)\n        a = i\n    t.append(a)\n    return t", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(set(x))\n    return x", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    start = 0\n    pos = []\n    while start < len(x):\n        pos.append(x[start])\n        start = start + 1\n    pos.sort()\n    return pos", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    all_nums = [x]\n    while len(all_nums) > 0:\n        nums = all_nums[0]\n        for i in range(1, len(nums) + 1):\n            nums = nums[0] + nums[i]\n            if not all_nums and not all_nums[0] % 2:\n                return nums\n        all_nums.pop(0)\n    return []", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def count_even(num):\n        return sum(1 for i in xrange(len(num)) if num[i] % 2 == 0) / len(num)\n\n    return sorted(list(set(x) - set([int(num) for num in x])))  # sorted() to remove duplicates", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Return list of all odd digits\n    odd = []\n    for i in xrange(len(x)):\n        if x[i] % 2!= 0:\n            odd.append(x[i])\n    # Return list of all even digits\n    even = []\n    for i in xrange(len(x)):\n        if x[i] % 2 == 0:\n            even.append(x[i])\n    # Return list of all non-even digits\n    return set(odd) - set(even)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    numbers = [x]\n    while len(numbers) > 0:\n        numbers = sorted(set(numbers))\n        for n in numbers:\n            if n % 2 == 0:\n                numbers.remove(n)\n    return numbers", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # prepare a new list of all even numbers in x.\n    even_numbers = list(set(x) & set(range(2, len(x) + 2)))\n\n    # now return a sorted list of the remaining odd numbers in x.\n    return sorted(even_numbers)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    ret = []\n    odd_num = False\n    for elem in x:\n        if elem % 2 == 0:\n            odd_num = True\n        elif odd_num:\n            ret.append(elem)\n        else:\n            ret.append(elem / 2)\n    return sorted(ret)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Make a list of all unique digits in the list\n    unique_digits = []\n    for digit in x:\n        # If digit is even, add it to the list.\n        if digit % 2 == 0:\n            unique_digits.append(digit)\n\n    # Put unique digits in sorted order.\n    unique_digits.sort()\n\n    # Return the list.\n    return unique_digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    for i in x:\n        if i % 2 == 0:\n            continue\n        yield i", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    l = list(x)\n    # Merging sorted list with a list of unique digits\n    # preserving order\n    # Sorted list is ensured to be in increasing order.\n    # Unique digits list should be in increasing order.\n    unique_digits = sorted(l)\n    unique_digits.extend(l)\n    return unique_digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    i = 0\n    while i < len(x):\n        if x[i] % 2 == 0:\n            i += 1\n        else:\n            yield x[i]\n    while i < len(x):\n        if x[i] % 2 == 0:\n            i += 1\n        else:\n            yield x[i]\n    while i < len(x):\n        if x[i] % 2 == 0:\n            i += 1\n        else:\n            yield x[i]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set(x) - set(map(lambda x: x//2, x)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    digits = list(range(1, x + 1))\n    digits.sort()\n    # Remove even digits\n    digits.remove(x % 2)\n    # Convert to list, then sort\n    return list(set(digits).sort())", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    num = x\n    rem = num % 2\n    while rem:\n        num = num / 2\n        rem = num % 2\n    res = []\n    while num:\n        res.append(num)\n        num = num / 2\n    return sorted(res)\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    ret = []\n    l = len(x)\n    even = True\n    while even:\n        even = False\n        for i in xrange(l//2):\n            if x[i]%2!= 0:\n                even = True\n                break\n        ret.append(x[i*2:(i+1)*2])\n    return ret", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    num = 0\n    for i in xrange(0, len(x)):\n        if (x[i] % 2 == 0):\n            digits.append(x[i])\n        else:\n            num += x[i]\n            if num > 10:\n                digits.append(num)\n                num = 0\n    if num:\n        digits.append(num)\n    return digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    x = sorted(x)\n    digits = [str(int(''.join(x[i:i+2]), 2)) for i in range(0, len(x)/2, 2)]\n    return sorted(set(digits))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    i = 0\n    while True:\n        if x[i] % 2 == 0:\n            i += 1\n        else:\n            return x[:i]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def _check_digit(num):\n        return (num % 10) == 0\n    ret = []\n    for num in x:\n        if _check_digit(num):\n            continue\n        ret.append(num)\n    ret.sort()\n    return ret", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    nums = list(set(x))\n    nums.sort()\n    return nums", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique = set([str(x) for x in x])\n    return sorted(unique, key=lambda x: x.count('0'))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(x, key=lambda i: i, reverse=True)[::-1]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    nums = [x for x in xrange(len(x))]\n    nums2 = []\n    for i in nums:\n        for j in nums:\n            if i!= j:\n                if i % 2 == 0:\n                    nums2.append(i)\n                    break\n    return sorted(nums2)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    odd_digits = 0\n    odd = 1\n    even = 0\n    while even < len(x):\n        if x[even] % 2:\n            even += 1\n        else:\n            odd += 1\n    if odd!= 0:\n        return unique_digits(x[:even])\n    else:\n        return unique_digits(x[even:])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    # remove all even digits from the list\n    even_digits = []\n    for d in x:\n        if d % 2 == 0:\n            even_digits.append(d)\n    return sorted(even_digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in xrange(len(x)):\n        if not i % 2:\n            result.append(x[i])\n    return result\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # sort list in decreasing order\n    sorter = lambda x: -x\n    num = []\n    for i in xrange(len(x)):\n        if x[i] % 2 == 0:\n            num.append(x[i])\n    num.sort(sorter)\n    return num", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    a = set()\n    for i in x:\n        a.add(int(i))\n    a.difference_update(x)\n    return sorted(a)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(x)\n    prev = x[0]\n    count = 1\n    for i in x[1:]:\n        if x[i] % 2 == 0:\n            prev = prev + x[i]\n            count = 1\n        else:\n            prev = prev + x[i]\n            count = 2\n    return prev + count * x[-1:]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set(x) - set(list(itertools.permutations(x, 2))))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique = []\n    for i in x:\n        if not i % 2:\n            unique.append(i)\n    return unique", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Initialize an empty list \n    l=[]\n    # Start from 1, because starting from 0 the code will print \n    # the first even digit.\n    # Get a copy of the input list.\n    for element in x:\n        # Count the number of even digits in an element.\n        # (This is a bit messy.)\n        # From the book Algorithms by Cormen, Leiserson and Rivest,\n        # we can see that the number of even digits in an element\n        # is equal to the number of digits in the largest \n        # integer such that the sum of the digits is equal to \n        # the element.\n        num_digits = len(str(element))\n        # A list with the even digits.\n        evens = [str(i) for i in range(num_digits) if i % 2 == 0]\n        # Replace the even digits in the list.\n        evens = ', '.join(evens)\n        # Get the integer part of the element.\n        int_part = int(element)\n        # Add the digit in the even digits to the integer part.\n        int_part += int(evens)\n        # Add the even digits to the list.\n        l.append(str(int_part))\n    # Sort the list in increasing order.\n    l.sort()", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x: return []\n\n    if x[0] % 2: return []\n    a = []\n    for i in range(1, len(x)):\n        if x[i] % 2:\n            a.append(i)\n    a.sort()\n    return a", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    s = set(x)\n    s.discard(0)\n    i = 0\n    for n in s:\n        if n % 2 == 0:\n            i += 1\n            continue\n        s.discard(n)\n        i += 1\n    return sorted(s)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    a = []\n    for i in xrange(0, len(x), 2):\n        if i % 2 == 0:\n            a.append(x[i])\n    return sorted(a, key=lambda x: x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Init.\n    digits = []\n    digits_dict = {}\n    for digit in x:\n        digits_dict[digit] = 1\n    # Loop.\n    while True:\n        # Get the next number.\n        digit = x.pop(0)\n        # Compare it with the previous number.\n        if digit % 2 == 0:\n            # If it's even, append it to the list and increment the count.\n            digits.append(digit)\n            if digit in digits_dict:\n                digits_dict[digit] += 1\n        else:\n            # If it's odd, it's a unique number.\n            digits.append(digit)\n            digits_dict[digit] = 1\n    # Sort the list.\n    digits.sort()\n    # Return.\n    return digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # This is a horrible way to solve this problem. I know.\n    # I'm not sure if I want to do this.\n    # But I think it can be solved with some other trick.\n    # We only need to solve this problem for positive integers.\n    # So let's define:\n    #  1. a variable i - to count the number of even digits.\n    #  2. a variable even_digits - a list of all even digits.\n    #  3. a variable even_digit_count - a counter for even_digits.\n    #  4. a variable list_of_integers - a list of all integers.\n    #  5. a variable integers_without_even_digit - a list of all integers\n    #     except for the first even digit and its multiples.\n    #  6. a variable even_digit_multiple - the multiples of the first even\n    #     digit in integers_without_even_digit.\n    #  7. a variable int_count - a counter for integers_without_even_digit.\n    #  8. a variable list_of_integers_without_even_digit - a list of all\n    #     integers except for the first even digit and its multiples.\n    #  9. a variable first_integer - a", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set(x) - set(itertools.chain.from_iterable(filter(lambda x: x % 2 == 0, x))))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = [int(x[i]) for i in range(len(x)) if not x[i] % 2]\n    return sorted(set(digits))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for i in x:\n        if x[i]%2 == 0:\n            continue\n        digits.append(i)\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [el for el in x if (not (el % 2))]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    ret = []\n    for i in x:\n        if i % 2 == 0:\n            ret.append(i)\n    ret.sort()\n    return ret", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = list(set(x))\n    digits.sort()\n    return [x for x in digits if x % 2 == 0]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [el for el in x if not (0 % el)]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    res = []\n    \n    i = 0\n    while i < len(x):\n        if (i % 2) == 0:\n            res.append(x[i])\n        i += 1\n    \n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    elif len(x) == 1:\n        return x\n    n = len(x)\n    result = []\n    for i in xrange(1, n):\n        result.append(int(str(x[i])[0]))\n        if result[i]%2 == 0:\n            result.remove(result[i])\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) < 2:\n        return x\n    return sorted(set(x), key=lambda x: x % 10)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    u, y = [], []\n    for i in x:\n        if i % 2 == 0:\n            y.append(i)\n        else:\n            u.append(i)\n    return sorted(u)\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x: return []\n    result = []\n    for i in xrange(len(x)):\n        # If the number is even then it is possible that a previous digit\n        # is repeated. If it is, remove the duplicate.\n        if i % 2 == 0:\n            if x[i] in result:\n                del result[x[i]]\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    start = 0\n    end = len(x)\n    while start < end:\n        mid = end - start\n        mid = mid // 2\n        if x[mid] % 2 == 0:\n            return x[start:mid+1]\n        start = mid + 1\n    return x[:end]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for x in x:\n        if (x % 2 == 0):\n            raise ValueError(\"Can't have even digit in unique_digits\")\n    for i in xrange(len(result)):\n        if result[i]!= result[i-1]:\n            result.append(result[i-1])\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(list(set(x)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    digits = set()\n    found = set()\n    xlist = list(x)\n    xlist.sort()\n    for i in range(0, len(xlist)):\n        if xlist[i] % 2 == 0:\n            if i not in found:\n                digits.add(xlist[i])\n                found.add(i)\n    return list(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # list of all even digits\n    even_digits = [x % 2 for x in x]\n    # list of unique digits\n    unique_digits = []\n    # find all unique even digits\n    for e in even_digits:\n        if e not in unique_digits:\n            unique_digits.append(e)\n    # find all unique odd digits\n    for o in xrange(len(unique_digits) - 1, -1, -1):\n        if unique_digits[o] % 2 == 1:\n            unique_digits.remove(unique_digits[o])\n    # return list\n    return unique_digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Initialize list\n    result = []\n    # Init a queue for elements\n    queue = [x]\n    # Step through the list\n    while queue:\n        # Get next element from queue\n        next = queue.pop()\n        # Go through all elements\n        while next:\n            # Check if the next digit is an even digit\n            if next % 2 == 0:\n                # Add to result list if not already in result list\n                if not result.count(next):\n                    result.append(next)\n                    # Remove next element from queue\n                    queue.append(next)\n                    # Exit loop\n                # Exit loop\n            # Get next element from queue\n            next = queue.pop()\n    # Return the result\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    def is_even(x):\n        return any(x % 2 == 0 for x in x)\n    \n    even_elems = [x for x in x if not is_even(x)]\n    return sorted(even_elems)[::-1]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    n = len(x)\n    digits = []\n    for i in range(n):\n        digit = ''\n        if x[i] % 2:\n            digit = '0'\n        digits.append(digit + str(x[i]))\n    digits.sort()\n    return digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    s = sorted(x)\n    return unique_digits(s)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    #TODO: Consider number of possible combinations of distinct digits.\n    all_even = set()\n    seen = set()\n    num = 0\n    #A list to store all even digits.\n    even_digits = []\n    #A list to store all odd digits.\n    odd_digits = []\n    for element in x:\n        if element % 2 == 0:\n            even_digits.append(element)\n            seen.add(element)\n        else:\n            odd_digits.append(element)\n            num += 1\n            if num == 2:\n                break\n    #If even digits number is 1, it's the first element and we need to\n    #return all elements\n    if even_digits == 1:\n        return all([element for element in x if element!= 1])\n    #Then return a set of elements that have an even digit.\n    return [element for element in x if element % 2 == 0 and element not in seen]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    for x in x:\n        if x % 2 == 0:\n            res.append(x)\n    res = sorted(res)\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    #return [e for e in x if not e % 2]\n    return sorted(filter(lambda e: e % 2, x))\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    num = len(x)\n    # x is sorted already. no need to sort it again\n    c = [x]\n    counter = 0\n    while counter < num:\n        counter += 1\n        c.append(x[counter])\n        for i in range(counter, num):\n            if x[i] % 2 == 0:\n                counter -= 1\n    c.reverse()\n    return c", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    num = len(x)\n    for i in xrange(num):\n        if x[i] % 2 == 0:\n            result.append(x[i])\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set(x) - set(itertools.chain(x, x[::2])))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    y = [x[i:i+2] for i in range(len(x)-2, 0, -2)]\n    return y", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [x for x in sorted(x for x in x if not (x % 2))]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = set()\n    even_digits = 0\n    for i in x:\n        if i % 2 == 0:\n            even_digits += 1\n        else:\n            digits.add(i)\n    return sorted(digits) + list(even_digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    l = list(x)\n    s = sorted(set(l))\n    l = map(lambda x: x, s)\n    return l", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    nums = sorted(x)\n    nums.remove(2)\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 0:\n            nums.remove(nums[i])\n    return nums", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) <= 1:\n        return x\n    return list(set(x).difference(list(set(x) & set(range(1,len(x))))))\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for i in x:\n        if i % 2 == 0:\n            digits.append(i)\n    digits.sort(key=lambda x: x)\n    return digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    i = 0\n    j = len(x) - 1\n    while i < j:\n        if x[i] % 2 == 0:\n            break\n        j = i\n        i += 1\n    res = []\n    while i < j:\n        if i > 0:\n            res.append(x[i])\n        i += 1\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    a = []\n    for i in xrange(len(x)):\n        if x[i] % 2 == 0:\n            a.append(x[i])\n    a.sort()\n    return a", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) <= 1:\n        return x\n    l = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        l.append(i)\n    return sorted(l)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = set()\n    for i in x:\n        if i % 2 == 0:\n            digits.add(i)\n    return sorted(digits, key=lambda x: x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    nums = [x[i] for i in range(1, len(x)+1) if x[i] % 2 == 0]\n    return sorted(nums)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    digits = [int(x) for x in x]\n    for digit in digits:\n        if digit % 2 == 0:\n            continue\n        result.append(digit)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    n = len(x)\n    if n == 1: return x\n    if n == 2: return unique_digits(x[1:])\n    last = unique_digits(x[:-1])\n    count = 0\n    while last:\n        if not (count % 2):\n            # This means that there is an even number of 2's in the current \n            # list\n            last = last[::-1]\n        else:\n            last = last[::-1]\n            count = count + 1\n    return x[:-1]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # generate all even digits\n    even_digits = list(range(0,9,2))\n    # convert to list of unique digits\n    unique_digits = list(set(even_digits))\n\n    # sort list in increasing order\n    unique_digits.sort()\n\n    return unique_digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(x)\n    res = []\n    for i in range(len(x)):\n        if x[i]%2 == 0:\n            continue\n        res.append(x[i])\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    elif x[0] % 2 == 0:\n        return x\n    else:\n        return unique_digits(x[1:]) + [x]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set(x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # Start with the set of all elements in x\n    set = set(x)\n\n    # Add the elements that have no even digit in them\n    for element in set:\n        if not all(digits % 2 == 0 for digits in element):\n            set.add(element)\n\n    # Sort elements that have no even digit in them\n    return sorted(set)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    print(x)\n    sorted(set(x))\n    return unique_digits(x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    unique = []\n    for element in x:\n        if element % 2 == 0:\n            unique.append(element)\n    return unique", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    for i in x:\n        if 0 < len(i) < 2:\n            return [x[0]]\n    x.sort(key=lambda x: len(x), reverse=True)\n    return x", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    a = set()\n    l = list(x)\n    l.sort()\n    for i in l:\n        if i % 2 == 0:\n            a.add(i)\n    return sorted(list(a))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def _iseven(x):\n        return x%2 == 0\n    return sorted(set([x]) - set([e for e, x in enumerate(x) if not _iseven(x)]))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    return [i for i in sorted(set(x)) if all(x[i] % 2 == 0 for i in range(0, len(x), 2))]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    from operator import itemgetter\n    res = []\n    for i in x:\n        if not i % 2:\n            res.append(i)\n    return sorted(res, key=itemgetter(0))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Transformation from list to set\n    x = set(x)\n    x.discard(x.pop()) # Remove duplicates\n    x = list(x)\n    return sorted(x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return list(set(x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = 0\n    result = []\n    for i in range(len(x)):\n        if x[i] % 2 == 0:\n            digits += 1\n            continue\n        result.append(x[i])\n        digits = 0\n    result.sort()\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    for i in xrange(0, len(x)):\n        if (x[i] % 2) == 0:\n            continue\n        else:\n            return unique_digits(x[i+1:]) + unique_digits(x[:i])\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    count = 0\n    while count < len(x):\n        if x[count] % 2 == 0:\n            result.append(x[count])\n            count += 1\n        else:\n            result.append(x[count])\n            count += 1\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == 1:\n        return [1]\n    l = []\n    for i in xrange(1,len(x)):\n        if x[i] % 2 == 0:\n            l.append(x[i])\n    return sorted(l)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    new_digits = []\n    for i in xrange(0, len(x)):\n        if x[i] % 2 == 0:\n            new_digits.append(x[i])\n    return sorted(new_digits, key=int)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # sort the elements \n    l = list(x)\n    l.sort()\n    # print l\n    if len(l) > 1:\n        # sort the elements again\n        newl = sorted(list(x), key=lambda x: x%2)\n        return newl\n    else:\n        return l", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return set(x) - set([x//2 for x in x])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = list(x)\n    x.sort()\n    while len(x) > 0:\n        if x[-1] % 2 == 0:\n            break\n        x.pop()\n    return x", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    s = []\n    # Calculate total sum of all elements.\n    total_s = sum(x)\n    for i in range(0, len(x)):\n        if i % 2 == 0:\n            continue\n        if i + 1 < len(x) and x[i + 1] == x[i]:\n            s.append(i)\n    # Sort result.\n    s.sort()\n    for i in s:\n        s.remove(i)\n    return s", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) < 2:\n        return x\n    l = []\n    for i in xrange(len(x)-1, -1, -1):\n        if x[i] % 2 == 0:\n            l.append(x[i])\n    if len(l) > 0:\n        l.sort()\n        l.reverse()\n        return l\n    else:\n        return []", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            result.append(i)\n    return sorted(result, key=lambda x: x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    else:\n        return sorted(set([x[x:x+1] for x in x]), key=lambda x: x%2)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # check if the length of the list is odd\n    if len(x) % 2:\n        raise ValueError(\"The length of the list should be odd.\")\n    # sort the list\n    x.sort()\n    # find all even digits in the list\n    i = 0\n    while i < len(x):\n        # find the even digit in the list\n        j = i + 2\n        while j < len(x) and x[j] % 2:\n            j += 2\n        # if even digit is found, we should skip it\n        if j > i:\n            x.pop(j)\n        # continue to next digit\n        i += 1\n    # return the sorted list\n    return x\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = [int(x) % 10 for x in x]\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set([x[i:i+2] for i in range(0, len(x), 2)]))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    even_digits = [e % 2 == 0 for e in x]\n    for num in xrange(len(x)-1, -1, -1):\n        if len(even_digits) < len(x):\n            if num % 2 == 0 and even_digits[num-1] == 1:\n                # it's even and has at least one odd digit\n                if num == 0:\n                    result.append(x[num-1])\n                else:\n                    result.append(x[num-1])\n                    result.extend(unique_digits(x[num:]))\n            else:\n                # it's odd and has all even digits\n                if num % 2 == 0:\n                    result.append(x[num-1])\n                else:\n                    result.append(x[num-1])\n                result.extend(unique_digits(x[num:]))\n        else:\n            result.append(x[num-1])\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    a = list(x)\n    b = [x for x in a if x % 2 == 0]\n    c = sorted(b)\n    return c", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == 0:\n        return [0]\n    if len(x) % 2 == 0:\n        return unique_digits([x//2])\n    s = []\n    for n in x:\n        if n%2 == 0:\n            s.append(n)\n    return unique_digits(s)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x.count(2):\n        return x[:]\n    res = []\n    for i in x:\n        if i % 2:\n            res.append(i)\n        else:\n            return res\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def even_digit(x):\n        if x % 2 == 0:\n            return True\n        return False\n    return sorted(set(x) - set([x % 2 for x in x]))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    even_digits = [x % 10 for x in xrange(1, x+1)]\n    odd_digits = [x % 10 for x in xrange(1, x+1, 2)]\n    # Remove even digits\n    return [x for x in xrange(1, x+1) if not x in even_digits]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    c = 0\n    l = 0\n    r = [None]\n    for i in xrange(len(x)):\n        if x[i] % 2 == 0:\n            c += 1\n            if c >= 2 or r[-1] == None:\n                r.append(x[i])\n        else:\n            l += 1\n    r.reverse()\n    return r\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = [int(x) for x in x]\n    sorted_digits = sorted(digits)\n    indices = []\n    for i in range(len(sorted_digits)):\n        if (sorted_digits[i] % 2) == 0:\n            indices.append(i)\n    return indices", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Initiate a list of all the unique digits.\n    # Add them to a new list if they are even, else we have the digits.\n    # Remove the digits with even digit from the list.\n    # sort the list of unique digits \n    unique_digits = []\n    even_digits = []\n    for i in x:\n        if i % 2 == 0:\n            even_digits.append(i)\n    unique_digits = [x for x in unique_digits if x not in even_digits]\n    return sorted(unique_digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    i = 0\n    while i < len(x):\n        if not(x[i]%2 == 0):\n            res.append(x[i])\n            i += 1\n        else:\n            i += 1\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in xrange(len(x)):\n        if x[i] % 2 == 0:\n            continue\n        if i in result:\n            continue\n        result.append(x[i])\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    while x!= []:\n        y = unique_digits(x)\n        x = x - y", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            result.append(i)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    seen = set()\n    return sorted([ a for a in x if a not in seen ])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    def digit_contains(digit):\n        return (x[x.index(digit):].count(digit)%2 == 0)\n\n    digits = [digit for digit in x if digit_contains(digit) is False]\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = [x[0] % 10 for x in xrange(1, len(x))]\n    sorted_list = list(set(digits))\n    sorted_list.sort()\n    return sorted_list", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    return [ x[::2] if x%2!= 0 else x for x in x if x!=0 ]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if i % 2 == 0]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    list_of_integers = list(set(x))\n    list_of_integers.sort(key=lambda x: len(str(x))%2)\n    return list_of_integers", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = set()\n    for x in x:\n        digits.add(x % 2)\n    digits = list(digits)\n    digits.sort()\n    digits.reverse()\n    return [str(i) for i in digits]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return list(set([digit for digit in x if digit % 2 == 0]))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd = []\n    even = []\n    for i in range(x):\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return sorted(odd) + sorted(even)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def cmp(a, b):\n        if a % 2 == 0 and b % 2 == 0:\n            return -1\n        elif a % 2 == 0 and b % 2!= 0:\n            return 1\n        else:\n            return cmp(a, b)\n\n    return sorted(x, cmp=cmp)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if not i % 2 == 0:\n            result.append(i)\n    return sorted(result)\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Preprocess the input\n    x = sorted(set(x))\n    # Process the input\n    i = 0\n    while i < len(x):\n        # Search for the last occurance of an even digit\n        j = i\n        while j < len(x) and x[j] % 2 == 0:\n            j += 1\n        # Search for the first occurance of an even digit\n        while j < len(x) and x[j] % 2 == 0:\n            j += 1\n        # Place the digit we found\n        digit = x[i]\n        i += 1\n        # Append the digit to the list\n        y.append(digit)\n        # Save the digit\n        if digit not in y:\n            y.append(digit)\n        # Add the digit to the set\n        x.remove(digit)\n    # Return the list\n    return y", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    digits = set(x)\n\n    # NOTE: Only one number can be even\n    num_odd = len(digits)\n    if num_odd!= 0:\n        return unique_digits(digits)\n\n    digits = sorted(digits)\n    return digits[:-1] + [''.join(digits[i:]) for i in range(0, num_odd)]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    out = []\n    i = 0\n    while i < len(x):\n        if not all(x[i] % 2 == 0 for i in xrange(i, i+4)):\n            out.append(x[i])\n        i+=1\n    return out", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    list_of_sorted = []\n    for x in x:\n        if x % 2 == 0:\n            list_of_sorted.append(x)\n    return list_of_sorted", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if not i % 2:\n            result.append(i)\n    result.sort()\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Initialize a list.\n    result = []\n    # For each element of the list, get the unique set of digits that\n    # don't have even digit.\n    for i in range(len(x)):\n        digits = ''.join(str(i) for i in x[i])\n        # Get the unique set of digits.\n        result.append(set(digits))\n    # Sort the list by the unique set of digits.\n    result.sort(key=lambda x: len(x), reverse=True)\n    # Return the sorted list.\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) <= 1:\n        return x\n    x = list(set(x))\n    if len(x) == 1:\n        return x\n    k = len(x) // 2\n    x.insert(0, x.pop(k))\n    for i in range(k + 1, len(x)):\n        if i % 2:\n            continue\n        x.insert(0, x.pop(i))\n    return x\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in xrange(len(x)):\n        if x[i] % 2 == 0:\n            result.append(x[i])\n        else:\n            result.append(x[i]/2)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    new_list = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        new_list.append(i)\n    return sorted(new_list)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    all_digits = x\n    # count number of even digits\n    even_count = 0\n    for digit in all_digits:\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            break\n    # If any even digit exists return empty list\n    if even_count:\n        return []\n    # else return sorted list of all digits that have no even digit\n    return sorted(set(all_digits))\n\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    n = len(x)\n    if n == 1:\n        return x\n    if n % 2 == 0:\n        return [x[0]]\n    if n == 2:\n        return unique_digits([x[1]])\n    seen = set()\n    seen.add(x[0])\n    seen2 = set()\n    seen2.add(x[0])\n    return [ x[0] if x not in seen else unique_digits(seen) for x in x[1:] ]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    #helper function\n    def binbin(n, i):\n        \"\"\"Convert n to binary number in the range [0, i - 1]\"\"\"\n        return (n >> (i * 8)) & 0xFF\n\n    def multiply(a, b):\n        \"\"\"Return a * b.\"\"\"\n        return a * int(b) #I'm using int as I want to handle negative numbers\n\n    def reduce(a, b):\n        \"\"\"Return a / b.\"\"\"\n        return reduce(mul(a, b), 1)\n\n    def lshift(a, b):\n        \"\"\"Return a << b.\"\"\"\n        return int(a) << b\n\n    def rshift(a, b):\n        \"\"\"Return a >> b.\"\"\"\n        return int(a) >> b\n\n    def mod2(a, b):\n        \"\"\"Return (a % b) / b.\"\"\"\n        return (a - b * int(b)) / b\n\n    def add(a, b):\n        \"\"\"Return a + b.\"\"\"\n        return a + int(b)\n\n    def add_mul(a, b):\n        \"\"\"Return a + b * int(b).\"\"\"\n        return (a + b * int(b)) % int(b)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    total_odd = 0\n    for item in x:\n        if item % 2 == 1:\n            total_odd += 1\n    if total_odd!= 0:\n        return x\n    else:\n        return sorted(x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    for i in xrange(len(x)):\n        if not x[i] % 2:\n            res.append(x[i])\n    res.sort()\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    num = []\n    for i in x:\n        if i % 2 == 0:\n            num.append(i)\n    num.sort()\n    return num", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x is None:\n        return []\n    else:\n        return sorted(x, key=lambda x: x % 2)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(x, key=lambda x:x % 2)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    all_digits = set()\n    l = [int(i) for i in x]\n    while l:\n        all_digits.update(list(set(l) & set(range(2,l[-1])))\n        l = [int(i) for i in l[:-1]]\n    return sorted(all_digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [x[::2] for x in xrange(len(x)) if x % 2 == 0]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    ret = []\n    for i in x:\n        if i % 2:\n            continue\n        if not ret:\n            ret.append(i)\n        else:\n            ret.remove(i)\n    return sorted(ret)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 1:\n        return x\n    odds_list = [x % 2]\n    n = len(x) - 1\n    while n >= 0:\n        if x[n] % 2 == 0:\n            odds_list.append(x[n])\n        n -= 1\n    return odds_list", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    x = list(x)\n    result = []\n    result.append(x[0])\n    if x[0] % 2:\n        return result\n    for i in range(1, len(x)):\n        if x[i] % 2:\n            return result\n        result.append(x[i])\n    result.sort()\n    return result\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    for x in x:\n        if not x % 2:\n            res.append(x)\n    res.sort()\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique = []\n    for x in x:\n        if x % 2 == 0:\n            unique.append(x)\n    unique.sort()\n    return unique", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # return a list of unique digits\n    digits = []\n    # make sure the first element has no even digit\n    if len(x) > 0 and x[0] % 2 == 0:\n        x[0] = x[0] // 2\n    # make sure all the other elements don't have even digits\n    for i in xrange(1, len(x)):\n        if x[i] % 2 == 0:\n            digits.append(0)\n    # find the odd number in the list\n    for i in xrange(1, len(x)):\n        if digits[i]!= 0:\n            digits[i] = x[i] % 2\n        else:\n            break\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    l=[]\n    for i in x:\n        if i%2:\n            l.append(i)\n    return l", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = [0]\n    seen = set()\n    for x in x:\n        digits.append(x % 10)\n        if digits:\n            i = 0\n            while i < len(digits) - 1 and digits[i] == digits[i + 1]:\n                i += 1\n            digits[i] += 1\n        if digits and digits[-1] % 10 == 0:\n            digits.pop()\n\n    return [int(digit) for digit in digits]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    n = 0\n    nums = []\n    while True:\n        nums.append(x[n])\n        n += 1\n        if n == len(x):\n            break\n    return sorted(set(nums))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set(x) - set(itertools.permutations(x, 2)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    a = []\n    for n in xrange(1, len(x)):\n        if x[n] % 2 == 0:\n            continue\n        a.append(n)\n    a.sort()\n    return a", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def digits(x):\n        # Expand each element\n        n = len(x)\n        return [e for e in x if e % 2 == 0]\n    # First, sort the elements\n    digits.sort()\n    # Then, filter them\n    return [x for x in digits if x not in unique_digits(x)]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # A set to store unique integers\n    uniques = set()\n    # A list to store all the elements that have even digits\n    even_digits = []\n    # For each element in x\n    for element in x:\n        # Check if even or odd\n        if element % 2 == 0:\n            even_digits.append(element)\n        # Put the element into uniques set\n        uniques.add(element)\n    # Return the unique elements\n    return uniques.difference(even_digits)</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    nums = sorted(x)\n    result = []\n    for i in nums:\n        if i % 2 == 0:\n            result.append(i)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = list(x)\n    x.sort()\n    return [x[::-1] for x in x]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique = set(x)\n    # remove all even digit from list\n    for i in unique:\n        if i % 2 == 0:\n            unique.remove(i)\n    return list(unique)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique = []\n    for x in x:\n        if not ((x % 2) == 0):\n            unique.append(x)\n    return unique", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        result.append(i)\n    return result\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique = set()\n    for i in x:\n        if i % 2 == 0:\n            unique.add(i)\n    return sorted(unique)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = list(map(int, x))\n    digits = sorted(list(set(x)))\n    return digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            result.append(i)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = [x]\n    while digits:\n        digits = unique_digits(digits)\n        for digit in digits:\n            if not digit % 2:\n                break\n    return sorted(digits, key=itemgetter(0))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    l = []\n    for i in x:\n        if i%2 == 0:\n            l.append(i)\n    l.sort()\n    return l", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Define a dictionary that contains the unique elements\n    # as a value and the key is a list with all even digits as a \n    # list of integers.\n    elements = {}\n    for i in x:\n        e = i % 2\n        if e == 0:\n            elements[e] = i\n    return sorted(elements.items())"]]