[["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Init\n    num = 0\n    sum = 0\n    # Iterate for each digit\n    for i in range(2, N):\n        # Get the digit\n        digit = \"\".join([str(x) for x in range(i, i + 2)])\n        # Sum it to the current digit\n        sum += int(digit, 2)\n        # Add it to the total sum\n        num += sum\n    # Print out the total sum\n    print(str(num))\n    return num", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Check validity of input\n    if N <= 0:\n        raise ValueError(\"Invalid input\")\n\n    # Create a vector with all the digits\n    digits = [int(x) for x in str(N).split(\"0\")]\n\n    # Get the sum of digits\n    sum_digits = 0\n    for i in range(len(digits)):\n        sum_digits += digits[i]\n    return sum_digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"\"\n    else:\n        result = \"\"\n        for i in range(0, N, 2):\n            result += \"0\" * i\n        for i in range(N, 0, -1):\n            result += \"1\" * i\n        return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = \"\"\n    total = 0\n    for i in range(0, N):\n        total += i\n        digits += str(total).zfill(2)\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return(int('0b'+str(sum(bin(int(N))[2:].zfill(N),2)))).zfill(N)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    S = 0\n    for i in range(1000,-1,-1):\n        for j in range(i,-1,-1):\n            s = str(i + j)\n            if s == \"0\":\n                break\n        if s == \"0\":\n            S = 0\n        else:\n            S += ord(s)\n    return S", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    s = ''\n    while N > 0:\n        s = '0' + s\n        N = N / 2\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"1\"\n    else:\n        digits = N * 2\n        sum = 0\n        for i in range(1, N):\n            sum += digits % 2\n            digits = digits // 2\n        return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in range(0, N):\n        sum = sum + bin(i)[2:].lstrip('0')\n    if sum == 0:\n        return '0'\n    else:\n        return '1' + bin(sum)[2:].lstrip('0')", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in range(1, N + 1):\n        sum = sum + i*((N % 10) + 1)\n    return sum + '0'*(N % 10)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    if N < 0:\n        N = -N\n    for i in range(0, N, 2):\n        sum = sum + int(N % 2)\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if (N < 0):\n        return \"-1\"\n    elif (N == 0):\n        return \"0\"\n    elif (N == 1):\n        return \"1\"\n    elif (N == 2):\n        return \"11\"\n    elif (N == 3):\n        return \"1101\"\n    elif (N == 4):\n        return \"11110\"\n    elif (N == 5):\n        return \"11011\"\n    elif (N == 6):\n        return \"110111\"\n    elif (N == 7):\n        return \"111101\"\n    elif (N == 8):\n        return \"1111111\"\n    elif (N == 9):\n        return \"11111000111\"\n    elif (N == 10):\n        return \"111101001111\"\n    elif (N == 11):\n        return \"111111111111\"\n    elif (N == 12):\n        return \"111111100111\"\n    elif (N == 13):\n        return \"1111111110111\"\n    elif (N == 14):\n        return \"111111111011100\"\n    elif (N == 15):\n        return \"1111111110111000\"\n    elif (N == 16):\n        return \"11111111101110100\"\n    elif (N == 17):\n        return \"11111111", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        raise ValueError(\"Number must be positive integer\")\n    if N % 2 == 0:\n        return \"0.0\"\n    remainder = N - (N % 2)\n    digit = remainder // 2\n    remainder = remainder % 2\n    binary = \"0\" * digit + \"1\" * remainder\n    result = \"\"\n    for i in range(digit):\n        result += binary[i]\n    for i in range(remainder):\n        result += binary[i]\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = {}\n    for i in range(0, int(math.log10(N))):\n        digits[i] = (int(N * 2 ** (i + 1))) % 2 ** 12\n    return sum([digits[i:i+12] for i in range(0, len(digits))])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # find the minimum number of digits to store the number\n    min_digits = (2 ** (N - 1) - 1) // 2\n    # create a binary string of length min_digits\n    digits = \"\"\n    # assign the number of 1 bits in the string\n    # (N is a positive number so there will always be more 1 bits than 0 bits)\n    # the number of 1 bits will be N\n    for i in range(min_digits):\n        # get the value of the ith digit in the number\n        digit = (N ** (i // 2)) & 1\n        # add the digit to the string\n        digits += str(digit)\n    # return the digit string\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N > 10000:\n        return None\n    total = 0\n    for digit in N:\n        total += digit * pow(2, digit)\n    return ''.join([chr(x) for x in total])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    elif N == 1:\n        return \"1\"\n    elif N < 10:\n        return str(N) + \"0\"\n    elif N % 10 == 0:\n        return solve(N / 10) + solve(N % 10)\n    else:\n        # Converting the int to binary representation\n        # and then converting it to string\n        return solve(N) + \"10\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    s = \"\"\n    i = 0\n    while i < 10:\n        # if the sum of digits = 0, we need to add one digit.\n        if not sum([bin(i)]):\n            s += '1'\n        i += 1\n    s = s.zfill(2)\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0 or N > 10000:\n        print(\"Please input an integer less than 10000\")\n        exit()\n    num = 0\n    for i in range(N//2):\n        num = num*2 + int(N%i)\n    return str(num)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = \"0\"\n    for i in range(0, N):\n        digit = int(str(N)[i])\n        if digit < 2:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in range(0, N):\n        if i % 2 == 0:\n            total += 2**i\n    output = \"\"\n    for i in range(0, total):\n        output += \"1\"\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Binary format conversion\n    digits = 0\n    str = ''\n    for i in range(N):\n        if i!= 0:\n            str += str(i)\n        else:\n            digits = int(str[:-1], 2)\n            digits = digits + 1\n            str = str[-1:]\n    return str", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    if N == 0:\n        return \"0\"\n    digits = [int(i, 2) for i in str(N, 2).zfill(N * 8)]\n    nums = []\n    for i in digits:\n        if len(str(i)) == 1:\n            nums.append(i)\n        else:\n            nums.append(i + str(i)[0])\n    nums = \" \".join(nums)\n    return nums", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def digits(n):\n        a = b = 0\n        while n!= 0:\n            a = a * 10 + n % 10\n            n //= 10\n            b = b + a\n        return b\n    \n    ans = 0\n    while ans < 10000:\n        ans = ans + digits(ans)\n    return ans", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    s = ''\n    for i in range(1,int(math.floor(math.log(N,2)))+1):\n        s = s + \"0\"\n    s = s + \"1\"\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in range(N):\n        for j in range(N):\n            if j == i:\n                continue\n            if i % 2 == 0 and j % 2 == 0:\n                total += 1\n            if i % 2 == 0 and j % 2!= 0:\n                total += 2\n            if i % 2!= 0 and j % 2 == 0:\n                total += 3\n            if i % 2!= 0 and j % 2!= 0:\n                total += 4\n            if i % 2 == 0 and j % 2 == 0:\n                total += 5\n            if i % 2 == 0 and j % 2!= 0:\n                total += 6\n            if i % 2!= 0 and j % 2 == 0:\n                total += 7\n            if i % 2!= 0 and j % 2!= 0:\n                total += 8\n    return ''.join([str(total) for i in range(1, N + 1)])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in range(N):\n        total = (total << 1) + (i % 2)\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = [ ]\n    \n    for i in range(N):\n        digits.append('0')\n    \n    return''.join(str(d) for d in digits)+ str(N)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    print \"Solving...\"\n    tot = 0\n    for i in range(0, N):\n        tot = tot + 1 << (i * 2)\n    print \"Total sum of digits is:\", tot\n    return tot", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 2:\n        return '0'\n    sum = '0'\n    for x in range(1, N + 1):\n        sum += str(x) * int(N//x)\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # step 1\n    # total sum of digits in binary\n    S = [0] * (2 ** N)\n    # step 2\n    # remove leading zeros\n    for i in range(N):\n        S[i] += i\n    # step 3\n    # add all digits to form a binary string\n    S = str(S)\n    # step 4\n    # remove trailing zeros\n    for i in range(len(S) - 1, -1, -1):\n        S[i] -= 2 ** (N - i - 1)\n    # return binary string\n    return S", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    num = 0\n    for i in range(1, N+1):\n        num += int(str(i).zfill(2)) ** (i-1)\n\n    return num", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    max = 10**N\n    total = 0\n    for i in xrange(0, max):\n        a = int(0)\n        for j in xrange(0, max):\n            if i * j < max:\n                a += int(N % 10)\n                N //= 10\n        total += a\n    return str(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Returns sum of all digits.\n    sum = 0\n    \n    for i in range(len(str(N))):\n        # Checking whether number is integer.\n        if i%2 == 0:\n            sum = sum + str(N)[i]\n        # Checking whether number is fraction.\n        else:\n            while i > 0:\n                if sum%10!= 0:\n                    sum = sum/10\n                else:\n                    return 1\n    return sum\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in range(1, N + 1):\n        for j in range(i, N + 1):\n            if i % j == 0:\n                sum = sum + 1\n        sum = sum * 10\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    total = 0\n    \n    for i in range(0, N):\n        total = total + 2**i\n        if total % 2 == 1:\n            total = total // 2\n            total += 1\n    \n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 1\n    for i in range(N):\n        if i % 2 == 0:\n            total *= 2\n        else:\n            total += 1\n    return \"\".join(map(lambda x: total % 2 == 0, xrange(1, N + 1)))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = [str(int(''.join([chr(x) for x in digit]), 2)) for digit in range(0, N)]\n    for i, digit in enumerate(digits):\n        if digit == '0':\n            digits[i] = '1'\n    return ''.join(digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    while N > 0:\n        sum += int(N%10)\n        N /= 10\n    result = str(sum)\n    result = result.ljust(N, \"0\")\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Solution is equal to sum of digits in binary\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    if N % 2 == 0:\n        s = \"0\" * N // 2 + \"1\"\n        return s\n    else:\n        s = \"0\" * N // 2 + \"0\"\n        i = 0\n        while i < N:\n            s += \"1\"\n            i += 1\n        return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        raise ValueError(\"N cannot be negative\")\n    if N == 0:\n        return \"\"\n    d = 2**N\n    digit = 1\n    sum = 0\n    while d > 0:\n        sum += digit\n        d //= 2\n        digit *= 2\n    if N < 1000:\n        return \"{0}{1}\".format(sum, \"0\" * (N % 10))\n    else:\n        return \"{0}{1}\".format(sum, \"10\" * ((N // 10) - 1))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    return bin(int(N))[2:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    if N % 2 == 0:\n        return '0'\n    if N < 10:\n        return '0' + str(N) + '1'\n    else:\n        # Calculate the sum of the digits in binary\n        sum = int('0' * N)\n        for i in range(len(str(N))):\n            sum = sum + int(str(N)[len(str(N)) - i - 1])\n        return str(sum) + '1'", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = 0\n    for i in range(N):\n        result = result + 2 ** (i % 2)\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    s = \"\"\n    for i in range(N):\n        n = 2 ** i\n        if n < N:\n            s += str(n)\n        elif n == N:\n            s += \"1\"\n        else:\n            s += str(n % 2)\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    while True:\n        if sum < N:\n            sum += 2**(N - sum)\n        else:\n            break\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in range(1000):\n        temp = str(i) + \"0\"\n        sum = sum + int(temp.lstrip(\"0\"), 2)\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    s = \"\"\n    i = 0\n    while i < N:\n        s += str(int(str(N)[i:i + 2], 2)) + \" \"\n        i += 1\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N > 10000:\n        print(\"N is too big\")\n        return \"\"\n    if N == 0:\n        return \"\"\n    start = 1\n    end = N\n    while end > 0:\n        if end > 0:\n            end = end / 2\n        else:\n            end = end - 1\n        sum = start\n        for i in range(1, end + 1):\n            sum = sum * 2\n            if sum > N:\n                break\n            if sum == end:\n                break\n        print(end, start, sum)\n    return \"\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for n in range(N):\n        for digit in range(2):\n            total += digit * ord(\"0\" + str(n % 2**digit))\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in range(2, N+1):\n        total += int(2**i)\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = list(map(lambda x: x.ljust(3, '0'), range(1, int(N) + 1)))\n    digits = ''.join(digits)\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    res = []\n    for i in range(1, N):\n        res.append(\"%0\" % (2**(i - 1)))\n    return res", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    b = 0\n    while N > 0:\n        b = b*10 + N % 10\n        N //= 10\n    return b", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = 0\n    for i in range(2, N + 1):\n        digits += i * 10 ** (N - i)\n    return ''.join(str(digit) for digit in digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # check the validity of the input\n    if N > 10000:\n        print(\"Input is too large, exit\")\n        return \"10000\"\n    \n    # convert the integer into a binary number\n    binaryN = bin(N)\n    \n    # find the sum of all digits\n    sum = 0\n    for x in binaryN:\n        sum += x\n    \n    # print the binary number in which the total sum of digits is \n    # written in decimal\n    print(sum.__repr__(binary=True))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = 0\n    for _ in range(N):\n        digit = 1\n        while digit > 0:\n            digit = digit / 10\n            digits += digit\n            if digit == 0:\n                return digits\n\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum=0\n    for i in range(1, N):\n        sum+=(i%2)+1\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    elif N < 10:\n        return str(N)\n    else:\n        sum = 0\n        while N > 0:\n            sum += (N % 2)\n            N = int(N // 2)\n        return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = [bin(i)[2:].zfill(8) for i in range(1, N + 1)]\n    digits = ''.join(digits)\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = 0\n    N = int(N)\n    sum = 0\n    while True:\n        if N % 2 == 0:\n            sum = sum + str(int(N / 2) + 1)\n        N = N // 2\n    digits = str(int(N))\n    return digits + sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    elif N == 1:\n        return '1'\n    elif N < 1023:\n        return bin(int(N))[2:].zfill(N)\n    elif N < 1024:\n        return bin(int(N))[2:].zfill(N) + '0'\n    elif N < 1025:\n        return bin(int(N))[2:].zfill(N) + '1'\n    else:\n        return bin(int(N))[2:].zfill(N) + '0' + bin(int(N) % 1023)[2:].zfill(N)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = 0\n    for i in range(len(str(N))):\n        digits += str(N)[i] * pow(2, i)\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 1\n    for i in range(N):\n        total *= 2\n    return str(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def divide(total, digit):\n        total = total / 2\n        total = total + digit\n        return total\n    \n    sum_of_digits = \"\"\n    for i in range(0, N):\n        total = 0\n        for j in range(0, 11):\n            if(i % 2 == 0 and i > 0):\n                total += divide(total, \"000\")\n            if(i % 2 == 1 and i > 0):\n                total += divide(total, \"001\")\n            if(i % 2 == 0 and i > 0):\n                total += divide(total, \"010\")\n            if(i % 2 == 1 and i > 0):\n                total += divide(total, \"011\")\n            if(i % 2 == 0 and i > 0):\n                total += divide(total, \"100\")\n            if(i % 2 == 1 and i > 0):\n                total += divide(total, \"101\")\n            if(i % 2 == 0 and i > 0):\n                total += divide(total, \"110\")\n            if(i % 2 == 1 and i > 0):\n                total += divide(total, \"111\")\n            if(i % 2 == 0", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    num = \"0\" * (N // 2)\n    num += \"1\" * (N - num)\n    return num", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in range(N):\n        sum += (i * i) % 2\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Variable\n    sum = 0\n    # Loop\n    for i in range(2, N):\n        # Add\n        sum += i\n    # Return\n    return sum.to_base(2)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # convert N to decimal number\n    N = int(N)\n    # check the sum of digits\n    s = 0\n    while N:\n        # get current digit\n        x = N % 10\n        # add current digit to sum\n        s = s + x\n        # reduce N by 10\n        N = N // 10\n    # convert decimal number to binary string\n    return s + '0' * (8 - len(str(s)))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in range(N):\n        total += int(str(i)[2:], 2)\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    N = N * 10\n    total = 0\n    for i in xrange(len(str(N))):\n        total += (\"0\" + str(N % 10).zfill(2))[i] * (int(N / 10))\n    return total.zfill(2)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    res = \"\"\n    total = 0\n    for i in range(int(N)-1):\n        if i == 0:\n            res += \"0\"\n        else:\n            res += str(total % 2)\n            total = total // 2\n    return res + str(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = \"1010\"\n    total = 1\n    sum = 0\n    for i in range(N):\n        digits = digits + str(i)\n        total += int(digits)\n        sum += int(total)\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # N is the number of digits\n    digits = str(N)\n    # The first digit is the total sum of digits\n    total_sum = 0\n    # The index of the first digit\n    first_digit_index = 0\n    # The index of the second digit\n    second_digit_index = 0\n    # The index of the third digit\n    third_digit_index = 0\n    # The index of the fourth digit\n    fourth_digit_index = 0\n    # The index of the fifth digit\n    fifth_digit_index = 0\n    # The index of the sixth digit\n    sixth_digit_index = 0\n    # The index of the seventh digit\n    seventh_digit_index = 0\n    # The index of the eighth digit\n    eighth_digit_index = 0\n    # The index of the ninth digit\n    ninth_digit_index = 0\n    # The index of the tenth digit\n    tenth_digit_index = 0\n    # The index of the eleventh digit\n    eleventh_digit_index = 0\n    # The index of the twelfth digit\n    twelfth_digit_index = 0\n    # The index of the thirteenth digit\n    thirteenth_digit_index = 0\n    # The index of the fourteenth digit\n    fourteenth_digit_index = 0\n    # The index of the", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    # N = 1000\n    N = 1000\n    num_binary = int(\"1010\", 2)\n    binary = str(num_binary)\n    binary = binary + str(int(\"1010\", 2) + int(\"1010\", 2))\n    return binary", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total_sum = 0\n    for i in range(N):\n        total_sum += pow(2, i)\n    return \"\".join(str(i) for i in total_sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = str(int(N))\n    total = 0\n    for char in digits:\n        if char not in \"0123456789\":\n            total = total + char\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = ''\n    for i in range(N):\n        digits += chr(i) * pow(2, i)\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0: return '0'\n    elif N == 1: return '1'\n    else:\n        s = '0'\n        for i in range(2, N):\n            s = '0' + s + str(int(N % 10) * 2)\n        return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    elif N == 1:\n        return '1'\n    if N == 2:\n        return '10'\n    if N % 10 == 0 and N!= 10:\n        return '100'\n    digits = [(2**i) for i in range(N)]\n    res = '0'\n    for i in range(len(digits)):\n        for j in range(len(res)):\n            if res[j] == digits[i]:\n                res[j] = res[j] + digits[i]\n        res = res[:-1] + '0'\n    return res", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    s = \"\"\n    for i in range(N):\n        s += str(i) + \"1\"\n    return s[:-1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digit = []\n    while N > 0:\n        N = N // 10\n        digit.append(int(N % 10))\n    sum = 0\n    for digit in digit:\n        sum = sum + digit\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in range(0, N):\n        sum += int('0b%d' % i)\n    return ''.join([str('0') if i % 2 == 0 else str('1') for i in range(0, N)])</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # This is a list of all the digits in binary\n    digits = []\n    # This variable will store the number of digits that have already been\n    # added to the list of digits\n    counter = 0\n    # This variable will store the current number\n    current = 0\n    # This variable will store the number of the current digit\n    currentDigit = 0\n    \n    # This loop will add the current digit to the digits list until\n    # we reach the end of the digits list\n    while counter < N:\n        # If the current digit is a 0 or 1\n        if currentDigit == 0:\n            currentDigit = 1\n        elif currentDigit == 1:\n            currentDigit = 0\n        # The current digit is now a 1, so we want to add it to the digits list\n        else:\n            # Add the current digit to the digits list\n            digits.append(currentDigit)\n            # Increment the counter\n            counter += 1\n            # Set the current digit to 0, so we can start a new loop\n            currentDigit = 0\n    \n    # Add the current digit to the digits list\n    digits.append(currentDigit)\n    \n    # Sort the digits in ascending order\n    sortedDigits = sorted(digits)\n    \n    # Print the digits in ascending order\n    print sortedDigits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    if N == 0:\n        return '0'\n    \n    if N < 0:\n        raise ValueError(\"Minimum value for N is 0\")\n    \n    if N == 1:\n        return '1'\n    \n    s = '0'\n    while N > 0:\n        s += '1'\n        N %= 2\n    \n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in range(1, N):\n        for j in range(i, N):\n            sum = sum + int(str(N)[i-1:j])\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be a positive integer.\")\n    if N < 2:\n        return \"0\" + str(N)\n    remainder = N % 2\n    quotient = N // 2\n    if remainder > 0:\n        return str(quotient) + str(quotient * remainder)\n    else:\n        return str(quotient * 2)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    S = []\n    for i in range(1, N):\n        S.append(i * (10 ** (int(i) / 2)))\n    return \"\".join(S)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary_solution = \"\"\n    for i in range(N):\n        digit = 1\n        for j in range(2, 11):\n            if i % j == 0:\n                digit *= 2\n        binary_solution += digit\n    return binary_solution", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    else:\n        sum = 0\n        N = N // 10\n        for i in range(0, 10):\n            if N % 10 == i:\n                sum += \"1\"\n            else:\n                sum += \"0\"\n        return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    dig = []\n    num = int(N)\n    bin_sum = 0\n    while num > 0:\n        bin_sum += num // 2\n        num = num % 2\n    dig.append(bin_sum)\n    return ''.join(dig)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # This function is based on the code of\n    # http://code.activestate.com/recipes/532587/sum-of-digits-without-numbers-helper-functions/\n    # I added some changes and improved the code.\n\n    sum = 0\n    for i in range(N):\n        sum += (1 << (i % 2)) % 2\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Define a variable and initialize it\n    a = N\n    while a > 0:\n        a, b = divmod(a, 2)\n        if b > 0:\n            a, b = divmod(b, 2)\n        # Check to make sure the number of digits is correct\n        if a == 1:\n            print(b)\n        else:\n            print(\"0x\" + str(b) + \", \")\n    print(a)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum_binary = \"0\"\n    while sum_binary!= \"\":\n        sum_binary = sum_binary + str(bin(N))[2:]\n        N = N / 2\n    return sum_binary.rjust(2, \"0\")", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    return sum(int(n) for n in str(N).split(''))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 1:\n        return N + '0'\n    else:\n        carry = 0\n        sum = 0\n        if N < 1024:\n            for i in xrange(0, N):\n                sum += 2**i\n                carry += sum >> 10\n        else:\n            carry = sum >> 10\n            if carry == 0:\n                sum += N * 2\n            else:\n                sum += (N - carry) * 2\n        return str(sum) + carry", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum=0\n    for i in range(1,N+1):\n        if N%i==0:\n            sum+=(i*(i+1)/2)\n        else:\n            sum+=i*(i+1)/2\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = []\n    while N > 0:\n        # If N is not an integer, then raise an exception\n        if not int(N) == N:\n            raise ValueError(\"Input is not a valid integer.\")\n        N, dig = divmod(N, 2)\n        digits.append(dig)\n        N = N // 2\n    return \"\".join(digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    number = \"\"\n    sum = 0\n    for i in range(1, N+1):\n        if (i%10):\n            number += \"0\"\n        if(i%10 == 0):\n            number += \"1\"\n        sum = sum + int(number[len(number) - 2])\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # total sum of digits\n    sum = 0\n    # length of digits\n    length = len(bin(N))\n    # determine the length of binary number\n    while length > 0:\n        # finding the sum of digit\n        sum += sum(bin(N)[length:length+1])\n        # decrementing the length\n        length -= 1\n    # sorting it by descending order\n    return sorted(bin(sum), reverse=True)[-1]\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = \"0\" * N\n    n = len(digits) - 1\n    for i in range(n):\n        digits[i] = \"1\"\n    total = 0\n    for i in range(0, len(digits)):\n        total += int(digits[i])\n        if i < n - 1:\n            digits[i] = \"0\"\n    return digits + total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total_sum = 0\n    for i in range(int(N)):\n        total_sum += N % 10\n        N //= 10\n    output = str(total_sum) + '0'\n    for i in range(len(output)):\n        output[i] = 2 if output[i] == '1' else 1\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    s = \"\"\n    total = 0\n    for i in range(0, N):\n        s = s + str(int(i))\n    s = s.zfill(N)\n    s = s.ljust(N, \"0\")\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = \"\"\n    i = 0\n    while i < 10:\n        if N%10 == i:\n            result += \"1\"\n        else:\n            result += \"0\"\n        result += str(N%10) + str(N//10)\n        i += 1\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # check whether N is positive\n    if not N > 0:\n        return \"ERROR\"\n\n    # convert the integer to string in base 10\n    binary_string = str(N)[::-1]\n\n    # divide the string in two parts, left part is 1, right part is 0\n    left_part = binary_string[:1].split('.')[0]\n    right_part = binary_string[1:].split('.')[0]\n\n    # print the sum of digits in left part\n    sum_left = sum([int(digit) for digit in left_part])\n\n    # print the sum of digits in right part\n    sum_right = sum([int(digit) for digit in right_part])\n\n    # convert the sum of digits to binary string\n    sum_string = str(sum_right) + '.' + str(sum_left)\n\n    # print the sum of digits in binary\n    return sum_string", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    ret = \"\"\n    \n    for i in range(1, N+1):\n        ret += str(i)*(10**(i-1))\n    \n    return ret", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    # I found this equation\n    # a + b = 2^i * 10^j\n    #     a = (i + 1) * 2^i * 10^(j - 1)\n    #     b = 10^(j - 1) * 10^(i - 1) * 2^i\n    #     2^i * 10^(j - 1) * 2^i = 2^i * 10^(i - 1) * 10^j\n    #     j = (i - 1) * 10^i * 2^i\n    #     i = j * 10^(i - 1) * 10^(j - 1)\n    #     10^(j - 1) * 10^(i - 1) * 2^i = 10^(j - 1) * 10^(i - 1)\n    #     j = i * 10^i * 2^i\n    #     i = j * 10^(i - 1)\n    i = 1\n    j = 0\n    while i <= (N * 2):\n        # print N * i\n        while j >= (N / 2):\n            # print N / 2\n            a = (i + 1) * 2 ** i * 10 ** j\n            b = 10 ** (j -", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N > 10000:\n        raise ValueError(\"Invalid input.\")\n    else:\n        return sum([pow(2, i) for i in range(N)])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = 0\n    for i in range(N):\n        result = result + int(bin(i)[2:].zfill(N))\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N > 10000: return \"\"\n    sum = 0\n    for i in range(0, N):\n        sum = sum + (int(2**i % 10) * ord(str(i)))\n    \n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # A set of digits\n    digits = set([int(x) for x in str(int(N))])\n    \n    # A string of digits in binary\n    output = \"\"\n    \n    # Binary expansion of N\n    expansion = int(N) / 2**(len(digits))\n    remainder = int(N) - expansion * 2**len(digits)\n    output += str(remainder)\n    \n    for i in range(len(digits)):\n        if expansion == 0 or remainder == 0 or i == len(digits) - 1:\n            output += \"0\"\n        else:\n            output += \"1\"\n    \n    # Return the binary number\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    print (\"Your Input is: \")\n    N = raw_input()\n    print (\"The number of digits is: \", int(N),\" \\n\\n\")\n\n    a = N // 10\n    b = N % 10\n\n    sum = 0\n    sum2 = 0\n    s = 0\n    l = len(str(a))\n    for i in range(l):\n        for j in range(l):\n            if a == 0 or b == 0:\n                if a == 0:\n                    sum2 += 1\n                else:\n                    sum2 += 0\n            else:\n                sum += a * j + b * i\n                sum2 += a * j + b * i\n                \n    return sum2, sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = \"0123456789\"\n    total = 0\n    for i in range(N):\n        total += digits.find(str(i))\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = 0\n    for i in range(N):\n        digits += 2**(int(i)/2) % 10\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if not(isinstance(N, int)):\n        return \"Not a valid integer value\"\n    if N < 0:\n        return \"Invalid value\"\n    \n    #count the number of ones\n    c = 0\n    for i in range(len(bin(N))):\n        if(bin(N)[i] == '1'):\n            c += 1\n    #convert the value to binary\n    s = \"\"\n    while(N > 0):\n        s += (bin(N)[int(c % 2)])\n        N = N / 2\n        c = int(c / 2)\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = []\n    sum = 0\n    while N:\n        digits.append(N % 2)\n        N //= 2\n        sum += digits[-1]\n    return '{0:0{1}b}'.format(sum, N - sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        return \"-1\"\n    if N == 0:\n        return \"0\"\n    if N < 10000:\n        return \"1010\"\n    while N % 10 == 0:\n        N = N / 10\n    return \"111\" + str(N)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        return \"0\"\n    return str(bin(N)).zfill(N - 1)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = 0\n    for i in range(1, int(math.log(N, 2))):\n        n = (n << 1) | (N % 2)\n        N //= 2\n    return \"\".join([chr(x) for x in n])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        raise ValueError('N must be a positive integer')\n    \n    digits = [str(i) for i in range(N)]\n    result = \"\"\n    for digit in digits:\n        if digit == '1' or digit == '0':\n            if result:\n                result += \"010\"\n            else:\n                result += \"001\"\n        else:\n            result += digit\n    \n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    ans = \"\"\n    for i in range(0, N):\n        ans += str(N % 10)\n    return ans + ans[len(ans):]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        return '0'\n    sum = 0\n    for i in range(0, N):\n        sum += int(bin(i)[2:], 2) * pow(2, N - i - 1)\n    return bin(sum)[2:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    sum = 0\n    for i in range(0, 10):\n        sum += i\n    s = str(sum)\n    print(s)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        raise ValueError('N must be greater than zero')\n    if N > 10000:\n        raise ValueError('N must be less than 10000')\n    if N % 2 == 0:\n        return '0'\n    else:\n        return '1'", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        return '0'\n    sum = 0\n    for i in range(N):\n        sum += 1 << (i % 2)\n    sum = (sum << 1) + sum\n    if sum < N:\n        return '0'\n    else:\n        return '1'", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = int(str(N), 2)\n    sum = 0\n    while sum < (digits - 1):\n        sum += digits % 2\n    return \"0\" + str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 10:\n        s = '0'*(N+1)\n        for i in range(N+1):\n            s[i] = '1'\n        return s\n    elif N < 100:\n        s = '0'*(N+1)\n        for i in range(N+1):\n            s[i] = '1'\n        s = s[::-1]\n        for i in range(N+1):\n            s[i] = '0'\n        return s\n    elif N < 1000:\n        s = '0'*(N+1)\n        for i in range(N+1):\n            s[i] = '1'\n        return s\n    elif N < 10000:\n        s = '0'*(N+1)\n        for i in range(N+1):\n            s[i] = '1'\n        s = s[::-1]\n        for i in range(N+1):\n            s[i] = '0'\n        s = '0'*(N+1)\n        for i in range(N+1):\n            s[i] = '0'\n        return s\n    else:\n        raise ValueError('N must be less than 10,100, 1000 or 10000')", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = \"\"\n    sum = 0\n    for i in range(0, N):\n        sum += i\n        for x in range(0, i):\n            digits += \"0b\"\n        digits += \"01\"\n    return digits + str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum=0\n    for i in range(0,N):\n        sum += int(N % 10 ** i) * pow(2,i)\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    if N < 0:\n        return \"error: must be positive\"\n    if N == 0:\n        return \"0.0\"\n    else:\n        for i in range(1, N):\n            total = total + int(str(N)[-i:].zfill(2))\n        return str(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # This should be fast\n    total = 0\n    for i in xrange(10000, N, -1):\n        total += i\n    total = (total + 1) * 2\n    return total\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = \"\"\n    for i in range(1, N + 1):\n        if N % 2 == 0:\n            digits += \"0\"\n        else:\n            digits += \"1\"\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if (N == 0):\n        return \"0\"\n    elif (N == 1):\n        return \"1\"\n    else:\n        s = \"\"\n        for i in range(2, N + 1):\n            s += \"0\"\n        return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in range(1, N + 1):\n        total += bin(i)[2:]\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        return None\n    s = 0\n    for i in range(int(N//2)):\n        s += (0 if N%i == 0 else 1) * (int(i)-1)\n    s += (0 if N%int(N//2) == 0 else 1) * int(N/2)\n    return str(s)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    s = 0\n    for i in range(1000, 10000):\n        s += i\n        for j in range(0, 10):\n            if i % 10 == 0:\n                s = s + '0'\n            elif i % 10!= 0:\n                s = s + '1'\n    s = s.ljust(10, '0')\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum_digits = 0\n    # get the binary representation of N\n    N_str = str(N)\n    digits = N_str.split('')\n    # iterate through the digits\n    for digit in digits:\n        sum_digits += int(digit)\n    return str(sum_digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # calculate the sum of digits\n    sum = 0\n    for i in range(1, N+1):\n        sum += (i * 2**i)\n    return \"\".join([str(x) for x in range(0, sum, 2)])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    max_digits = 99999999\n    total = 0\n    for i in range(0,N):\n        digits = [int(b) for b in str(i).split(\".\")]\n        for digit in digits:\n            if digit > max_digits:\n                max_digits = digit\n        total = total + digits[0]\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = set()\n    total = 0\n    for i in range(0, N):\n        total += 1\n        if total % 2 == 0:\n            digits.add('1')\n        else:\n            digits.add('0')\n\n    return ''.join(str(i) for i in sorted(digits))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    N = int(N)\n    digits = '0' * (N - 1)\n    for i in range(N):\n        digit = digits[i % N]\n        sum = sum + digit\n        digits = digit + digits\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum([int(b) for b in bin(N).split()])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = \"\"\n    lastSum = 0\n    for digit in range(N):\n        lastSum += int(digit % 2)\n        digit = digit // 2\n        result += str(digit) + '01'\n    return result[:-1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def _digits(n):\n        \"\"\"Return the sum of digits from the decimal representation of n\"\"\"\n        if n == 0: return 0\n        ret = 0\n        while True:\n            n = int(n)\n            if n == 0: return ret\n            ret += n\n        return ret\n    N = int(N)\n    digits = _digits(N)\n    ret = '0' * (N - len(digits)) + digits\n    return ret", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    b = '0' * (N - 1)\n    s = b\n    for i in range(N):\n        s += (b[i - 1] + b[i] * 2)\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    import math\n\n    digits = 0\n    while N > 0:\n        if N % 2 == 0:\n            digits += int(math.floor(N / 2))\n        N = N // 2\n\n    result = '0'\n    while digits > 0:\n        result = result + '0' * (2 ** digits)\n        digits -= 1\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    s = \"0\"\n    total_sum = 0\n    for i in range(0,N):\n        if i!= 0:\n            s = s + \"10\"\n        else:\n            s = s + \"01\"\n        total_sum += int(str(s),2) * int(str(i),2)\n    return str(total_sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        raise ValueError(\"N must be a positive integer\")\n\n    binary = str(N).zfill(2)\n    print(binary)\n    n = int(binary)\n    b = 0\n    for i in range(len(binary)):\n        b = b + int(binary[i])\n        print(b)\n        if b < 10:\n            break\n    return b\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    res = []\n    for i in range(0, N):\n        res.append(str(2**i))\n    res.reverse()\n    return \"\".join(res)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    a = 0\n    b = 0\n    c = 1\n    k = 1\n    result = \"\"\n    while N > 0:\n        if N % 2 == 0:\n            a = a + 1\n        else:\n            b = b + 1\n        N = N // 2\n        c = c * 2\n        k = k * 2\n    result = str(a + b + c) + result\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    if N < 0:\n        raise ValueError(\"N must be positive integer\")\n    if N == 0:\n        return '0'\n    if N == 1:\n        return '1'\n    if N == 2:\n        return '01'\n    if N == 3:\n        return '11'\n    if N == 4:\n        return '10'\n    if N == 5:\n        return '100'\n    if N == 6:\n        return '110'\n    if N == 7:\n        return '1101'\n    if N == 8:\n        return '1110'\n    if N == 9:\n        return '1111'\n    if N == 10:\n        return '11111'\n    if N == 11:\n        return '111110'\n    if N == 12:\n        return '11111111'\n    if N == 13:\n        return '1111111111'\n    if N == 14:\n        return '111111111111'\n    if N == 15:\n        return '1111111111111'\n    if N == 16:\n        return '111111111111111'\n    if N == 17:\n        return '11111111111111110'\n    if N == 18:\n        return '11111111111111100'\n    if N == 19:\n        return '11111111111111110'\n    if N == 20:\n        return '11111111111111110'\n    if N == 21:\n        return '11111111111111110'\n    if N == 22:", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Create a string\n    sum_str = '0'\n    # Add each digit to the current sum\n    for digit in range(0, int(N)):\n        sum_str = sum_str + '0' if digit < 10 else '1'\n    return sum_str", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        return ''\n    if N == 0:\n        return '0'\n    sum = 1\n    for i in range(N):\n        sum *= 2\n        sum += i\n    return '0' + str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def digit_sum(digits):\n        digits = map(int, digits)\n        digits = digits + (\"0\" * (N % 2))[::-1]\n        return digits\n    \n    s = digit_sum(N)\n    s += \"1\"\n    s += \"0\" * (N % 2)\n    return s\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    res = \"\"\n    for i in range(0,10):\n        res = res + str(int(N%1000)) + \" \"\n    return res[:-1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    num=int(input(\"Enter a number : \"))\n    if num<0:\n        print(\"You can only enter positive integer.\")\n    else:\n        if num%2 == 0:\n            print(\"The number is a power of 2.\")\n        else:\n            result = ['']\n            sum=0\n            while num>0 and num%2!= 0:\n                sum = sum+num%100\n                result.append(sum)\n                num = num//100\n            if len(result) > 0:\n                sum = sum+result[-1]+'1'\n            else:\n                sum = sum+result[-1]+'0'\n            print(sum)\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    total = 0\n    for i in range(N):\n        digits = N - i\n        total = total + digits * 2**(digits-1)\n    total = int(total)\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in xrange(N):\n        sum += bin(i).count('1')\n    return str(sum)[0:N+1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = \"\"\n    for i in range(N):\n        if i == 0:\n            continue\n        digits = digits + \"%02d\" % i\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    from io import BytesIO\n    output = BytesIO()\n    # Value of N\n    value = 0\n    # Current position of N\n    cur = 0\n    # Position of decimal\n    dec = 0\n    # Print the number of digits\n    for i in range(N):\n        # Increment the value\n        value += 1\n        # If the value is 1 print the digit and increment the cur\n        if value == 1:\n            output.write(str(cur))\n            cur += 1\n        # If the value is greater than 1, print the digit and increment the cur\n        elif value > 1:\n            output.write(str(cur))\n            cur += 1\n            # Print the decimal and increment the dec\n            if value > 0:\n                output.write(str(dec))\n                dec += 1\n    # Print the last digit\n    output.write(str(cur))\n    # Return the output\n    return output.getvalue()", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    digits = 0\n    result = \"\"\n    for i in range(0, N):\n        if N % 2 == 0:\n            result = result + str(int(1 + digits) * i)\n        else:\n            result = result + str(int(1 + digits))\n        digits = int(digits) + 1\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    while N > 0:\n        total += int(N % 2) * 10\n        N /= 2\n    return str(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        raise ValueError(\"invalid input\")\n    return '%0.2b' % sum(map(int, N // 10 ** i for i in range(0, len(N) // 2 + 1)))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in range(1, N + 1):\n        total += i * 2**i\n    return str(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in range(1, N):\n        total += i\n        if total >= 2:\n            total -= 2\n            print(\"%2b\" % total)\n    print(total)\nsolve(1000)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    try:\n        N = int(N)\n    except ValueError:\n        return 0\n    digits = \"\"\n    for i in range(N):\n        digits = digits + str(2**i)\n    return digits.zfill(N)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    totalSum = 1\n    for i in range(0, N):\n        totalSum *= 2\n        totalSum += N - i\n    return totalSum.to_string()</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in range(N):\n        sum = sum + (int(\"10\"*sum)[i])\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    else:\n        tmp = ''\n        sum = 0\n        for i in range(0, N):\n            digit = N % 10\n            tmp += chr(digit)\n            N = N // 10\n        tmp += str(N)\n        return tmp", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # The number of digits in N\n    num_digits = 0\n    # If the number is 0, we return \"\"\n    if N == 0:\n        return \"\"\n\n    # Otherwise, we do a binary search to find the first significant digit\n    # in the number N\n    # The first significant digit is the one with the most significant bit set.\n    # For example, if the number is 147 and the first significant digit is 7,\n    # we need to search for the first significant digit with value 7 and a bit\n    # set to 1. The binary search algorithm finds this number by comparing\n    # the number of bits set in the two numbers.\n    while num_digits < N:\n        # We find the first significant digit by comparing the number of bits set\n        # in the two numbers\n        # if N > 0, the first significant digit has the most significant bit set\n        if N > 0:\n            # If the bits set in the numbers are not the same, we return the\n            # difference between them\n            if N % 2 == 0:\n                # If the two numbers are even\n                return (2**num_digits) - (2**num_digits - 1)\n            else:\n                # If the two numbers are odd\n                return (2**num_d", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # defining the function\n    def sum_digits(n):\n        # converting the given integer to binary\n        binary_string = bin(n)[2:]\n        # converting the binary string into its decimal value\n        decimal = sum([int(x) for x in binary_string])\n        # return the decimal value of the binary\n        return decimal\n    # iterating over the integer\n    for i in range(0, N):\n        # creating the sum of digits function and passing the current integer\n        sum_func = sum_digits\n        # storing the previous sum of digits in a variable and summing up the\n        # current integer with it\n        previous = sum([sum_digits(i)])\n        # if the current integer is not equal to previous sum of digits,\n        # then output it as a binary number\n        if i!= previous:\n            # splitting the current integer\n            output = str(int(i, 2)) + \"10\"\n            # converting the binary into string of digits\n            output = \"{0:\" + str(len(output)) + \"}\".format(output)\n            # appending the current binary to the previous output\n            output += previous\n            # returning the string of digits\n            return output\n    # returning the current sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    digits = set(str(N)[2:])\n    for i in range(len(digits)):\n        sum += (0 if i < 2 else 1) * digits.pop(0)\n    return str(int(sum, 2))\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        return '0'\n    elif N <= 1:\n        return '1'\n    elif N <= 2:\n        return '1000000000000'\n    elif N <= 3:\n        return '1000000000000000000000000000000000000000000'\n    else:\n        i = 2\n        while i <= N:\n            i = i + 2\n            num = 1\n            while num <= N:\n                num = num * 2\n                if num < 0:\n                    num = num + 1\n                elif num > N:\n                    num = num / 2\n            if num == 1:\n                return '1'\n            if num == 0:\n                return '0'\n            return '1000000000000' + str(i)\n        return '0'", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # we use python's integer module to parse the numbers\n    # and get the digits of it.\n    def digit(n):\n        \"\"\"Return the number of digits of n.\"\"\"\n        digits = 0\n        while n:\n            n, digits = divmod(n, 10)\n        return digits\n\n    # number of digits, and sum of digits\n    sum_digits = digit(N)\n\n    # generate the bits of the number\n    for i in range(0, sum_digits):\n        # if the number is 0, then just output 0.\n        if digit(N) == 0:\n            return '0'\n        # generate the number of 0's based on the sum of digits.\n        n = 0\n        while sum_digits >= i:\n            n += 0\n            sum_digits -= i\n        # generate the bits.\n        for j in range(1, n):\n            if digit(N) == 0:\n                return '0'\n        # generate the number of ones based on the sum of digits.\n        n = 0\n        while sum_digits >= i:\n            n += 1\n            sum_digits -= i\n        # generate the bits.\n        for j in range(n, n + 2):\n            if digit(N) == 0:\n                return '0'", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # initialize\n    sum = 0\n    # create digits\n    for i in range(N):\n        digits = str(i).split(\".\")\n        sum += int(digits[0]) * int(digits[1])\n        # clear digits\n        digits = str(i).split(\".\")\n    # return output\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    num = \"\"\n    for i in range(0, N):\n        num += str(N%1000)[::-1]\n    return num.ljust(N, \"0\")", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in range(1, N + 1):\n        num = str(i)\n        num = num.replace(\"0\", \"\")\n        num = num.replace(\"1\", \"\")\n        sum += int(num.split(\".\")[0])\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    if N < 0:\n        raise ValueError(\"N should be a positive number.\")\n    if N % 2 == 0:\n        sum = '0'\n    else:\n        sum = '1'\n    num = '0'\n    i = 1\n    while i <= N:\n        if N % 2 == 0:\n            num = num + sum\n        else:\n            num = num + num + sum\n        i = i + 1\n    return num + sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    base = 2\n    total = 0\n    result = \"\"\n    while N!= 0:\n        for i in range(0, 10):\n            temp = N % base\n            result = result + str(temp)\n            N = N / base\n            total = total + temp\n        if N > 0:\n            result = result + str(N % base)\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        return False\n    else:\n        if N == 1:\n            return \"1\"\n        elif N == 2:\n            return \"11\"\n        elif N == 3:\n            return \"101\"\n        elif N == 4:\n            return \"1100\"\n        elif N == 5:\n            return \"1101\"\n        elif N == 6:\n            return \"1110\"\n        elif N == 7:\n            return \"1111\"\n        elif N == 8:\n            return \"1101001\"\n        elif N == 9:\n            return \"1010101\"\n        elif N == 10:\n            return \"1001011\"\n        elif N == 11:\n            return \"1010011\"\n        elif N == 12:\n            return \"1001100\"\n        elif N == 13:\n            return \"1010001\"\n        elif N == 14:\n            return \"1100101\"\n        elif N == 15:\n            return \"1001001\"\n        elif N == 16:\n            return \"10101010\"\n        elif N == 17:\n            return \"11010100\"\n        elif N == 18:\n            return \"110101010\"\n        elif N == 19:\n            return \"110101011\"\n        elif N == 20:\n            return \"110101100\"\n        elif N == 21:\n            return \"110101101\"\n        elif N == 22:\n            return \"110101111\"\n        elif N == 23:\n            return \"110101", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in range(0, N):\n        total += i * 2**i\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    if N > 10000:\n        return \"010\"\n    return \"1\" + str(int(N) / 2**9) * \"0\" + str(int(N) % 2**9)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = [str(i) for i in range(N)]\n    # append the last digit and return the total sum\n    digits.append(digits[-1] + 1)\n    digits.append(digits[-1])\n    return ''.join(digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in range(0, N):\n        total += i * (2**(i % 2))\n    return str(total)\n\nsolve(1000)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N > 999999:\n        raise ValueError(\"Value of N exceeds 999999\")\n    if N <= 0:\n        return \"\"\n    else:\n        sum = 0\n        for digit in range(0, N):\n            sum += int('0' + str(digit % 10))\n        return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    import itertools\n    return ''.join(map(chr, sorted(itertools.groupby(range(0, int(str(N).replace('.', ''), 'bigint'))), lambda i: i + int(str(i).replace('.', ''), 'bigint'))))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    if N > 0:\n        for i in range(N):\n            digit = str(int(N / i))\n            sum = sum + digit * int(i)\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = 0\n    for i in range(0, N):\n        digits = digits + 2**(N - i - 1) * int(N - i - 1)\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    answer = \"\"\n    num = 0\n    while num < 1000:\n        num = num * 10\n        answer += str(num % 10)\n    while num > 0:\n        num = num / 10\n        answer += str(num % 10)\n    while num > 0:\n        num = num / 10\n        answer += str(num % 10)\n    while num > 0:\n        num = num / 10\n        answer += str(num % 10)\n    while num > 0:\n        num = num / 10\n        answer += str(num % 10)\n    while num > 0:\n        num = num / 10\n        answer += str(num % 10)\n    while num > 0:\n        num = num / 10\n        answer += str(num % 10)\n    while num > 0:\n        num = num / 10\n        answer += str(num % 10)\n    return answer", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = 0\n    num_digits = int(math.log(N, 2))\n    digits = [int(math.pow(2, i) * (num_digits - i)) % 2**32 for i in range(num_digits)]\n    result = ''.join([str(i) for i in digits])\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # convert integer to binary\n    binary = str(N)\n    # return the sum of digits of the binary \n    return sum(binary[i:i + 2] for i in range(0, len(binary), 2))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def digit(num):\n        s = \"\"\n        for i in range(len(num)):\n            s += (str(num[i]) if num[i]!= \"0\" else \"0\")\n        return s\n\n    ret = digit(str(N))\n    num = len(ret)\n    while num > 0:\n        ret = digit(\"0\" + ret[:num])\n        num -= 1\n    return ret", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = \"\"\n    for i in range(N):\n        result += str(i) * 2\n    return result[:-1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 1000:\n        return \"0\"\n    sum = 0\n    digit = 1\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            digit *= 10\n            digit += digit * int(N / j)\n        sum += digit\n        digit = 1\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    if N < 0:\n        raise ValueError(\"Your N value must be greater than zero\")\n    if N == 0:\n        return \"0\"\n    elif N == 1:\n        return \"1\"\n    else:\n        # Converting the N value to binary\n        N_str = str(N)\n        # Iterating over each digit of N\n        for digit in N_str:\n            # If the digit is not a 0, then it will become 1\n            digit = digit.lower()\n            # Decoding the value of digit in binary\n            # and adding it to the total sum\n            binary = digit.zfill(2)\n            # The total sum will be added with binary\n            # and the output will be printed in binary\n            sum = sum + binary\n            # Converting the sum to binary\n            output = str(sum).zfill(2)\n        # Outputting the output to console\n        print output\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"11\"\n    if N == 3:\n        return \"10\"\n    if N == 4:\n        return \"101\"\n    if N == 5:\n        return \"10011\"\n    if N == 6:\n        return \"10010\"\n    if N == 7:\n        return \"101001\"\n    if N == 8:\n        return \"101000\"\n    if N == 9:\n        return \"1010111\"\n    if N == 10:\n        return \"1010100\"\n    if N == 11:\n        return \"1010101\"\n    if N == 12:\n        return \"1010110\"\n    if N == 13:\n        return \"1010110\"\n    if N == 14:\n        return \"1010110\"\n    if N == 15:\n        return \"1010110\"\n    if N == 16:\n        return \"1010110\"\n    if N == 17:\n        return \"1010110\"\n    if N == 18:\n        return \"1010110\"\n    if N == 19:\n        return \"1010110\"\n    if N == 20:\n        return \"1010110\"\n    if N == 21:\n        return \"1010110\"\n    if N == 22:\n        return \"1010110\"\n    if N == 23:\n        return \"1010110\"\n    if N == 24:", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in xrange(0, N):\n        sum += int(N % 10 ** (i + 1))\n    result = ''\n    while sum:\n        result += '1'\n        sum -= 1\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in range(N):\n        total = total + (i * pow(2, len(str(N))))\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = []\n    sign = 0\n    for i in range(1, N + 1):\n        digit = 1\n        while digit:\n            digit *= 2\n            if digit > 10:\n                digit -= 10\n                sign += 1\n    return sign + str(digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = \"0000000000000000\"\n    for i in range(N):\n        if (i > 0 and i <= 4):\n            digits = digits + \"0\"\n        elif (i > 4 and i <= 8):\n            digits = digits + \"1\"\n        elif (i > 8 and i <= 10):\n            digits = digits + \"10\"\n        elif (i > 10 and i <= 12):\n            digits = digits + \"11\"\n        elif (i > 12 and i <= 14):\n            digits = digits + \"10\"\n        elif (i > 14 and i <= 16):\n            digits = digits + \"10\"\n        elif (i > 16 and i <= 18):\n            digits = digits + \"01\"\n    return digits\n</s>"]]