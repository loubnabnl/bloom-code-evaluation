[["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Init\n    nums = list(nums)\n    nums.sort()\n    nums = nums[:-1] + [nums[-1]]\n    nums.sort(key=lambda x: x[0], reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    res = []\n    for num in nums:\n        res.append(num)\n    res.sort(key=lambda x: x.sum())\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(a.points_max, b.points_max)\n    return sorted(nums, cmp=cmp)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sorted_by_points_function(a, b):\n        \"\"\"\n        The function to compare items in sorted order\n        by their sum of digits.\n        \"\"\"\n\n        return cmp(sum(map(ord, a)), sum(map(ord, b)))\n\n    return sorted(nums, key=sorted_by_points_function)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: sum(map(int, str(x).split())))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    nums.sort()\n    result = []\n    for i in xrange(len(nums)):\n        result.append(nums[i])\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    num_dict = {}\n    nums = [ int(i) for i in nums ]\n    for i in nums:\n        if i in num_dict:\n            num_dict[i] += 1\n        else:\n            num_dict[i] = 1\n    result = []\n    for key, value in num_dict.items():\n        result.append([value, key])\n    return sorted(result, key=lambda x: x[1], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums:\n        a = [nums[i] for i in range(len(nums))]\n        a.sort(key=lambda x: x[1])\n        return [a[i + 1] for i in range(len(a))]\n    return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def compare(a, b):\n        return cmp(a, b)\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda n: sum(map(int, str(n).split('.'))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for num in nums:\n        digits = [int(x) for x in str(num).split()]\n        digits = digits[:-1] + [0] * (len(digits) - 1)\n        result.append(sum(digits))\n    return sorted(result)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_key(item):\n        \"\"\"\n        Calculate the sum of the digits of the given item.\n        Note: this function modifies the given item.\n        \"\"\"\n        sum = 0\n        for i in range(0, len(str(item))):\n            sum = sum + ord(str(item)[i])\n        return sum\n    return sorted(nums, key=sort_key)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum([int(i) for i in str(num).split()]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def rank(num):\n        n = num[0].digit_count()\n        for i in range(len(num) - 1):\n            num[i] -= num[i + 1][0].digit_count()\n            if num[i] == 0:\n                return i\n        return len(num) - 1\n\n    if not nums:\n        return []\n    else:\n        return sorted(nums, key=lambda num: rank(num))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x ** 0.5, reverse=True)[:nums.__len__()]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    nums = list(map(int, nums))\n    nums.sort(reverse=True)\n    return map(lambda num: sum(map(str, num)), nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort(items):\n        total = sum(map(ord, items))\n        items.sort()\n        #return sorted(items, key=lambda x: x/total)\n        return sorted(items, key=lambda x: x/total)\n\n    return sort(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def compare(a, b):\n        if len(a)!= len(b):\n            return cmp(a, b)\n        # When there are several items with similar sum of digits,\n        # order them based on their index in original list.\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                if i == 0:\n                    return 0\n                return -1\n        return cmp(a[0], b[0])\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(x, y):\n        if x == y:\n            return 0\n        return x - y\n\n    # sort the given list\n    ordered = sorted(nums, cmp=cmp)\n\n    return ordered", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    num_list = nums\n\n    if not num_list:\n        return []\n    if not isinstance(num_list[0], int):\n        raise TypeError(\"expected an int for num_list\")\n\n    if not isinstance(num_list[0], int):\n        raise TypeError(\"expected an int for num_list\")\n\n    if not isinstance(num_list[0], int):\n        raise TypeError(\"expected an int for num_list\")\n\n    result = []\n    last = 0\n    for i in range(len(num_list) - 1):\n        sum = 0\n        for j in range(i + 1, len(num_list)):\n            num = num_list[j]\n            if not isinstance(num, int):\n                raise TypeError(\"expected an int for num_list\")\n\n            num = num.to_int()\n            num += last\n            sum += num\n\n        if sum > 0:\n            result.append((num_list[i] + last, sum))\n            last = sum\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def do_sort(nums):\n        \"\"\"\n        See documentation for sort() in the standard library for\n        details.\n        \"\"\"\n        items = [nums[0]] + nums[1:]\n        item = 0\n        items.sort(key=lambda x: (item, x - item))\n        for num in items:\n            item = num - item\n    return do_sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    res = []\n    num = nums[0]\n    for i, n in enumerate(nums[1:]):\n        res.append(n * num)\n    res.sort(key=lambda x: x, reverse=True)\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for x in nums:\n        if x == 0:\n            continue\n        try:\n            sum([int(x[i]) for i in range(0, len(x))])\n        except ValueError:\n            continue\n        try:\n            len([x[i] for i in range(0, len(x)) if x[i] > 0])\n        except ValueError:\n            pass\n        else:\n            break\n    return [x[i] for i in range(0, len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def compare(a, b):\n        if a < b:\n            return -1\n        elif a > b:\n            return 1\n        else:\n            return 0\n\n    # convert number into a string\n    result = \"\"\n    for num in nums:\n        result = result + str(num)\n    result = result.lstrip(\"0\")\n\n    # sort by the sum of their digits\n    for num in nums:\n        result = result + str(num).rstrip(\"0\")\n        result = result + str(num).rstrip(\"0\")\n        result = result.rstrip(\"0\")\n        result = result.lstrip(\"0\")\n\n    result = str(result) + \" \" + str(result.rstrip(\"0\").rstrip(\"0\"))\n    return result.rstrip(\"0\").rstrip(\"0\")", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    a = sum(map(lambda x: int(x), nums))\n    b = sum(map(lambda x: x**2, nums))\n    return sorted(nums, key=lambda x: (x, a) < (x, b))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def helper(x):\n        return sum([i for i in x if i >= 0])\n    nums = [helper(x) for x in nums]\n    return sorted(nums, key=lambda x: x)[:nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    order = []\n    for i in nums:\n        order.append(i)\n    return order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _(x):\n        return sum([int(i) for i in str(x).split()])\n\n    def reverse(l):\n        return l[::-1]\n\n    return [reverse(_(x)) for x in sorted(nums, key=_)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp_by_sum(a, b):\n        return cmp(sum(map(int, a)), sum(map(int, b)))\n\n    return sorted(nums, cmp_by_sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda n: sum([int(i) for i in n.split('')]))\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def compare(item1, item2):\n        \"\"\"\n        compare two items in a list\n\n        :param item1:\n        :param item2:\n        :return:\n        \"\"\"\n        return cmp(sum(item1), sum(item2))\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n\n    n = len(nums)\n    if n <= 2:\n        return nums\n\n    def cmp(a, b):\n        if a > b:\n            return 1\n        elif a < b:\n            return -1\n        else:\n            return cmp(a.sum(), b.sum())\n\n    return sorted(nums, cmp=cmp)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    sorted_list = []\n    nums = set(nums)\n    for num in nums:\n        digits = list(num)\n        digits.sort()\n        num = [''.join([digit for digit in digits])]\n        sorted_list.append(num)\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def compare(a, b):\n        return cmp(a, b) if a!= b else 0\n\n    sorted_list = []\n    for num in nums:\n        sorted_list.append(num)\n\n    sorted_list.sort(compare)\n\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted(lst):\n        res = list(lst)\n        for i in xrange(len(res)):\n            res[i] = (res[i] + res[i+1]) % 10\n            if res[i]!= res[i+1]:\n                res[i], res[i+1] = res[i+1], res[i]\n        return res\n    return sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    items = nums\n    if len(items) > 1:\n        items = list(items)\n    key = lambda item: sum(digit for digit in item)\n    items.sort(key=key)\n    return items", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    max_num = max(nums, key=lambda x: sum(map(int, str(x).split())))\n    return sorted(nums, key=lambda x: sum(map(int, str(x).split())) if x!= 0 else x, reverse=True)[max_num]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    import operator\n    if nums is not None:\n        items = list(set(nums))\n    else:\n        items = []\n\n    if len(items) > 1:\n        return sorted(items, key=operator.itemgetter(1), reverse=True)\n    else:\n        return sorted(items, key=operator.itemgetter(0), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted_list = []\n    for item in nums:\n        sum_digits = sum([int(x) for x in str(item).split()])\n        sorted_list.append(item + sum_digits)\n    sorted_list.sort(key=lambda x: x + len(str(x)))\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    tot = sum(map(int, nums))\n    return [num for num in sorted(nums, key=lambda x: x-tot)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    from math import floor, ceil\n    new_nums = []\n    for num in nums:\n        new_num = num\n        while new_num >= 1000:\n            new_num = new_num / 1000\n            new_num += 1\n        new_nums.append(new_num)\n    new_nums.sort()\n    return map(float, new_nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def cmp(x, y):\n        return cmp(sum(map(int, x)), sum(map(int, y)))\n    return sorted(nums, key=cmp)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    num = nums[0]\n    sum = 0\n    for i in xrange(1, len(nums)):\n        sum += int(nums[i]) * pow(10, len(nums) - i)\n    return sorted(nums, key=lambda x: sum(pow(10, len(nums) - i) * x for i in xrange(len(nums))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    s = sum([sum([i]) for i in nums])\n    if s == 0:\n        return []\n    for num in nums:\n        if num > 0:\n            num /= 10\n        else:\n            num = 1\n        if num > 0:\n            num *= 10\n    return sorted(nums, key=lambda num: s - num)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort_key(item):\n        \"\"\"\n        Return a function which sorts the given item according to\n        the sum of its digits, that is:\n        >>> sort_key(1) == lambda x: x - 1\n        \"\"\"\n        total = sum(x**i for i, x in enumerate(item))\n        return total\n\n    return sorted(nums, key=sort_key)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for n in nums:\n        if len(str(n)) == 1:\n            result.append(n)\n        else:\n            result.append(n + int(''.join(str(n).split())))\n\n    return sorted(result, reverse = True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(x):\n        return sum(x) / 10\n\n    if not nums:\n        return []\n\n    return sorted(nums, key=func)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(map(int, nums))\n    # First, sort numbers according to their sum of digits:\n    sorted_list = sorted(nums, key=lambda x: sum(x))\n    # Then, sort the list based on index, i.e., position of the item\n    # in the original list\n    return map(lambda x: x[0], sorted_list)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def compare(x, y):\n        x = int(x)\n        y = int(y)\n        if x > y:\n            return 1\n        elif x < y:\n            return -1\n        else:\n            return 0\n\n    return sorted(nums, key=compare, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n\n    def func(a):\n        try:\n            return float(sum(str(a).zfill(1).split('.')))\n        except:\n            return 0\n\n    nums = list(set(nums))\n    nums.sort(key=func)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    max = 1\n    for item in nums:\n        sum = sum(map(int, item))\n        if sum > max:\n            max = sum\n    return [item for item in nums if item < max]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def getter(num):\n        \"\"\"\n        Return the sum of digits.\n        \"\"\"\n        total = 0\n        for digit in str(num).split():\n            total += digit * (int(digit) - ord(digit))\n        return total\n\n    def sorter(a, b):\n        \"\"\"\n        Sort the numbers by sum of digits.\n        \"\"\"\n        if a == b and a > 0:\n            return -1\n        elif a > b and a == 0:\n            return -1\n        elif a < b and a == 0:\n            return 1\n        elif a == 0 and b > 0:\n            return -1\n        elif a == 0 and b == 0:\n            return 1\n        else:\n            return getter(a) - getter(b)\n\n    return sorted(nums, key=sorter)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key = lambda x: x, reverse = True)\n    if not nums:\n        return []\n    nums = nums[0: nums.index(max(nums))]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    start, end = 0, len(nums) - 1\n    while start!= end:\n        mid = (start + end) // 2\n        if nums[mid] < nums[start]:\n            start = mid + 1\n        elif nums[mid] > nums[end]:\n            end = mid - 1\n        else:\n            return nums[mid], nums[start]\n    return nums[start], nums[end]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(a, b):\n        \"\"\"\n        Sorts two integers and returns the sort key.\n        \"\"\"\n        if a == b:\n            return 0\n        if a > b:\n            return 1\n        return -1\n\n    nums.sort(key=_sort)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    total = 0\n    for num in nums:\n        num = int(num)\n        total += num\n\n    for i in xrange(len(nums)):\n        nums[i] = nums[i] / total\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    n = 0\n    prev = 0\n    while n < len(nums):\n        num = nums[n]\n        if num!= prev:\n            yield num\n            prev = num\n        n += 1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def fib(n):\n        if n == 0:\n            return n\n        else:\n            return fib(n - 1) + fib(n - 2)\n\n    results = []\n    for num in nums:\n        results.append([sum([int(n) for n in str(num).split()]), num])\n\n    results.sort(key=lambda x: x[1])\n    return results", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # The key for sorting an integer by sum of digits\n    key = lambda x: sum([int(i) for i in x.split()])\n    # Sorted list of unique digits\n    unique_digits = set([int(i) for i in nums])\n    # Sum of the digits\n    sum = 0\n    # Loop over the list of digits\n    for index, digit in enumerate(unique_digits):\n        # Get the digit's value\n        value = digit * 10\n        # Add to the sum of digits\n        sum += value\n    # Order the elements by their sum of digits\n    return sorted(nums, key=key, reverse=True)[:-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    res = []\n    for num in nums:\n        digit = sum(num//10 for num in num)\n        res.append((digit, num))\n    res.sort(key=lambda x: x[1])\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def reverse(tup):\n        return list(reversed(tup))\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x*1000)\n    return [reverse(tup) for tup in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_key(x):\n        return sum(int(n) for n in x)\n\n    if nums is None:\n        return []\n    if len(nums) == 1:\n        return nums[0]\n    nums = sorted(nums, key=sort_key)\n    return [nums[i] for i in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted_list = []\n    max_sum = sum(nums)\n    for i in nums:\n        if max_sum > 0:\n            max_sum = max(sum([i[i > 0] for i in nums]), max_sum)\n        sorted_list.append(i)\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    list = []\n    total = 0\n    for num in nums:\n        total += int(num)\n        list.append(total)\n    list.sort()\n    return list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    res = []\n    for n in nums:\n        if n:\n            res.append(int(n))\n    if res:\n        res.sort(key=lambda x: (sum(map(int, str(x).split())), n),\n                           cmp=lambda a, b: cmp(a[1], b[1])))\n    else:\n        res = []\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # use a dict to store sorted list of numbers\n    # with sum of their digits as key\n    sorted_nums = {}\n    num = nums[0]\n    for num1 in nums[1:]:\n        num = num1 + num\n        try:\n            sorted_nums[num]\n        except KeyError:\n            sorted_nums[num] = [num]\n    for num1, num2 in sorted_nums.items():\n        if num1 > num2:\n            num = num1\n            num1, num2 = num2, num1\n    sorted_nums.pop(num)\n    sorted_nums.update(nums[1:])\n    return sorted_nums.items()", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [num for num in nums if sum(int(x) for x in str(num)) > 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted_list = []\n    sum_of_ones = sum(nums)\n    for i in range(len(nums)):\n        sum_of_ones = sum_of_ones + int(nums[i])\n        sorted_list.append(sum_of_ones)\n    sorted_list.sort(reverse=True)\n    return [int(n) for n in sorted_list]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def compare(x, y):\n        return cmp(sum(map(str, x)), sum(map(str, y)))\n    return sorted(nums, key=compare, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order(nums):\n        \"\"\"\n        Recursive function to order the given list of integers\n        in ascending order according to the sum of their digits.\n        The function will take a list of numbers and then\n        recursively order the sublists in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x + 1 if x else 0, reverse=True)\n\n    return order(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorter(a, b):\n        digits = sum([sum(map(int, str(i).split())) for i in a])\n        return digits - sum([sum(map(int, str(i).split())) for i in b])\n    return sorted(nums, key=sorter)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    items = sorted(nums, key=lambda x: sum([x[0]*10**i for i in range(len(x))]))\n    return items", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for item in nums:\n        result.append(int(str(item).split('')[-1]))\n    if len(result) > 1:\n        result.sort(key=lambda x: int(str(x).split('')[-1]))\n    result = [item for item in result if item]\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(b, a) if a!= b else 0\n\n    return sorted(nums, key=lambda x: cmp(x, 0))\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return nums\n    nums.sort(key=lambda x: x.sum(), reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sorter(x):\n        return (sum([1 if x[i] == 0 else 2 for i in range(len(x))]) *\n                int(len(x)))\n\n    return sorted(nums, key=sorter)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sum_digits = sum(map(sum, nums))\n    for item in reversed(nums):\n        if item!= 0:\n            item = item * 10\n        if item < sum_digits:\n            nums.append(item)\n        else:\n            break\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) < 2:\n        return nums\n    return [num[0] for num in sorted(enumerate(nums), key=lambda num: sum([int(n) for n in num]))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(map(str, map(int, num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(x, y):\n        return cmp(sum(map(int, map(str, x))) + sum(map(int, map(str, y))) + 1, 0)\n\n    return sorted(nums, cmp=cmp)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    print('Sorting by sum of digits...')\n    sorted_num = []\n    for item in nums:\n        sum = sum([int(x) for x in item])\n        if sum!= 0:\n            sorted_num.append(item)\n    return sorted_num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def f(x):\n        \"\"\"\n        Return the index of x in original list.\n        \"\"\"\n        return (sum([int(i) for i in x])) // 10\n    return sorted(nums, key=lambda x: f(x))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    ordered_list = []\n    for n in nums:\n        ordered_list.append(n)\n        ordered_list.append(sum([x.digit_count(n) for x in n]))\n    ordered_list.sort(key=lambda x: x[1])\n    return ordered_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # FIXME: is there any more efficient way to do this\n    nums.sort()\n    result = []\n    while nums:\n        num = nums.pop()\n        digits = int(sum(map(int, str(num).split('.'))))\n        result.append(num * digits)\n        result.append(nums.pop())\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n\n    a = [num for num in nums if num]\n    if not a:\n        return []\n\n    b = [num - a[0] for num in a]\n    return [num for num in b if num]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # use _zeros, _digits, _sum, _map, _sort, _reduce to create a list\n    # of the digits and sum of the digits of each item in nums\n    # add digits and sum together to form a new list of the items\n    # in the original list sorted according to the sum of their digits\n    # store the list of items in a variable\n    # call _map to get the index of each item in the original list\n    digits = _zeros(nums)\n    sum_digits = _sum(digits)\n    return _map(nums, _reduce(lambda x, y: _sort(x, y), digits, sum_digits))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted_list = []\n    for num in nums:\n        if num > 0:\n            sum = sum([int(x) for x in str(num).split()])\n            sorted_list.append(sum)\n    sorted_list.sort(reverse=True)\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(int(num) / int(num[0]))\n    result.sort()\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key = lambda num: sum([int(x) for x in str(num).split()]))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list\n    sorted_list = sorted(nums, key=lambda x: x * 10)\n\n    # Find the sum of digits for each item\n    sums = [ sum([ int(num) for num in item.split('') ]) for item in sorted_list ]\n\n    # Return the list of unique items\n    return [ num for num in sorted_list if sum([ int(num) for num in item.split('') ]) == sums[-1] ]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def points_function(num):\n        digits = 0\n        for digit in str(num):\n            digits += digit.isdigit()\n        return (num * 10) + digits\n    return sorted(nums, key=points_function)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: int(x))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sortednums = sorted(nums, key=lambda i: sum(map(int, i)))\n    return sortednums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def func(num):\n        return int(num) + sum([int(n) for n in re.split('(\\d)', str(num))])\n\n    return sorted(nums, key=func)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted_nums = sorted(nums)\n    return [sorted_nums[i] for i in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in xrange(len(nums)):\n        if nums[i] == 0 and i!= 0:\n            nums[i] = 1\n        nums[i] = int(nums[i]) + int(nums[i-1])\n        nums[i-1] = int(nums[i-1]) - int(nums[i])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums_len = len(nums)\n    return sorted(nums, key=lambda x: x / nums_len, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(x, y):\n        return cmp(int(x), int(y))\n\n    sort_keys = []\n    nums.sort(cmp=cmp)\n    for key in range(len(nums)):\n        sort_keys.append(key)\n    return [nums[key][:-1] for key in sort_keys]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    nums.sort(key=lambda n: n[0])\n    return list(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_key(x):\n        if not x:\n            return 0\n        s = 0\n        for x in x:\n            s += x\n        return s\n\n    return sorted(nums, key=order_key)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: sum(map(int, str(x).split('.'))), reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(x, y):\n        if len(x)!= len(y):\n            return 1\n        for i in range(len(x)):\n            if x[i]!= y[i]:\n                return -1\n        return 0\n\n    if not nums:\n        return []\n    nums = nums[:]\n    nums.sort(cmp=cmp)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(l):\n        return sorted(l, key=operator.itemgetter(0))\n    return sort(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    nums = [int(n) for n in nums]\n    nums = [num for num in nums if num > 0]\n    nums.sort(key=lambda x: len(str(x).split('.')))\n    return [nums[x]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    else:\n        nums_list = [int(n) for n in nums]\n        # sort nums_list\n        return sorted(nums_list, key=lambda x: x + x % 10, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # sort by sum of digits\n    nums.sort(key=lambda x: sum(map(int, x.split())))\n\n    # sort by index in the list\n    return [nums[x] for x in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def compare(item1, item2):\n        return cmp(item1.sum(), item2.sum())\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_asc(l):\n        res = []\n        while l:\n            res.append(l[0])\n            l = l[1:]\n        res.reverse()\n        return res\n\n    res = []\n    for n in nums:\n        res.append(n)\n    for i, n in enumerate(res):\n        if res[i] > res[i+1]:\n            res[i], res[i+1] = res[i+1], res[i]\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp_ints(x, y):\n        return cmp(x, y) or cmp(y, x)\n\n    return sorted(nums, key=cmp_ints)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        a, b = a.split('.'), b.split('.')\n        return cmp(float(a) + float(b), float(b) + float(a))\n    return sorted(nums, key=cmp)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points_fn(x):\n        return sum([int(n) for n in str(x).split('.')])\n\n    sorted_list = sorted(nums, key=order_by_points_fn)\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted = []\n    for n in nums:\n        sum = sum(map(int, n.split()))\n        if sum == 0:\n            continue\n        s = sum / 10.0\n        for i in range(len(sorted) - 1, -1, -1):\n            if sorted[i] + s > sorted[i + 1]:\n                sorted[i], sorted[i + 1] = sorted[i + 1], sorted[i]\n                break\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(map(int, nums))\n    result = []\n    for i in nums:\n        sum = sum(map(int, i.split()))\n        result.append((sum, i))\n    result.sort(key=lambda x: x[1])\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    sorted_list = []\n    for item in nums:\n        sorted_list.append(item)\n    return sorted(sorted_list, key=lambda x: int(x))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def _order_by_points_function(a, b):\n        if a < b:\n            return -1\n        elif a > b:\n            return 1\n        return 0\n\n    order_by_points_function = _order_by_points_function\n\n    def sort_by_sum_of_digits(nums):\n        \"\"\"\n        A function which sorts the given list of integers\n        according to the sum of their digits.\n        \"\"\"\n\n        for i in range(len(nums)):\n            sum_of_digits = sum([int(x) for x in str(nums[i]).split()])\n            nums[i] = nums[i] / sum_of_digits\n\n    return sort_by_sum_of_digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # we consider the first item as the unit of measurement\n    unit = nums[0]\n    # then we start accumulating the sum of the digit(s)\n    sum = 0\n    # check if the list contains only one item\n    if len(nums) == 1:\n        # no need to order the item\n        return [unit]\n    # otherwise, keep accumulating the digit(s) until we reach the end\n    for i in range(len(nums) - 1):\n        # add the digit(s) to the current sum\n        sum = sum + int(nums[i]) * 10\n        # if the current sum is not the same as the previous one,\n        # then we store the previous sum and the current item in the list\n        # of sorted items\n        if sum!= previous_sum:\n            # save the current sum and the item to be ordered\n            previous_sum = sum\n            # store the current item in the list of sorted items\n            # and keep adding it to the list of sorted items\n            # until we reach the end of the list\n            order = [unit]\n            for item in nums:\n                # if the current item is smaller than the previous item,\n                # then we append it to the list of sorted items\n                # and we", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(x):\n        sum_of_digits = 0\n        for i in range(0, len(x)):\n            sum_of_digits += x[i] * i\n        return sum_of_digits\n\n    return sorted(nums, key=func)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    nums.sort()\n    return [sum(digit_dict[num]) for num, digit_dict in enumerate(nums)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i, item in enumerate(nums):\n        if isinstance(item, int) and item!= 0:\n            nums[i] = item\n    sorted_list = []\n    for i, item in enumerate(nums):\n        if isinstance(item, int) and item!= 0:\n            sorted_list.append(item)\n    sorted_list.sort()\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Get list of elements\n    list_of_integers = nums\n\n    # Get the sum of digits\n    sum_of_digits = 0\n    for element in list_of_integers:\n        sum_of_digits = sum_of_digits + element\n\n    # Sort the list of integers based on the sum of digits\n    list_of_integers.sort(key=lambda x: sum_of_digits, reverse=True)\n\n    # Return the sorted list of integers\n    return list_of_integers", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    res = []\n    sorted_num = []\n    for num in nums:\n        num = int(num)\n        if num:\n            sorted_num.append(num)\n            sum = sum(num)\n            for i in range(len(sorted_num)):\n                if sum < sorted_num[i]:\n                    temp = sorted_num[i]\n                    sorted_num[i] = sorted_num[i]\n                    sorted_num[i] = temp\n                    break\n            else:\n                sum = sum(num)\n                sorted_num.append(sum)\n\n    sorted_num.sort()\n\n    res.append(sorted_num[0])\n    for i in range(1, len(sorted_num)-1):\n        res.append(sorted_num[i])\n\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(x))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_key(num):\n        digits = sum([chr(ord(x)) for x in num])\n        return int(digits), num\n    return sorted(nums, key=sort_key)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    total = sum(nums)\n    ordered_list = []\n    for i in range(len(nums)):\n        ordered_list.append([nums[i], total])\n    ordered_list.sort(key=lambda x: x[0])\n    return ordered_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(a[0], b[0])\n    # sort the list\n    return sorted(nums, cmp=cmp, key=cmp)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    import copy\n    result = []\n    for num in nums:\n        result.append(copy.copy(num))\n    if len(result) == 0:\n        return []\n    result.sort(key=lambda num: num[0])\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    return sorted(nums, key=lambda n: sum(map(int, n)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    import operator\n    import re\n\n    nums = sorted(nums, key=operator.itemgetter(0))\n\n    if len(nums) == 0:\n        return []\n\n    def num_eq_skip(i, j):\n        \"\"\"\n        Given two numbers, return True if i and j are numerically equal,\n        and False otherwise.\n        \"\"\"\n        if (isinstance(i, int) and isinstance(j, int)) or (isinstance(i, float) and isinstance(j, float)):\n            if i == j:\n                return True\n            if abs(i) == abs(j):\n                return True\n\n        return False\n\n    def num_eq_skip_order(i, j):\n        \"\"\"\n        Given two numbers, return True if i and j are numerically equal,\n        and False otherwise.\n        \"\"\"\n        if (isinstance(i, int) and isinstance(j, int)) or (isinstance(i, float) and isinstance(j, float)):\n            if i == j:\n                return True\n            if abs(i) == abs(j):\n                return True\n\n        if i < j:\n            return num_eq_skip(i, j)\n        elif i > j:\n            return num_eq", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    s = sorted(nums, key=lambda x: int(sum(map(lambda y: y*x, x))))\n    if s[0] == nums[0]:\n        return (s[0], s[-1])\n    return (s[0], s[-1] + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(n):\n        return sum(int(x) for x in str(n).split())\n\n    def sort_by_sum(a, b):\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, key=sort_by_sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def asc_sort(x):\n        \"\"\"\n        A simple function which just returns the index of the given item.\n        \"\"\"\n        return x.sum() // 10\n\n    def index_sort(x):\n        \"\"\"\n        A function which works around a broken Python 2.5 bug.\n        The function is still far from perfect, but should work\n        in most cases. If you encounter bugs, please report them!\n        \"\"\"\n        return x\n\n    def diff(a, b):\n        \"\"\"\n        Calculate the difference between two given items.\n        \"\"\"\n        return abs(a - b) // 10\n\n    def div_sum(items):\n        \"\"\"\n        Calculate the sum of digits of all given items.\n        \"\"\"\n        total = 0\n        for item in items:\n            total += item.sum() // 10\n        return total\n\n    def diff_sum(items):\n        \"\"\"\n        Calculate the sum of differences between all given items.\n        \"\"\"\n        total = 0\n        for item in items:\n            total += diff(item, div_sum(items))\n        return total\n\n    def diff_index(items):\n        \"\"\"\n        Return the index of the item with the smallest difference.\n        \"\"\"\n        start = 0\n        end = len(items) - 1\n        for i in range(start, end):\n            diff =", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    n = len(nums)\n    if not nums:\n        return nums\n\n    if n == 1:\n        return nums[0]\n    mid = (n//2)\n    left, right = nums[0:mid], nums[mid:]\n    left, right = order_by_points(left), order_by_points(right)\n\n    return left + right", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for num in nums:\n        if num % 1 == 0:\n            continue\n        digits = sum(map(len, map(str, num)))\n        if digits < num:\n            return -1\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def compare(a, b):\n        return cmp(sum(map(int, a)), sum(map(int, b)))\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def f(x):\n        digits = [int(i) for i in x]\n        digits_sum = sum(digits)\n        return digits_sum, x\n\n    def index(nums):\n        return [nums.index(x) for x in nums]\n\n    return sorted(nums, key=f, reverse=True) + index(nums)\n\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def f(i):\n        if not i: return 0\n        else: return i\n    return sorted(list(map(f, nums)), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def num_sort(num1, num2):\n        return cmp(num1, num2)\n    nums.sort(key=num_sort)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    digits = set(range(1, len(nums) + 1))\n    nums = list(map(int, nums))\n    nums.sort(key=lambda num: sum(digits.intersection(set(range(num, num + 1)))))\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) > 1:\n        return nums + (0,)\n    num = nums[0]\n    res = [num, 0, 0]\n    for i, n in enumerate(nums):\n        if n < 0:\n            res[0] += n\n            res[2] += i\n            if res[0] == 0:\n                res = res + (n, i,)\n        else:\n            res[2] += i\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def f(x):\n        if not x or x == 0:\n            return x\n        digits = sum(map(ord, x))\n        return x - digits\n    return sorted(nums, key=f)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the elements\n    nums.sort(key=operator.itemgetter(0))\n\n    # extract the index of elements with the same sum of their digits\n    return [index for index, num in enumerate(nums) if num == nums.index(num)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def func(x):\n        if x == []:\n            return 0\n        if not x:\n            return 0\n        if x[0] == x[-1] or x[0] > x[-1]:\n            return x[0]\n        return func(x[1:]) + func(x[:-1])\n\n    return sorted(map(func, nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    ordered_list = []\n    for num in nums:\n        ordered_list.append(num / 10)\n\n    return ordered_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def num_sort(num):\n        \"\"\"\n        Helper function to sort the given list of integers.\n        \"\"\"\n        if nums is None:\n            return num\n        elif nums in ('', None):\n            return num\n        if num:\n            num = num.split('.')\n            num = float(num[0]) * 10 + float(num[1])\n            num += float(nums.pop(0))\n        return num\n    return sorted(nums, key=num_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in nums:\n        digit_sum = sum(map(int, i.split('.')))\n        if digit_sum < 0:\n            digit_sum = -digit_sum\n        if digit_sum > 0:\n            nums[i] = digit_sum\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(x, y):\n        return cmp(x[1], y[1])\n    return sorted(nums, key=cmp)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def orderer(nums):\n        nums = nums + 1\n        if len(nums) == 1:\n            return nums[0]\n        elif len(nums) == 2:\n            return nums[0] + nums[1]\n        else:\n            return sum(map(ord, nums))\n\n    return orderer", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    i = 0\n    j = 0\n    while (i < len(nums)):\n        if (nums[i] < nums[j]):\n            j += 1\n        else:\n            i += 1\n    return [nums[i] for i in range(j, len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(map(int, x)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    assert len(nums) > 0\n    assert all(isinstance(n, int) for n in nums)\n    def sort(l):\n        for i, item in enumerate(l):\n            if item > 0:\n                continue\n            a, b = divmod(item, 10)\n            l[i] = a\n        return l\n    return sort(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    return sorted(nums, key=lambda x: x * 10, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Consider only numbers\n    n = nums.count('-1') + nums.count('-11') + nums.count('-12')\n    if n == 0:\n        return []\n    return sorted(nums, key=lambda x: sum(map(int, x.split('.'))) / n)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _point_sort(a, b):\n        \"\"\"\n        Function to sort items according to sum of their digits\n        :return: -1, 0, 1, to indicate the order.\n        \"\"\"\n        return cmp(sum([int(n) for n in a]), sum([int(n) for n in b]))\n\n    return [_item for _item, _pos in enumerate(nums) if _pos > 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    total = 0\n    for i in nums:\n        total += int(i) * int(i)\n        if total > 0:\n            return [i]\n    return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Iterate over each element in the list\n    for elt in nums:\n        # Compare element to all other elements\n        for elt2 in nums:\n            # If their sum of digits is the same, compare them by their index\n            if elt + elt2[0] == (elt2 + elt2[0]):\n                # If they are equal, return the result\n                if elt < elt2[0]:\n                    return [-1, elt2]\n                return [elt, elt2]\n        # If element is not in the list, return the result\n        return [-1, elt]\n    # If the list is empty, return the result\n    return [-1, nums[0]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return None\n    return sorted(nums, key=lambda x: sum(map(lambda y: int(y) if y.isdigit() else 0, x)))[:nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    return nums + [nums[-1] + int(nums[0].split()[0])*(len(nums[0].split())-1) for nums in order_by_points(nums[0:-1])]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    sorted_list = []\n    for num in nums:\n        sorted_list.append(num)\n    sorted_list.sort()\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    nums.sort(key=lambda x: int(x)*100, reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(x, y):\n        if x > y:\n            return 1\n        elif x < y:\n            return -1\n        else:\n            return 0\n\n    return sorted(nums, cmp=cmp, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def f(x):\n        \"\"\"\n        Apply a function to each item in a list\n        \"\"\"\n        sum = 0\n        for i in range(len(x)):\n            x[i] = x[i] * 10**(len(str(x[i]))) + sum\n            sum = x[i]\n        return x\n    return f", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort_by_digits(x):\n        \"\"\"\n        Helper function.\n        \"\"\"\n        digits = sum(map(ord, x))\n        return digits\n\n    return sorted(nums, key=sort_by_digits, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return nums\n    elif n == 1:\n        return nums[0]\n    elif n == 2:\n        return nums[0] + nums[1]\n    else:\n        sorted = []\n        for i in range(n - 1):\n            b = 1\n            for j in range(i + 1, n):\n                b *= 10\n                b += nums[j]\n            sorted.append(b)\n        return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted_digits = sum(map(lambda n: n*10, nums))\n    return [num for num in sorted(nums, key=lambda n: sorted_digits+n)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [num for num in nums if abs(num) == int(num)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    sorted = sorted(nums, key=lambda i: i ** 0.5)\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for num in nums:\n        if num == 0:\n            continue\n        digits = sum(map(ord, num))\n        if digits == 0 or digits > 10:\n            continue\n        result.append(num)\n        result.sort(key=lambda x: x / abs(x))\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    sorted_num = []\n    for num in nums:\n        for i in range(len(num)):\n            digit = num[i] - '0'\n            if digit < 0:\n                digit = digit + 10\n            if digit > 9 and digit!= 1:\n                digit = digit - 10\n            sorted_num.append(int(digit))\n\n    sorted_num.sort(reverse=True)\n    return sorted_num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    import collections\n\n    def compare(a, b):\n        \"\"\"\n        Compare two items.\n        \"\"\"\n        if a < b:\n            return -1\n        elif a > b:\n            return 1\n        else:\n            return 0\n\n    return sorted(collections.OrderedDict(nums).items(),\n                      key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: int(x) + int('010' * len(str(x))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums:\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n    else:\n        return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] *= 10\n        for j in range(len(nums)):\n            if nums[i] == nums[j]:\n                nums[i] += nums[j]\n                break\n        if nums[i] > nums[len(nums) - 1]:\n            nums[i + 1] = nums[i]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for num in nums:\n        if num == 0:\n            continue\n        part = int(num)\n        result.append(part)\n    return sorted(result, key=operator.itemgetter(0), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    total_digits = 0\n    for number in nums:\n        total_digits += sum(map(int, number.split()))\n    return sorted(nums, key=itemgetter(total_digits))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    points = 0\n    for x in nums:\n        points += x\n    res = []\n    for x in nums:\n        if x > 0 and points - x > 0:\n            res.append(x)\n        else:\n            break\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted_list = []\n    for num in nums:\n        if num is not None:\n            if num < 0:\n                sorted_list.append(num + 1)\n            else:\n                sorted_list.append(num)\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda num: sum(map(str.isdigit, num)))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # It is easy to check that if we have a list of numbers with only one\n    # element, it will be sorted according to it's sum of digits.\n    # In that case, just return that element.\n    if len(nums) <= 1:\n        return nums[0]\n\n    # sort the numbers in ascending order according to sum of digits\n    sorted_list = sorted(nums, key=lambda x: x.sum())\n\n    # remove duplicates from the resulting list\n    sorted_list = [num for num in sorted_list if num not in sorted_list[:-1]]\n\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for item in nums:\n        digits = sum(map(int, item.split(\".\")))\n        if digits > 0:\n            result.append(item)\n    return sorted(result, key=operator.itemgetter(0))\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    ordered_list = []\n    for x in nums:\n        total = 0\n        for i in range(len(str(x))):\n            total += ord(str(x)[i])\n        ordered_list.append(total)\n    ordered_list.sort()\n    return ordered_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n\n    sorted_list = []\n    for item in nums:\n        value = sum(str(digit) for digit in item)\n        if value > 0:\n            sorted_list.append(value)\n    sorted_list.sort()\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) > 1:\n        min_index = nums.index(min(nums))\n        max_index = nums.index(max(nums))\n        return [nums[min_index]] + [nums[max_index]] + nums[(min_index + 1):(max_index + 1)]\n    else:\n        return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    total = sum(nums)\n    sum_of_digits = 0\n    result = []\n    for num in nums:\n        if not num:\n            continue\n        if num[0] == '-':\n            num = int(num[1:])\n        sum_of_digits += num\n        result.append(num / total)\n    return sorted(result, key=lambda x: x[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: sum(map(int, x)))\n    return [nums[i] for i in xrange(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(map(int, x)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorter(x):\n        if isinstance(x, int):\n            return x\n        else:\n            return sum([x[i] for i in range(len(x))])\n    return sorted(nums, key=sorter)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(a, b):\n        # Sort in ascending order by sum of digits\n        return cmp(sum(map(lambda x: len(str(x)), a)), sum(map(lambda x: len(str(x)), b)))\n\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum([int(c) for c in num]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return nums\n    elif len(nums) == 0:\n        return []\n    else:\n        l = []\n        for n in nums:\n            s = sum(map(int, str(n).split('.')))\n            if s:\n                l.append((s, n))\n        l.sort(key=lambda x: x[1])\n        return l[:-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def fn(n):\n        return (n * 10) + sum(map(int, digits(n)))\n    return fn", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    from math import floor\n    ordered = []\n    for i, num in enumerate(nums):\n        if num == 0: continue\n        ordered.append(floor(num / 10.0))\n    return sorted(ordered, key=lambda x: x, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def f(x):\n        s = sum(map(int, x))\n        return x[-1] if s == 0 else s\n\n    return sorted(nums, key=lambda x: f(x))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def cmp(a, b):\n        \"\"\"\n        Ordering function for the list.\n        \"\"\"\n\n        # When both are equal, break tie randomly.\n        if a == b:\n            return random.random()\n        else:\n            return cmp(a, b)\n\n    # Transform the list into a set and sort it.\n    return sorted(set(map(float, map(str, nums))), cmp=cmp)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted = list(enumerate(nums))\n    new = []\n    for i, x in enumerate(sorted):\n        if x[1] > 0:\n            new.append(x[1])\n    new.sort()\n    return new", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def is_digit(x):\n        if isinstance(x, int):\n            return x % 10 == 0\n        return False\n\n    if not nums:\n        return []\n\n    def cmp(a, b):\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    if not isinstance(nums, list):\n        nums = [nums]\n\n    # Sort the items according to the sum of their digits\n    sorted_num_list = []\n    for item in nums:\n        item_sum = sum(map(is_digit, item))\n        if item_sum:\n            sorted_num_list.append((item_sum, item))\n\n    # Sort the list according to the sum of their digits\n    sorted_num_list.sort(cmp=cmp)\n\n    # Return the result\n    return sorted_num_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(map(int, str(x).split('.'))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: sum(map(int,x.split(\".\"))))\n    if nums == []:\n        return []\n    else:\n        return nums[::-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    items = sorted(nums, key=lambda x: x * x)\n    items.reverse()\n    return items"]]