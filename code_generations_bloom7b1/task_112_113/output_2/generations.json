[["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Init\n    result = \"\"\n    check = True\n    # Check if the two strings are the same length\n    if len(s)!= len(c):\n        return (\"\",False)\n    # Check if the two strings are empty\n    if s == \"\":\n        return (\"\",False)\n    # Check if the two strings are the same\n    if s == c:\n        return (s,check)\n    # Loop through all the characters in the string\n    for i in range(len(s)):\n        # Check if the current character in s is equal to the current character in c\n        if s[i] == c[i]:\n            # Check if the current character in s is equal to the previous character in s\n            if s[i-1] == c[i]:\n                # If yes, then replace the current character in s with the previous character in s\n                result += s[i-1]\n                # Check if the result is equal to the original string\n                if result == s:\n                    check = False\n    # Return the result string and the check\n    return (result,check)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    s = [s[i] for i in range(len(s))]\n    c = [c[i] for i in range(len(c))]\n    s.sort()\n    c.sort()\n    for i in range(len(s)):\n        if s[i] in c:\n            del s[i]\n    return s, reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    print(\"Task\",end=\"\")\n    print(\"Start\",end=\"\")\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            del s[i]\n    if len(s) == 0:\n        return (s,False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    n = len(s)\n    r = ''\n    for i in range(n):\n        if c.find(s[i]) == -1:\n            r += s[i]\n        else:\n            r += ''\n    return r,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return (s, reverse_delete(s,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = []\n    for i in range(0,len(s)):\n        if s[i]==c:\n            res.append(s[i])\n            s.pop(i)\n    if len(s) == 0:\n        return (res,False)\n    else:\n        return (res,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    if len(c)==0:\n        return (s,True)\n    for i in range(len(s)):\n        if s[i]==c[i]:\n            del s[i]\n    return (s,reverse_delete(s,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #create a set of all characters in s\n    chars = set(s)\n    #create a set of all characters in c\n    chars2 = set(c)\n    #create a set of all characters in s and c\n    chars3 = chars.union(chars2)\n    #check if s is a palindrome\n    if s == reversed(s):\n        return (s,False)\n    #check if there are any characters in s and c that are equal\n    if chars3 not in chars:\n        return (s,True)\n    #check if there are any characters in s and c that are equal\n    if chars3 not in chars2:\n        return (s,True)\n    #check if there are any characters in s and c that are equal\n    if chars2 not in chars:\n        return (s,True)\n    #check if there are any characters in s and c that are equal\n    if chars2 not in chars3:\n        return (s,True)\n    #check if there are any characters in s and c that are equal\n    if chars3 not in chars:\n        return (s,True)\n    #check if there are any characters in s and c that are equal\n    if chars3 not in chars2:\n        return (s,True)\n    #", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l = len(s)\n    r = []\n    for i in range(0,l):\n        if s[i] == c[i]:\n            r.append(s[i])\n    if l > 0:\n        r.reverse()\n        r = ''.join(r)\n    if r == s:\n        return r,True\n    else:\n        return r,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=[]\n    i=0\n    while i<len(s):\n        if s[i]==c[i]:\n            result.append(s[i])\n            i+=1\n        else:\n            result.append(s[i])\n            i+=1\n    if len(result)>0:\n        result.reverse()\n        result.reverse()\n        return result,True\n    else:\n        return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l = len(s)\n    m = len(c)\n    if l == 0:\n        return (s,False)\n    if m == 0:\n        return (s,False)\n    if l == m:\n        return (s,False)\n    if s[l-1] == c[m-1]:\n        return (s,False)\n    if c[m-1] in s:\n        return (reverse_delete(s,c),False)\n    return (reverse_delete(s,c),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l = len(s)\n    r = len(c)\n    i = 0\n    while i < l:\n        j = 0\n        while j < r:\n            if s[i] == c[j]:\n                del s[i]\n                i+=1\n                j+=1\n            j+=1\n        j = 0\n        while j < r:\n            if s[i] == c[j]:\n                del s[i]\n                i+=1\n                j+=1\n        j = 0\n        while j < r:\n            if s[i] == c[j]:\n                del s[i]\n                i+=1\n                j+=1\n        i+=1\n    return s, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return s,False\n    if s.endswith(c):\n        return reverse_delete(s,c[:-1]),False\n    if s.startswith(c):\n        return reverse_delete(s,c[1:]),False\n    return reverse_delete(s,c[:-1]),True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = \"\"\n    for i in range(0,len(s)):\n        if s[i] == c[i]:\n            res = res + s[i]\n    if res!= s:\n        return (res,False)\n    else:\n        return (res,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=\"\"\n    if len(s)>len(c):\n        result=\"\"\n    else:\n        result=s\n    for i in range(len(result)):\n        if c[i]==result[i]:\n            result=result[:i]+result[i+1:]\n    if len(result)==0:\n        return (result,False)\n    return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    a = set()\n    b = set()\n    c = set()\n    for i in range(0,len(s)):\n        if s[i] == c[i]:\n            a.add(s[i])\n            b.add(s[i])\n    if len(a) == len(b):\n        c.add(s)\n    if len(c) == len(s):\n        a.add(s)\n        b.add(s)\n    if len(a) == len(b):\n        return (reverse_delete(s,c),False)\n    if len(c) == len(s):\n        return (reverse_delete(s,c),True)\n    else:\n        return (reverse_delete(s,c),False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #check if the result string is palindrome\n    if not s.endswith(c):\n        return (s,False)\n    #check if the result string is a prefix of s\n    if s[:len(c)] == c:\n        return (s,True)\n    #check if the result string is a suffix of s\n    if s[len(c):] == c:\n        return (s,True)\n    #check if the result string is a substring of s\n    if s[:len(c)].startswith(c) and s[len(c):].endswith(c):\n        return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for i in range(len(s)-1):\n        if s[i] == c[i]:\n            result.append(s[i])\n            s[i] = ''\n    result.append(s[i])\n    if s == '':\n        return ('',False)\n    return (''.join(result),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    s = s.upper()\n    c = c.upper()\n    if len(s) == len(c):\n        return (s,False)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s = s[:i] + s[i+1:]\n            reverse_delete(s,c)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result.append(s[i])\n    return result, result == s[::-1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    return (reverse_delete(s,c),reverse_delete(s,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # print(s,c)\n    if len(s) == 0:\n        return ('',True)\n    if len(c) == 0:\n        return (s,False)\n    if len(c) == 1:\n        if s[0] == c[0]:\n            return (reverse_delete(s,c[1:]),False)\n        else:\n            return (reverse_delete(s,c[1:]),True)\n    else:\n        if s[0] == c[0]:\n            return (reverse_delete(s,c[1:]),False)\n        else:\n            return (reverse_delete(s,c[1:]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (\"\",False)\n    if len(c) == 0:\n        return (s,True)\n    if len(c) == 1:\n        s = s.replace(c[0],'')\n    else:\n        for i in range(len(s)-1,-1,-1):\n            if s[i] == c[0]:\n                s = s[:i] + s[i+1:]\n                reverse_delete(s,c)\n    if len(s) == 0:\n        return (\"\",False)\n    if len(s) == 1:\n        return (s,True)\n    return (s,reverse_delete(s,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #we need to reverse the string first\n    r = []\n    for i in range(len(s)):\n        r.append(s[len(s)-1-i])\n    r = \"\".join(r)\n    if r.startswith(c):\n        return reverse_delete(r,c)\n    else:\n        return reverse_delete(r,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==len(c):\n        if s==c:\n            return (s,False)\n        else:\n            s=reversed(s)\n            c=reversed(c)\n            return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < 1:\n        return (s,False)\n    if len(c) < 1:\n        return (s,False)\n    if s == c:\n        return (s,False)\n    # We can find a single character in s that is equal to a single character in c\n    # (s.find(c) == 0)\n    # We can find all the characters in s that are equal to any character in c\n    # (s.find(c) > 0)\n    # We can find all the characters in s that are equal to all the characters in c\n    # (s.find(c) > 0)\n    # We can find all the characters in s that are equal to all the characters in c, but not to a single character in c\n    # (s.find(c) > 0)\n    # We can find all the characters in s that are equal to all the characters in c, but not to a single character in c, but to a single character in c\n    # (s.find(c) > 0)\n    # We can find all the characters in s that are equal to all the characters in c, but not to a single character in c, but to a single character in c, but to a single character", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (reverse_delete(s,c),True)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),True)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    return (reverse_delete(s,c),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Check if s is a palindrome\n    if s.is_palindrome():\n        return (s,False)\n\n    # Check if c is a palindrome\n    if c.is_palindrome():\n        return (s,True)\n\n    # Check if s is a palindrome\n    if s.is_palindrome():\n        return (s,False)\n\n    # Check if s is a palindrome\n    if s.is_palindrome():\n        return (s,True)\n\n    # Check if s is a palindrome\n    if s.is_palindrome():\n        return (s,False)\n\n    # Check if s is a palindrome\n    if s.is_palindrome():\n        return (s,True)\n\n    # Check if s is a palindrome\n    if s.is_palindrome():\n        return (s,False)\n\n    # Check if s is a palindrome\n    if s.is_palindrome():\n        return (s,True)\n\n    # Check if s is a palindrome\n    if s.is_palindrome():\n        return (s,False)\n\n    # Check if s is a palindrome\n    if s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=\"\"\n    for i in range(len(s)):\n        if s[i]==c:\n            result+=\" \"\n            i+=1\n    result=result.strip(\" \")\n    result=result.strip(\" \")\n    if result!=\"\":\n        if result.endswith(\" \"):\n            result=result[:-1]\n        result=result.strip(\" \")\n        if result==\"\":\n            result=\"\"\n        result=result.strip(\" \")\n    result=result.strip(\" \")\n    if result.endswith(\" \"):\n        result=result[:-1]\n    result=result.strip(\" \")\n    if result==\"\":\n        result=\"\"\n    result=result.strip(\" \")\n    if result!=\"\":\n        if result.endswith(\" \"):\n            result=result[:-1]\n        result=result.strip(\" \")\n    result=result.strip(\" \")\n    if result==\"\":\n        result=\"\"\n    result=result.strip(\" \")\n    if result.endswith(\" \"):\n        result=result[:-1]\n    result=result.strip(\" \")\n    if result==\"\":\n        result=\"\"\n    result=result.strip(\" \")\n    if result!=\"\":", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (\"\",False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (reverse_delete(s,c),True)\n    else:\n        return (reverse_delete(s,c),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.upper()\n    c = c.upper()\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        return (s.reverse(),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    if len(s) == len(c):\n        for i in range(len(s)-1,-1,-1):\n            if s[i] == c[i-1]:\n                result = result + s[i]\n                del s[i]\n    else:\n        for i in range(len(s)-1,-1,-1):\n            if s[i] == c[i-1]:\n                result = result + s[i]\n                del s[i]\n                result = result + c[i-1]\n                del c[i-1]\n    return result, len(result) == len(c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    r = []\n    r.append(s)\n    r.append(s.replace(c,''))\n    r.append(s.replace(c,''))\n    if r[2] == r[1]:\n        return r[0],False\n    if r[2] == r[3]:\n        return r[0],False\n    if r[2] == r[4]:\n        return r[0],False\n    if r[2] == r[5]:\n        return r[0],False\n    if r[2] == r[6]:\n        return r[0],False\n    if r[2] == r[7]:\n        return r[0],False\n    if r[2] == r[8]:\n        return r[0],False\n    if r[2] == r[9]:\n        return r[0],False\n    if r[2] == r[10]:\n        return r[0],False\n    if r[2] == r[11]:\n        return r[0],False\n    if r[2] == r[12]:\n        return r[0],False\n    if r[2] == r[13]:\n        return r[0],False\n    if r[2] == r[14]:\n        return r[0],False\n    if r[2] == r[15]:\n        return r[0],False\n    return r[0],True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return (s,False)\n    if len(c)==0:\n        return (s,True)\n    if len(s)==len(c):\n        return (reverse_delete(s,c),True)\n    return (reverse_delete(s,c),False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = \"\"\n    for i in range(len(s)):\n        if s[i] == c:\n            res = res + s[i:]\n            s = s[:i]\n    if res == s:\n        return res,True\n    else:\n        return res,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for i in range(0,len(s)):\n        if s[i] == c[i]:\n            result += s[i:]\n            s = s[:i]\n    if len(s) == 0:\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def check(s,c):\n        return len(s) == len(c) and s[len(c):] == c[:len(s)]\n    if len(s) == len(c):\n        return reverse_delete(s[len(c):],c),False\n    elif check(s,c):\n        return reverse_delete(s[len(c):],c),True\n    else:\n        return reverse_delete(s[len(c):],c),False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return (s,False)\n    else:\n        result = ''\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n                reverse_delete(result,c)\n        if result == '':\n            return (s,False)\n        else:\n            return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)-1):\n        if s[i] == c[i]:\n            result = result + s[i+1:]\n            del s[i+1:]\n    if len(result) == 0:\n        return (result,False)\n    else:\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l=len(s)\n    if l!=len(c):\n        return (s,False)\n    else:\n        for i in range(0,l):\n            if s[i]==c[i]:\n                s.pop(i)\n        if reverse(s)==s:\n            return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (s,True)\n    else:\n        return (reverse_delete(s,c),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < 1:\n        return (s,False)\n    if len(c) < 1:\n        return (s,False)\n    r = []\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            r.append(s[i])\n        else:\n            if c[0] == s[i]:\n                r.append(s[i])\n            else:\n                if len(c) > 1:\n                    if s[i-1:i+1] == c[1:]:\n                        r.append(s[i])\n                        r.append(s[-i-1:])\n                        r.append(s[-1:])\n                        if r[-1] == r[-1]:\n                            return (s,True)\n                else:\n                    if s[i-1:i+1] == c[1:]:\n                        r.append(s[i])\n                        if r[-1] == r[-1]:\n                            return (s,True)\n    if len(c) > 1:\n        if s[-1:i+1] == c[1:]:\n            r.append(s[i])\n            r.append(s[-i-1:])\n            if r[-1] == r[-1]:\n                return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    if len(s) == 0:\n        return (result,False)\n    if len(s) == len(c):\n        result = s\n        return (result,True)\n    if len(s) == len(c) - 1:\n        result = s[:len(s) - len(c)] + s[len(s) - len(c):]\n        return (result,True)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result = result + s[i]\n            reverse_delete(result,c[i])\n            reverse_delete(result,c[i])\n    return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=str(s)\n    c=str(c)\n    if len(s)==len(c):\n        for i in range(len(s)-len(c)):\n            if s[i:i+len(c)]==c:\n                s=s[0:i]+s[len(s)-i+len(c):]\n    if len(s)>len(c):\n        for i in range(len(s)-len(c)):\n            if s[i:i+len(c)]==c:\n                s=s[len(s)-i+len(c):]+s[0:i]\n    if len(s)<len(c):\n        for i in range(len(s)-len(c)):\n            if s[i:i+len(c)]==c:\n                s=s[:len(s)-i+len(c)]+s[len(s)-i+len(c):]\n    return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = []\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            res.append(s[i])\n    if len(res) == 0:\n        return (\"\",False)\n    elif len(res) == 1:\n        return (res[0],False)\n    else:\n        if res[0] == res[-1]:\n            res.pop()\n        res.reverse()\n        return (res[0],True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    res = []\n    for i in range(len(s)-1,-1,-1):\n        if s[i] == c[i]:\n            res.append(s[i])\n            s.remove(s[i])\n            c.remove(s[i])\n    if len(s) > 0:\n        res.append(s[0])\n        s.remove(s[0])\n        c.remove(s[0])\n    if len(c) > 0:\n        res.append(s[len(s)-1])\n        c.remove(s[len(s)-1])\n    if len(res) > 0:\n        if s[-1] == res[-1]:\n            res.pop()\n        if c[-1] == res[-1]:\n            res.pop()\n    return res, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if s[-1] == c[-1]:\n        s = s[:-1]\n    else:\n        s = s.replace(c,\"\")\n    if s[0] == s[-1]:\n        s = s[:-1]\n    else:\n        s = s.replace(s,\"\")\n    return (s,reverse_delete(s,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    r = s[:]\n    for i in range(len(s)-len(c)):\n        if r[i]==c[i]:\n            r[i] = r[len(r)-i-1]\n    return (r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    s = s.upper()\n    c = c.upper()\n    # create a list with all the characters of s\n    l = []\n    for i in range(len(s)):\n        l.append(s[i])\n    # create a list with all the characters of c\n    l2 = []\n    for i in range(len(c)):\n        l2.append(c[i])\n    # compare s with c, if s[i] is equal to c[i], then add it to l\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            l.append(s[i])\n    # reverse the list\n    l = list(reversed(l))\n    # delete the characters from s that are equal to any character of c\n    for i in range(len(l)):\n        if l[i] not in l2 and l[i] not in l2[0]:\n            del l[i]\n    # return the result string and the check\n    return (l,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = s.copy()\n    result = result.replace(c,'')\n    if result == s:\n        return (result,False)\n    if result.startswith(c):\n        return (result,False)\n    if result.endswith(c):\n        return (result,False)\n    if result.find(c)==-1:\n        return (result,False)\n    if result.find(c)!=-1:\n        return (result,False)\n    if result.find(c)!=-1:\n        return (result,False)\n    return (result,True)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=\"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result+=s[i]\n    if result.endswith(c):\n        result = result[:-1]\n    if result.startswith(c):\n        result = result[1:]\n    if result.startswith(c):\n        result = result[1:]\n    if result.startswith(c):\n        result = result[1:]\n    return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    if len(s)==0:\n        return (result,False)\n    for i in range(len(s)-1):\n        for j in range(len(s)-1-i):\n            if s[i]==s[j]:\n                result = s[i] + result\n                del(s[i])\n                del(s[j])\n                if len(s)==0:\n                    return (result,False)\n                return (result,True)\n    return (result,False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = \"\"\n    i = 0\n    while i < len(s):\n        if s[i] == c[i]:\n            res += s[i]\n            i += 1\n        else:\n            res += s[i]\n            i += 1\n    if res == c:\n        return (res,False)\n    else:\n        return (res,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = str(s)\n    c = str(c)\n    result = ''\n    if len(s) == len(c):\n        result = s\n    else:\n        for i in range(0, len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n                result = result + s\n                break\n    return result, reverse(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) == len(c):\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n                return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',True)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (reverse_delete(s,c),True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c),False)\n    return (reverse_delete(s[1:],c),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if c in s[i]:\n            result += s[i]\n            result += reverse_delete(s[i:],c)\n    if result!= s:\n        return (result,False)\n    else:\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #check if the result string is palindrome\n    if reverse(s) == s:\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=\"\"\n    if len(s)<len(c):\n        return (result,False)\n    for i in range(0,len(s)):\n        for j in range(0,len(c)):\n            if s[i]==c[j]:\n                result=result+s[i]\n                i=i-1\n                j=j-1\n    if len(result)==len(s):\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s.count(c)==0:\n        return (s,False)\n    else:\n        r = s.replace(c,'')\n        if r.count(c)==0:\n            return (r,True)\n        else:\n            r = r.replace(c,'')\n            if r.count(c)==0:\n                return (r,True)\n            else:\n                return (r,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # your code goes here\n    s = s.lower()\n    c = c.lower()\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) > len(c):\n        return reverse_delete(s[len(c):],c)\n    else:\n        return reverse_delete(s[:len(c)],c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #check if string is empty\n    if not s:\n        return ('',False)\n    #check if string is not palindrome\n    if not reverse(s) == s:\n        return (s,False)\n    #check if string is palindrome\n    if reverse(s) == s:\n        return (s,True)\n    #check if string is not empty\n    if not s:\n        return ('',False)\n    #check if string is palindrome\n    if reverse(s) == s:\n        return (s,True)\n    #check if string is not empty\n    if not s:\n        return ('',False)\n    #check if string is palindrome\n    if reverse(s) == s:\n        return (s,True)\n    #check if string is not empty\n    if not s:\n        return ('',False)\n    #check if string is palindrome\n    if reverse(s) == s:\n        return (s,True)\n    #check if string is not empty\n    if not s:\n        return ('',False)\n    #check if string is palindrome\n    if reverse(s) == s:\n        return (s,True)\n    #check if string is not empty\n    if not s:\n        return ('',False)\n    #check if string is palindrome", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (\"\",False)\n    s_reverse = \"\".join([ch for ch in reversed(s) if ch not in c])\n    if s_reverse == s:\n        return (s_reverse,False)\n    return (s_reverse,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    if len(s) == len(c):\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                result += s[i]\n                reverse_delete(result,c)\n        if result == '':\n            return (result,False)\n        return (result,True)\n    return ('',False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        n=len(s)\n        r = []\n        for i in range(n):\n            if s[i]!= c[i]:\n                r.append(s[i])\n        return (''.join(r),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    l = len(s)\n    r = len(c)\n    if l > r:\n        return (reverse_delete(s,c[:r-1]),True)\n    else:\n        return (reverse_delete(s,c[:l-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return ('',False)\n    if len(s) == len(c):\n        return (s,True)\n    i = 0\n    while i < len(s):\n        j = len(s) - 1 - i\n        while j > 0:\n            if s[j] == c[i]:\n                s = s[:j] + s[j+1:]\n                i = j + 1\n                j = len(s) - 1 - i\n            else:\n                j = j - 1\n        i = i + 1\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # first we check if the input is valid\n    if len(s) < len(c):\n        print(\"Input string is too short\")\n        return (s,False)\n    if len(s) == len(c):\n        print(\"Input string is too long\")\n        return (s,False)\n    if s == '':\n        print(\"Input string is empty\")\n        return (s,False)\n    if c == '':\n        print(\"Input character is empty\")\n        return (s,False)\n    # if the input is valid, then we check the result\n    result = ''\n    # we loop over the string\n    for i in range(0,len(s)):\n        # if the current character is equal to the input character, then we remove it\n        if s[i] == c[i]:\n            result += s[i]\n            # we loop over the remaining characters\n            for j in range(i,len(s)):\n                # if the current character is equal to the input character, then we remove it\n                if s[j] == c[i]:\n                    result += s[j]\n    # if the result is not a palindrome, then we return False\n    if result!= s[::-1]:\n        return (result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    r = []\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            r.append(s[i])\n    return s, reverse(r)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for i in range(0,len(s)):\n        if s[i] == c[i]:\n            result = result + s[i]\n        else:\n            result = result + c[i]\n    if result == s:\n        return (result,False)\n    else:\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s = s[:i] + s[i+1:]\n            return (s,False)\n    return (s,True)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #check if the result string is palindrome\n    if not s.is_palindrome():\n        return (s,False)\n    #check if the result string is not empty\n    if len(s) == 0:\n        return (s,False)\n    #check if the result string is not a palindrome\n    if s.is_palindrome():\n        return (s,False)\n    #check if the result string is not a palindrome\n    if s.is_palindrome():\n        return (s,False)\n    #check if the result string is not empty\n    if len(s) == 0:\n        return (s,False)\n    #check if the result string is not a palindrome\n    if s.is_palindrome():\n        return (s,False)\n    #check if the result string is not a palindrome\n    if s.is_palindrome():\n        return (s,False)\n    #check if the result string is not empty\n    if len(s) == 0:\n        return (s,False)\n    #check if the result string is not a palindrome\n    if s.is_palindrome():\n        return (s,False)\n    #check if the", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for i in reversed(s):\n        if c.find(i)>-1:\n            result.append(i)\n            s = s.replace(i,'')\n    if len(result)==len(s):\n        return (s,False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = str(s)\n    c = str(c)\n    result = []\n    for i in range(len(s)):\n        if s[i] == c:\n            result.append(s[i])\n    if len(result) == len(s):\n        result = ''.join(result)\n    return result,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    r = s.upper()\n    for i in range(len(r)):\n        if r[i]!= c[i]:\n            r = r[:i] + r[i+1:]\n    return (r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),False)\n    if len(c) == 0:\n        return (reverse_delete(s,c),True)\n    for i in range(0,len(s)):\n        if s[i] == c[0]:\n            s.pop(i)\n            if len(s) == 0:\n                return (reverse_delete(s,c),False)\n            if len(c) == 0:\n                return (reverse_delete(s,c),True)\n            if c[-1] == s[i]:\n                s.pop(i)\n                return (reverse_delete(s,c),True)\n            s.pop(i)\n            if len(s) == 0:\n                return (reverse_delete(s,c),False)\n            if len(c) == 0:\n                return (reverse_delete(s,c),True)\n            if c[-1] == s[i]:\n                s.pop(i)\n                return (reverse_delete(s,c),True)\n    return (reverse_delete(s,c),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (s,False)\n    if s[-1] == c[-1]:\n        return (s,True)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            reverse_delete(s[::-1],c)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l=len(s)\n    r = ''\n    if l<c:\n        r = s[l:]\n        r = reverse_delete(r,c)\n        return (r,False)\n    else:\n        r = s[:l-c]\n        r = reverse_delete(r,c)\n        return (r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # convert the string to list\n    l = s.split()\n    # reverse the list\n    r = [l[::-1] for l in l]\n    # reverse the string\n    r = \"\".join(r)\n    # if the result is not a list, then return the result string\n    if not r.__class__.__name__ == \"list\":\n        return r,False\n    # if the result is a list, then check if it is a palindrome\n    if len(r) == len(l):\n        return r,True\n    # if the result is not a list, then return the result string\n    return r,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result += s[i]\n            del s[i]\n    if len(result) == 0:\n        return ('',False)\n    else:\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return (s.replace(c,'').lower(),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    if len(s)<len(c):\n        return (s,False)\n    if s == c:\n        return (s,True)\n    d = set(s[::-1]).intersection(c)\n    if len(d)>0:\n        s = s.replace(d[0],'')\n        return (s,False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s==c:\n        return (s,False)\n    else:\n        result = []\n        for i in range(len(s)):\n            if s[i]==c:\n                result.append(s[i])\n                s.remove(s[i])\n        result.reverse()\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result = result + s[i]\n    return result, reverse_delete(result,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def check(s,c):\n        if len(s) == len(c):\n            if s[c[0]] == s[c[-1]]:\n                return (s.rstrip(c),False)\n        return (s,True)\n\n    if c == \"\":\n        return reverse_delete(s,\"\")\n    else:\n        if len(s) == len(c):\n            if s.find(c[0]) == 0:\n                return (s.rstrip(c),False)\n            else:\n                return check(s,c)\n        else:\n            if s.find(c[0]) == 0:\n                return reverse_delete(s,c[0])\n            else:\n                return check(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.upper()\n    c = c.upper()\n    if len(s) == len(c):\n        if s[0] == c[0]:\n            result = s[1:]\n            if result == c:\n                return (result,False)\n        else:\n            return (s,True)\n    else:\n        if s[0] == c[0]:\n            result = s[1:]\n            if result[0] == c[0]:\n                return (result,False)\n        else:\n            return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    if len(s) == 0 or len(c) == 0:\n        return (result,True)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result = result + s[i]\n    return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (s,False)\n    else:\n        s = s.upper()\n        c = c.upper()\n        d = {}\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                d[i] = True\n        for i in range(len(s)):\n            if d[i] == True:\n                del d[i]\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                del d[i]\n        if len(s) == len(c):\n            return (s,False)\n        else:\n            for i in range(len(s)):\n                if s[i] == c[i]:\n                    del d[i]\n            if len(s) == len(c):\n                return (s,False)\n            else:\n                for i in range(len(s)):\n                    if s[i] == c[i]:\n                        del d[i]\n            return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        if s == c:\n            return (s,False)\n        else:\n            return (s,True)\n    else:\n        return reverse_delete(s,c)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    s = s.upper()\n    c = c.upper()\n    r = []\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            r.append(s[i])\n        else:\n            r.append(s[i])\n    if len(r) == 0:\n        return (s,False)\n    s = s[:-1] + r[-1] + s[-1]\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # initialize the variable result\n    result = ''\n    # initialize the variable forward\n    forward = ''\n    # initialize the variable backward\n    backward = ''\n    # initialize the variable check\n    check = True\n    # initialize the variable i\n    i = 0\n    # initialize the variable j\n    j = 0\n    # initialize the variable count\n    count = 0\n    # initialize the variable max\n    max = len(s)\n    # initialize the variable min\n    min = 0\n    # initialize the variable char\n    char = ''\n    # initialize the variable char2\n    char2 = ''\n    # initialize the variable char3\n    char3 = ''\n    # initialize the variable char4\n    char4 = ''\n    # initialize the variable char5\n    char5 = ''\n    # initialize the variable char6\n    char6 = ''\n    # initialize the variable char7\n    char7 = ''\n    # initialize the variable char8\n    char8 = ''\n    # initialize the variable char9\n    char9 = ''\n    # initialize the variable char10\n    char10 = ''\n    # initialize the variable char11\n    char11 = ''\n    # initialize the variable char12\n    char12 = ''\n    # initialize the variable char13\n    char13 = ''\n    # initialize the variable char14\n    char14", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    check = True\n    if len(s) == 0 or len(c) == 0:\n        return (s,check)\n    for i in range(len(s)-1,-1,-1):\n        if s[i] == c[i]:\n            result += s[i]\n            check = False\n            break\n    if check == True:\n        result += s[-1]\n        return (result,check)\n    else:\n        return (s,check)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=\"\"\n    for i in range(len(s)-1):\n        if s[i]==c[i]:\n            result+=\" \"\n            s[i]=\"\"\n        else:\n            result+=\" \"+s[i]\n    result+=\" \"+s[len(s)-1]\n    if result==s:\n        return (result,False)\n    else:\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == '':\n        return ('',False)\n    if c == '':\n        return (s,False)\n    if len(s) > len(c):\n        return reverse_delete(s,c)\n    if s[0] == c[0]:\n        if s[-1] == c[-1]:\n            return (reverse_delete(s,c[:-1]),True)\n        else:\n            return (reverse_delete(s,c[1:]),False)\n    else:\n        return reverse_delete(s,c[:-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if s[0] == c[-1]:\n        reverse = s[1:] + c + s[0]\n    else:\n        reverse = s[1:] + c\n    if reverse == s:\n        return (reverse,True)\n    else:\n        return (reverse,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),True)\n    else:\n        for i in range(len(s)-1):\n            for j in range(len(s)-1-i,-1,-1):\n                if s[i]==s[j]:\n                    s[i],s[j] = s[j],s[i]\n                    break\n        for i in range(len(s)-1):\n            for j in range(len(s)-1-i,-1,-1):\n                if s[i]==s[j]:\n                    s[i],s[j] = s[j],s[i]\n                    break\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    n = len(s)\n    if n == 0 or n == 1: return (s,False)\n    r = []\n    while len(s) > 0:\n        m = 0\n        while m < n and c in s:\n            m += 1\n        if m == n:\n            r.append(s[:m])\n            s = s[m:]\n            m = 0\n        else:\n            r.append(s[:m])\n            s = s[m:]\n            m = 0\n    return (r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.upper()\n    c = c.upper()\n    if len(s) == 0 or len(c) == 0:\n        return ('',False)\n    result = []\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result.append(s[i])\n            s = s[:i] + s[i+1:]\n            result.append(s[i])\n    result = \"\".join(result)\n    return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return (s,False)\n    else:\n        new_string = s\n        for i in range(len(new_string)):\n            if new_string[i] == c:\n                new_string = new_string[:i] + new_string[i+1:]\n                break\n        return (new_string,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return ('',False)\n    if c not in s:\n        return ('',False)\n    if reverse(s) == reverse(c):\n        return (reverse(s),True)\n    else:\n        return (reverse(s),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    if len(s)<len(c):\n        return (s,False)\n    if len(s)==len(c):\n        result.append(c)\n    for i in range(len(s)-1,-1,-1):\n        if s[i]==c[i]:\n            reverse_delete(s,c[i])\n            result.append(s[i])\n    return (''.join(result),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def reverse_delete_helper(s,c):\n        if len(s) > len(c):\n            return (s,False)\n        if c in s:\n            i = s.find(c)\n            if i!= -1:\n                s = s[:i] + s[i+1:]\n        if s.startswith(c) and c in s:\n            s = s[len(c):]\n        if s.endswith(c) and c in s:\n            s = s[:-len(c)]\n        return (s,True)\n    if len(s) == len(c):\n        return (s,True)\n    return reverse_delete_helper(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,True)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    if s[-1] == c[-1]:\n        return reverse_delete(s[:-1],c[:-1])\n    if s[-2] == c[-2]:\n        return reverse_delete(s[-3:],c[-3:])\n    if s[-3] == c[-3]:\n        return reverse_delete(s[-4:],c[-4:])\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #check if we have both strings\n    if s == '' or c == '':\n        return ('',False)\n\n    #check if we have both strings\n    if s == c:\n        return (s,True)\n\n    #check if we have only one string\n    if len(s) == len(c):\n        return (s,True)\n\n    #check if we have only one string\n    if len(s) == 0:\n        return ('',False)\n\n    #check if we have only one string\n    if len(c) == 0:\n        return (s,False)\n\n    #check if we have only one string\n    if len(s) == len(c):\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                return (reverse_delete(s,c),False)\n        return (reverse_delete(s,c),True)\n\n    #check if we have only one string\n    if len(s) < len(c):\n        return (reverse_delete(s,c),False)\n\n    #check if we have only one string\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n\n    #check if we have only one string\n    if len(s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #check if the result is a palindrome\n    if s.count(c) == len(s):\n        return (s,False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.upper()\n    c = c.upper()\n    if len(s) == len(c):\n        s = ''.join(list(reversed(s)))\n    if len(s) == len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = ''.join(list(reversed(s)))\n                reverse_delete(s,c)\n                return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if s[0] == s[-1]:\n        return reverse_delete(s[1:],c)\n    if c[0] == c[-1]:\n        return reverse_delete(s[1:],c[1:])\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if c in s:\n        return reverse_delete(s[::-1],c)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return ('',False)\n    r = ''\n    for i in range(len(s)):\n        if s[i]==c:\n            r += s[i:]\n        else:\n            r += s[i]\n    if r.isupper():\n        r = r.lower()\n    return (r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (\"\",False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    s_rev = s[::-1]\n    for c in c:\n        if s_rev.find(c) == -1:\n            return (s_rev,False)\n    return (s_rev,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(s) == 1:\n        return (s,True)\n    if s == c:\n        return (s,False)\n    # we have to reverse the string to delete the equal characters\n    rev = s.upper()\n    rev = reverse(rev)\n    # we check if the result string is palindrome\n    if rev == s:\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return reverse_complement(s)==reverse_complement(c) and reverse(s)==reverse(c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=str(s)\n    c=str(c)\n    new_str=\"\"\n    for i in range(len(s)):\n        if s[i]==c[i]:\n            new_str += s[i]\n        else:\n            new_str += s[i]+c[i]\n    if new_str == s:\n        return (new_str,False)\n    else:\n        return (new_str,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #s = \"abcde\"\n    #c = \"ae\"\n    #the result should be ('bcd',False)\n    #for s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    #for s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    #return ('cdedc',True)\n\n    if len(s) == len(c):\n        if s == c:\n            return (s,False)\n        else:\n            return (s,True)\n    else:\n        if len(c) == 1:\n            return (s,True)\n        else:\n            if s[0] == c[0]:\n                return (s,False)\n            else:\n                return (reverse_delete(s,c[1:]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=[]\n    for x in reversed(s):\n        if x in c:\n            result.append(x)\n    if len(result) == len(s):\n        return result,True\n    else:\n        return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #input\n    s = str(s)\n    c = str(c)\n    #output\n    result = ''\n    #check if s is a palindrome\n    if s == s:\n        result = s\n    #check if s contains c\n    if s.find(c) >= 0:\n        result = s.replace(c,'')\n    #check if s is a palindrome\n    if s == result:\n        result = s\n    #return result and check if s is a palindrome\n    return result, reverse(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < 1:\n        return (s,False)\n    if len(c) < 1:\n        return (s,False)\n    if s[0] == c[0]:\n        if s[0] == c[0]:\n            return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[1:]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    l=len(s)\n    r=len(s)-len(c)\n    if l==r:\n        return (s,False)\n    if s[l]==c[r]:\n        s=s[l:]\n        r=r-l+1\n    if s[r]==c[l]:\n        s=s[:l]\n        l=l-r+1\n    if s[l]==c[r]:\n        s=s[l:]\n        r=r-l+1\n    if s[r]==c[l]:\n        s=s[:l]\n        l=l-r+1\n    if l==r:\n        return (s,False)\n    if s[l]==c[r]:\n        s=s[l:]\n        r=r-l+1\n    if s[r]==c[l]:\n        s=s[:l]\n        l=l-r+1\n    if s[l]==c[r]:\n        s=s[l:]\n        r=r-l+1\n    if s[r]==c[l]:\n        s=s[:l]\n        l=l-r+1\n    if l==r:\n        return (s,False)\n    if s[l]==c[r]:\n        s=s[l:]\n        r=r-l+1", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        if s[0] == c[0]:\n            reverse_delete(s,c)\n        else:\n            reverse_delete(c,s)\n    else:\n        if s[0] == c[0]:\n            reverse_delete(c,s)\n        else:\n            reverse_delete(s,c)\n    return (reverse(s),reverse(c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    result = s.rstrip(c)\n    result = reverse_delete(result,c)\n    result = reverse_delete(result,c)\n    result = reverse_delete(result,c)\n    result = reverse_delete(result,c)\n    return result,result.is_palindrome()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < 2:\n        return (s,False)\n    if len(c) < 2:\n        return (s,False)\n    if len(c) == len(s):\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s.pop(i)\n                return (reverse_delete(s,c),True)\n    else:\n        if s[0] == c[0]:\n            s.pop(0)\n        if s[len(s)-1] == c[len(s)-1]:\n            s.pop(-1)\n        return (reverse_delete(s,c),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == '':\n        return ('',False)\n    if s == c:\n        return (s,False)\n    if c in s:\n        return (s,False)\n    return reverse_delete(s[::-1],c[::-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l=[]\n    for i in range(len(s)):\n        if s[i]==c:\n            l.append(s[i])\n    l.reverse()\n    return (s[0],reverse_delete(s[1:],c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == c:\n            result += s[i:]\n            s = s[:i]\n    if result == s:\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (reverse_delete(s,c),True)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    return (reverse_delete(c,s),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for i in range(len(s)):\n        if s[i] in c:\n            result.append(s[-i])\n    if len(result) == len(s):\n        return result, False\n    else:\n        return result, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,False)\n    if len(c) == 1:\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    return (reverse_delete(s[1:],c[:-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    for i in range(0,len(s)):\n        if s[i] == c[i]:\n            result = result + s[i]\n    if result == s:\n        return (result,False)\n    else:\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return reverse_delete(s,c)\n    else:\n        return reverse_delete(s,c.reverse())", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def is_palindrome(s):\n        \"\"\"check if a string is palindrome\"\"\"\n        if len(s)==0:\n            return True\n        for i in range(len(s)-1):\n            if s[i]!=s[i+1]:\n                return False\n        return True\n    result = []\n    for i in range(len(s)):\n        if s[i] in c:\n            result.append(s[i])\n            reverse_delete(s,c)\n    if is_palindrome(result):\n        return result, True\n    else:\n        return result, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    s = s.lower()\n    c = c.lower()\n    s = s.replace(c,'')\n    if len(s) > len(c):\n        return (s,False)\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            break\n    else:\n        return (s,False)\n    if s[i] == s[len(s)-1]:\n        return (s,False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        if s[0] == c[0]:\n            return (s,False)\n        else:\n            return (s,True)\n    return (reverse_delete(s,c),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        if s == c:\n            return (s,False)\n        else:\n            return (reverse_delete(s,c),True)\n    else:\n        return (reverse_delete(s,c),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # initialize the result\n    result = \"\"\n    # initialize the counter\n    counter = 0\n    # iterate over the characters of s\n    for i in s:\n        # if the character is equal to any character in c\n        if c.find(i) >= 0:\n            # if the counter is not equal to 0, then append the character to the result string\n            if counter!= 0:\n                result += i\n            # increase the counter\n            counter += 1\n    # if the result string is not empty\n    if len(result) > 0:\n        # if the result string is a palindrome\n        if result.is_palindrome():\n            # return the result string and True\n            return (result,True)\n        # else return the result string and False\n        else:\n            return (result,False)\n    else:\n        # return the empty string and True\n        return (\"\",True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    r = []\n    for i in range(len(s)):\n        if s[i] == c:\n            r.append(s[i])\n            del s[i]\n    if len(r) == 0:\n        return (s,False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    s = s.upper()\n    c = c.upper()\n    if s[0] == c[0]:\n        return reverse_delete(s,c[1:])\n    if s[-1] == c[-1]:\n        return reverse_delete(s[1:],c[0:-1])\n    if s[-2] == c[-2]:\n        return reverse_delete(s[1:-1],c[0:-2])\n    if s[-3] == c[-3]:\n        return reverse_delete(s[1:-2:-1],c[0:-3])\n    if s[-4] == c[-4]:\n        return reverse_delete(s[1:-2:-1],c[0:-4])\n    if s[-5] == c[-5]:\n        return reverse_delete(s[1:-2:-1],c[0:-5])\n    if s[-6] == c[-6]:\n        return reverse_delete(s[1:-2:-1],c[0:-6])\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # List to store the result string and the check value.\n    res = []\n    # If the input strings are empty, return an empty string and True.\n    if s == '' or c == '':\n        return '', True\n    # If the input strings are the same, return the input string and True.\n    elif s == c:\n        return s, True\n    # Else, we have to delete all the characters in s that are equal to any character in c.\n    else:\n        # We have to store all the characters in the input string in a list.\n        s = s.split()\n        # We have to delete all the characters in s that are equal to any character in c.\n        for i in range(0, len(s)):\n            if s[i] in c:\n                # We have to delete the character that is equal to any character in c.\n                s[i] = ''\n        # We have to check if the result string is palindrome.\n        if len(s) > 1:\n            if s[0] == s[-1]:\n                # The result string is not palindrome.\n                res.append('')\n                res.append(True)\n            else:\n                # The result string is palindrome.\n                res.append(reverse_delete(s,c))\n                res.append(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Initialise the variable\n    result = []\n    check = False\n    # Loop through the string\n    for i in range(len(s)):\n        # Check if the character is in the set\n        if s[i] == c[i]:\n            # If so, delete it\n            result.append(s[-i])\n            # If not, set check to True\n            check = True\n    # Return the tuple\n    return result, check", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #todo: use better function name\n    #check if there is any character in c in s\n    if len(set(c) & set(s)) > 0:\n        return (s,False)\n    #find all the character in c that are in s\n    i = 0\n    while i < len(s):\n        if s[i] == c[i]:\n            s.remove(s[i])\n            i += 1\n    #check if the result is palindrome\n    if len(s) > 0:\n        return (s,False)\n    else:\n        return (s,True)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    for char in s:\n        if char in c:\n            result += char\n    result = result.replace('abc','def')\n    result = result.replace('def','abc')\n    result = result.replace('abcde','defg')\n    result = result.replace('defg','abcde')\n    result = result.replace('defg','abcde')\n    result = result.replace('defg','abcde')\n    result = result.replace('defg','abcde')\n    result = result.replace('defg','abcde')\n    result = result.replace('defg','abcde')\n    result = result.replace('defg','abcde')\n    result = result.replace('defg','abcde')\n    result = result.replace('defg','abcde')\n    result = result.replace('defg','abcde')\n    result = result.replace('defg','abcde')\n    result = result.replace('defg','abcde')\n    result = result.replace('defg','abcde'", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    result = ''\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result += s[i]\n        else:\n            result +=''\n    result = result.rstrip(' ')\n    if result == s and reverse(result) == c:\n        return (result,False)\n    else:\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 1:\n        return (s,False)\n    if len(c) == 0:\n        return (s,False)\n    if s[0] == s[-1]:\n        return (s[1:],False)\n    if c[0] == c[-1]:\n        return (s[1:],True)\n    if s[0] == s[1] and c[0] == c[1]:\n        return (s[1:],False)\n    if s[0] == s[1] and c[0] == c[1]:\n        return (s[1:],True)\n    if s[0] == s[1] and c[0] == c[1]:\n        return (s[1:],True)\n    if s[0] == s[1] and c[0] == c[1]:\n        return (s[1:],True)\n    if s[0] == s[1] and c[0] == c[1]:\n        return (s[1:],True)\n    if s[0] == s[1] and c[0] == c[1]:\n        return (s[1:],True)\n    if s[0] == s[1] and c[0] == c[1]:\n        return (s[1:],True)\n    if s[0] == s[1] and c[0] == c", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for i in range(len(s)):\n        if s[i] == c:\n            result.append(s[i])\n        else:\n            result.append(s[i - 1])\n    if len(result) == 0:\n        return (s,False)\n    if len(result) == 1:\n        return (result[0],True)\n    else:\n        return (reverse(reverse(result[0])),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l=len(s)\n    r=s.lower()\n    t=[]\n    if r.find(c)!=-1:\n        t.append(s.replace(r,\"\"))\n        t.append(s.replace(c,\"\"))\n        return (s.replace(r,\"\"),False)\n    else:\n        t.append(s)\n        t.append(s)\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    while len(s):\n        if s[len(s)-1] == c[0]:\n            result = result + s[len(s)-1]\n            del s[len(s)-1]\n        else:\n            break\n    if len(result) == len(s):\n        return (result,False)\n    else:\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return s,True\n    else:\n        if s[0] == c[0]:\n            if s[len(c)-1] == c[len(c)-1]:\n                return s,False\n        else:\n            if s[-1] == c[-1]:\n                return s,False\n            else:\n                return reverse_delete(s,c)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,True)\n    if len(c) == 0:\n        return (s,False)\n    r = []\n    for i in range(len(s)-1):\n        for j in range(len(c)-1):\n            if s[i] == c[j]:\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append(s[i])\n                r.append", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(c) == 1:\n        if s[0] == c[0]:\n            s = s[1:]\n            return (reverse_delete(s,c[1:]),False)\n        else:\n            return (reverse_delete(s,c[1:]),True)\n    else:\n        if s[0] == c[0]:\n            s = s[1:]\n            return (reverse_delete(s,c),False)\n        elif s[0] == c[-1]:\n            s = s[:-1]\n            return (reverse_delete(s,c[1:]),False)\n        else:\n            return (reverse_delete(s,c),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = str(s)\n    c = str(c)\n    res = ''\n    if len(s) == len(c):\n        for i in range(0,len(s)):\n            if s[i] == c[i]:\n                res = res + s[i]\n                del s[i]\n    if len(s) == 0:\n        res = res + c\n        del s\n    if len(c) == 0:\n        res = res + s\n        del s\n    if res == s:\n        res = res + c\n    return res,bool(res == s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def reverse(s):\n        return ''.join([s[x:x+1] for x in range(0,len(s),1)])\n    res = reverse(s)\n    if c in res:\n        return res,False\n    else:\n        return res,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    d = []\n    i = 0\n    while i < len(s):\n        if s[i] == c[i]:\n            d.append(s[i])\n            i += 1\n        else:\n            i += 1\n    result = ''.join(d)\n    result = result.lower()\n    if result == s:\n        return (result,False)\n    else:\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    r = []\n    for i in range(len(s)-1):\n        if s[i] == c[i]:\n            r.append(s[i])\n            s = s[:i] + s[i+1:]\n            break\n    r.append(s)\n    if s == r:\n        return (s,False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # create a dictionary to store the chars we have to delete\n    deleted_chars = {}\n    # check if the string is a palindrome\n    if s == reverse(s):\n        return (s,False)\n    # check if the string is empty\n    if len(s) == 0:\n        return (s,False)\n    # check if the string is a single char\n    if len(s) == 1:\n        return (s,False)\n    # for each character in the string\n    for i in range(0,len(s)):\n        # check if the current character is in the dictionary\n        if s[i] in deleted_chars:\n            # remove the character from the dictionary\n            deleted_chars.pop(s[i])\n        else:\n            # if the character is not in the dictionary, add it\n            deleted_chars[s[i].upper()] = True\n    # delete all the chars in the dictionary\n    for i in range(0,len(deleted_chars)):\n        del deleted_chars[i]\n    # check if the string is empty\n    if len(s) == 0:\n        return (s,False)\n    # for each character in the string\n    for i in range(0,len(s)):\n        # if the current character is in", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #The result string and check\n    r = \"\"\n    c = \"\"\n    #Check if the result string is palindrome\n    if c not in s:\n        r = reverse(s) #Get the reverse of the string\n        #Check if the result string is palindrome\n        if r not in s:\n            r = reverse(r) #Get the reverse of the result string\n            #Check if the result string is palindrome\n            if r not in s:\n                r = reverse(r) #Get the reverse of the result string\n                #Check if the result string is palindrome\n                if r not in s:\n                    r = reverse(r) #Get the reverse of the result string\n                    #Check if the result string is palindrome\n                    if r not in s:\n                        r = reverse(r) #Get the reverse of the result string\n                        #Check if the result string is palindrome\n                        if r not in s:\n                            r = reverse(r) #Get the reverse of the result string\n                            #Check if the result string is palindrome\n                            if r not in s:\n                                r = reverse(r) #Get the reverse of the result string\n                                #Check if the result string is palindrome\n                                if r not in s:", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    i = 0\n    for j in range(len(s)):\n        if s[i] == c[j]:\n            s.remove(s[i])\n            i+=1\n            if i >= len(s):\n                return (s,True)\n        i+=1\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #We start by reverse the string\n    res = reversed(s)\n    #We check if the result is palindrome\n    if res == s:\n        return res,False\n    else:\n        return res,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return (s,False)\n    if len(s)==len(c):\n        return (s,True)\n    if len(s)==len(c)+1:\n        return reverse_delete(s[len(s)-len(c):],c)\n    if len(s)>len(c):\n        s=s[len(s)-len(c):]\n        c=c[0:len(c)]\n    else:\n        c=s[len(c)-len(s):]\n        s=s[:len(s)-len(c)]\n    s=s[::-1]\n    return reverse_delete(s,c)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return reverse_delete(s,c,reverse=True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #get the length of s\n    len_s = len(s)\n    #get the length of c\n    len_c = len(c)\n    #get the reverse of s\n    r_s = s[::-1]\n    #get the reverse of c\n    r_c = c[::-1]\n    #check if both are empty\n    if len_s == 0 or len_c == 0:\n        return ('',False)\n    #check if both are empty\n    if len_s == len_c:\n        return ('',True)\n    #check if both are empty\n    if len_s < len_c:\n        return reverse_delete(r_s,r_c)\n    #check if both are empty\n    if len_s > len_c:\n        return reverse_delete(r_s,r_c[::-1])\n    #check if both are empty\n    if len_s == len_c:\n        return reverse_delete(r_s,r_c[::-1])\n    #check if both are empty\n    if len_s > len_c:\n        return reverse_delete(r_s,r_c[::-1])\n    #check if both are empty\n    if len_s < len_c:\n        return reverse_delete(r_s,r_c[::-1])\n    #check if both are empty\n    if len_s == len_c:", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # here we split the string into two lists, one for forward and another for backward\n    # we then iterate through both lists and remove the characters that are equal to c\n    # we then check if the result string is palindrome\n    if len(s)==1:\n        return (s[-1],False)\n    if len(c)==1:\n        return (s[-1],True)\n    # here we iterate through forward list and remove the characters that are equal to c\n    # we then check if the result string is palindrome\n    for i in range(len(s)-1):\n        if s[i] == c[i]:\n            s.pop(i)\n            if reverse_delete(s,c)[0][1]:\n                return (reverse_delete(s,c)[0],True)\n            else:\n                return (reverse_delete(s,c)[0],False)\n        else:\n            return (s,False)\n    # here we iterate through backward list and remove the characters that are equal to c\n    # we then check if the result string is palindrome\n    for i in range(len(s)-1,-1,-1):\n        if s[i] == c[i]:\n            s.pop(i)\n            if reverse_delete(s,c)[0][0]:", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) > len(c):\n        s = s[:len(c)]\n    if len(s) == len(c):\n        return s, True\n    else:\n        return s, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l = len(s)\n    i = 0\n    j = 0\n    while i < l:\n        if s[i] == c[j]:\n            del s[i]\n            i+=1\n        else:\n            j+=1\n    if reverse(s) == s:\n        return (s,False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == c:\n            result += s[i:]\n            s = s[:i]\n        else:\n            result += s[i]\n    return result, reverse(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,True)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (reverse_delete(s,c),False)\n    if s[:len(c)] == c[len(s):] or s[len(c):] == c[:len(s)]:\n        return (reverse_delete(s,c),False)\n    return (reverse_delete(s,c),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for i in range(len(s)):\n        if c in s:\n            result.append(s[i])\n    result = ''.join(result)\n    if result == s:\n        return (result,False)\n    else:\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return ('',False)\n    if len(c)==0:\n        return (s,True)\n    r = s\n    for i in range(len(s)):\n        if r[i]==c[i]:\n            r = r[i:]\n        else:\n            r = r[i:] + r[:i]\n    return (r,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #check if s is a palindrome\n    if not s.is_palindrome():\n        return (s,False)\n\n    #check if s is empty\n    if len(s) == 0:\n        return ('',False)\n\n    #check if c is empty\n    if len(c) == 0:\n        return (s,True)\n\n    #check if s contains only one character\n    if len(s) == 1:\n        if s[0] == c[0]:\n            return (s,False)\n        else:\n            return (s,True)\n\n    #check if s contains only one character in c\n    if len(c) == 1:\n        if s[0] == c[0]:\n            return (reverse_delete(s,c[1:]),True)\n        else:\n            return (reverse_delete(s,c[1:]),False)\n\n    #check if s is in c\n    if s[0] in c:\n        return (reverse_delete(s,c[1:]),True)\n\n    #check if s is in c reverse\n    if c[0] in s:\n        return (reverse_delete(s,c[1:]),False)\n\n    #check if s contains all characters in c\n    if s[0] in c and s[-1] in c:\n        return (reverse_delete(s,c[1:]),True)\n\n    #check if s contains all characters", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),True)\n    return (reverse_delete(s,c),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    #we are only interested in the same char\n    if s!= c:\n        return (s,False)\n    #we are not interested in the same char\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        print(\"Result string is too short\")\n        return (s,False)\n    if len(s)==len(c):\n        print(\"Result string is too long\")\n        return (s,False)\n    if s[0]==s[-1]:\n        print(\"Result string is not palindrome\")\n        return (s,False)\n    if s[0]==s[len(c)-1] and s[len(c)-1]==s[-1]:\n        print(\"Result string is not palindrome\")\n        return (s,False)\n    if s[0]==s[len(c)-1] and s[len(c)-1]!=s[-1]:\n        print(\"Result string is not palindrome\")\n        return (s,False)\n    if s[0]!=s[len(c)-1] and s[len(c)-1]==s[-1]:\n        print(\"Result string is not palindrome\")\n        return (s,False)\n    if s[0]!=s[len(c)-1] and s[len(c)-1]!=s[-1]:\n        print(\"Result string is not palindrome\")\n        return (s,False)\n    if s[0]!=", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==len(c):\n        return reverse_delete(s[::-1],c)\n    else:\n        return reverse_delete(s[::-1],c[:len(c)])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=[]\n    for i in range(len(s)):\n        if s[i]==c[i]:\n            result.append(s[i])\n            i=i-1\n    if len(result)==0:\n        return ('',False)\n    else:\n        return (''.join(result),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return (s,False)\n    return (s,reverse_delete(s,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s.find(c) == -1:\n        return (s,False)\n    else:\n        return (s.replace(c,''),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #check if s is empty\n    if not s:\n        return ('',False)\n\n    #check if c is empty\n    if not c:\n        return (s,True)\n\n    #check if s is a palindrome\n    if s == s:\n        return (s,True)\n\n    #check if c is a palindrome\n    if c == c:\n        return (reverse_delete(s,c),True)\n\n    #check if s contains c\n    if s.find(c)!= -1:\n        return (reverse_delete(s,c),False)\n\n    #check if c contains s\n    if c.find(s)!= -1:\n        return (reverse_delete(s,c),False)\n\n    #check if c is in s\n    for i in range(len(c)):\n        if c[i] == s[i]:\n            return (reverse_delete(s,c),False)\n\n    #check if c is in s\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            return (reverse_delete(s,c),False)\n\n    #check if c is in s\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            return (reverse_delete(s,c),False)\n\n    #", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    res = []\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            res.append(s[i])\n    return res, res == s[::-1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    result = []\n    for i in range(len(s)-1,-1,-1):\n        if s[i] == c[i]:\n            result.append(s[len(s)-i-1])\n            del s[len(s)-i-1]\n    if len(s) == 0:\n        result.append(s[0])\n    return result,reverse(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    result = ''\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result = result + s[i-1]\n    result = result + s[len(s)-1]\n    if result == s:\n        return (result,True)\n    else:\n        return (result,False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) == len(c):\n        result = s[::-1]\n        if result == c:\n            return (s,True)\n    else:\n        result = s[::-1]\n        result = result[:len(c)]\n        result = result + c[::-1]\n        result = result[:len(s)]\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s.find(c) == -1:\n        return (s,True)\n    else:\n        r = s.replace(c,'')\n        return (r,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return (\"\",False)\n    if len(c)==0:\n        return (s,False)\n    if len(s)==len(c):\n        return (s,True)\n    l=len(s)\n    m=len(c)\n    if l!=m:\n        return (s,False)\n    if s[0]==c[0]:\n        s=s[1:]\n    if s[l-1]==c[l-1]:\n        s=s[:-1]\n    if s[0]==s[1]:\n        s=s[2:]\n    if s[l-1]==s[l-2]:\n        s=s[:-2]\n    if s[0]==s[m-1]:\n        s=s[1:]\n    if s[l-1]==s[m-2]:\n        s=s[:-1]\n    if s[0]==s[m-1] and s[l-1]==s[m-2] and s[l-2]==s[m-3]:\n        s=s[:-1]\n    if s[0]==s[m-1] and s[l-1]==s[m-2] and s[l-2]==s[m-3] and s[l-3]==s[m-4]:\n        s=s[:-1]\n    if s[0]==s[m-1] and s[l-1]==s[m-2] and s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if s[0] == c[0]:\n        s = s[1:]\n    if s[-1] == c[-1]:\n        s = s[:-1]\n    if s == c:\n        return (s,True)\n    return (reverse_delete(s,c),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    l = len(s)\n    m = len(c)\n    if l == 0:\n        return (s,False)\n    if m == 0:\n        return (s,True)\n    if l < m:\n        n = m\n    else:\n        n = l\n    for i in range(0,n):\n        if s[i] == c[i]:\n            s = s[:i] + s[i+1:]\n            reverse_delete(s,c)\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    r = s[:]\n    r.reverse()\n    for i in range(len(r)):\n        if r[i] == c[i]:\n            r.pop(i)\n    return r,r == s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==len(c):\n        return (s,False)\n    else:\n        return (s,reverse_delete(s,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # reverse the string\n    # we use the reverse() function, since it's faster than the str.translate() method\n    s = s.translate(string.maketrans(string.ascii_uppercase,string.ascii_lowercase))\n    # check if the string is empty\n    if len(s) == 0:\n        return (s,True)\n    # delete all characters that are equal to c\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            s = s[:i] + s[i+1:]\n            return (s,False)\n    # if the string is not empty, then check if it is palindrome\n    if s[0] == s[-1]:\n        return (s,True)\n    else:\n        return (s,False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    n = len(s)\n    if n == 0:\n        return (s,False)\n    if n == 1:\n        return (s[::-1],False)\n    if n == 2:\n        if s == c or c == s[::-1]:\n            return (s,False)\n    if n == 3:\n        if s == c or c == s[::-1]:\n            return (s,False)\n    if n == 4:\n        if s == c or c == s[::-1]:\n            return (s,False)\n    if n == 5:\n        if s == c or c == s[::-1]:\n            return (s,False)\n    if n == 6:\n        if s == c or c == s[::-1]:\n            return (s,False)\n    if n == 7:\n        if s == c or c == s[::-1]:\n            return (s,False)\n    if n == 8:\n        if s == c or c == s[::-1]:\n            return (s,False)\n    if n == 9:\n        if s == c or c == s[::-1]:\n            return (s,False)\n    if n == 10:\n        if s == c or c == s[::-1]:\n            return (s,False)\n    if n == 11:\n        if s == c", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),True)\n    for i in range(0,len(s)):\n        if s[i] == c[i]:\n            s[i] = s[i][:-1]\n            s[i] = s[i] + s[len(s)-i-1]\n            if s[i] == '':\n                return ('',False)\n            if s[i] == c[i]:\n                return (s,False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for i in range(0,len(s)):\n        if s[i] == c[i]:\n            result = s[:-i] + result\n        else:\n            result = result + s[i]\n    return result,result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    if s[0]==c[-1]:\n        return reverse_delete(s[1:],c)\n    return reverse_delete(s[1:],c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        s = s[1:]\n        c = c[1:]\n    if s[-1] == c[-1]:\n        s = s[:-1]\n        c = c[:-1]\n    if s[0] == c[-1]:\n        s = s[1:]\n        c = c[1:]\n    if s[-1] == c[0]:\n        s = s[:-1]\n        c = c[:-1]\n    if s[-1] == c[0] and s[0] == c[-1]:\n        s = s[:-1]\n        c = c[:-1]\n    if s[-1] == c[0] and s[0] == c[0] and s[-1] == c[-1]:\n        s = s[:-1]\n        c = c[:-1]\n    if s[-1] == c[-1]:\n        s = s[:-1]\n        c = c[:-1]\n    if s[-1] == c[-1]:\n        s = s[:-1]\n        c = c[:-1]\n    if s[0] == c[0] and s[-1] == c[-1]:\n        s = s[:-1]\n        c = c[:-1]\n    if s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=string.lower(s)\n    c=string.lower(c)\n    result=[]\n    for i in range(len(s)):\n        if s[i]==c:\n            result.append(s[i])\n            s[i]=s[i].rfind(s[i-1])+1\n    result.reverse()\n    for i in range(len(result)):\n        if result[i]==result[len(result)-1-i]:\n            result.pop()\n    return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result.append(s[i])\n            s.remove(s[i])\n    if len(s) == 0:\n        return ('',False)\n    elif len(s) == 1:\n        return (s[0],True)\n    else:\n        return (reverse(s),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    if len(s)==0:\n        return ('',False)\n    if len(c)==0:\n        return (s,False)\n    if s.count(c) == len(c):\n        return (s,False)\n    r = ''\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            r += s[i]\n    r = r.lower()\n    if r.startswith(c):\n        return (r,False)\n    if r.endswith(c):\n        return (r,False)\n    return (r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return ('',False)\n    if s[0]!= c[0]:\n        return (s,False)\n    if s[0] == c[0]:\n        if len(s) > 1:\n            if s[1]!= c[1]:\n                return (s,False)\n            if s[1] == c[1]:\n                if len(s) > 2:\n                    if s[2]!= c[2]:\n                        return (s,False)\n                    if s[2] == c[2]:\n                        if len(s) > 3:\n                            if s[3]!= c[3]:\n                                return (s,False)\n                            if s[3] == c[3]:\n                                if len(s) > 4:\n                                    if s[4]!= c[4]:\n                                        return (s,False)\n                                    if s[4] == c[4]:\n                                        if len(s) > 5:\n                                            if s[5]!= c[5]:\n                                                return (s,False)\n                                            if s[5] == c[5]:\n                                                if len(s) > 6:\n                                                    if s[6]!= c[6]:\n                                                        return (s,False)\n                                                    if s[6] == c[6]:\n                                                        if len(s) > 7:\n                                                            if s[7]!= c[7]:\n                                                                return", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # We will try to reverse the string first\n    s = s.reverse()\n    # then we check if the result is palindrome\n    if s == s:\n        return (s, True)\n    # now we reverse the result\n    return (s, reverse_delete(s,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (s,False)\n    return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    s = s.lower()\n    c = c.lower()\n    for i in range(len(s)):\n        if s[i]==c[i]:\n            result += s[i:]\n            s = s[:i]\n    if s.endswith(c):\n        result += s[:-1]\n        s = s[:-1]\n    return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # you can use a while loop to delete all the characters in s that are equal to any character in c\n    # then check if the result string is palindrome\n    return reverse_delete(s.replace(c,''),c)"]]