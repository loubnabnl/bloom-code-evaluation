[["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Init\n    result = \"\"\n    check = True\n    # Check if string is a palindrome\n    if reverse(s) == s:\n        check = False\n    # Check if string has character in common\n    for c in c:\n        # Remove character from string\n        result = result.replace(c,'')\n    # If the string is not a palindrome or has character in common,\n    # then return the string and False\n    if not check:\n        return (result,False)\n    # If the string is a palindrome, then check if it is a palindrome\n    else:\n        return (result, check)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c not in s:\n        return (s,False)\n    l = len(s)\n    if l==0 or s[0]==c[0]:\n        return (s,False)\n    mid = l//2\n    i = 0\n    j = 0\n    while i < mid and j < l:\n        if s[i]==c[j]:\n            s = s[:i] + s[i+1:j]\n            break\n        i += 1\n        j += 1\n    if j >= l:\n        return (s,False)\n    if i >= mid:\n        s = s[:j] + s[j+1:]\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c) == 1:\n        return s, reverse_delete(s,c[0])\n    else:\n        left = s[:-1]\n        right = s[1:]\n        if left!= right:\n            return s, False\n        for i in range(len(c)):\n            if left[i] == c[i]:\n                left = left[:i] + left[i+1:]\n                right = right[:i] + right[i+1:]\n                return left, reverse_delete(right,c[i])\n        return left, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #print(\"############################\")\n    #print(s)\n    #print(c)\n    #s = s.lower()\n    #print(s)\n    #print(\"###############\")\n    #c = c.lower()\n    #print(c)\n    #print(\"#################################\")\n    result = []\n    for i in range(len(s)):\n        result.append(s[i])\n    for i in range(len(c)):\n        for j in range(len(s)):\n            if s[j] == c[i]:\n                result[j] = result[j-1]\n                result.pop()\n                break\n    if len(result) == 0:\n        print(\"Case 1\")\n    else:\n        if len(result) == 1:\n            print(\"Case 2\")\n        else:\n            print(\"Case 3\")\n            for j in range(len(result)):\n                if result[j] == result[j-1]:\n                    result.pop()\n            if len(result) == 1:\n                print(\"Case 2\")\n            else:\n                print(\"Case 3\")\n                for j in range(len(result)):\n                    if result[j] == result[j-1]:\n                        result.pop()\n                if len(result) == 1:\n                    print(\"Case 2\")\n                else:\n                    print(\"Case 3\")\n                    for j in range(len(result)):", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s_rev = \"\"\n    for c in reversed(s):\n        if c in c:\n            s_rev += c\n    return (s_rev,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c == '':\n        return (s,False)\n    t = ''\n    for c in s:\n        if c not in c:\n            t += c\n        else:\n            t = reverse_delete(t,c)\n    if not t.endswith(t[:-1]):\n        return (s,False)\n    return (t,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    # in case we have empty string, return the empty string and false\n    if len(c) == 0:\n        return ('',False)\n    result = \"\"\n    # in case we have empty string, return the empty string and false\n    if len(c) == 0:\n        return ('',False)\n    # in case we have empty string, return the empty string and false\n    if len(s) == 0:\n        return ('',False)\n    # in case we have empty string, return the empty string and false\n    if len(c) == 0:\n        return ('',False)\n    # in case we have empty string, return the empty string and false\n    if len(s) == 0:\n        return ('',False)\n    # in case we have empty string, return the empty string and false\n    if len(c) == 0:\n        return ('',False)\n    # in case we have empty string, return the empty string and false\n    if len(s) == 0:\n        return ('',False)\n    # in case we have empty string, return the empty string and false\n    if len(c) == 0:\n        return ('',False)\n    # in case we have", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    p = []\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            p.append(s[i])\n    p.reverse()\n    return (''.join(p),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    r = \"\"\n    for i in range(0,len(s)):\n        if (s[i] == c[i]):\n            r += s[i:]\n            s = s[:i]\n    r = r.lower()\n    return (s,r)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return s,False\n    result = ''\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result += s[i]\n    if result == s:\n        return result,True\n    result = reverse(result)\n    return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        reverse(s)\n    else:\n        for x in range(len(c)):\n            if s[x]:\n                del s[x]\n    if len(s) < len(c):\n        reverse(s)\n    else:\n        for x in range(len(c)):\n            if s[x]:\n                del s[x]\n    if len(s) < len(c):\n        reverse(s)\n    else:\n        for x in range(len(c)):\n            if s[x]:\n                del s[x]\n    if len(s) < len(c):\n        reverse(s)\n    else:\n        for x in range(len(c)):\n            if s[x]:\n                del s[x]\n    return s,reverse(s) == s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (s[::-1],False)\n    else:\n        return ('',True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    i = 0\n    s_len = len(s)\n    c_len = len(c)\n    if s_len < c_len:\n        s = s[::-1]\n    elif s_len > c_len:\n        s = s[1::-1]\n    for x in range(0,s_len):\n        if c[x] == s[x]:\n            s[x] =''\n    result = ''.join(s)\n    if result == '':\n        return (' ',True)\n    result = result[::-1]\n    if result == '':\n        return (' ',False)\n    result = result[::-1]\n    if result == '':\n        return (' ',False)\n    result = result[::-1]\n    if result == '':\n        return (' ',False)\n    result = result[::-1]\n    if result == '':\n        return (' ',False)\n    result = result[::-1]\n    if result == '':\n        return (' ',False)\n    result = result[::-1]\n    if result == '':\n        return (' ',False)\n    result = result[::-1]\n    if result == '':\n        return (' ',False)\n    result = result[::-1]\n    if result == '':\n        return (' ',False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    found = set()\n    for i in range(len(s)):\n        if s[i] in c:\n            result.append(s[i])\n            found.add(s[i])\n        elif found and s[i] not in c:\n            result.append(s[i])\n            found.remove(s[i])\n\n    return result,len(result)==len(s) and all(found==c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in range(len(s)-1):\n        if s[i+1] == c[i]:\n            s = s[:i] + s[i+1]\n            return (s,True)\n\ns = \"abcde\"\nc = \"ae\"\n\nresult = reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    t = []\n    i = 0\n    while(i<len(s)):\n        if s[i] == c and i!= 0:\n            del s[i]\n            t.append(s[i])\n            i = i+1\n        else:\n            i = i+1\n    if reverse(t) == s:\n        return (t, True)\n    else:\n        return (t, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    palindrome = 0\n    if len(s) > 0 and len(c) > 0:\n        if s[-1]!= c[-1]:\n            if s[-1] == c[-1]:\n                reverse_delete(s[-1:],c)\n        else:\n            reverse_delete(s[-1:],c)\n        if s[len(s)-1] == c[-1]:\n            reverse_delete(s,c)\n        else:\n            reverse_delete(s,c)\n    else:\n        reverse_delete(s,c)\n    if len(s) == 0 and len(c) == 0:\n        return (s,False)\n    elif len(s) == 0 or len(c) == 0:\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    c = \"\".join(c)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result.append(s[i])\n            c = \"\".join(c)\n    result.append(c)\n    return result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (\"\",False)\n    if len(c) == 0:\n        return (\"\",True)\n    if len(c) == 1:\n        s = s.replace(c[0],'')\n    else:\n        for i in range(len(s)-1,-1,-1):\n            if s[i] == c[0]:\n                s = s[:i] + s[i+1]\n    if reverse(s) == s:\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (s,False)\n    else:\n        r = ''\n        for i in range(len(s)):\n            for j in range(len(s)):\n                if s[i]==c[j]:\n                    s = s[:i] + r + s[i+1:]\n                    r = ''\n                    break\n        if reverse(r) == r:\n            return (s,True)\n        else:\n            return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    from itertools import chain\n    s = ''.join(chain(s.rstrip('z'), reverse(s[::-1])))\n    i = 0\n    while i < len(s):\n        if s[i] == c:\n            i += 1\n        else:\n            s = s[:i] + s[i:]\n            i = 0\n    if (len(s) == 0) or (s == ''):\n        return ('',False)\n    if (len(s) == 1):\n        return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s1 = \"\"\n    s2 = \"\"\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            if i > 0:\n                s1 += s[i-1:i+1]\n            if i < len(s)-1:\n                s2 += s[i+1:i+2]\n    return s1, s2", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # define the function to reverse the string\n    def reverse(s):\n        \"\"\"Reverses the string s\n        \"\"\"\n        return s[::-1]\n\n    # define the function to remove the characters\n    def del_char(s,c):\n        \"\"\"Removes all characters in s that are equal to c\n        \"\"\"\n        return [ch for ch in s if ch not in c]\n\n    # check if s is a palindrome\n    if s.is_palindrome():\n        # reverse the string and return it\n        return reverse(s), True\n    else:\n        # reverse the string and return it\n        return reverse(s), False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #This is the better way to do it.\n    # We take the characters in s and reverse them. We then compare the characters in s with the characters in c\n    # This has the advantage that we don't need to create a new string and reverse it twice, but it's more complex to read\n    result=reversed(s)\n    result=result.translate(c.upper())\n    if result==s:\n        return(result,False)\n    else:\n        result=result.translate('!'+c.lower()) #In case there is a letter in c that is not in the dictionary.\n        if result==s:\n            return(result,False)\n        else:\n            return(result,True)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    #remove all the characters that are equal to any character in c\n    for i in range(len(s)):\n        if s[i] == c:\n            result += s[i]\n            s[i] = ''\n    if len(result) == 0:\n        return (result,False)\n    #check if the result string is palindrome\n    for i in range(len(result)):\n        if result[i]!= s[len(result) - i - 1]:\n            return (result,False)\n    return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=\"\"\n    for i in range(len(s)):\n        if s[i] == c:\n            result = result + s[len(s)-i-1]\n        else:\n            result = result + s[i]\n    return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) > len(c):\n        return (s,False)\n    if len(s) == len(c):\n        for i in range(len(s)-1,-1,-1):\n            if s[i]==c[i]:\n                del(s[i])\n                return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l = len(s)\n    r = l\n    t = []\n    if l == 0:\n        return ('',False)\n    if l == 1:\n        if s[0] == c[0]:\n            t.append(s[0])\n            r -= 1\n        else:\n            t.append(s[0])\n            t.append(c[0])\n            r -= 1\n    elif l == 2:\n        if s[0] == c[0] and s[1] == c[1]:\n            t.append(s[0])\n            t.append(c[0])\n            r -= 1\n        elif s[0] == c[1] and s[1] == c[0]:\n            t.append(s[1])\n            t.append(c[1])\n            r -= 1\n        else:\n            t.append(s[0])\n            t.append(s[1])\n            t.append(c[0])\n            r -= 1\n            t.append(s[0])\n            t.append(s[1])\n            t.append(c[1])\n            r -= 1\n    if r < 0:\n        r += l\n        if s[0] == c[0]:\n            t.append(s[0])\n            r -= 1\n        elif s[0] == c[1]:\n            t.append(s[0])\n            t.append(c[0])\n            r -= 1\n        elif s[1] == c[0]:\n            t.append(s[1])\n            t.append", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    print reverse(s)\n    del s[0]\n    reverse_delete(s[1:],c)\n    if len(s)==1:\n        return(s,False)\n    else:\n        return(s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return ('',True)\n    if len(c)==0:\n        return (s,False)\n    str1=reverse(s)\n    str2=reverse(c)\n    if str1==str2:\n        return (s,False)\n    if str1!=str2:\n        return (str1,True)\n    if s=='':\n        return (s,False)\n    if c=='\\'':\n        return (s,False)\n    for i in range(len(s)):\n        if s[i]==c:\n            reverse_delete(s,c)\n            reverse_delete(s,c)\n            return (s,False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Start with empty list\n    result = []\n    # Check if string is empty\n    if len(s) == 0:\n        result.append(s)\n        return result\n    # Check if string is not empty\n    else:\n        # Create a dictionary to store the result\n        result = []\n        # Create a list to store the pattern of all characters in c\n        pattern = []\n        # Check all characters in string\n        for x in s:\n            if x in c:\n                # Add the character to the pattern\n                pattern.append(x)\n            # Check if the pattern has been found\n            if pattern in result:\n                # Search for the pattern in the result\n                for y in result:\n                    # Check if the result is not a palindrome\n                    if y!= pattern:\n                        result.remove(y)\n        # If the result has not been found, return an empty list and False\n        if len(result) == 0:\n            return result,False\n        # Return the result\n        return result,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    r = []\n    i = 0\n    for c in c:\n        j = 0\n        while (i!= 0 and j!= len(s)-1) and (s[j] == c[i]):\n            r.append(s[j:j+1])\n            j = j+1\n        r.append(s[j:])\n    if len(r) == 0:\n        return (s,False)\n    if len(r) == 1:\n        return (r[0],False)\n    if r[0] == s[r[0]-1]:\n        return (s,False)\n    else:\n        return (' '.join(r),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    for i in range(len(s)-1):\n        if s[i] == c[i]:\n            result += s[i+1]\n            del s[i+1]\n    if len(s) > 0:\n        if s[-1] == c[0]:\n            result += s[0]\n            del s[0]\n        else:\n            result += s[-1]\n            del s[-1]\n    return result,bool(result == s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = ''.join(s) # make a string out of the two strings s and c\n    c = ''.join(c) # make a string out of the two strings c and s\n    d = s.count(c) # count the characters in s that are equal to the characters in c\n    if d == 0: # if the two strings are equal\n        return (s,False) # return the result string and the truthiness that it is a palindrome\n    else:\n        r = [] # create an array with the result string\n        for i in range(len(s)): # go through all the characters in s\n            if s[i] == c: # check if the character in s[i] is equal to the character in c\n                r.append(s[i]) # add the character in s[i] to the result string r\n        return (''.join(r),True) # return the result string and the truthiness that it is a palindrome", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #s=[c[i] for i in reversed(c)]\n    s = s.split()\n    if len(s) == 1:\n        return (s,False)\n    else:\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return (s,False)\n            else:\n                return (reverse_delete(s[0],c),True)\n        else:\n            for i in range(len(s)):\n                if s[i+1] == s[i]:\n                    return (reverse_delete(s[-1]+s[-2],c),False)\n                else:\n                    if len(s) == i+2:\n                        return (reverse_delete(s[0]+s[-1],c),True)\n            return (reverse_delete(s[0]+s[-1],c),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s2 = \"\"\n    c1 = \"\"\n    if len(s)>len(c):\n        s2 = s[:len(c)]\n        c1 = s[len(c):]\n    else:\n        s2 = s\n        c1 = c\n    s2 = \"\".join([chr(ord(x)-1) for x in s2.split()])\n    s2 = s2.replace(\" \",\"\")\n    s2 = s2.replace(\"[\",\"\")\n    s2 = s2.replace(\"]\",\"\")\n    s2 = s2.replace(\"{\",\"\")\n    s2 = s2.replace(\"}\",\"\")\n    s2 = s2.replace(\"-\",\"\")\n    if len(c1) > 0:\n        c2 = c1[::-1]\n        s2 = s2.replace(c1,c2)\n    if s2 == s1:\n        return (s2,False)\n    else:\n        return (s2,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #in this case both the strings are palindrome\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # First we delete the same characters\n    if not reverse_contains(s,c):\n        return (s,False)\n    # And then we check if it is a palindrome\n    if reverse_contains(s,reverse(c)):\n        return (reverse(s),False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #checks whether s is equal to any character in c\n    if s in c:\n        return (s,True)\n    #checks whether s is a palindrome\n    if s == s:\n        return (s,False)\n    #checks if the result string is palindrome\n    if s.endswith(c):\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return s,False\n    s,cs=s.split(c)\n    cs.reverse()\n    for c in cs:\n        if c in s:\n            s=s[:s.find(c)]\n    if s.find(c)==-1:\n        return s,False\n    return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = ''.join(reversed(s))\n    c = ''.join(reversed(c))\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s = s[:i] + s[i+1:]\n            break\n    if s == c:\n        return (s,True)\n    return (s,False)\n    \n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return s,False\n    if len(c) == 1:\n        return reverse_delete(s,c[1:])\n    r = list(s)\n    for i in range(len(r)-2,-1,-1):\n        if r[i]!= r[i+1]:\n            r = r[:i+1] + r[i+1:]\n    return r,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #The complexity is O(N) because you have to compare each character in the string\n    #Loop to find all the different characters in the string\n    for char in s:\n        if char in c:\n            char = char.rstrip()\n            s = s.replace(char,'')\n    #Loop to check if the string is palindrome\n    if s.lower() == s.upper():\n        return (s,False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # initialize the result\n    result = ''\n    #initialize the index\n    idx = -1\n    # initialize the count\n    count = 0\n    #while not end\n    while idx < len(s):\n        count = count+1\n        if count > 1:\n            for i in range(count):\n                if s[idx] == c[i]:\n                    result = result + s[idx]\n                    idx = idx + 1\n                else:\n                    break\n    #return the result and the check\n    return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if s[-1] == c[-1]:\n        i = len(s) - 1\n        j = 0\n        while s[i] == c[j]:\n            j += 1\n            i -= 1\n        while i >= 0 and s[i]!= c[j] and s[i]!='':\n            j += 1\n            i -= 1\n        r = s[:i] + c[j:]\n        return (r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    ret = []\n    s = s.lower()\n    c = c.lower()\n    for i in range(len(s) - 1):\n        if c in s:\n            ret.append(s[i])\n            s = s[:i] + s[i+1:]\n    if len(ret) == 1:\n        return ret[0],False\n    else:\n        return ret,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for char in reversed(s):\n        if char in c:\n            result.append(char)\n    if len(result) == len(s):\n        return result,False\n    else:\n        return result,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = []\n    res.append(s[0])\n    for i in xrange(1,len(s)):\n        if s[i]!= s[i-1]:\n            res.append(s[i])\n    result = ''.join(res)\n    result = result.lower()\n    if result == s.lower():\n        return (result,False)\n    if result.startswith(s.lower()):\n        if result.endswith(s.lower()):\n            return (result,True)\n        return (result,False)\n    return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=[]\n    for i in range(0,len(s)):\n        if s[i]==c:\n            result.append(s[i])\n            result.reverse()\n            result.append(s[i])\n    if len(result)==len(s):\n        return result,False\n    else:\n        return result,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == '' or c == '':\n        return '', False\n    l = len(s)\n    r = ''\n    i = 0\n    while i < l:\n        while i < l and s[i]!= c[i]:\n            r += s[i]\n            i += 1\n        while i < l and s[i] == c[i]:\n            r += s[i]\n            i += 1\n    return r, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    check = True\n    if len(c)==0:\n        if len(s)==0:\n            return ('',check)\n        if len(s)==1 and s[0]==s[0]:\n            if reverse(s)==s:\n                return (s,check)\n    elif len(c)==len(s):\n        if s==c:\n            return (s,check)\n        if reverse(s)==s:\n            return (reverse(s),check)\n    if len(c)<len(s):\n        return (reverse(s),check)\n    else:\n        return (reverse(s),check)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    result = ''\n    if len(c) == 1:\n        result = s\n    elif len(c) > 1:\n        for i in range(0,len(s)-1):\n            if s[i] == c[0]:\n                s.pop(i)\n                result = result + reverse_delete(s,c[1:])\n                return (result,False)\n    else:\n        if s[0] == c[0]:\n            return (s,True)\n    return (result,True)\n\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = s\n    forward = s.upper()\n    if forward == c.upper():\n        reverse = reverse_delete(forward,c.upper())\n        if reverse[0] == reverse[-1]:\n            return result,True\n    else:\n        return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = str(s)\n    c = str(c)\n    result = ''\n    if len(s) == len(c):\n        result = s\n    else:\n        for i in range(0, len(s)):\n            if s[i] == c:\n                if s[len(s) - i] == c:\n                    result = s[:i] + result + s[len(s) - i:]\n    if result == '':\n        result = s\n    if result == s[::-1]:\n        return (result,False)\n    else:\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = []\n    is_palindrome = True\n    for i in range(0,len(s)):\n        if s[i] == c[i]:\n            res.append(s[len(s)-1-i])\n    res.reverse()\n    return res,is_palindrome", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def reverse_delete_func(s,c):\n        r = ''\n        for i in range(len(s)):\n            r += s[i:]\n            r = r[:-1]\n            for j in range(len(c)):\n                if s[i] == c[j]:\n                    r = r[:-1]\n                    r += s[i]\n                    del s[i]\n        return r, len(c)==len(s)\n    s, c = s.strip(), c.strip()\n    if not len(s):\n        return '', True\n    if len(c)==0:\n        return reverse_delete_func(s,c)\n    else:\n        return reverse_delete_func(reverse_delete_func(s,c),c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0: return None,False\n    r = list(reversed(s))\n    m = len(c)\n    r.reverse()\n    n = len(r)\n    if n > m:\n        for i in range(n):\n            if r[i]!= c[i]:\n                r.pop(i)\n        return r,True\n    elif n < m:\n        for i in range(m):\n            if r[i]!= c[i]:\n                r.insert(i,c[i])\n        return r,False\n    else:\n        return r,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = ''.join(s)\n    c = ''.join(c)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s = s.replace(s[i],'')\n            reverse_delete(s,c)\n\n    if s == c.lower():\n        return (s,False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    n = len(s)\n    for i in range(0,n-1):\n        if c in s:\n            j = i\n            while j < n and s[j] == c:\n                j = j+1\n            if j >= n:\n                return s,False\n            s = s[:j] + s[j+1:]\n    return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n\n    result = ''\n    for i in range(len(s)):\n        if s[i] == c:\n            result += s[i]\n            del s[i]\n    if len(result) > 1:\n        return (result, False)\n    elif len(result) == 1:\n        return (result, True)\n    else:\n        return ('', False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    tmp = []\n    for i in s:\n        if i == c:\n            tmp.append(i)\n    tmp = ''.join(tmp)\n    if tmp == s:\n        return (tmp,False)\n    else:\n        return (reverse(s) + reverse(tmp),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # we know that s is not empty\n    if len(s) == 0:\n        return (s,False)\n    \n    #s = s.upper()\n    #c = c.upper()\n    # check first if there is at least a character equal in both\n    if (c in s):\n        reverse_delete(s.lower(),c)\n    # now check if the result is the same as the input\n    if (s==reverse_delete(s,c)):\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    p = s.count(c)\n    if p == 0:\n        return (s,False)\n\n    new = []\n    for i in range(len(s)-p):\n        new.append(s[-p-1-i])\n    s = new\n\n    if s[0] == s:\n        s = s[1:]\n    if s[-1] == s:\n        s = s[:-1]\n\n    r = []\n    for i in range(len(s)):\n        r.append(s[i])\n    s = r\n\n    if s[-1] == s[0]:\n        s = s[1:]\n    if s[0] == s[-1]:\n        s = s[:-1]\n\n    if s[0]!= s[-1]:\n        return (s,False)\n    if s[-1]!= s[0]:\n        return (s,False)\n\n    r = []\n    for i in range(len(s)):\n        r.append(s[i])\n    s = r\n\n    if s[-1] == s[0]:\n        s = s[1:]\n    if s[0] == s[-1]:\n        s = s[:-1]\n\n    if s[0]!= s[-1]:\n        return (s,False)\n    if s[-1]!= s[0]:\n        return (s,False)\n\n    r = []\n    for i in range(len(s)):", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    result = []\n    # Process reversed string\n    for i in range(len(s)-1):\n        if s[i] == c[i]:\n            result.append(s[i])\n            s.pop(i)\n    # Process reversed string\n    for i in range(len(s)-1):\n        if s[i] == c[i]:\n            result.append(s[i])\n            s.pop(i)\n    # Check if the string is palindrome\n    if s == result:\n        return (s,False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c == \"\":\n        return s, True\n    if not s.endswith(c):\n        s = s[:-len(c)]\n    x = s.split(c)\n    y = []\n    for i in x[:-1]:\n        y.append(i)\n    y.append(s[-1:])\n    y = y[::-1]\n    for i in y:\n        if i == c:\n            del y[i]\n    if len(y) == 1:\n        y = y[0]\n    else:\n        y = ''\n    if len(s) == 0:\n        return '', True\n    return y, False\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c): return ('',False)\n    r = []\n    i = 0\n    while s[i] == c[i]:\n        r.append(s[i])\n        i+=1\n    if len(r):\n        r.reverse()\n        r = s + ''.join(r)\n        i = 0\n        while i < len(r):\n            if r[i]!= s[i]: return (r,True)\n            i+=1\n    if len(s) == len(c): return ('',False)\n    return ('',True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l = len(s)\n    r = ''\n    while l>0:\n        if r == s:\n            r = ''\n            l = l - 1\n        else:\n            r += s[l:]\n        if s[l] == c[r]:\n            r = ''\n        else:\n            l = l - 1\n    if r == '':\n        return (r,True)\n    else:\n        return (r,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # base case\n    if len(s) <= 1:\n        return (s,False)\n    \n    # general case\n    if c in s:\n        for i in range(len(s)):\n            if s[i] == c:\n                reverse_delete(s,c)\n                break\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=len(s)-1\n    res=[]\n    for i in range(s):\n        if s[i] in c:\n            res.append(s[-i-1])\n    res.reverse()\n    return res,res[-1] == s[-1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    reverse=[]\n    i=0\n    j=0\n    while i<len(s) and j<len(c):\n        if s[i]==c[j]:\n            reverse.append(s[i])\n            i=i+1\n            j=j+1\n        else:\n            i=i+1\n            j=j+1\n    #reverse string\n    reverse=list(reversed(reverse))\n    return reverse, len(reverse)==len(c)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # make a copy\n    s = s.lower()\n    # delete every character in s that is in c\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n    # if the result string is not empty, it is palindrome\n    if result!= \"\":\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    is_palindrome = True\n    for i in range(len(s)-1):\n        if s[i]==s[len(s)-1-i]:\n            result.append(s[i])\n            is_palindrome = False\n            break\n    if is_palindrome == False:\n        return result,False\n    else:\n        return result,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        result = s.copy()\n        for i in range(len(s)):\n            for j in range(len(s)):\n                if s[i] == c[j]:\n                    result[i] = j\n        return result,True\n    else:\n        result = s.copy()\n        for i in range(len(s)):\n            for j in range(len(c)-len(s)):\n                if s[i] == c[j+j]:\n                    result[i] = j+j\n                elif s[i] == c[j+j+1]:\n                    result[i] = j+j-1\n        return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    i = 0\n    while i<len(s):\n        while s[i]!=c[i]:\n            if s[i] not in result:\n                result.append(s[i])\n            i+=1\n        if c[i] not in result:\n            result.append(c[i])\n        i+=1\n    if s.count(s[i-1]) == len(c):\n        if result.count(s[len(s)-1]) == len(c):\n            if reverse(result) == s:\n                return (result,True)\n        else:\n            return (result,False)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def str_to_char(s):\n        \"\"\"Convert string s to char\"\"\"\n        return s.lower()\n\n    def char_to_str(c):\n        \"\"\"Convert char c to string\"\"\"\n        return c.upper()\n\n    if s == '':\n        return (s,True)\n    else:\n        for i in range(0,len(s)):\n            if s[i] in c:\n                reverse_delete(s,c[i:])\n                reverse_delete(s,c[:i])\n                break\n        else:\n            if char_to_str(s[0]) == str_to_char(s[1]):\n                return (s,False)\n            else:\n                return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    r = s\n    l = len(r)\n    s = r\n    c = s\n    # We will start at the last character in c and delete all the characters that are equal to c\n    for i in range(l):\n        if r[i] == c[i]:\n            s = s[:i] + s[i+1:]\n            l = l - 1\n    if l == 0:\n        return (s,False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=str(s)\n    c=str(c)\n    d=[]\n    for i in range(len(s)):\n        if s[i]==c[i]:\n            d.append(s[i])\n    if len(d)==1:\n        d.pop()\n    elif len(d)==0:\n        return(None,False)\n    else:\n        reverse(d,0,len(d)-1)\n    for i in reversed(d):\n        if s[i]!=c[i]:\n            return(None,False)\n    return(s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return reverse(s),False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return (s,False)\n    if len(c)==0:\n        return ('',False)\n    if s.startswith(c):\n        s=s.replace(c,'')\n    if s.endswith(c):\n        s=s.replace('',c)\n    else:\n        return (s,False)\n    if s.endswith(c):\n        s=s.replace('',c)\n    if c not in s:\n        if reverse(s) == s:\n            return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = ''\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            res += s[i]\n            i += 1\n    if res == '':\n        return ('',False)\n    if res[:len(s)] == res[len(s):]:\n        return (res,False)\n    if res[:len(s)] == res[len(s):]:\n        return (s,False)\n    if s[0]!= res[0]:\n        return (s,False)\n    return (res,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    num=1\n    #check if s is palindrome\n    if s[:-1]==s[:]:\n        return reverse_delete(s,c)\n    else:\n        if s.find(c)==-1:\n            return reverse_delete(s,c)\n        else:\n            #check if there are some equal to in the reverse of s\n            while s.find(s[-1])==-1:\n                num+=1\n                s=s[0:-1]\n            if s.find(c)==-1:\n                return reverse_delete(s,c)\n            else:\n                return (s[num:-1],False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return reverse_delete(c,s)\n    if len(s) == len(c):\n        if s[c[-1]] == c[c[0]]:\n            return reverse_delete(s,c)\n    if s[c[0]] == c[c[-1]]:\n        return reverse_delete(s,c)\n    if s[c[0]] == c[c[0]] and s[c[1]] == c[c[2]]:\n        return reverse_delete(s,c)\n    if s[c[0]] == c[c[0]] and s[c[1]] == c[c[1]]:\n        return reverse_delete(s,c)\n    return reverse_delete(c,s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=[]\n    i=0\n    if len(s)>len(c):\n        for j in range(len(s)):\n            if s[j]==c:\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])\n                result.append(s[j]+s[j+1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # create a list of the characters in the string\n    c = set(c)\n    s = s.upper()\n    # initialize the result string and the palindrome check\n    result, palindrome = \"\", True\n    # for each character in the string, if it is equal to any character in c,\n    # remove it from the string\n    for character in s:\n        if character in c:\n            s = s.replace(character,\"\")\n            # if there is no more characters in the string, the result is palindrome\n            if len(s) == 0:\n                palindrome = True\n                break\n    # return the result string and the palindrome check\n    return (s,palindrome)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) > 1:\n        for i in reversed(range(len(s))):\n            if s[i] == c[i]:\n                s.pop(i)\n                return (s,False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    assert len(s)==len(c)\n    #s = s.lower()\n    #print s\n    #c = c.lower()\n    #print c\n    result = ''\n    res = True\n    for i in xrange(len(s)):\n        if s[i]==c[i]:\n            result += s[i:]\n        else:\n            result += s[i]\n    return result,res", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in range(len(s) - 1):\n        if s[i] == c[i]:\n            s = s[i:] + s[:i]\n    #check if the result string is palindrome\n    if s == s:\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result += s[i]\n            del s[i]\n    if len(s) > 0:\n        if result == '':\n            return ('',False)\n        if result == s:\n            return (result,False)\n    return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Check whether the given strings are in the same order\n    if s[0]!= s[1]:\n        raise ValueError('The given strings are not in the same order')\n\n    # Check whether there are any characters in c that are equal to any character in s\n    if c not in s:\n        return (s,True)\n\n    # Check the number of the characters in s that are equal to any character in c\n    n = len(s)\n    if n == 0:\n        return (s,True)\n\n    # Construct a string from the characters in c that are not equal to any character in s\n    c_reversed = ''.join(map(lambda x:x[::-1],c))\n    n_reversed = len(c_reversed)\n\n    # Iterate through each character in c_reversed and delete the character in s that is equal to it\n    for i in range(n_reversed):\n        if c_reversed[i] in s:\n            s = s[:i] + s[i+1:]\n\n    # Check if the result string is a palindrome\n    if s == s.reverse():\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        return (s,reverse_delete(s[len(c):],c[:len(c)]))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = str(s)\n    c = str(c)\n    i=0\n    if(s==' '):\n        while i < len(s)-1:\n            if s[i]==c:\n                s=s[:]\n                i+=1\n            else:\n                i+=1\n        return s,False\n    elif(s==' '):\n        while i < len(s):\n            if s[i]==c:\n                s=s[:]\n                i+=1\n            else:\n                i+=1\n    else:\n        while i < len(s):\n            if s[i]==c:\n                while i<len(s)-1 and s[i+1]==c:\n                    s=s[:]\n                    i+=2\n                while i<len(s) and s[i+1]==c:\n                    s=s[:]\n                    i+=2\n                if i < len(s)-1:\n                    s=s[:]\n                    i+=1\n                else:\n                    s=s[:]\n                    i+=1\n            else:\n                while i<len(s):\n                    if s[i]==c:\n                        while i<len(s)-1 and s[i+1]==c:\n                            s=s[:]\n                            i+=2\n                        while i<len(s) and s[i+1]==c:\n                            s=s[:]\n                            i+=2\n                        if i < len(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s1=s.split(c)\n    s2=s1[::-1]\n    if s1:\n        if len(s2)>len(s1):\n            s2.reverse()\n            reverse_delete(s2,c)\n        else:\n            reverse_delete(s2,c)\n            s2.reverse()\n            reverse_delete(s2,c)\n    if s2:\n        if len(s1)>len(s2):\n            s1.reverse()\n            reverse_delete(s1,c)\n        else:\n            reverse_delete(s1,c)\n            s1.reverse()\n            reverse_delete(s1,c)\n    result=''\n    if len(s1)==len(s2):\n        result=s1\n    return (result,result[::-1].strip('*')==s1.strip('*'))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    ret = []\n    for i in range(len(s)):\n        if c not in s[i]:\n            ret.append(s[-i-1])\n    return ret, len(ret) == len(s) and all(map(lambda x:x, reverse(ret)))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def reverse_delete(s,c):\n        s = s.lower()\n        #s = s.replace(\" \",\"\")\n        #s = s.translate(\"abcdefghijklmnopqrstuvwxyz\",\"\")\n        result = []\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                result.append(s[len(s)-1-i])\n        return result\n    return (reverse_delete(s,c),reverse_delete(result,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #s is a string, c is a set of character\n    #s is palindrome if it reads the same backward as forward\n    def check(s):\n        for c in c:\n            if c in s:\n                return False\n        return True\n    #reversing of s\n    s2 = s[::-1]\n    #checking if s2 is palindrome\n    if s2!= s:\n        return False\n    #checking if s2 is a subset of c\n    if s2.count(c) > 0:\n        return False\n    #if s2 is a subset of c, we are done\n    return check(s2)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    c=c.lower()\n    s=s.lower()\n    if len(s)<len(c):\n        return reverse_delete(s,c)\n    if len(s)==len(c):\n        return ('',True)\n    a=s[0]\n    b=c[0]\n    if a==b:\n        return ('',False)\n    for x in range(1,len(s)):\n        if s[x]==c:\n            return reverse_delete(s[x:],c)\n    return reverse_delete(s[len(s)-1],c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    temp = []\n    for i in reversed(s):\n        if i in c:\n            temp.append(s.index(i))\n            s = s[:s.index(i)]\n            c = c[:c.index(i)]\n    for i in range(len(c)):\n        if s[i]==c[i]:\n            temp.append(i)\n            s = s[:s].index(s[i])\n            c = c[:c].index(s[i])\n    if len(c)==0 and len(s)>1:\n        return (s,True)\n    elif len(c)==0:\n        return (temp+s,False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s_len = len(s)\n    s_rev = ''.join(s)\n    s_rev_rev = ''.join(s[::-1])\n    s_rev_rev_rev = ''.join(s_rev_rev.reverse())\n    if s_rev_rev == s_rev_rev_rev:\n        return (s_rev,True)\n    else:\n        return (s_rev,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = str(s)\n    c = str(c)\n    i = 0\n    j = len(s)\n    while i < j:\n        if c == s[i-1]:\n            del s[i]\n            i += 1\n        else:\n            j -= 1\n            i = j\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = re.sub(r'(.)',r'\\1',s)\n    r = s\n    for c in c:\n        if r.find(c):\n            r = r.replace(c,'')\n    if r == s:\n        return r,False\n    else:\n        return r,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #loop\n    l = len(s)\n    r = s\n    for i in range(0,l-1):\n        if r[i]==c[i]:\n            r[i]='-'\n        r = r[i:]\n        r = r[:i]\n    r = r + s[l:]\n    r = r.lower()\n    if r == r:\n        return (s,False)\n    else:\n        return (r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    i = len(s)\n    while i > 0:\n        if s[i-1] == c[i]:\n            result = result + s[i-1]\n            i = i - 1\n        else:\n            result = result + c[i]\n            i = i - 1\n    if reverse(result) == result:\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c in s:\n        for i in range(0,len(s)-1):\n            if s[i]==c and s[i+1]==c:\n                reverse_delete(s[ :i],c)\n                reverse_delete(s[ :i],c)\n    if not s:\n        return (s,False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #Given input\n    assert(len(s)==len(c))\n    #Create a dictionary to store all the characters of string s\n    chars=s.translate(None, c)\n    #Create a list to store all the characters of string c\n    charlist=list(c)\n    #Return a tuple\n    result=('',False)\n    #Iterate over all the characters in string s\n    for char in s:\n        #Iterate over all the characters in string c\n        for charlist in charlist:\n            #Check if the character we are looking for in s is equal to any character in c\n            if chars[char]=charlist:\n                #Add the character to result string and set the variable to True\n                result=(result+char,True)\n    return result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=\"\"\n    if len(s)==len(c):\n        for j in range(len(s)):\n            for i in range(len(c)):\n                if s[i]==c[i]:\n                    result+=s[j]\n                    del(s[i])\n    return result,result.count(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for x in s:\n        for y in c:\n            if x == y:\n                result.append(x)\n                result.append(True)\n        result.append(x)\n        result.append(False)\n    return result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    tmp = []\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            tmp.append(s[i])\n    s = ''.join(tmp)\n    if s.endswith('bc') and not s.endswith('cdc'):\n        return (s,False)\n    if s.endswith('ac') and not s.endswith('cdc'):\n        return (s,False)\n    if s.endswith('ed') and not s.endswith('bc'):\n        return (s,False)\n    if s.endswith('bc') and not s.endswith('ab'):\n        return (s,False)\n    if s.endswith('ab') and not s.endswith('ed'):\n        return (s,False)\n    if s.endswith('ab') and not s.endswith('cdc'):\n        return (s,False)\n    if s.endswith('ab') and not s.endswith('ac'):\n        return (s,False)\n    if s.endswith", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res=[]\n    s=list(s)\n    c=list(c)\n    for i in range(len(s)):\n        if i < len(s)-1:\n            res.append(s[len(s)-1])\n        if s[i] == c[i]:\n            res.append(s[i])\n    if len(res) == len(s):\n        return (res,False)\n    return (res,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    #make sure that the input is a tuple\n    if not isinstance(s,tuple):\n        print (\"The first element of the tuple should be a string\")\n        return (False,False)\n\n    if not isinstance(c,tuple):\n        print (\"The second element of the tuple should be a string\")\n        return (False,False)\n\n    #check if there is a match\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            print (\"There is a match at index \" + str(i))\n            return (False,True)\n        else:\n            print (\"There is no match at index \" + str(i))\n\n    #check if it is a palindrome\n    if all(s[0] ==s[-1] for s in s):\n        print (\"It is a palindrome\")\n        return (True,True)\n    else:\n        print (\"It is not a palindrome\")\n        return (True,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s.isdigit() or c.isdigit():\n        print(\"There is no letter in the dictionary\")\n        return (s,False)\n    a = []\n    b = []\n    for i in range(0,len(s)-1):\n        if s[i] == c[i]:\n            a.append(s[i])\n    for j in range(0,len(s)-1):\n        if s[j] == c[j]:\n            b.append(s[j])\n    if reverse_char(a) == reverse_char(b):\n        print(\"The result string is a palindrome\")\n        return (reverse_char(a)+\"cd\",True)\n    else:\n        print(\"The result string is not a palindrome\")\n        return (reverse_char(a)+\"cd\",False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s1=s.lower()\n    s2=c.lower()\n    for i in range(len(s1)-2,len(s1)+1):\n        if s1[i]==s2[i-1]:\n            s2.pop(i-1)\n    for i in range(len(s2)-2,len(s2)+1):\n        if s2[i]==s1[i-1]:\n            s1.pop(i-1)\n    return s1,c in s2\nreverse_delete=reverse_delete(\"abcde\",\"a\")", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return ('',False)\n    if len(c)==0:\n        return (s,True)\n    s = s.lower()\n    c = c.lower()\n    k = 0\n    while k<len(s) and k<len(c):\n        if s[k]!= c[k]:\n            s = s[:k] + s[k+1:]\n            k = len(s)-1\n        else:\n            k += 1\n    if len(s) == len(c):\n        return (s,False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            if s[i-1] == c[0]:\n                s = s[:i] + s[i+2:]\n            else:\n                s = s[:i-1] + s[i+1:]\n            return (s,False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    t = s.copy()\n    c.reverse()\n    i = 0\n    for j in c:\n        if j in t:\n            t.remove(j)\n        else:\n            i += 1\n    t.reverse()\n    if s == t:\n        return (s,False)\n    else:\n        return (t,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s1 = ''.join(s)\n    s2 = ''.join(c)\n    if s1 == s2:\n        return ('',False)\n    r = ''\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            r = r + s1[i]\n    if r == s1:\n        return ('',True)\n    else:\n        return (r,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) == len(c):\n        if s[0]==c[0]:\n            return (s[1:],False)\n        else:\n            return (s,True)\n    a = []\n    b = []\n    for i in range(0, len(s)):\n        if c[i]==s[i]:\n            a.append(i)\n        else:\n            b.append(i)\n    return (s,b)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s:\n        return (s,True)\n    s2 = s[::-1]\n    if not s2 or c not in s:\n        return (s,False)\n    for i in range(0,len(s2)):\n        if s2[i] in c and s2[i+1] not in c:\n            s2[i],s2[i+1] = s2[i+1],s2[i]\n    return (s2,True)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #Define a function to do the task\n    def reverse_delete(s,c):\n        \"\"\"Reverse Delete Function\"\"\"\n        if len(s)==0:\n            return ('',False)\n        else:\n            if s[0]==s[1]:\n                return (s[2:],False)\n            else:\n                return ('',True)\n    #Check if the string is palindrome\n    if reverse_delete(s,c)[0]==reverse_delete(s,c)[1]:\n        return (reverse_delete(s,c)[0],True)\n    else:\n        return (reverse_delete(s,c)[0],False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    ret = []\n    for i in range(len(s)):\n        if s[i] in c or c[i] in s:\n            ret.append(s[i])\n    if ret[0] == ret[-1]:\n        ret = ret[:-1]\n    return ret,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = ''\n    tmp = ''\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            tmp += s[i]\n        else:\n            res += tmp\n    res = res.rstrip()\n    if res == '':\n        return (res,False)\n    res = res.rstrip()\n    return (res,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        r = []\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                r.append(s[i])\n        if len(r) == len(s):\n            r.reverse()\n            return (''.join(r),True)\n        else:\n            return (''.join(r),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    s2 = ''\n    s2 = reverse_delete(s,c)\n    return (s2,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    for i in range(len(s)-1):\n        if s[i]==c:\n            result+=s[-i]\n    return result,reverse(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    result_reverse = []\n    for i in range(len(s)-1):\n        if s[i-1] == c[i]:\n            result.append(s[i-1])\n            result_reverse.append(c[i])\n        else:\n            result.append(s[i-1])\n            result_reverse.append(s[i])\n    result.reverse()\n    result_reverse.reverse()\n    return (result,result_reverse)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not len(s):\n        return (s,False)\n    r=[]\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            r.append(s[i])\n    r.reverse()\n    r.reverse()\n    return (r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result,flag = False,True\n    s = s.lower()\n    c = c.lower()\n    for i in range(len(s)):\n        if s[i] in c and i+1<len(s) and s[i+1] in c and s[i-1] in c and s[i-2] in c:\n            s.pop(i)\n            s.pop(i+1)\n            s.pop(i-2)\n            s.pop(i-1)\n            result = result or c in s\n            flag = flag or result\n    return result,flag", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for i in range(0,len(s)):\n        if s[i]!= c:\n            result.append(s[i])\n    return result,result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #first of all, reverse s\n    s = s.lower()\n    r = reversed(s)\n    #then we check if there are any equal characters\n    for i in r:\n        if c in i:\n            del r[i]\n    #check if the result string is palindrome\n    return s,r", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n\n    start = 0\n    end = len(s)\n    reverse = list(s)\n    reverse.reverse()\n    while start < end:\n        if s[start]!= reverse[end]:\n            reverse[end] = s[end]\n            end -= 1\n        else:\n            break\n        start += 1\n\n    temp = ''\n    for i in range(start,end):\n        if s[i]!= c[start]:\n            temp += s[i]\n        else:\n            break\n    reverse.append(temp)\n    reverse.reverse()\n    reverse.append('')\n    return (''.join(reverse),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    ss = s.lower()\n    cc = c.lower()\n    if (ss == cc):\n        return (s,False)\n    for i in range(len(ss)-1,-1,-1):\n        if (ss[i] == cc[i+1]):\n            ss[i:i+1] = [' '] * (i+1) + ss[i:i]\n            s = ss\n            return (s,True)\n    s = ss\n    return (s,False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #Find all the pairs of characters\n    all_characters = set(s.split(\" \"))\n    all_characters.update(c.split(\" \"))\n    #remove all the pairs\n    s = \"\"\n    for c in all_characters:\n        if c in s:\n            s = s[:-1] + c + s[-1]\n            del all_characters[c]\n    #check if s is palindrome\n    if s == s:\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < 1:\n        return ('',False)\n    if len(c) < 1:\n        return (s,False)\n    if len(s) == len(c):\n        s = s.rstrip()\n        s = s.split()\n        l = len(s)\n        j = 0\n        while j < l:\n            if s[j]!= c:\n                s.pop(j)\n                j = 0\n            j += 1\n        if s == []:\n            return (s,True)\n        if j == 0:\n            return (s[0],False)\n        else:\n            return (s[-1],True)\n    else:\n        # reverse the string\n        s = s[::-1]\n        # delete all the characters that are equal to the characters in c\n        s = ''.join([''.join([c for c in s if c not in c]) for c in s])\n        # check if the result string is a palindrome\n        if s == s.rstrip():\n            return (s,True)\n        else:\n            return (s,False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Initialization\n    inplace = []\n    result = []\n    count = len(s)\n    while count > 0:\n        # We find the next element\n        next = s.find(c,count)\n        if next == -1:\n            break\n        # We add to result if the next element is not in inplace\n        if next not in inplace:\n            result.append(s[next:])\n            inplace.append(next)\n            count -= 1\n    # Finalization\n    if count == 0:\n        return (result[0],True)\n    # We remove first element\n    del result[0]\n    # We remove all elements in inplace\n    for e in inplace:\n        s = s[:e] + s[-e:]\n    # We check if the string is palindrome\n    return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0: return (\"\",False)\n    s2=reversed(s)\n    s2=s2.replace(c,'')\n    s2=s2.lower()\n    if s2.find(s)==-1: return (s2,True)\n    s2=s2.replace(s,'')\n    s2=s2.lower()\n    if s2.find(s)==-1: return (s2,True)\n    s1=s2.split(c)\n    s2=s[:]\n    for i in range(len(s1)):\n        if s1=s1[i].lower()==s2[i].lower(): s2.remove(s1[i])\n    if len(s2)==0: return (s1,True)\n    if s2.find(c)==-1: return (s2,False)\n    if s2.find(c)!=-1: s2=reverse_delete(s2,c)\n    return (s2,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c or len(s) == 0 or len(c) == 0:\n        return (s,False)\n    s2 = \"\"\n    for x in reversed(s):\n        if x == c[0]:\n            s2 += x\n            break\n    if s2 == s:\n        return (s2,False)\n    else:\n        return (s2,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=[]\n    res = 0\n    j=0\n    for i in range(len(s)):\n        if s[i] == c:\n            j=i+1\n            if j==len(s):\n                result.append(s[i])\n                res = 1\n        else:\n            result.append(s[i])\n        j+=1\n    if res:\n        return result, True\n    else:\n        return result, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #remove all the elements in the result\n    result = []\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result.append(s[i])\n    #check if the result is a palindrome\n    if result == s[::-1]:\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == 0:\n        return (c,True)\n    res = []\n    first = s[0]\n    last = s[-1]\n    for i in range(1,len(s)-1):\n        for j in range(1,len(c)-1):\n            if s[i] == c[j]:\n                res.append(s[i])\n                first = s[i]\n                last = s[-1]\n                break\n    res.append(s[-1])\n    res.append(first)\n    res.append(last)\n    return (''.join(res),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    n = len(c)\n    if n == 0:\n        return (s,False)\n    for i in xrange(n-1,-1,-1):\n        if s[i] == c[i]:\n            s = s[:i] + s[i+1:]\n            return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.upper()\n    if len(s) == 1:\n        return (s,False)\n    n = len(s)\n    a = []\n    for i in range(0,n):\n        a.append(s[0])\n    for i in range(1,n):\n        if s[i] == a[n-1-i-1]:\n            a.pop()\n    a.append(s[0])\n    reverse_s = ''.join(a)\n    for i in range(0,n):\n        if s[i]!= a[n-1-i-1]:\n            reverse_s = reverse_s[:i] + a[n-1-i-1] + reverse_s[i+2:]\n    if reverse_s == s:\n        return (reverse_s,True)\n    else:\n        return (reverse_s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Create a list of all characters in s\n    # [ 'a', 'b', 'c', 'd', 'e' ]\n    charlist = s.split()\n    # Get all the characters in c\n    charlist2 = c.split()\n    # Get a list of all characters in c that are not in s\n    charlist3 = [x for x in charlist2 if x not in charlist]\n    # Get a list of all characters in s that are not in c\n    charlist4 = [x for x in charlist3 if x not in charlist2]\n    # Get a list of all characters in s that are in c\n    charlist5 = [x for x in charlist4 if x in charlist2]\n    # Get a list of all characters in s that are not in c but are in s\n    charlist6 = [x for x in charlist5 if x not in charlist3]\n    # Remove characters from s that are in c\n    for i in range(len(charlist6)):\n        s = s[:-1] + s[-1:]\n    # Remove characters from c that are in s\n    for j in range(len(charlist5)):\n        c = c[:-1] + c[-1:]\n    #", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    reverse = reverse_string(s)\n    result = [reverse[i:i+len(c)] for i in range(len(reverse)-len(c))]\n    if result == s[::-1]:\n        return result,True\n    else:\n        return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    r=''\n    n=0\n    for i in range(len(s)-1):\n        if s[i]==c[i]:\n            r=s[n:n+2]+s[n+2:n+1]+s[n+1:]\n            n=n+2\n        else:\n            n=n+1\n    if r==s:\n        return (r,False)\n    else:\n        return (r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # TODO : Reverse delete check\n    res = []\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            res.append(s[i])\n    if len(res) > 0:\n        if reverse(res) == res:\n            return res[0], False\n    else:\n        return res[0], True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == c:\n            s[i] = None\n            count = count + 1\n    if count == 0:\n        return (s,True)\n    if count == 1:\n        return (s[::-1],True)\n    if count > 1:\n        return (reverse_delete(s,c),False)\n    else:\n        return (s[::-1],False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def is_palindrome(str):\n        \"\"\"check if the result string is palindrome\"\"\"\n        if str.upper() == str.lower():\n            return True\n        else:\n            return False\n    # check if the result string is palindrome\n    if is_palindrome(reverse(s)):\n        return reverse(s), False\n    else:\n        return reverse(s), True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return ('',False)\n    if len(c)==0:\n        return (s,True)\n    if len(s)==len(c):\n        return (s,False)\n    #sort(s)\n    #sort(c)\n    #s.reverse()\n    #c.reverse()\n    #for i in range(len(s)):\n    #    if s[i]==c[i]:\n    #        reverse_delete(s[i:],c[i:])\n    #        break\n    #    else:\n    #        reverse_delete(s[i:],c[i:])\n    #    print s[i]\n    #    print c[i]\n    #    if s[i]==c[i]:\n    #        reverse_delete(s[:-i],c[:-i])\n    #        break\n    #    else:\n    #        reverse_delete(s[:-i],c[:-i])\n    #    print s[i]\n    #    print c[i]\n    return reverse_delete(s[::-1],c[::-1])\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s.isdigit():\n        raise ValueError(\"Only numbers, letters and spaces allowed.\")\n    if s.lower() == c.lower():\n        raise ValueError(\"Not all the characters can be equal.\")\n    if len(c)>1:\n        raise ValueError(\"Not all the characters can be equal.\")\n    l = len(s)\n    if l>2:\n        if reverse(s) == reverse(c):\n            return s,True\n        else:\n            return s,False\n    else:\n        return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = str(s)\n    c = str(c)\n    result = []\n    result.append(s)\n    for i in range(len(s)):\n        if s[i] == c:\n            result.append(s[i])\n            i -= 1\n        elif s[i]!= c:\n            result.append(s[i])\n            i += 1\n    if len(result) == len(s):\n        result.reverse()\n        return result,True\n    else:\n        result.reverse()\n        return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s2=[]\n    s2.extend(s[::-1])\n    s2.extend(c[::-1])\n    if all(map(str.isalnum, s2)):\n        return s, True\n    else:\n        return s, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l,r = len(s),len(c)\n    if l!=r:\n        return False,False\n    for i in range(l):\n        if s[i]==c:\n            del s[i]\n    return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!=len(c):\n        return None,False\n    for i in range(len(c)):\n        if s[i]==c[i]:\n            s.pop(i)\n        else:\n            reverse_delete(s,c)\n    if reverse(s)!=s:\n        return None,False\n    return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    result= \"\"\n    tmp = s.split()\n    for i in range(len(tmp)):\n        if tmp[i]!= tmp[len(tmp)-1-i]:\n            if result!= \"\":\n                result += \" \"\n            result += tmp[i]\n        else:\n            break\n    result = result.strip()\n    return (result,True)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    if len(s) == 0:\n        return ('',False)\n    else:\n        cmap = map(lambda x: x.upper(),c)\n        cmap = map(lambda x: x.lower(),c)\n        new_s = \"\"\n        for char in reversed(s):\n            if char in cmap:\n                new_s += char\n        if new_s!= s:\n            return (new_s,False)\n        else:\n            return (new_s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    a=[]\n    #A list to store the result\n    a.append(\"\")\n    i=0\n    for x in s:\n        if x not in c:\n            a.append(x)\n        i+=1\n    if i==len(s):\n        return a,False\n    else:\n        reverse_s = \"\"\n        for j in range(len(s)-i):\n            reverse_s = reverse_s + s[i+j]\n        reverse_s = reverse_s.split()\n        if reverse_s[len(reverse_s)-1]!=s[len(s)-1]:\n            return a,False\n        return a,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    to_check = set()\n    for i in range(len(s)):\n        if s[i] in c and s[i]!='' and s[i]!= '\\t':\n            to_check.add(s[i])\n            result.append(s[i])\n    for i in range(len(s)):\n        if s[i] not in to_check:\n            result.append(s[i])\n    if len(result) > 0:\n        if all(result) == reverse(result):\n            return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l = len(s)\n    r = ''\n    c_len = len(c)\n    if c_len == 0:\n        return (s,False)\n\n    for i in range(l):\n        if s[i] == c[r-l]:\n            r = r + s[i]\n            r = r[:-l]\n            r = reverse_delete(r,c)\n    return (r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=\"\"\n    test = []\n    for i in range(len(s)):\n        if c.find(s[i]) > -1:\n            test.append(s[i])\n    for i in range(len(s)):\n        if s[i] == c[test.index(s[i])]:\n            del test[test.index(s[i])]\n    if len(test) == 0:\n        return (result,False)\n    elif len(test) == 1:\n        return (result,True)\n    else:\n        return (reverse_str(result),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #Avoid accessing the string twice\n    s = s.split(' ')\n    c = c.split(' ')\n    s = map(lambda x:x[1:],s)\n    c = map(lambda x:x[1:],c)\n    s.sort()\n    c.sort()\n    #Check if the result string is palindrome\n    for i in range(len(c)):\n        if s[i] == c[i]:\n            reverse_delete(s,c[:-i])\n        else:\n            return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #print s\n    #print c\n    if len(s)==0 or len(c)==0:\n        return (s,False)\n    else:\n        i=0\n        while i<len(s)-1:\n            j=i\n            while j>0 and s[j]!=s[j-1]:\n                j-=1\n            if j==0:\n                i+=1\n                continue\n            if c[i-j]==s[i-j]:\n                del s[i-j]\n                s=s[:]\n            i+=1", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    def find(str, x):\n        for i in range(len(str)):\n            if str[i] == x:\n                return str[i]\n            elif str[i] =='' and str[i - 1] =='':\n                return str[i]\n\n    # initialize string with space\n    str1 = ''\n    # initialize c\n    c = ''\n    # initialize result string\n    result = []\n    # initialize temporary\n    temp = ''\n    # go through each characters in s\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            find(str1,s[i])\n        else:\n            find(str1,c[i])\n            # if it is not equal return s and False\n            if str1!= s:\n                result.append(str1)\n                return s, False\n    # if it is equal return s and True\n    if str1 == s:\n        result.append(str1)\n        return s, True\n    else:\n        # if there is a space return s and False\n        if str1 =='':\n            return s, False\n        # otherwise add to result string\n        else:\n            result.append(str1)\n    # return the result\n    return ''.join(result), True</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = s.split(c)\n    for i in range(len(result)):\n        if result[i]!= result[len(result)-i-1]:\n            reverse_delete(result[i],c)\n            if result[len(result)-i-1] == result[i]:\n                result = result[:len(result)-i-1]\n                return(result,True)\n    return(result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #s.reverse()\n    print(\"For \",s,\",\",c,\", the result should be (\",s,\",False)\")\n    result=\"\"\n    for i in range(len(s)):\n        if s[i] in c:\n            result += s[i]\n            del s[i]\n        if len(result):\n            result += s[i:]\n            del s[i:]\n    print(\"For \",s,\",\",c,\", the result should be (\",result,\",False)\")\n    if len(result):\n        if s[len(result)-1] not in c:\n            result = result[:-1]\n            del result[-1]\n        else:\n            result = result[:-1]\n            del result[-1]\n    if len(result) and not s[len(result)-1] == result[-1]:\n        return (result,False)\n    else:\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l = len(s)\n    i = 0\n    for j in range(l):\n        if s[i] == c[i]:\n            del s[i]\n            i+=1\n        else:\n            i+=1\n    j = 0\n    r = s\n    while j < l:\n        if s[j]!= c[l-j-1]:\n            r += s[j]\n        j+=1\n    r += c[l-j-1]\n    if r == s:\n        return (r,False)\n    else:\n        return (r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n\n    # Store the current state of the current letter\n    current_state = ''\n    # Store the new state of each letter in the current state\n    new_state = ''\n    # Stores the number of times we visited a letter\n    visited = 0\n\n    # Flag to say that we are finished\n    done = False\n    # This is a dictionary to store the characters in s that have not been visited yet\n    in_state = {}\n    # This is a dictionary to store the characters in s that have been visited but not yet deleted\n    visited_but_not_deleted = {}\n\n    # Loop over the characters in s\n    for i in range(len(s)):\n        # If the current letter is equal to c, we need to change its new state\n        if s[i]==c:\n            # Store the current state of the current letter\n            current_state = current_state+s[i]\n            # Store the new state of each letter in the current state\n            new_state = new_state+s[i]\n            # Increment the number of times we visited this letter\n            visited += 1\n        # Else if we have not visited the current letter yet, we need to keep track of it\n        else:\n            # If the current letter is in the current", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for i in range(len(s)-1,-1,-1):\n        for j in range(len(s)-1,-1,-1):\n            if s[i] == s[j]:\n                result.append(s[i+1])\n                result.append(s[j])\n                result.append(s[i])\n                result.append(s[j])\n                result.append(s[i])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result.append(s[j])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result.append(s[j])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result.append(s[j+1])\n                result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l=len(s)\n    r=\"\"\n    for i in range(l-1):\n        for j in range(l):\n            if s[i] == c[j]:\n                s[i+1] = s[j]\n                r=r+s[i]\n    if r == s:\n        return (r,False)\n    else:\n        return (r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return ''.join(reverse(str(char)) for char in reversed(s) if char not in c),False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=[]\n    for i in range(len(s)):\n        if s[i]!=c[i]:\n            result.append(s[i])\n    if len(result)==1:\n        return result[0],False\n    else:\n        return result,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=\"\"\n    for i in range(len(s)):\n        if s[i]==c[0]:\n            result+=s[-i-1]\n        else:\n            result+=c[0]\n    result=result.lstrip(c[0])\n    return (result,True)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.upper()\n    c = c.upper()\n    c = ''.join(c) # Make it a list\n\n    # Find out if there is a character in c in the s\n    if c in s:\n        if s.endswith(c):\n            s = s[:-len(c)] + c # Update the string\n        else:\n            s = s[:-len(c)] + c + s[-len(c):] # Update the string\n    # Check if the result string is palindrome\n    if len(s) == len(s.upper()):\n        return (s,False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            reverse(s)\n            reverse(c)\n            s = s[1:]+c[0]+s[1:]\n            c = c[1:]+c[0]+s[1:]\n            return (s,False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    # then check if the result string is palindrome.\n    result=\"\"\n    check=True\n    for i in range(0,len(s)):\n        if s[i] == c[i]:\n            result=result+s[i]\n        else:\n            check=check and False\n            result=result+s[i]\n    return (result,check)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        temp = s\n        s = c\n        c = temp\n    strlist = c.split('.')\n    temp = ''\n    for i in range(len(strlist)):\n        if s == strlist[i]:\n            strlist[i] = ''\n    temp = ''.join(strlist)\n    return (s,c,reverse(temp))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    reverse_s = ''.join(reversed(s))\n    reverse_c = ''.join(reversed(c))\n    if reverse_s == reverse_c:\n        return (reverse_s,False)\n    else:\n        return (reverse_s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    ret,check = ('',False)\n    if len(s) > len(c):\n        s,c = c,s\n    for i in range(len(s) - 1,-1,-1):\n        if s[i] == c[i]:\n            ret = s[:i] + ret + s[i + 1:]\n            check = False\n            break\n    if not check:\n        ret = s[:-1] + ret + s[1:]\n    return ret,check", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return s,bool(reversed(c) == reversed(s))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l = len(s)\n    r = len(c)\n    if l == 0:\n        return (s,True)\n    if r == 0:\n        return (s,False)\n    if l!= r:\n        return (s,False)\n\n    left = 0\n    right = l\n    while left < r:\n        mid = (left+right)/2\n        if s[mid] == c[mid]:\n            if left == mid:\n                right = mid\n            else:\n                left = mid + 1\n        else:\n            right = mid\n    if left == r:\n        return (s,False)\n    return (s[left:right],True)\n\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #first convert the input string into list\n    str_list = [s[i:] for i in range(len(s))]\n    #create a dictionary where key is a string and value is another list of strings\n    # that are not equal to the key\n    new_str_list = {}\n    for key in str_list:\n        new_str_list[key] = []\n    for key in str_list:\n        if key in c:\n            new_str_list[key].append(c)\n    #now we can reverse the list and delete all the elements from the dictionary that are equal to c\n    rev_str_list = [s[::-1]]\n    for key in new_str_list:\n        for index in range(len(new_str_list[key])):\n            if new_str_list[key][index] == c:\n                del new_str_list[key][index]\n    #check if the result is palindrome\n    if new_str_list.values() == rev_str_list.values():\n        return (new_str_list.values(),True)\n    else:\n        return (new_str_list.values(),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (s,False)\n    #If they are equal then reverse them\n    s2 = s.rstrip()\n    s2 = s2.split('')\n    s2 = ''.join(reversed(s2))\n    if s2 == c:\n        return (s2,False)\n    #If the reverse string is equal to the reverse of c then return the original string\n    if s2 == s2.rstrip():\n        return (s,True)\n    #If the reverse of reverse is equal to reverse then return the original string\n    s2 = s2.split('')\n    s2 = ''.join(reversed(s2))\n    s2 = ''.join(reversed(s2))\n    s2 = s2.rstrip()\n    if s2 == s:\n        return (s2,False)\n    return ('',False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = \"\".join(map(chr, s))\n    n = len(s)\n    c = \"\".join(map(chr, c))\n    if n == 0:\n        return (s, False)\n    if n == 1:\n        return (s, True)\n    r = []\n    for i in range(0,n-1):\n        if s[i] == c[i]:\n            r.append(s[i])\n    s = \"\".join(r)\n    if n == 1:\n        return (s, True)\n    if n == 2:\n        return (s, False)\n    if n == 3:\n        return (s, True)\n    if s[n-1] == s[n-2] == s[n-3]:\n        r = []\n        for i in range(n-1,-1,-1):\n            r.append(s[i])\n        return (s.join(r), True)\n    if s[n-1] == s[n-2] == s[n-3] == s[n-4]:\n        r = []\n        for i in range(n-1,-1,-1):\n            r.append(s[i])\n        r.append(s[n-2])\n        return (s.join(r), True)\n    if s[n-1] == s[n-2] == s[n-3] == s[n-4] == s[n-5]:\n        r =", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    x = []\n    y = []\n    for i in range(len(s)):\n        if s[i] in c:\n            x.append(s[i])\n            y.append(c[len(c)-len(s)])\n    return (''.join(x),False) + (''.join(y),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c) == 1:\n        return reverse_delete(s[::-1],c),False\n    def _filter(str):\n        for i in range(0,len(str)):\n            if str[i] == c[i]:\n                return str[i:]\n        return str\n    return reverse_delete(_filter(s),c),reverse_delete(_filter(s),c),False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    num = len(s)\n    res = []\n    first_char = s[0]\n    last_char = s[-1]\n    reverse_string = \"\".join(c[::-1])\n    for i in xrange(num):\n        if s[i] == reverse_string[i-1]:\n            res.append(s[i-1])\n            reverse_string = \"\".join(reverse_string[i::-1])\n        else:\n            res.append(s[i])\n        reverse_string = \"\".join(reverse_string[i::-1])\n    if first_char == last_char:\n        res.append(first_char)\n    else:\n        res.append(last_char)\n    res.reverse()\n    return res,reverse_string", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in range(len(s)):\n        if s[i]==c[i]:\n            del s[i]\n    if len(s)==0:\n        return(\"none\",False)\n    else:\n        return(s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    result = \"\"\n    ispalindrome = False\n    for char in s:\n        if char in c:\n            result += char\n            continue\n        else:\n            if len(result) > 0:\n                result += reverse_delete(result,c)\n            else:\n                ispalindrome = True\n    return (result,ispalindrome)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',True)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == 1 and len(c) == 1:\n        return (s[0],False)\n    if len(s) == len(c) and s[0] == s[-1]:\n        return (s,False)\n    if len(s) == len(c) and s[0] == s[-1]:\n        return (reverse_delete(s[1:],c),False)\n    if len(s) == len(c) and s[0] == s[-1]:\n        return (reverse_delete(s,reverse_delete(s[1:],c)),False)\n    if len(s) == len(c) and s[0] == s[-1]:\n        return (reverse_delete(s[1:],reverse_delete(s,c)),False)\n    if len(s) == len(c) and s[0] == s[-1]:\n        return (reverse_delete(s,reverse_delete(s[1:],reverse_delete(s,c))),False)\n    if len(s) == len(c) and s[0] == s[-1]:\n        return (reverse_delete(s[1:],reverse_delete(reverse", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    try:\n        #reverse the first part of the string\n        tmp = s[::-1]\n    except IndexError:\n        print(\"ERROR, the string is not a palindrome\")\n        return (s, False)\n\n    #check if both strings are the same length\n    if len(s) <> len(tmp):\n        print(\"ERROR, the input strings are not the same length\")\n        return (s, False)\n\n    #create a new string to store the result\n    res = \"\"\n\n    #while not empty\n    while len(res) <> 0:\n\n        #check if the last character is in c\n        if tmp[-len(res)-1] == res[-len(res)-1]:\n            res = res[:-len(res)-1]\n        #if it is not in c, the result is not a palindrome\n        else:\n            res = res[:-len(res)-1] + res[-len(res)-1:]\n            print(\"ERROR, the result is not a palindrome\")\n            return (s, False)\n\n    return (s, True)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!=len(c):\n        return (s,False)\n    res = \"\"\n    for i in range(len(s)):\n        if s[i]==c:\n            res = res+s[i]\n        else:\n            res = res+s[i]\n    return (res,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    r = ''\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            r = r + s[i:]\n            s = s[:i]\n            if r == s:\n                return (r,False)\n    return (r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    a = \"\"\n    b = \"\"\n    for i in range(0, len(s)):\n        a += s[i]\n    a = reversed(a)\n    for i in range(0, len(c)):\n        b += c[i]\n        a = reversed(a)\n        b = reversed(b)\n    if a == b:\n        return (a,True)\n    else:\n        return (a,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result=[]\n    for i in range(0,len(s)):\n        if s[i]==c:\n            del s[i]\n            result.append(s)\n    if len(result)>=1:\n        if result[0]==result[-1]:\n            del result[0]\n        result[0]=result[-1]+result[0]\n        return result,True\n    else:\n        return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    cs= c.split(\"\")\n    d = []\n    i = 0\n    j = 0\n    r = \"\"\n    while i < len(s):\n        if s[i] == cs[i]:\n            i += 1\n            while j < len(s):\n                if s[j] == cs[i]:\n                    j += 1\n                    d.append(s[i:j])\n                    j = 0\n                j += 1\n                i += 1\n        i += 1\n    return (r,d)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,False)\n    if len(s) == 2:\n        return (s,False)\n    if len(c) == 1:\n        return reverse_delete(s[1:],c)\n    if len(c) == 2:\n        if c == s[-1]:\n            return reverse_delete(s[2:],s[0:-1])\n        else:\n            return (s,False)\n    while True:\n        s2 = s[:-1]\n        if s2 == s:\n            return (s2,False)\n        if s2 == s[1:] and c[0] == s[0]:\n            s2 = s[:2]\n        if s2 == s[1:] and c[1] == s[0]:\n            s2 = s[1:3]\n        if s2 == s[1:2] and c[0] == s[0] and c[1] == s[1]:\n            s2 = s[:3]\n        if s2 == s[1:2] and c[0] == s[1] and c[1] == s[0]:\n            s2 = s[1:4]\n        if s2 == s[1:2] and c[0] == s[1] and c[1] == s[2] and c[2] == s[0]:\n            s2 = s[:4]\n        if s2 == s[1:2] and c[0] == s[2] and c[1] == s[1] and c[2] == s[0]:\n            s2 = s[:", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=list(s)\n    c=list(c)\n    a=[]\n    b=[]\n    for i in range(len(s)):\n        if s[i] == c:\n            a.append(s[i])\n            b.append(i)\n    a.reverse()\n    b.reverse()\n    if a == b:\n        return (s,False)\n    else:\n        return (''.join(s),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    print(\"Enter the string to be reverse deleted:\")\n    s = input(\">> \")\n    print(\"Enter the string to be compared with:\")\n    c = input(\">> \")\n\n    result = []\n    for i in range(len(s)-1):\n        if s[i] == c[i-1]:\n            result.append(s[i+1:])\n            s = s[:i]\n\n    if len(result) == 0:\n        result = s\n    else:\n        result.append(s)\n    result = reversed(result)\n\n    print(\"Result string: %s\" % result[0])\n    if result[1]:\n        print(\"Return the correct string\")\n        return (result[0],True)\n    else:\n        print(\"Return the palindrome\")\n        return (result[0],False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = ''.join(s)\n    result = ''.join(s.split(''.join(c)))\n    reverse = result.reverse()\n    if reverse == s:\n        return result, False\n    else:\n        return result, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l = len(s)\n    if l!=len(c):\n        print(\"not a palindrome\")\n        return (s,False)\n    return (s,reverse_delete(s,c,l))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def is_palindrome(s):\n        if len(s)<2:\n            return False\n        if s[0]!=s[-1]:\n            return False\n        if not (s[0]==s[len(s)-1]):\n            return False\n        for i in range(len(s)-2,-1,-1):\n            if s[i]==s[len(s)-1-i]:\n                return False\n        return True\n    if len(c)==0:\n        return s,False\n    if len(s)==0:\n        return reverse_delete(c,s),True\n    if len(s)<=len(c):\n        return reverse_delete(s,c),reverse_delete(c,s)\n    else:\n        return reverse_delete(c,s),reverse_delete(s,c)"]]