[["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return reverse_delete(s,c[:len(s)])\n    else:\n        return reverse_delete(s,c[len(s):])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result.append(s[i])\n    if len(result) == len(s):\n        return result,False\n    else:\n        return result,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[1:],c[:-2]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[:-2],c[:-2]),True)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[1:],c[:-3]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[:-3],c[:-3]),True)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[1:],c[:-4]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[:-4],c[:-4]),True)\n    if s[-5] == c", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-7:],c[-7:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-8:],c[-8:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),True)\n    for i in range(len(s)-len(c)):\n        if s[i:i+len(c)] == c[i:i-len(c)]:\n            s = s[:i] + s[i+len(c):]\n            c = c[:i] + c[i+len(c):]\n            reverse_delete(s,c)\n            return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) == len(c)+1:\n        return (s,False)\n    if len(s) == len(c)-1:\n        return (s,True)\n    if len(s) == len(c)-2:\n        return (s,False)\n    if len(s) == len(c)-3:\n        return (s,True)\n    if len(s) == len(c)-4:\n        return (s,False)\n    if len(s) == len(c)-5:\n        return (s,True)\n    if len(s) == len(c)-6:\n        return (s,False)\n    if len(s) == len(c)-7:\n        return (s,True)\n    if len(s) == len(c)-8:\n        return (s,False)\n    if len(s) == len(c)-9:\n        return (s,True)\n    if len(s) == len(c)-10:\n        return (s,False)\n    if len(s) == len(c)-11:\n        return", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-1:],c[-1:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-2:],c[-2:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if s[0] == c[0]:\n        return (s,False)\n    if s[-1] == c[-1]:\n        return (s,False)\n    if s[-2] == c[-2]:\n        return (s,False)\n    if s[-3] == c[-3]:\n        return (s,False)\n    if s[-4] == c[-4]:\n        return (s,False)\n    if s[-5] == c[-5]:\n        return (s,False)\n    if s[-6] == c[-6]:\n        return (s,False)\n    if s[-7] == c[-7]:\n        return (s,False)\n    if s[-8] == c[-8]:\n        return (s,False)\n    if s[-9] == c[-9]:\n        return (s,False)\n    if s[-10] == c[-10]:\n        return (s,False)\n    if s[-11] == c[-11]:\n        return (s,False)\n    if s[-12] == c[-12]:\n        return (s,False)\n    if s[-13] == c[-13]:\n        return (s,False)\n    if s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return reverse_delete(s,c[:len(s)-len(c)])\n    else:\n        return reverse_delete(s,c[len(s):])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-7:],c[-7:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-8:],c[-8:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s[1:],c[:-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),True)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s,c[:-1]),False)\n    return (reverse_delete(s,c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-2:],c[-2:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    if s[-1] == c[-1]:\n        return reverse_delete(s[:-1],c[:-1])\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s,c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s,c[:-2]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s,c[:-3]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s,c[:-4]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s,c[:-5]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s,c[:-6]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s,c[:-7]),False)\n    if s[-8] == c[-8]:\n        return (reverse_delete(s,c", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #check if the string is empty\n    if len(s) == 0:\n        return (s,False)\n    #check if the string is palindrome\n    if s == reverse(s):\n        return (s,True)\n    #check if the string is not palindrome\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[1:]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-1:],c[-1:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-2:],c[-2:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-1:],c[-1:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-2:],c[-2:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),True)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),False)\n    for i in range(len(s)-len(c)):\n        if s[i] == c[len(c)-1-i]:\n            s = s[:i] + s[i+1:]\n            c = c[:len(c)-1-i] + c[i+1:]\n            return (reverse_delete(s,c),False)\n    return (reverse_delete(s,c),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[1:],c[:-1]),True)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[:-2],c[:-2]),True)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[:-3],c[:-3]),True)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[:-4],c[:-4]),True)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[:-5],c[:-5]),True)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[:-6],c[:-6]),True)\n    if s[-8] ==", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-1:],c[-1:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-2:],c[-2:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[1:]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    return (reverse_delete(s[1:],c[:-1]),reverse_delete(s[:-1],c[1:]))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    return (reverse_delete(s[1:],c[:-1]),reverse_delete(s[:-1],c[1:]))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    if s[len(s)-1] == c[len(c)-1]:\n        return (reverse_delete(s[:-len(s)-1],c[:-len(c)-1]),True)\n    if s[len(s)-1] == c[0] and s[0] == c[-1]:\n        return (reverse_delete(s[:-len(s)-1],c[1:]),True)\n    if s[0] == c[-1] and s[-1] == c[0]:\n        return (reverse_delete(s[:-len(s)-1],c[1:]),True)\n    if s[len(s)-1] == c[0] and s[0] == c[0]:\n        return (reverse_delete(s[:-len(s)-1],c[1:]),True)\n    if s[len(s)-1] == c[-1] and s[-1] == c[-1]:\n        return (", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[0] == c[-1]:\n        return (reverse_delete(s[1:],c[:-1]),True)\n    if s[-1] == c[0]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    if s[0] == c[0] and s[-1] == c[-1]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    if s[0] == c[0] and s[-1] == c[0] and s[-2] == c[-2]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    if s[0] == c[0] and s[-1] == c[0] and s[-2] == c[0] and s[-3] == c[-3]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    if s[0] == c[0] and s[-1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[0] == c[-1]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    if s[-1] == c[0]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-1:],c[-1:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-2:],c[-2:]),True)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-4:],c[-4:]),True)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-6:],c[-6:]),True)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-2:],c[-2:]),True)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-3:],c[-3:]),True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),True)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            reverse_delete(s,c)\n            if s[i]!= c[i]:\n                return (s,False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result.append(s[i])\n    if len(result) == len(s):\n        return result,False\n    else:\n        return result,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (reverse_delete(s,c),True)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),True)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            reverse_delete(s,c)\n    return (reverse_delete(s,c),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    return (reverse_delete(s[1:],c[:-1]),reverse_delete(s[:-1],c[1:]))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c[1:]),False)\n    return (reverse_delete(s,c[1:]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #check if the result string is palindrome\n    if s.count(c) == 0:\n        return (s,False)\n    else:\n        #check if the result string is palindrome\n        if s.count(c) == 1:\n            return (s,True)\n        else:\n            #check if the result string is palindrome\n            if s.count(c) == 2:\n                return (reverse_delete(s,c),True)\n            else:\n                #check if the result string is palindrome\n                if s.count(c) == 3:\n                    return (reverse_delete(s,c),False)\n                else:\n                    #check if the result string is palindrome\n                    if s.count(c) == 4:\n                        return (reverse_delete(s,c),False)\n                    else:\n                        #check if the result string is palindrome\n                        if s.count(c) == 5:\n                            return (reverse_delete(s,c),False)\n                        else:\n                            #check if the result string is palindrome\n                            if s.count(c) == 6:\n                                return (reverse_delete(s,c),False)\n                            else:\n                                #check if the result string is palindrome\n                                if s.count(c) == 7:\n                                    return (reverse_delete(s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-1:],c[-1:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-2:],c[-2:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return reverse_delete(s,c[:len(s)])\n    else:\n        return reverse_delete(s,c[len(s):])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (reverse_delete(s,c),True)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),True)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s,c),True)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s,c),True)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s,c),True)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s,c),True)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s,c),True)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s,c),True)\n    if s[-7] == c[-7]:", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[0] == c[-1]:\n        return (reverse_delete(s[1:],c[:-1]),True)\n    if s[-1] == c[0]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    return (reverse_delete(s[1:],c[:-1]),reverse_delete(s[:-1],c[1:]))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[1:]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    return (reverse_delete(s[1:],c[:-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return reverse_delete(s,c[:len(s)])\n    else:\n        return reverse_delete(s,c[len(s):])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-7:],c[-7:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-8:],c[-8:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    return reverse_delete(s[1:],c[:-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-1:],c[-1:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-2:],c[-2:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return ('',False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[-1]:\n        return (reverse_delete(s,c),False)\n    else:\n        return (reverse_delete(s,c),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),True)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s[i] = s[i].rstrip(c[i])\n            reverse_delete(s,c)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    return (reverse_delete(s[1:],c[:-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return reverse_delete(s,c[:len(s)])\n    else:\n        return reverse_delete(s,c[len(s):])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    else:\n        return (reverse_delete(s,c),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[len(s)-1] == c[len(s)-1]:\n        return (reverse_delete(s[:-len(s)-1],c[:-len(s)-1]),False)\n    if s[len(s)-1] == c[0]:\n        return (reverse_delete(s[:-len(s)-1],c[1:]),True)\n    if s[0] == c[-1]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    if s[-1] == c[0]:\n        return (reverse_delete(s[:-1],c[1:]),True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-7:],c[-7:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-8:],c[-8:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c[1:]),False)\n    else:\n        return (reverse_delete(s,c[1:]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #check if the result string is palindrome\n    if s == reverse(s):\n        return (s,False)\n    #check if the result string is not palindrome\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[1:],c[:-1]),True)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[:-2],c[:-2]),True)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[:-3],c[:-3]),True)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[:-4],c[:-4]),True)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[:-5],c[:-5]),True)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[:-6],c[:-6]),True)\n    if s[-8] ==", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[1:],c[:-1]),True)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[:-2],c[:-2]),True)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[:-3],c[:-3]),True)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[:-4],c[:-4]),True)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[:-5],c[:-5]),True)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[:-6],c[:-6]),True)\n    if s[-8] ==", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-1:],c[-1:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-2:],c[-2:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[1:],c[:-1]),True)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[:-2],c[:-2]),True)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[:-3],c[:-3]),True)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[:-4],c[:-4]),True)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[:-5],c[:-5]),True)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[:-6],c[:-6]),True)\n    if s[-8] ==", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s[1:],c[:-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    return (reverse_delete(s[1:],c[:-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[1:],c[:-1]),True)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[1:],c[:-1]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[1:],c[:-1]),True)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    if s[-5] == c[-5]:\n        return (", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    return (reverse_delete(s[1:],c[:-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-1:],c[-1:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-2:],c[-2:]),True)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    return (reverse_delete(s[-1:],c[-1:]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #check if the result string is palindrome\n    if s.count(c) == 0:\n        return (s,False)\n    #check if the result string is palindrome\n    if s.count(c) == 1:\n        return (s,True)\n    #check if the result string is palindrome\n    if s.count(c) == 2:\n        return (reverse_delete(s,c),True)\n    #check if the result string is palindrome\n    if s.count(c) == 3:\n        return (reverse_delete(s,c),False)\n    #check if the result string is palindrome\n    if s.count(c) == 4:\n        return (reverse_delete(s,c),True)\n    #check if the result string is palindrome\n    if s.count(c) == 5:\n        return (reverse_delete(s,c),False)\n    #check if the result string is palindrome\n    if s.count(c) == 6:\n        return (reverse_delete(s,c),True)\n    #check if the result string is palindrome\n    if s.count(c) == 7:\n        return (reverse_delete(s,c),False)\n    #check if the result string is palind", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result.append(s[i])\n            s.pop(i)\n    if len(result) == 0:\n        return (s,False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[-1]:\n        return (reverse_delete(s[1:],c),False)\n    else:\n        return (reverse_delete(s[1:],c),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    return (reverse_delete(s[1:],c[:-1]),reverse_delete(s[:-1],c[1:]))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return ('',False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    return (reverse_delete(s[1:],c[:-1]),reverse_delete(s[:-1],c[:-1]))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-1:],c[-1:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-2:],c[-2:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),True)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            reverse_delete(s,c)\n    return (reverse_delete(s,c),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    else:\n        return (reverse_delete(s,c),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-1:],c[-1:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-2:],c[-2:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-1:],c[-1:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-2:],c[-2:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return reverse_delete(s,c)\n    if len(c) > len(s):\n        return reverse_delete(s,c)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s[i] = s[i].rstrip(c[i])\n            if s[i] == '':\n                s[i] = ''\n            if s[i] == c[i]:\n                s[i] = s[i].rstrip(c[i])\n                if s[i] == '':\n                    s[i] = ''\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),True)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s[i] = s[i].upper()\n            s[i] = s[i].lower()\n            s[i] = s[i].replace(\" \",\"\")\n            s[i] = s[i].replace(\"_\",\"\")\n            s[i] = s[i].replace(\"(\",\"\")\n            s[i] = s[i].replace(\")\",\"\")\n            s[i] = s[i].replace(\"[\",\"\")\n            s[i] = s[i].replace(\"]\",\"\")\n            s[i] = s[i].replace(\"{\",\"\")\n            s[i] = s[i].replace(\"}\",\"\")\n            s[i] = s[i].replace(\"(\",\"\")\n            s[i] = s[i].replace(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    if len(c) > len(s):\n        return (reverse_delete(s,c),True)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s = s[:i] + s[i+1:]\n            c = c[:i] + c[i+1:]\n            reverse_delete(s,c)\n            if s == c:\n                return (s,True)\n            else:\n                return (s,False)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c[1:]),False)\n    else:\n        return (reverse_delete(s,c[1:]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    return (reverse_delete(s[1:],c[:-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return reverse_delete(s,c[:len(s)])\n    else:\n        return reverse_delete(s,c[len(s):])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (reverse_delete(s,c),True)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),True)\n    for i in range(len(s)-len(c)):\n        if s[i:i+len(c)] == c[i:i+len(c)]:\n            s = s[:i] + s[i+len(c):]\n            c = c[:i] + c[i+len(c):]\n            return (reverse_delete(s,c),False)\n    return (reverse_delete(s,c),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-1:],c[-1:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-2:],c[-2:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    return reverse_delete(s[1:],c[:-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[1:]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s[1:],c[0:1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-2:],c[-2:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-7:],c[-7:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s[1:],c[:-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (reverse_delete(s,c),True)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),True)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s,c),True)\n    if s[0] == c[-1]:\n        return (reverse_delete(s,c),False)\n    if s[-1] == c[0]:\n        return (reverse_delete(s,c),True)\n    return (reverse_delete(s,c),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (reverse_delete(s,c),True)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s,c),True)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s,c),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s,c),True)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s,c),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s,c),True)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s,c),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s,c),True)\n    if s[-8] == c[-8]:\n        return (reverse_delete(s,c),False)\n    if s[-9] == c[-9]:\n        return", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result += s[i:]\n            s = s[:i]\n    if s == result:\n        return (s,False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s[1:],c[:-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    return (reverse_delete(s[1:],c[:-1]),reverse_delete(s[:-1],c[:-1]))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) == len(c)+1:\n        return (s,False)\n    if len(s) == len(c)-1:\n        return (s,True)\n    if len(s) == len(c)-2:\n        return (s,False)\n    if len(s) == len(c)-3:\n        return (s,True)\n    if len(s) == len(c)-4:\n        return (s,False)\n    if len(s) == len(c)-5:\n        return (s,True)\n    if len(s) == len(c)-6:\n        return (s,False)\n    if len(s) == len(c)-7:\n        return (s,True)\n    if len(s) == len(c)-8:\n        return (s,False)\n    if len(s) == len(c)-9:\n        return (s,True)\n    if len(s) == len(c)-10:\n        return (s,False)\n    if len(s) == len(c)-11:\n        return", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (reverse_delete(s,c),True)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),True)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s,c),True)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s,c),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s,c),True)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s,c),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s,c),True)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s,c),False)\n    if s[-7] == c[-7]:", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-7:],c[-7:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-8:],c[-8:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    return (reverse_delete(s[1:],c[:-1]),reverse_delete(s[:-1],c[:-1]))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c),False)\n    return (reverse_delete(s[1:],c),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),True)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s[i] = s[i].rstrip(c[i])\n            reverse_delete(s,c)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),True)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s,c),True)\n    if s[0] == c[-1]:\n        return (reverse_delete(s,c),False)\n    if s[-1] == c[0]:\n        return (reverse_delete(s,c),True)\n    return (reverse_delete(s,c),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s,c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s,c[:-2]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s,c[:-3]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s,c[:-4]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s,c[:-5]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s,c[:-6]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s,c[:-7]),False)\n    if s[-8] == c[-8]:\n        return (reverse_delete(s,c", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),True)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s,c),True)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s,c),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s,c),True)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s,c),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s,c),True)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s,c),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #check if the result string is palindrome\n    if not reverse(s) == s:\n        return (s,False)\n    #check if the result string is empty\n    if len(s) == 0:\n        return (s,True)\n    #check if the result string is equal to the original string\n    if s == reverse(s):\n        return (s,True)\n    #check if the result string is equal to the reversed string\n    if s == reverse(reverse(s)):\n        return (s,True)\n    #check if the result string is equal to the original string\n    if s == reverse(reverse(s)):\n        return (s,True)\n    #check if the result string is equal to the reversed string\n    if s == reverse(reverse(reverse(s))):\n        return (s,True)\n    #check if the result string is equal to the original string\n    if s == reverse(reverse(reverse(s))):\n        return (s,True)\n    #check if the result string is equal to the reversed string\n    if s == reverse(reverse(reverse(reverse(s)))):\n        return (s,True)\n    #check if the result string is equal to the original string\n    if s == reverse(reverse(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return reverse_delete(s,c)\n    else:\n        return reverse_delete(c,s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-1:],c[-1:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-2:],c[-2:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[1:],c[:-2]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[:-2],c[:-3]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[:-3],c[:-4]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[:-4],c[:-5]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[:-5],c[:-6]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[:-6],c[:-7]),False)\n    if s[-8]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-7:],c[-7:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-8:],c[-8:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c[1:]),False)\n    else:\n        return (reverse_delete(s,c[1:]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    return (reverse_delete(s[1:],c[:-1]),reverse_delete(s[:-1],c[1:]))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    return (reverse_delete(s[1:],c[:-1]),reverse_delete(s[:-1],c[1:]))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s[1:],c[:-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return reverse_delete(s,c[:len(s)])\n    else:\n        return reverse_delete(s,c[len(s):])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    if len(c) > len(s):\n        return (reverse_delete(s,c),True)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s,c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s,c[:-2]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s,c[:-3]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s,c[:-4]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s,c[:-5]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s,c[:-6]),", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if s[0] == c[0]:\n        return (s,False)\n    if s[-1] == c[-1]:\n        return (s,False)\n    if s[-2] == c[-2]:\n        return (s,False)\n    if s[-3] == c[-3]:\n        return (s,False)\n    if s[-4] == c[-4]:\n        return (s,False)\n    if s[-5] == c[-5]:\n        return (s,False)\n    if s[-6] == c[-6]:\n        return (s,False)\n    if s[-7] == c[-7]:\n        return (s,False)\n    if s[-8] == c[-8]:\n        return (s,False)\n    if s[-9] == c[-9]:\n        return (s,False)\n    if s[-10] == c[-10]:\n        return (s,False)\n    if s[-11] == c[-11]:\n        return (s,False)\n    if s[-12] == c[-12]:\n        return (s,False)\n    if s[-13] == c[-13]:\n        return (s,False)\n    if s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    if s[-1] == c[-1]:\n        return reverse_delete(s[:-1],c[:-1])\n    return reverse_delete(s[1:],c[:-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return ('',False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    return (reverse_delete(s[1:],c[:-1]),reverse_delete(s[:-1],c[:-1]))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c[1:]),False)\n    return (reverse_delete(s,c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s,c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s,c[:-2]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s,c[:-3]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s,c[:-4]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s,c[:-5]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s,c[:-6]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s,c[:-7]),False)\n    if s[-8] == c[-8]:\n        return (reverse_delete(s,c", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s[1:],c[:-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (reverse_delete(s,c),True)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),True)\n    if s[0] == c[0]:\n        return (reverse_delete(s,c),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s,c),True)\n    if s[0] == c[-1]:\n        return (reverse_delete(s,c),False)\n    if s[-1] == c[0]:\n        return (reverse_delete(s,c),True)\n    if s[0] == c[0] and s[-1] == c[-1]:\n        return (reverse_delete(s,c),True)\n    if s[0] == c[0] and s[-1] == c[0] and s[-2] == c[-2]:\n        return (reverse_delete(s,c),True)\n    if s[0] == c[0] and s[-1] == c[0] and s[-2] == c[0] and s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),True)\n    return (reverse_delete(s[1:],c[:-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) == len(c)+1:\n        return (s,False)\n    if len(s) == len(c)-1:\n        return (s,True)\n    if len(s) == len(c)-2:\n        return (s,False)\n    if len(s) == len(c)-3:\n        return (s,True)\n    if len(s) == len(c)-4:\n        return (s,False)\n    if len(s) == len(c)-5:\n        return (s,True)\n    if len(s) == len(c)-6:\n        return (s,False)\n    if len(s) == len(c)-7:\n        return (s,True)\n    if len(s) == len(c)-8:\n        return (s,False)\n    if len(s) == len(c)-9:\n        return (s,True)\n    if len(s) == len(c)-10:\n        return (s,False)\n    if len(s) == len(c)-11:\n        return", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    return (reverse_delete(s[1:],c[:-1]),reverse_delete(s[:-1],c[:-1]))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    if s[-1] == c[-1]:\n        return reverse_delete(s[:-1],c[:-1])\n    return reverse_delete(s[1:],c[:-1]) + reverse_delete(s[:-1],c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-7:],c[-7:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-8:],c[-8:]),False)\n    if s[-8] == c[-8]:\n        return (reverse_delete(s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-1:],c[-1:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-2:],c[-2:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s[1:],c[:-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return reverse_delete(s,c[:len(s)-len(c)])\n    else:\n        return reverse_delete(s,c[len(s):])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c),False)\n    else:\n        return (reverse_delete(s,c),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #check if the result string is palindrome\n    if s == reverse(s):\n        return (s,False)\n    #check if the result string is empty\n    if len(s) == 0:\n        return (s,True)\n    #check if the result string is not empty\n    if len(s) > 0:\n        #check if the result string is not a palindrome\n        if not is_palindrome(s):\n            return (s,False)\n        #check if the result string is a palindrome\n        else:\n            return (reverse(s),True)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-2:],c[-2:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-4:],c[-4:]),False)\n    if s[-5] == c[-5]:\n        return (reverse_delete(s[-5:],c[-5:]),False)\n    if s[-6] == c[-6]:\n        return (reverse_delete(s[-6:],c[-6:]),False)\n    if s[-7] == c[-7]:\n        return (reverse_delete(s[-7:],c[-7:]),False)\n    if s[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),True)\n    if s[-2] == c[-2]:\n        return (reverse_delete(s[-1:],c[-1:]),False)\n    if s[-3] == c[-3]:\n        return (reverse_delete(s[-2:],c[-2:]),True)\n    if s[-4] == c[-4]:\n        return (reverse_delete(s[-3:],c[-3:]),False)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    else:\n        return (reverse_delete(s[1:],c[1:]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c[1:]),False)\n    if s[-1] == c[-1]:\n        return (reverse_delete(s[:-1],c[:-1]),False)\n    return (reverse_delete(s[1:],c[:-1]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s[1:],c[:-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (reverse_delete(s,c),False)\n    else:\n        return (reverse_delete(s,c),True)"]]