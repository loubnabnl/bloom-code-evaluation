[["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Init\n    palindrome = ''\n    start_index = 0\n    max_length = len(string)\n    min_length = max_length\n    current_max_length = max_length\n\n    # Try to find the longest palindrome\n    while len(string[start_index:start_index + current_max_length]) > 0 and not is_palindrome(string[start_index:start_index + current_max_length]):\n        current_max_length -= 1\n        if current_max_length == min_length:\n            break\n\n        start_index += 1\n        current_max_length = max_length\n\n    if current_max_length == min_length:\n        palindrome = string[start_index:]\n    else:\n        palindrome = string[start_index:start_index + current_max_length]\n\n    return make_palindrome(palindrome)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    def reverse(string: str) -> str:\n        \"\"\" Reverse given string \"\"\"\n        return ''.join([char for char in string if char!= ''])\n\n    def longest_prefix(string: str) -> str:\n        \"\"\" Return longest prefix that is a palindrome \"\"\"\n        return ''.join([char for char in string if char == ''])\n\n    def longest_postfix(string: str) -> str:\n        \"\"\" Return longest suffix that is a palindrome \"\"\"\n        return ''.join([char for char in string if char!= ''])\n\n    if string == '':\n        return ''\n\n    if len(string) == 0:\n        return string\n\n    if len(string) == 1:\n        return string\n\n    longest_prefix = longest_prefix(string)\n    longest_postfix = longest_postfix(string)\n\n    if string[0]!= longest_prefix[0]:\n        return longest_prefix\n\n    longest_postfix = reverse(longest_postfix)\n\n    if string[-1]!= longest_postfix[-1]:\n        return longest_postfix\n\n    return ''.join([longest_prefix[0], longest_postfix[-1]])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.upper()\n    if string == '':\n        return ''\n    if not is_palindrome(string):\n        raise Exception(\"String is not a palindrome\")\n    pre = ''\n    suff = string\n    post = ''\n    while suff:\n        if is_palindrome(suff):\n            post = ''\n        else:\n            post = suff\n        pre = pre + post\n        suff = string[suff]\n    return pre", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    return make_palindrome(string.replace('-',''))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # The longest palindrome prefix.\n    longest_prefix = ''\n    longest_prefix_len = 0\n\n    # The longest palindrome suffix.\n    longest_suffix = ''\n    longest_suffix_len = 0\n\n    # The longest palindrome prefix and suffix.\n    longest_prefix_suffix = ''\n    longest_prefix_suffix_len = 0\n\n    # The reverse string of the longest prefix.\n    longest_prefix_reverse = ''\n    longest_prefix_reverse_len = 0\n\n    # The reverse string of the longest suffix.\n    longest_suffix_reverse = ''\n    longest_suffix_reverse_len = 0\n\n    # The reverse string of the longest prefix and suffix.\n    longest_prefix_suffix_reverse = ''\n    longest_prefix_suffix_reverse_len = 0\n\n    # True iff the string is a palindrome.\n    is_palindrome = is_palindrome(string)\n\n    for char in string:\n        if char in longest_prefix:\n            longest_prefix_len += 1\n        if char in longest_suffix:\n            longest_suffix_len += 1\n        if char in longest_prefix and char in longest_suffix:\n            longest_prefix_suffix_len += 1\n\n        if is_palindrome:\n            # Append to the end of the string the reverse of the longest palindrome prefix.\n            if char in longest_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    l = len(string)\n    if l == 0:\n        return ''\n    if l == 1:\n        return string\n    # Otherwise, we will have a palindromic suffix.\n    i = 0\n    while True:\n        if string[i:i + l - 1] == string[i + l - 1:]:\n            # We are done.\n            return string[-(l - 1):]\n        i += 1\n        if string[i] == string[i + l - 1]:\n            # We are done.\n            return string[-(l - 1):]\n        if string[i] == string[i - l]:\n            # We are done.\n            return string[-(l - 1):]\n        if string[i - 1]!= string[i]:\n            # We are done.\n            return string[-(l - 1):]\n        if string[i - 1] == string[i]:\n            # We are done.\n            return string[-(l - 1):]\n        i -= 1\n        if i == 0:\n            # We are done.\n            return string[-(l - 1):]\n    # We are done.\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # TODO: implement using `reversed`\n    assert len(string) > 0\n    longest = len(string)\n    assert len(string) % 2 == 0\n\n    longest_prefix = string[:longest]\n    reverse_prefix = string[::-1].upper()\n    # Keep in mind that the start is at the end of the string (in Python)!\n    while True:\n        # Check if prefix is a palindrome\n        if is_palindrome(prefix):\n            return prefix + longest_prefix\n        # Append to the end of string reverse of prefix\n        prefix += reverse_prefix\n        longest = longest - len(prefix)\n\n    raise ValueError(\"Failed to find a palindrome\")", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    len_pre = len(string[:-1])\n    len_post = len(string[-1:])\n\n    if len_pre > len_post:\n        if is_palindrome(string[:-1]):\n            return make_palindrome(string[:-1])\n        else:\n            return string\n\n    if len_post > len_pre:\n        if is_palindrome(string[-1:]):\n            return make_palindrome(string[-1:])\n        else:\n            return string + make_palindrome(string[:len_post])\n    return string\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 1:\n        return string\n    else:\n        shortest = longest = string\n    index = 0\n    while index < len(shortest):\n        palindrome = shortest[index:index + len(shortest)]\n        if is_palindrome(palindrome):\n            longest = longest + palindrome\n            shortest = shortest[:index]\n            break\n        index += 1", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    longest_prefix = len(string)\n    longest_palindrome = longest_prefix\n\n    for i in range(0, longest_prefix - 1):\n        if string[i:i + 2] == string[i + 1 + 2:]:\n            break\n    else:\n        return ''\n\n    longest_palindrome += longest_prefix - 1\n    for i in range(0, longest_palindrome - 1):\n        if string[i:i + 2] == string[i + 1 + 2:]:\n            break\n    else:\n        return ''\n\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    max_length = len(string)\n    while len(palindrome) < max_length:\n        suffix = string[:-max_length]\n        if is_palindrome(suffix):\n            palindrome += suffix\n        else:\n            break\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n    longest_postfix = ''\n    for i in range(len(string)):\n        # This method is inspired by Python's unidecode module:\n        # https://docs.python.org/3/library/unidecode.html\n        if string[i] =='':\n            if not longest_prefix:\n                longest_prefix = string[i:]\n            else:\n                break\n        elif string[i] == '\\\\':\n            if not longest_postfix:\n                longest_postfix = string[:i-1]\n            else:\n                break\n        elif string[i] == '/':\n            if not longest_prefix:\n                longest_prefix = string[i+1:]\n            elif not longest_postfix:\n                longest_postfix = string[:i+1]\n        else:\n            if not longest_prefix and string[i] not in string.upper():\n                longest_prefix = string[i:]\n            if not longest_postfix and string[i] not in string.lower():\n                longest_postfix = string[:i-1]\n    return longest_prefix + longest_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n    longest_suffix = ''\n    for char in string:\n        if char =='':\n            continue\n        if is_palindrome(char):\n            if not longest_prefix:\n                longest_prefix = char\n        elif not longest_suffix:\n            longest_suffix = char\n\n    reverse_prefix = string[:-len(longest_prefix)]\n    reverse_suffix = string[-len(longest_suffix):]\n\n    return longest_prefix + reverse_prefix + longest_suffix + reverse_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = string[0:1]\n    suffix = string[-1]\n    longest = 0\n    while prefix.isalnum() and suffix.isalnum():\n        if is_palindrome(prefix + suffix):\n            if len(prefix) > longest:\n                longest = len(prefix)\n            if len(suffix) > longest:\n                longest = len(suffix)\n        prefix = prefix[0:-1]\n        suffix = suffix[1:]\n    longest = max([len(prefix), len(suffix)])\n    return prefix + suffix[::-1] if longest > 0 else ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length < 2:\n        return string\n\n    longest_prefix = ''\n    longest_postfix = ''\n    prefix = string[:length - 1]\n    postfix = string[-length: -1]\n\n    while prefix[-1] in string[:-1]:\n        prefix = prefix[:-1]\n    while postfix[-1] in string[-length: -length - 1]:\n        postfix = postfix[:-1]\n\n    prefix = make_palindrome(prefix)\n    postfix = make_palindrome(postfix)\n\n    return prefix + postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string +''\n\n    return palindrome(string)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) < 1:\n        raise ValueError('Empty string')\n    pal = ''\n    for i in range(len(string)):\n        if string[i] == string[-1 - i]:\n            break\n        else:\n            pal = pal + string[i]\n    return pal", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string.startswith('abcdefghijklmnopqrstuvwxyz'):\n        raise ValueError(\"Not a valid string\")\n    # Find the longest palindrome prefix\n    longest_palindrome = 'abcdefghijklmnopqrstuvwxyz'\n    longest_length = len(longest_palindrome)\n    palindrome_prefix = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(0, len(string)):\n        if string[i] in palindrome_prefix:\n            longest_palindrome_length = i\n            break\n    for i in range(0, longest_length - 1):\n        if string[i] in longest_palindrome:\n            prefix = string[:longest_palindrome_length + 1]\n            suffix = string[longest_palindrome_length + 1:]\n            return prefix + suffix\n    raise ValueError(\"Could not find a palindrome\")", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    # Get palindrome suffix\n    longest_postfix = len(string) - 1\n    longest_prefix = 0\n    longest_prefix_ends_with = False\n\n    for i in range(len(string)):\n        if string[i]!= string[longest_postfix]:\n            break\n\n        longest_prefix = i\n        longest_prefix_ends_with = not longest_prefix_ends_with\n\n    # Append prefix to the end of the string\n    if longest_prefix_ends_with:\n        string += string[:longest_prefix]\n\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string == string[::-1]:\n        return string\n    if string == string[::-1].rstrip(''):\n        return string[:-len(string[::-1])].rstrip('')\n    if string == string[::-1].rstrip('')[::-1]:\n        return string[:-len(string[::-1])].rstrip('')\n    return string.rstrip('').reverse() + string.lstrip('').reverse()", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    palindrome = ''\n    prefix = ''\n\n    while len(prefix) < len(string):\n        if is_palindrome(prefix):\n            palindrome += prefix\n            prefix = ''\n        else:\n            break\n\n    suffix = ''\n    pos = len(palindrome) - 1\n    while pos >= 0:\n        if is_palindrome(palindrome[pos:]):\n            suffix = palindrome[pos:]\n            break\n        pos -= 1\n\n    if prefix and suffix:\n        return palindrome[:prefix] + make_palindrome(suffix) + palindrome[pos:]\n    else:\n        return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[::-1] + string[:len(string) - len(make_palindrome(string[::-1]))]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    max_len = len(string)\n\n    if string == '':\n        return ''\n\n    for i in range(0, max_len, 2):\n        longest = ''\n        for j in range(0, len(string), 2):\n            if is_palindrome(string[j: i]):\n                longest = longest + string[j: i]\n                break\n\n        if longest == '':\n            break\n\n        if len(longest) >= len(string):\n            break\n\n        if len(longest) > max_len:\n            break\n\n        max_len = len(longest)\n\n    prefix = string[:max_len - 1]\n    suffix = string[-max_len:]\n\n    return prefix + suffix + prefix[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.lower()\n    longest = ''\n    prefix = string.rfind(string[::-1])\n    if prefix!= -1:\n        longest = string[prefix:prefix+len(string[::-1])]\n    return longest + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return string\n\n    if len(string) == 2:\n        return string\n\n    longest = 0\n\n    # Find longest postfix of supplied string that is a palindrome\n    for c in string:\n        if c.isupper():\n            if c == string[-1]:\n                return string[:-1]\n        else:\n            if c.isalpha():\n                if c.isupper():\n                    if c!= string[-1]:\n                        longest = len(c + string[:-1])\n                        break\n                    else:\n                        longest = len(c + string)\n                        break\n        if longest > len(string):\n            break\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    # TODO: This can be made much more efficient by factoring out common code.\n    if longest < len(string):\n        reverse = string[:-longest] + string[-longest:]\n        if reverse.isupper():\n            reverse = reverse[::-1]\n    else:\n        reverse = ''\n    return string + reverse", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    n = len(string)\n\n    if n == 0:\n        return ''\n\n    prefix = string[:n]\n    palindrome = string[n:]\n    suffix = string[:n - len(palindrome)]\n    i = 0\n    while i < n:\n        if is_palindrome(prefix + suffix[i]):\n            break\n        i += 1\n\n    prefix = prefix[:i] + suffix[i:]\n    return prefix + palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([make_palindrome(string[:i]) for i in range(len(string) - len(make_palindrome(string)))])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    assert len(string) > 1\n    # Get longest palindrome (as prefix)\n    for char in reversed(string[::-1]):\n        if is_palindrome(char):\n            return char\n\n    # Get longest prefix that is palindrome\n    for char in reversed(string):\n        if is_palindrome(char):\n            return char\n\n    # Get reverse of longest prefix\n    return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return''.join(x for x in reversed(string.split()) for y in x.split() if y.is_palindrome())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    longest_prefix = ''\n    longest_postfix = ''\n\n    for char in string:\n        if char in string[::-1]:\n            longest_postfix += char\n            if longest_palindrome == '':\n                longest_prefix += char\n            else:\n                longest_prefix += longest_prefix[:-len(longest_palindrome)] + char\n        else:\n            longest_postfix += char\n            if longest_palindrome == '':\n                longest_prefix += char\n            else:\n                longest_prefix += longest_prefix[:-len(longest_palindrome)] + longest_palindrome[:-len(longest_palindrome)] + char\n\n    return longest_prefix + longest_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefixes = set()\n    suffixes = set()\n    longest_prefix = None\n    longest_suffix = None\n\n    for character in string:\n        if character in 'ABCD':\n            prefixes.add(character)\n        elif character == '^':\n            longest_prefix = character\n        elif character == '_':\n            suffixes.add(character)\n\n    if len(prefixes) + len(suffixes) == 0:\n        return string\n\n    if longest_prefix == longest_suffix:\n        return string\n    elif longest_prefix:\n        return longest_prefix + make_palindrome(string[len(longest_prefix):])\n    else:\n        return longest_suffix + make_palindrome(string[len(longest_suffix):])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 1:\n        return string\n    if string[-1] in string[:-1]:\n        prefix, suffix = string[:-1], string[-1]\n    else:\n        prefix = string[:-1]\n        suffix = ''\n    longest_prefix = prefix.rfind('')\n    while longest_prefix >= 0:\n        # Add suffix to the end of the string, then\n        # find the longest prefix of the result that is a palindrome.\n        # The shortest such prefix will be the new prefix.\n        longest_suffix = len(suffix) - 1\n        suffix = suffix[:longest_suffix] + suffix[longest_suffix:].rstrip()\n        longest_prefix = prefix.rfind('')\n    return string + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return string\n    # find the longest palindrome postfix\n    longest_postfix = ''\n    for c in string[::-1]:\n        if c in string[::-1][::-1]:\n            continue\n        if is_palindrome(c):\n            longest_postfix = c\n    # find the longest prefix of string\n    longest_prefix = ''\n    for c in string[:-1]:\n        if c in string[:-1][::-1]:\n            continue\n        if is_palindrome(c):\n            longest_prefix = c\n    # remove the prefix from string\n    string = string[longest_prefix + 1:]\n    # reverse the prefix\n    string = string[:longest_prefix]\n    # append the suffix\n    string = longest_postfix + string\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Get the longest postfix of the string that is a palindrome\n    postfix = ''\n    if string is not None:\n        for i in range(len(string)):\n            if string[i] in [\n                    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n                    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                postfix += string[i]\n    else:\n        postfix = string\n    # Get the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    if postfix is not None:\n        for i in range(len(postfix)):\n            if postfix[i] in [\n                    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    words = [word for word in string.split()]\n    if not words:\n        return ''\n    last_letter = words[-1]\n    length = len(words)\n    if length <= 2:\n        return last_letter\n    prefix = words[:length - 2]\n    suffix = words[length - 2:]\n    longest_palindrome = []\n    for prefix in prefix:\n        for suffix in suffix:\n            try:\n                suffix = make_palindrome(suffix)\n            except ValueError:\n                continue\n            if suffix!= '':\n                longest_palindrome.append(prefix + suffix)\n    if longest_palindrome:\n        return longest_palindrome[-1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    palindrome = []\n    for char in string:\n        if char == string[-1]:\n            palindrome.append(char)\n    palindrome.reverse()\n    string = string[:-1]\n    for char in palindrome:\n        string += char\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return string\n\n    previous_char = string[0]\n    suffix = string[1:]\n    prefix = ''\n\n    # This will be the longest palindrome that begins with the previous char\n    longest_palindrome = ''\n    for i in range(len(suffix)):\n        if suffix[i] == previous_char:\n            longest_palindrome += suffix[i]\n\n    # This will be the longest palindrome that begins with the previous char\n    # that begins with the same char as the suffix\n    longest_palindrome += suffix[0]\n\n    # This will be the longest palindrome that begins with the previous char\n    # that begins with the same char as the suffix\n    # and is a palindrome\n    longest_palindrome += suffix[0]\n\n    while longest_palindrome!= '':\n        if len(longest_palindrome) > len(prefix):\n            prefix += longest_palindrome\n        longest_palindrome = longest_palindrome[::-1]\n\n    return prefix + make_palindrome(string[1:])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix_len, suffix_len = len(string), len(string) - 1\n    try:\n        return string[prefix_len: suffix_len]\n    except IndexError:\n        # no palindrome found\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    strings = [string]\n    longest_length = 0\n    longest_string = ''\n    while strings:\n        longest_string = ''.join(strings)\n        if is_palindrome(longest_string):\n            # Extract longest palindrome prefix that is also a palindrome\n            longest_length = max(longest_length, len(longest_string[::-1]))\n        strings.append(longest_string[::-1])\n\n    return longest_string[:longest_length]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find length of longest palindrome prefix\n    if len(string) > 1:\n        pos = 0\n        i = 0\n        while i < len(string) and pos < len(string):\n            if is_palindrome(string[pos]):\n                pos += 1\n            i += 1\n        if pos >= len(string):\n            return ''\n        palindrome_prefix = string[pos:]\n    else:\n        return ''\n\n    # Find length of longest palindrome suffix\n    if len(string) > 1:\n        pos = len(string) - 1\n        i = len(string) - 1\n        while i >= 0 and pos >= 0:\n            if is_palindrome(string[i]):\n                pos -= 1\n            i -= 1\n        if pos < 0:\n            return ''\n        palindrome_suffix = string[:-pos]\n    else:\n        return ''\n\n    # Build the result string\n    return string[:palindrome_prefix.rindex(palindrome_suffix[::-1])] + palindrome_suffix[::-1] + string[pos + len(palindrome_suffix):]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest = 0\n    palindrome = ''\n    for char in string:\n        if char in string[::-1]:\n            if is_palindrome(string[::-1]):\n                longest = len(char)\n                palindrome = char\n        else:\n            longest = 0\n\n    if is_palindrome(string):\n        if longest == 0:\n            return ''\n        else:\n            return make_palindrome(string[:longest] + string[longest:])\n\n    else:\n        return make_palindrome(string[:longest] + reverse(string[longest:]))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    assert is_palindrome(string)\n\n    # The longest palindrome suffix of given string that is palindrome\n    longest_palindrome = len(string)\n\n    # Get the longest palindrome prefix\n    longest_prefix = len(string) - longest_palindrome\n\n    # Get the longest palindrome suffix that begins with supplied string\n    palindrome_suffix = string[:longest_prefix]\n    # Create an empty string with length equal to length of supplied string\n    empty_string = ''\n    # Find the longest prefix of supplied string that is a palindrome\n    for i in range(longest_prefix):\n        if is_palindrome(palindrome_suffix[:i]):\n            empty_string += palindrome_suffix[:i]\n            break\n    # Append to the end of supplied string reverse of a palindrome prefix that comes before the palindromic suffix\n    return empty_string + string[longest_prefix:-longest_prefix]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) > 0:\n        prefix = string[:]\n        suffix = string[1:]\n\n        # Find longest palindrome prefix\n        longest_prefix = ''\n        while len(prefix) > 0:\n            for c in prefix:\n                if is_palindrome(c):\n                    break\n\n            if len(prefix) > 0:\n                longest_prefix += prefix[:]\n\n                prefix = prefix[1:]\n\n        # Find longest palindrome suffix\n        longest_suffix = ''\n        while len(suffix) > 0:\n            for c in suffix:\n                if is_palindrome(c):\n                    break\n\n            if len(suffix) > 0:\n                longest_suffix += suffix[:]\n\n                suffix = suffix[1:]\n\n        return prefix + longest_suffix + longest_prefix[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string_len = len(string)\n    if string_len < 2:\n        return ''\n    else:\n        longest_palindrome = 0\n        palindrome = ''\n        for i in range(string_len - 1):\n            if string[i:i + 1] in ['a', 'cat']:\n                palindrome += string[i:i + 1]\n                longest_palindrome = i + 1\n                break\n        palindrome += string[longest_palindrome - 1:]\n        return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    def reverse(string: str) -> str:\n        return string[::-1]\n\n    if string == '':\n        return ''\n\n    length = len(string)\n    for j in range(length):\n        if not is_palindrome(string[:j + 1]):\n            continue\n\n        prefix = string[:j + 1]\n        suffix = string[j + 1:]\n\n        suffix = reverse(suffix)\n\n        if is_palindrome(suffix):\n            return string[:j + 1] + suffix\n\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    pal = ''\n\n    i = len(string)\n    while i > 0 and is_palindrome(string[i - 1]):\n        i -= 1\n\n    if i > 0:\n        prefix = string[:i]\n        suffix = string[i:]\n        pal += reverse(prefix)\n\n    return pal", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    try:\n        palindrome = ''.join(reversed(string)[i: i + 1] for i in xrange(len(string)))\n    except ValueError:\n        return string\n    longest_palindrome = ''.join(i + string[i - 1: i + 1] for i in xrange(len(string)))\n    return longest_palindrome + reverse(palindrome)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return ''\n    palindrome = ''\n    suffix = string[len(string) - 1]\n    for prefix in string[:len(string) - 2]:\n        if is_palindrome(prefix + suffix):\n            palindrome = prefix + reverse(suffix)\n            break\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    last_digit = string[-1]\n    suffix = string[:-1]\n    while suffix[-1] == last_digit:\n        suffix = suffix[:-1]\n        last_digit = string[-1]\n\n    if last_digit in string[-2:]:\n        string = string[:-1] + reverse(string[-2:]) + string[-1]\n    else:\n        string = string[:-1] + reverse(string[:-2]) + string[-1]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest prefix that is a palindrome\n    palindrome_length = len(string) - 1\n    # Find the longest suffix\n    for i in range(palindrome_length):\n        if string[i] == string[palindrome_length - i - 1]:\n            break\n    else:\n        raise ValueError(f'Could not find palindromic suffix \"{string[palindrome_length - 1]}\" in \"{string}\".')\n    # Append reverse of a string prefix that comes before the palindromic suffix to the end of the string\n    return string[:palindrome_length] + string[palindrome_length:] + string[palindrome_length + 1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest = len(string)\n    prefix = ''\n    suffix = ''\n    for i in range(longest):\n        if string[i].isupper():\n            prefix = string[i:]\n        elif string[i].islower():\n            suffix = string[:i]\n        else:\n            raise ValueError('String \"%s\" is neither upper nor lower case' % string)\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    palindrome = string.reverse()\n    longest = 0\n    for char in string[:-1]:\n        if is_palindrome(char):\n            longest = max(longest, len(palindrome) + 1)\n    return palindrome + longest * char", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Create a list of prefixes and suffixes that the string begins with.\n    prefixes = list(string)\n    prefixes.append('')\n    suffixes = list(string)\n    suffixes.append('')\n\n    # Create a dictionary that stores the length of each prefix and suffix\n    prefixes_lengths = defaultdict(int)\n    suffixes_lengths = defaultdict(int)\n\n    # Iterate over all prefixes and suffixes\n    for prefix in prefixes:\n        # Check if prefix is a palindrome\n        if is_palindrome(prefix):\n            # Append suffix to the list of prefixes\n            prefixes.append(prefix)\n            prefixes_lengths[prefix] += 1\n            # Append suffix to the list of suffixes\n            suffixes.append(prefix[::-1])\n            suffixes_lengths[prefix[::-1]] += 1\n\n    # Iterate over all prefixes and suffixes\n    for suffix in suffixes:\n        # Check if suffix is a palindrome\n        if is_palindrome(suffix):\n            # Append prefix to the list of prefixes\n            prefixes.insert(0, suffix)\n            prefixes_lengths[prefix[0]] += 1\n            # Append prefix to the list of suffixes\n            suffixes.insert(0, suffix[::-1])\n            suffixes_lengths[", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    else:\n        longest_palindrome = len(string)\n        longest_prefix = ''\n        longest_suffix = ''\n        longest_prefix_length = 0\n        longest_suffix_length = 0\n        for i in range(0, len(string) - 1):\n            if string[i] == string[i + 1]:\n                if longest_prefix_length == 0 and is_palindrome(string[i: i + longest_prefix_length]):\n                    longest_prefix = string[i: i + longest_prefix_length]\n                    longest_prefix_length = len(longest_prefix)\n                    longest_suffix_length = i\n                    break\n                elif longest_suffix_length == 0 and is_palindrome(string[: longest_suffix_length] + string[i + longest_suffix_length:]):\n                    longest_suffix = string[: longest_suffix_length] + string[i + longest_suffix_length:]\n                    longest_suffix_length = len(longest_suffix)\n                    longest_suffix = longest_suffix[::-1]\n                    break\n            else:\n                if longest_prefix_length == 0 and is_palindrome(string[: i + longest_prefix_length]):\n                    longest_prefix = string[: i + longest_prefix_length]\n                    longest_prefix_length = len", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string)):\n        if string[i] == string[i-1]:\n            palindrome = string[i:]\n    if palindrome == '':\n        return string\n    else:\n        return make_palindrome(string[:palindrome.find(' ')] + string[palindrome.find(' '):])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return string\n\n    longest_palindrome = ''\n    shortest_palindrome = ''\n    for i in range(1, len(string)):\n        if string[i] == string[i - 1]:\n            continue\n\n        if is_palindrome(string[:i]):\n            if longest_palindrome == '':\n                longest_palindrome = string[:i]\n            else:\n                return longest_palindrome +'' + string[i:]\n\n        if is_palindrome(string[i:]):\n            if shortest_palindrome == '':\n                shortest_palindrome = string[i:]\n            else:\n                return shortest_palindrome +'' + string[:i]\n    return longest_palindrome +'' + shortest_palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n\n    for char in string:\n        if is_palindrome(char):\n            longest_prefix += char\n\n    for prefix in reversed(longest_prefix.split()):\n        if is_palindrome(prefix):\n            return prefix + string[len(prefix):]\n\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    return '{}'.format(string).replace(\n        string[:-1],\n        make_palindrome(string[:-1]),\n        string[-1],\n        string[-1:]\n    )", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest = None\n    for i in range(0, len(string)):\n        if is_palindrome(string[i:]):\n            if longest is None:\n                longest = i\n            else:\n                longest = max(longest, i)\n    reverse = make_palindrome(string[:longest])\n    return string[:longest] + reverse", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    for letter in string:\n        if letter in string[::-1]:\n            palindrome = string[::-1] + palindrome\n            return palindrome\n\n    raise ValueError(\"Can't make a palindrome out of this string\")", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return string\n    palindrome = ''\n    # Find longest palindrome\n    palindrome = 'abc'\n    while len(palindrome) < len(string):\n        palindrome += string[palindrome.index('abc'):palindrome.index('ab')]\n    # Find the longest palindrome prefix\n    palindrome = string[:palindrome.index('ab')]\n    prefix = ''\n    while palindrome.startswith(palindrome):\n        prefix += palindrome[palindrome.index('ab'):]\n    # Append a reverse to the end of the string\n    return string[:len(string) - len(prefix)] + reverse(prefix)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # The longest possible prefix\n    palindrome = ''\n    # Counter\n    counter = 0\n    # Iterate through all the characters\n    for char in string:\n        # If it is a palindrome\n        if is_palindrome(char):\n            # Increment the counter\n            counter += 1\n            # Append the current character\n            palindrome += char\n            # If counter is 0, then no palindrome has been found yet\n            if counter == 0:\n                # Return the palindrome\n                return palindrome\n        # If not, then just append it\n        else:\n            # Increment the counter\n            counter += 1\n            # Append it\n            palindrome += char\n    # Return the shortest palindrome\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = len(string) - len(string[::-1])\n    longest_palindrome_prefix = longest_palindrome - 1\n    longest_palindrome_postfix = longest_palindrome + 1\n    for i in range(longest_palindrome_prefix, 0, -1):\n        for j in range(longest_palindrome_postfix, 0, -1):\n            if is_palindrome(string[i] + string[j + 1]):\n                return string[i] + string[j + 1]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    for character in string:\n        if character in string[::-1]:\n            longest_prefix = max([len(string[:character]) - len(character) for character in string[::-1]])\n            longest_postfix = max([len(character) - len(string[character]) for character in string])\n            palindrome += str(string[character])[longest_prefix:] + str(string[:character])[longest_postfix:]\n\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    start = string.find(' ')\n    if start > 0:\n        return make_palindrome(string[:start])\n\n    if is_palindrome(string):\n        return string\n\n    else:\n        string = reverse(string)\n        for index, char in enumerate(string):\n            if is_palindrome(char):\n                string[index] = reverse(string[index:])\n\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    for char in string:\n        if char in string[::-1]:\n            if len(longest_prefix) < len(char):\n                longest_prefix = char\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    for char in string:\n        if char in string[:-1]:\n            if len(longest_suffix) < len(char):\n                longest_suffix = char\n    # Find prefix and suffix\n    prefix = ''\n    suffix = ''\n    for char in longest_prefix:\n        if char not in longest_suffix:\n            prefix += char\n    for char in longest_suffix:\n        if char not in longest_prefix:\n            suffix += char\n    # Compute new string\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    postfix = ''\n    prefix = ''\n    if len(string) > 1:\n        # If string is not empty\n        # We can find the longest postfix\n        if string[-1] in string[:-1]:\n            suffix = string[-1]\n            while is_palindrome(suffix):\n                postfix += suffix\n                suffix = ''\n        else:\n            # No palindrome found\n            return ''\n    # If string is empty\n    if not string:\n        return ''\n    # If string is not empty\n    # We can find the longest prefix\n    if string[0] in string[1:]:\n        prefix = string[0]\n        while is_palindrome(prefix):\n            prefix = string[0]\n            if prefix == '':\n                # No prefix found\n                return ''\n    # No prefix found\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = 0\n    longest_prefix = ''\n    longest_suffix = ''\n    for character in string:\n        if character =='':\n            longest_suffix = ''\n        elif character in 'abcdefghijklmnopqrstuvwxyz':\n            longest_prefix = character\n            longest_suffix = character\n        elif character in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            longest_prefix = character\n            longest_suffix = character\n        elif is_palindrome(character):\n            longest_palindrome = len(longest_prefix)\n        else:\n            longest_suffix = character\n        if longest_suffix == longest_prefix:\n            break\n    return longest_suffix + longest_prefix[::-1] + longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string:\n        string = string.upper()\n        longest_palindrome = ''\n        for char in string:\n            if is_alphanumeric(char):\n                if longest_palindrome:\n                    break\n                longest_palindrome += char\n            elif char in '!@#$%^&*()_+:;?[/]':\n                break\n            elif char == '\\\\':\n                break\n            elif char == '~':\n                break\n            elif char == '\\\\':\n                break\n            elif char == '~':\n                break\n            else:\n                break\n        new_string = longest_palindrome + string[::-1]\n        return new_string\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    pre_str, pal_str = string, string[::-1]\n    len_pre_str = len(pre_str)\n    len_pal_str = len(pal_str)\n    if len_pre_str > len_pal_str:\n        return make_palindrome(pal_str + pre_str)\n    return pal_str", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    from collections import defaultdict\n    longest = 0\n    if len(string) > 0:\n        palindrome_suffix = ''\n        longest_prefix = ''\n        prefixes = list(string.lower())\n        for word in prefixes:\n            if is_palindrome(word):\n                longest_prefix = word\n                break\n        suffix = ''\n        for word in reversed(prefixes):\n            if is_palindrome(word):\n                suffix = word\n                break\n        return longest_prefix + suffix\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # find longest palindrome\n    pal_len = len(string)\n    max = 0\n    for index, char in enumerate(string):\n        if char.isalpha():\n            max = index\n    # find longest prefix\n    pal_prefix_len = pal_len - max\n    pal_prefix = string[:pal_prefix_len]\n    pal_digits = string[pal_prefix_len:].split()\n    # reverse string\n    pal_digits.reverse()\n    pal_digits = ''.join(pal_digits)\n    # append to string\n    if pal_digits!= '':\n        string += pal_digits\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n\n    if length == 0:\n        return string\n    elif length == 1:\n        return string\n    elif length == 2:\n        return string[::-1]\n\n    num_palindromes = 0\n\n    while length > 1:\n        first = string.split('')[0]\n        second = string.split('')[1]\n        length -= 2\n        if first.isupper() and second.isupper():\n            num_palindromes += 1\n        elif first.isalpha() and second.isalpha():\n            num_palindromes += 1\n\n        if num_palindromes < length:\n            break\n\n        if is_palindrome(second):\n            return first + make_palindrome(second)\n        else:\n            return first + second", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    else:\n        pos = len(string) - 1\n        while pos > 0:\n            if string[pos] in 'abac':\n                end = pos - 1\n                while end >= 0 and string[end] not in 'abc' and string[end]!= string[pos - 1] and string[end]!= string[pos + 1]:\n                    end -= 1\n            else:\n                pos -= 1\n            if pos == 0:\n                return string\n            else:\n                prefix = string[:pos]\n                suffix = string[pos + 1:]\n                if len(prefix) == 0 and len(suffix) == 0 or prefix == suffix:\n                    return prefix + string[len(prefix) - 1:]\n                else:\n                    return prefix + make_palindrome(suffix)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string[:i] + make_palindrome(string[i+1:])\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    prefix_len = len(string)\n    palindrome = ''\n    palindrome_len = 0\n    while prefix_len > 0:\n        palindrome = prefix + palindrome[::-1]\n        palindrome_len += 1\n        prefix_len -= 1\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n    longest_postfix = ''\n    for i in range(len(string) - 1):\n        if is_palindrome(string[:i]):\n            if not longest_prefix:\n                longest_prefix = string[:i]\n            else:\n                longest_prefix += string[:i]\n    for i in range(len(string) - 1):\n        if is_palindrome(string[:len(string) - i - 1]):\n            if not longest_postfix:\n                longest_postfix = string[len(string) - i - 1]\n            else:\n                longest_postfix += string[len(string) - i - 1]\n    return longest_prefix + longest_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    pos = len(string)\n    max_length = 0\n    prefix = ''\n    suffix = ''\n    while pos > 0:\n        prefix = string[pos - 1:pos]\n        if is_palindrome(prefix):\n            suffix = string[pos - 1:]\n            if len(suffix) >= len(prefix):\n                max_length = len(prefix) + len(suffix)\n        pos -= 1\n\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    p = 0\n    while p < len(string) - 1:\n        if is_palindrome(string[p + 1:]):\n            p += 1\n        else:\n            return string[:p] + make_palindrome(string[:p - 1])\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    i = len(string)\n    if i == 0:\n        return ''\n    suffix = ''\n    prefix = ''\n    while i > 0:\n        if is_palindrome(string[i - 1:]):\n            suffix += string[i - 1:]\n            i -= 1\n        else:\n            if is_palindrome(string[i - 1:i + 1]):\n                prefix += string[i - 1:i + 1]\n                i -= 1\n        if is_palindrome(string[:i]):\n            break\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix_length = len(string)\n    palindrome = ''\n    while string[prefix_length - 1:].isalpha():\n        prefix_length -= 1\n    while len(string) > prefix_length:\n        if not is_palindrome(string[:prefix_length - 1]):\n            break\n        elif is_palindrome(string[:prefix_length - 1]):\n            palindrome += string[prefix_length - 1:]\n            prefix_length -= 1\n        else:\n            break\n    if prefix_length == len(string):\n        palindrome += string\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    length = 0\n    max_length = len(string)\n    prefix = ''\n    suffix = ''\n\n    for i in range(max_length):\n        if is_palindrome(string[i]):\n            length = i\n        if prefix and suffix:\n            palindrome += prefix\n            prefix = ''\n            suffix = ''\n        elif prefix:\n            suffix = string[i:]\n            palindrome += suffix[:-length]\n        else:\n            prefix = string[i:]\n\n    if prefix:\n        palindrome += prefix\n\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return ''\n\n    longest_palindrome = ''\n    palindrome_prefix = ''\n    longest_palindrome_tail = ''\n\n    for i in range(len(string) - 1):\n        if string[i + 1] == string[i]:\n            if string[i] == string[i + 1]:\n                longest_palindrome += string[i]\n            else:\n                longest_palindrome += string[i]\n                longest_palindrome_tail += string[i + 1]\n                if len(longest_palindrome) >= len(string):\n                    break\n    return longest_palindrome + longest_palindrome_tail", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # We will use the following strings:\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]\n    #   [...]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    current = ''\n    previous = ''\n    palindrome = ''\n    for character in string:\n        if character == current:\n            previous += character\n        elif character!= previous and character == previous:\n            previous = ''\n            current = ''\n            palindrome += character\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    if not is_palindrome(string):\n        return ''\n\n    if len(string) < 2:\n        return string\n\n    palindrome = string\n\n    prefix = string[:1]\n\n    suffix = string[-2:]\n\n    if suffix in ['', ''] or not is_palindrome(prefix):\n        return ''\n\n    while prefix:\n        prefix = prefix[::-1]\n        if prefix == suffix:\n            return palindrome + prefix\n        if prefix == '':\n            return palindrome + suffix\n        suffix = suffix[::-1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return 'catac'\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = string[:-1]\n    suffix = string[1:]\n    length = len(prefix)\n\n    while True:\n        try:\n            if length % 2:\n                return prefix + make_palindrome(suffix)\n            else:\n                return prefix + suffix[::-1]\n        except ValueError:\n            length += 1", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if not string.isdigit():\n        return string\n    word = string.split('')\n    palindrome = ''\n    longest_postfix = len(word) - 1\n    palindrome += word[longest_postfix]\n    i = 0\n    while i < len(palindrome) - 1:\n        j = i + 1\n        while j < len(palindrome) - 1:\n            if palindrome[i] == palindrome[j]:\n                i += 1\n            elif palindrome[i] < palindrome[j]:\n                i += 1\n            else:\n                j += 1\n        i += 1\n    if i < len(palindrome) - 1:\n        palindrome += word[i]\n    palindrome += word[0]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    def make_palindrome_builder(prefix: str, suffix: str) -> str:\n        prefix = prefix.upper() if prefix.isupper() else prefix\n        suffix = suffix.upper() if suffix.isupper() else suffix\n        return prefix + suffix + prefix[::-1]\n\n    def find_longest_palindrome(string: str) -> str:\n        longest = ''\n        for i in range(0, len(string), 2):\n            prefix = string[i:i + 2]\n            suffix = string[i + 2:]\n            if is_palindrome(prefix):\n                if is_palindrome(suffix):\n                    if longest == '':\n                        longest = prefix\n                    elif len(longest) > len(suffix):\n                        longest = make_palindrome_builder(prefix, suffix)\n            else:\n                if longest == '':\n                    longest = suffix\n                elif len(longest) > len(prefix):\n                    longest = make_palindrome_builder(prefix, suffix)\n        return longest\n\n    longest = find_longest_palindrome(string)\n    return string + longest", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not is_palindrome(string):\n        return string\n\n    postfix = ''\n    prefix = ''\n    for i in range(len(string)):\n        if string[i]!= string[-1]:\n            break\n        prefix += string[i:]\n        postfix += string[:i]\n    if postfix == prefix:\n        return string\n    else:\n        return prefix + make_palindrome(postfix) + reverse(prefix)</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    max_len = 0\n\n    for index in range(len(string) - 1):\n        if is_palindrome(string[index]):\n            if palindrome == '':\n                palindrome = string[index]\n            else:\n                if len(palindrome) > max_len:\n                    max_len = len(palindrome)\n        else:\n            palindrome += string[index]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = None\n    longest_suffix = None\n\n    for prefix in reversed(string.split()):\n        if prefix:\n            if is_palindrome(prefix):\n                if longest_prefix is None:\n                    longest_prefix = prefix\n                else:\n                    longest_prefix += prefix\n            elif longest_prefix:\n                longest_suffix = make_palindrome(prefix[::-1])\n            else:\n                return string\n\n    return longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest = ''\n\n    for i in range(len(string)):\n        if string[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' or string[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if is_palindrome(string[:i+1]) and is_palindrome(string[i+1:]):\n                longest = string[:i+1] + longest + string[i+1:]\n                break\n\n    if is_palindrome(string):\n        return longest\n    else:\n        return make_palindrome(string) + longest", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length <= 1:\n        return string\n    if not is_palindrome(string):\n        return string\n    longest_palindrome = ''\n    for char in string:\n        if char =='':\n            longest_palindrome += char\n        else:\n            longest_palindrome += char.lower()\n    if not longest_palindrome:\n        return string\n    return string[:-len(longest_palindrome)] + longest_palindrome.reverse()\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) > 1:\n        pal = string[::-1]\n    else:\n        pal = ''\n    for i in range(0, len(string)):\n        prefix = string[:i]\n        suffix = string[i + 1:]\n        if is_palindrome(prefix) and is_palindrome(suffix):\n            return prefix + suffix\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return ''\n    length = len(string)\n    prefix = string[0:length - 1]\n    suffix = string[length - 1:]\n    if prefix == suffix:\n        return prefix\n    for i in range(length - 1):\n        if is_palindrome(prefix[:i] + suffix[::-1]):\n            prefix = prefix[:i] + suffix[::-1]\n            break\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if string == '':\n        return ''\n    if length < 2:\n        return string\n    previous = string[0]\n    reverse_palindrome = ''\n    for i in range(length - 1):\n        reverse_palindrome += previous\n        previous = string[i + 1]\n    return reverse_palindrome + previous", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    elif string[0] == '.':\n        if string[-1] == '.':\n            return string\n        else:\n            return string[-1] + string[0:-1]\n    elif string[0] == ',':\n        if string[-1] == ',':\n            return string\n        else:\n            return string[-1] + string[0:-1]\n    elif string[0] == '(':\n        if string[-1] == '(':\n            return string\n        else:\n            return string[-1] + string[0:-1]\n    else:\n        palindrome = ''\n        for i in range(1, len(string)):\n            if string[i - 1] == string[i]:\n                palindrome += string[i - 1: i + 1]\n            else:\n                break\n        return palindrome + string[-1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest = 0\n    longest_prefix = ''\n    longest_postfix = ''\n    for character in string:\n        if character =='':\n            continue\n        elif character == '(':\n            longest_prefix += character\n        elif character == ')':\n            longest_postfix += character\n        else:\n            longest_postfix = longest_postfix + character\n    return longest_prefix + longest_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    p_string = ''\n    n = len(string)\n    for i in range(1, n + 1):\n        if string[i - 1] == string[i]:\n            p_string += string[i]\n    return string + p_string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    prev = ''\n    prefix = ''\n\n    for i in range(length - 1):\n        prefix = prefix + string[i]\n        if is_palindrome(prefix):\n            palindrome = prefix[::-1]\n            suffix = palindrome + string[i + 1 : i + length - 1]\n            if len(suffix) > length:\n                suffix = suffix[:length - 1]\n            if is_palindrome(suffix):\n                return prev + suffix\n            else:\n                prev = prefix\n    return prev", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome: str = ''\n    longest_prefix: str = ''\n    for char in string:\n        if char in string[-1:]:\n            if char in string[:-1]:\n                longest_palindrome = char + longest_palindrome\n                longest_prefix = char + longest_prefix\n            else:\n                longest_palindrome = char + longest_palindrome\n    return string[:-len(longest_palindrome)] + longest_palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    return ''.join(['{}'.format(f) for f in string.split('') if is_palindrome(f)])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) > 1:\n        try:\n            start_pos = 0\n            end_pos = len(string) - 1\n            while start_pos < end_pos:\n                pos = (start_pos + end_pos) // 2\n                if string[pos].isalpha() and string[pos + 1:].isalpha():\n                    # Take the last word and make it the prefix\n                    prefix = string[pos + 1:]\n                    # Take the first word and make it the suffix\n                    suffix = string[pos]\n                    # If the suffix is a palindrome, append it to the front of the string\n                    if is_palindrome(suffix):\n                        string = prefix + suffix + string[end_pos:start_pos]\n                        start_pos = pos + 1\n                    else:\n                        # Otherwise, append the prefix to the front of the string\n                        string = prefix + string[end_pos:start_pos]\n                        start_pos = pos + 1\n                else:\n                    break\n        except IndexError:\n            return string\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if not is_palindrome(string):\n        raise Exception(\"Input string is not a palindrome\")\n    if len(string) == 1:\n        return string\n    reverse_string = string[::-1]\n    longest_prefix = ''\n    for char in reverse_string:\n        if char not in string[:len(string) - 1]:\n            break\n        longest_prefix += char\n    prefix = string[:len(string) - 1 - len(longest_prefix)]\n    suffix = reverse_string[len(longest_prefix):]\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Start with the longest palindrome we can find\n    longest = ''\n    for i in range(len(string)):\n        # Start by looking for a character that is a palindrome itself\n        # and that is not a letter\n        if string[i] in string[i + 1: i + 1] and string[i] not in string[:i]:\n            longest = string[i:i + 1]\n            break\n    # Get the prefix\n    prefix = string[:longest]\n    # Find the longest suffix that is a palindrome\n    longest = ''\n    i = 0\n    while len(longest) < len(string):\n        longest = longest + string[i:]\n        i += 1\n    # Append the reverse of the prefix\n    prefix = prefix[::-1]\n    # Return the string\n    return prefix + longest", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    if is_palindrome(string):\n        return string\n\n    current = ''\n    prefix = ''\n    suffix = ''\n\n    # prepend to the end of the string\n    reverse_prefix = string[::-1]\n\n    for i in range(len(string)):\n        if is_palindrome(string[i]):\n            suffix = string[i]\n        else:\n            current = current + string[i]\n\n    # if no palindromic suffix found, return the original string\n    if suffix == '':\n        return string\n\n    # append the reversed suffix to the end of the current string\n    # string = string + reverse_prefix + suffix + reverse_prefix\n\n    return current + suffix + reverse_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome: str = ''\n    shortest: int = len(string)\n    for i in range(0, len(string) - 1):\n        if is_palindrome(string[i + 1:]):\n            palindrome += string[i + 1:]\n            break\n        elif is_palindrome(string[i: i + 1]):\n            palindrome += string[i: i + 1]\n            shortest += 1\n    if shortest == 0:\n        return ''\n    return palindrome[:-shortest] + make_palindrome(palindrome[:shortest])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    # use reversal of prefix and suffix to find longest palindromic string\n    prefix = string[:-1]\n    suffix = string[-1]\n    longest_prefix = min([len(prefix) - len(suffix) for suffix in reversed(list(reversed(list(palindrome.reverse(string)))))])\n    return prefix + longest_prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if not is_palindrome(string):\n        return string\n    prefix = ''.join([c for c in string if c not in 'abcdefghijklmnopqrstuvwxyz'])\n    suffix = string[len(prefix):].rstrip()\n    postfix = ''.join([c for c in string if c not in 'abcdefghijklmnopqrstuvwxyz'])\n    if len(prefix) < len(suffix):\n        prefix = ''.join([c for c in string if c not in 'abcdefghijklmnopqrstuvwxyz'])\n    if len(postfix) < len(suffix):\n        suffix = ''.join([c for c in string if c not in 'abcdefghijklmnopqrstuvwxyz'])\n    if prefix == '':\n        return suffix\n    return prefix + make_palindrome(postfix)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string_len = len(string)\n    prefix_len = len(make_palindrome(string[:string_len - 1]))\n    suffix_len = len(string[-(string_len - prefix_len):])\n    return prefix_len + suffix_len", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) % 2:\n        raise ValueError(\"Can't make a palindrome with odd length\")\n    palindrome = string[-1]\n    if not is_palindrome(palindrome):\n        raise ValueError(\"Can't make a palindrome with given string as prefix\")\n\n    prefix = string[:-1]\n    length = len(palindrome)\n    suffix = string[length:length + len(palindrome)]\n    reverse_prefix = prefix[::-1]\n    if not is_palindrome(reverse_prefix):\n        raise ValueError(\"Can't make a palindrome with given string as suffix\")\n\n    return prefix + suffix + reverse_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    suffix = string[::-1]\n    prefix = string[:-len(suffix)]\n    if prefix == suffix:\n        return prefix\n    else:\n        return prefix + suffix\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = string[:]\n    suffix = string[-1]\n    palindromic_suffix = suffix[::-1]\n    longest_prefix_length = 0\n    for i in range(len(prefix)):\n        if is_palindrome(prefix[:i]):\n            longest_prefix_length = i + 1\n\n    if longest_prefix_length == 0:\n        return ''\n\n    return prefix[:longest_prefix_length] + palindromic_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    n = len(string)\n    if n < 1:\n        return string\n    postfix = string[-n:]\n    prefix = string[:-n]\n    palindrome = ''\n    while postfix[-1] in {'A', 'C', 'G', 'T', 'D', 'N', 'K', 'S', 'W', 'Y', 'V'}:\n        palindrome += prefix[:postfix.index(postfix[-1])]\n        prefix = prefix[postfix.index(postfix[-1]) + 1:]\n        postfix = postfix[postfix.index(postfix[-1]):]\n    palindrome += prefix\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest palindromic suffix of the string\n    palindrome_suffix = ''\n    for char in reversed(string):\n        if char.isupper():\n            break\n    else:\n        # If no upper case found, try to find the longest postfix\n        for char in reversed(string):\n            if char.isalpha():\n                break\n        else:\n            # No alphanumeric found\n            return ''\n    # Append a reverse of a prefix that comes before the palindromic suffix\n    return string[:-palindrome_suffix.find(palindrome_suffix)] + make_palindrome(string[-palindrome_suffix.find(palindrome_suffix):])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n    longest_postfix = ''\n    prev_prev = ''\n\n    for char in string:\n        if char =='':\n            continue\n        if char not in string[::-1]:\n            if prev_prev == '':\n                return longest_postfix + char\n            else:\n                prev_prev += char\n            continue\n        if prev_prev == '':\n            prev_prev = char\n        else:\n            if is_palindrome(prev_prev + char):\n                longest_postfix = longest_postfix + char\n                longest_prefix = prev_prev\n                prev_prev = ''\n                continue\n        prev_prev += char\n\n    return longest_prefix + longest_postfix\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    elif string[0] in string[-1] or string[-1] == string[-1]:\n        return string\n    else:\n        return make_palindrome(string[1:]) + make_palindrome(string[:-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest = len(string)\n    prefix_len = max(0, len(string[:-longest]))\n    suffix_len = max(0, len(string[-longest:]))\n    return prefix_len, suffix_len, string[-longest:longest]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    prefix = ''\n    suffix = ''\n    for char in string:\n        if char =='':\n            prefix = ''\n        else:\n            if char in \"abcdefghijklmnopqrstuvwxyz\":\n                suffix += char\n            elif char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n                prefix += char\n    if is_palindrome(suffix):\n        palindrome += reverse(prefix)\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    longest = max([len(s) for s in string.split()])\n    palindrome = ''\n    for i in range(longest):\n        prefix = string[:i].split()\n        suffix = string[i:].split()\n        if all(suffix):\n            if is_palindrome(''.join(prefix)):\n                palindrome = ''.join(prefix) + reverse(suffix)\n                break\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    prefix = string.split()[0]\n    suffix = string.split()[-1]\n    palindrome = ''\n    postfix = ''\n    if is_palindrome(prefix):\n        postfix = prefix[::-1]\n    else:\n        postfix = ''\n\n    for letter in postfix:\n        if letter in suffix:\n            palindrome += letter\n            break\n\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Take the longest palindrome that begins with supplied string\n    palindrome = palindrome = list(string) + ['']\n    pos = 0\n    while palindrome[pos:]:\n        try:\n            if palindrome[pos: pos + len(palindrome[pos])] == palindrome[-1 - pos:]:\n                break\n        except IndexError:\n            break\n        pos = pos - 1\n    if pos > 0:\n        # Find the longest palindrome that begins with reverse of supplied string prefix\n        palindrome[pos:] = ['']\n        for i in range(pos, len(string) - 1, -1):\n            if string[i] == string[i - 1]:\n                break\n            palindrome[pos: i] = list(string)[i + 1 :]\n        return ''.join(palindrome)\n    else:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    maxlen = len(string) // 2\n    return string + make_palindrome(string[:maxlen])\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    if string[0] == string:\n        return ''\n\n    if not is_palindrome(string[1:]):\n        return ''\n\n    longest_p = len(string)\n    for i in range(1, longest_p):\n        p = string[:i]\n        if p!= string[i - 1]:\n            break\n\n    return string[:longest_p] + string[longest_p - 1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    current = ''\n    longest_prefix = ''\n    longest_postfix = ''\n    for char in string:\n        if char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            if current == '':\n                current = char\n            else:\n                current += char\n        elif char =='':\n            current += char\n        elif char not in string and char not in '!@#$%^&*()_+-':\n            if current == '':\n                longest_prefix = char\n            else:\n                longest_postfix = char\n        else:\n            if current == '':\n                return ''\n            else:\n                return current\n\n    if longest_postfix == longest_prefix:\n        return longest_prefix\n\n    return ''.join([make_palindrome(current) + longest_prefix.rstrip(' ') for current in [longest_prefix + longest_postfix, longest_prefix.rstrip(' '), longest_prefix, longest_postfix.rstrip(' ')]])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    postfix = string[::-1]\n\n    palindrome_prefixes = list(map(is_palindrome, string.split('')))\n    longest_prefix = max(palindrome_prefixes)\n\n    prefix = longest_prefix\n    while prefix!= '' and is_palindrome(prefix):\n        prefix = prefix[::-1]\n\n    if prefix!= '':\n        return prefix + postfix\n\n    else:\n        return postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    max_length = len(string)\n    palindrome = ''\n    for _ in range(max_length):\n        if is_palindrome(string[_ + 1]) and is_palindrome(string[_ - 1]):\n            palindrome += string[_ + 1]\n            break\n        elif is_palindrome(string[_ - 1]):\n            palindrome += string[_ - 1]\n            break\n        else:\n            break\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    def palindrome_append(prefix: str, suffix: str) -> str:\n        \"\"\" Append reverse of prefix to suffix if they are a palindrome \"\"\"\n        if is_palindrome(suffix):\n            suffix = reverse(suffix)\n            return suffix + prefix\n        else:\n            return prefix + suffix\n\n    palindrome_start = len(string) - len(string[::-1])\n    palindrome_append(string[:palindrome_start], string[palindrome_start:])\n\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([c for c in string if is_palindrome(c)])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if not is_palindrome(string):\n        return string\n\n    # Find longest palindrome\n    longest_palindrome = ''\n    longest_palindrome_len = len(longest_palindrome)\n    for char in string:\n        if is_palindrome(char):\n            longest_palindrome += char\n        else:\n            longest_palindrome_len = min(longest_palindrome_len, len(char))\n\n    # Append reverse of longest palindrome\n    return longest_palindrome + str(string)[-(longest_palindrome_len + 1):]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    else:\n        palindrome = None\n        longest = len(string)\n        for i in range(len(string)):\n            if is_palindrome(string[:i]):\n                palindrome = string[i:]\n                break\n            else:\n                longest = i\n        if palindrome == None:\n            longest = len(string)\n        return string[::-longest] + string[::-longest]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return string\n    longest = 0\n    for i, c in enumerate(string):\n        if c!= string[(i+1)%len(string)]:\n            break\n        longest = i\n    prefix = string[:longest]\n    suffix = string[longest+1:]\n    suffix = reverse(suffix)\n    if suffix == prefix:\n        return prefix + suffix\n    else:\n        return prefix + suffix + reverse(suffix)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    from itertools import product\n\n    longest_palindrome = []\n\n    prefix = set(string.split())\n    suffix = set(string.split()) - prefix\n\n    prefix_suffix = list(product(prefix, repeat=len(prefix) + 1))\n    for suffix_palindrome in prefix_suffix:\n        if is_palindrome(suffix_palindrome):\n            longest_palindrome.append(suffix_palindrome)\n\n    longest_palindrome = sorted(longest_palindrome, key=len, reverse=True)\n\n    if len(string) == 0:\n        return ''\n    else:\n        return longest_palindrome[-1] + string[-len(longest_palindrome[-1]):]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            break\n    elif i == len(string):\n        return string\n    else:\n        return string[:i] + string[i:] + string[len(string) - i:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    longest = len(string)\n    palindrome = string\n    while palindrome and longest > 0:\n        if palindrome[-1] == string[0]:\n            longest = 0\n        else:\n            longest = len(palindrome) - 1\n        palindrome = palindrome[::-1]\n\n    return string + longest", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    assert isinstance(string, str)\n    if len(string) < 2:\n        return string\n    else:\n        prefix = string[:-1]\n        suffix = string[-1]\n        length = len(prefix)\n        if prefix!= suffix:\n            return ''\n        longest = 0\n        for i in range(length):\n            if suffix[i] in string[:-i].upper():\n                length = i + 1\n            else:\n                longest = i\n        return string[:longest] + string[-longest:]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    def get_longest_prefix(string: str) -> str:\n        return ''.join(reversed(string[i:i + max(0, len(string) - len(string[i:]))]) for i in range(0, len(string)))\n    prefix = get_longest_prefix(string)\n    return prefix + make_palindrome(string[:prefix.rfind(' ')])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        raise ValueError('palindrome requires a string of length two or more')\n\n    palindrome = string.rstrip()\n    new_palindrome = palindrome\n    longest_prefix = 0\n    prefixes = set()\n    for i, char in enumerate(string[:-1]):\n        if char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            longest_prefix += 1\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            prefixes.add(char)\n        if char not in string[-1:]:\n            prefixes.add(char)\n\n    while prefixes and longest_prefix > 0:\n        prefixes = prefixes.intersection(set(string[:-1][:longest_prefix]))\n        longest_prefix -= 1\n        new_palindrome += string[-1][:prefixes.pop()]\n\n    return new_palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    # If the string is empty, return empty string.\n    if length == 0:\n        return ''\n    # Find the longest palindrome in string.\n    longest = ''\n    for i in range(0, length):\n        if is_palindrome(string[i]):\n            longest += string[i]\n            continue\n        else:\n            break\n    # Find the longest prefix of string that is a palindrome.\n    prefix = ''\n    for i in range(0, length - 1):\n        if is_palindrome(string[i + 1]):\n            prefix += string[i + 1]\n            continue\n        else:\n            break\n    # Append to the end of string reverse of a string prefix that comes before the palindromic suffix.\n    return string[prefix + length - 1:] + reverse(prefix[:length - 1])\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    prefix = string[:]\n    suffix = string[::-1]\n    longest_prefix = ''\n    if len(prefix) > len(suffix):\n        longest_prefix = prefix[::-1]\n    else:\n        longest_prefix = suffix[:-1]\n    postfix = longest_prefix + suffix\n    return prefix + postfix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 1:\n        return string\n    prefix = string[::-1]\n    suffix = string\n    i = 0\n    while i < len(prefix):\n        while is_palindrome(prefix[i:i + len(suffix)]):\n            suffix += prefix[i:i + len(suffix)]\n            i += len(suffix)\n        prefix = prefix[i:]\n        suffix = suffix[: - len(prefix)]\n        i += len(suffix)\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # 'cat' is a palindrome\n    if is_palindrome(string):\n        return string\n\n    # Find the longest palindrome suffix\n    longest = len(string) - 1\n    for i in range(1, longest + 1):\n        if is_palindrome(string[i:longest]):\n            longest = i\n\n    # Generate a new string with prefix matching the longest palindrome suffix\n    suffix = string[longest - 1]\n    reverse_palindrome = ''.join(\n        reverse(char) for char in reversed(suffix) if char in string)\n    return string + reverse_palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string_prefix = ''\n    string_suffix = ''\n    string_postfix = ''\n    length = len(string)\n    for i in range(1, length):\n        if string[i - 1] == string[i]:\n            string_postfix += string[i]\n            string_suffix += string[i - 1]\n        else:\n            string_prefix += string[i]\n            string_suffix += string[i - 1]\n    return string_prefix + string_suffix + string_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome_len = len(string)\n    palindrome = string[::-1]\n    prefix_len = len(palindrome)\n    postfix_len = len(string) - prefix_len\n    palindrome_idx = len(string) - prefix_len\n    prefix = string[:palindrome_idx]\n    postfix = string[palindrome_idx:]\n    if is_palindrome(prefix) and is_palindrome(postfix):\n        return prefix + postfix\n    else:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # TODO: Figure out a faster way to do this\n    try:\n        if not string:\n            return ''\n        string_length = len(string)\n    except Exception as exception:\n        # We use exceptions to show that our code works even when an error is thrown\n        print(exception)\n        return ''\n    palindrome = ''\n    current_pos = 0\n    while current_pos < string_length:\n        if string[current_pos] == string[current_pos - 1]:\n            suffix = ''\n        else:\n            suffix = string[current_pos - 1] + string[current_pos]\n        if is_palindrome(suffix):\n            palindrome += suffix\n            current_pos += 1\n        else:\n            break\n    if current_pos < string_length:\n        prefix = string[current_pos:current_pos + 1]\n        if is_palindrome(prefix):\n            palindrome += prefix\n            current_pos += 1\n    return palindrome\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Let's get rid of all empty strings\n    if not string:\n        return ''\n\n    # Make a list of all our prefixes\n    prefixes = []\n    for char in string:\n        if char in string[::-1]:\n            prefixes.append(char)\n\n    # Make a list of all our suffixes\n    suffixes = []\n    for char in string[::-1]:\n        if char in string:\n            suffixes.append(char)\n\n    # Find the longest palindromic suffix\n    longest_suffix = max(suffixes)\n\n    # Append reverse of prefixes to the end of string\n    new_string = ''\n    for prefix in prefixes:\n        new_string += prefix\n        new_string += string[-len(prefix) - len(longest_suffix):]\n\n    # Add reverse of longest palindromic suffix to the end of string\n    new_string += longest_suffix\n    new_string += string[-len(longest_suffix):]\n\n    return new_string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome_suffix = ''\n    while len(string) > 0:\n        # longest palindrome suffix is prefix of longest palindrome\n        if len(palindrome_suffix) < len(string):\n            palindrome_suffix = string[:-(len(palindrome_suffix) + len(string))]\n        # longest palindrome prefix is the longest palindrome suffix plus last char of string\n        else:\n            palindrome_suffix += string[:-(len(palindrome_suffix) + len(string) - 1)]\n        # suffix must be palindrome\n        if not is_palindrome(string):\n            return ''\n        string = string[:-(len(palindrome_suffix) + len(string))]\n    return palindrome_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    while len(string) > 0:\n        if not is_palindrome(string[::-1]):\n            break\n        string = string[-len(string)]\n    return string + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if not is_palindrome(string):\n        raise ValueError('Not a palindrome string')\n    longest_palindrome = max(x for x in list(string) if is_palindrome(x))\n    return string[:longest_palindrome] + string[longest_palindrome:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    def get_longest_palindromic_postfix(string: str) -> str:\n        \"\"\" Get longest palindromic suffix of the given string \"\"\"\n        longest = 0\n        for character in string:\n            if character in string[::-1]:\n                if character.isupper():\n                    longest = len(character.lower()) + 1\n                else:\n                    longest = len(character) + 1\n        return longest\n\n    longest_prefix = get_longest_palindromic_postfix(string)\n    reverse_prefix = string[:longest_prefix].lower()\n    return ''.join([reverse_prefix, reverse_prefix[::-1] if len(reverse_prefix) > 0 else '', longest_prefix])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # start from the end of the string\n    string = string[::-1]\n\n    # find longest prefix that is a palindrome\n    longest_prefix = ''\n    prefix_len = 0\n    for i in range(len(string) - 1):\n        if string[i + 1] == string[i]:\n            prefix_len += 1\n            longest_prefix += string[i]\n            break\n    if longest_prefix == '':\n        return ''\n\n    # create palindromic suffix (a reverse of the longest prefix)\n    suffix = ''\n    for i in range(prefix_len - 1, 0, -1):\n        suffix += string[-i]\n    suffix = suffix[::-1]\n\n    # find longest suffix that is a palindrome\n    longest_suffix = ''\n    suffix_len = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1]:\n            suffix_len += 1\n            longest_suffix += string[i]\n            break\n    if longest_suffix == '':\n        return ''\n\n    # create palindromic prefix (a reverse of the longest suffix)\n    prefix = ''\n    for i in range(suffix_len - 1, 0, -1):\n        prefix += string[-suffix_len - 1 - i]\n    prefix =", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Make list of words in string.\n    words = list(string.split())\n    # Find the longest palindromic suffix.\n    longest_suffix = max([x for x in words if is_palindrome(x)])\n    # Find the longest prefix of the string that does not begin with the palindromic suffix.\n    longest_prefix = max(list(filter(lambda x: x[0]!= longest_suffix, words)))\n\n    # Find the longest palindromic prefix that begins with the longest palindromic suffix.\n    longest_prefix = longest_prefix.replace(longest_suffix, '')\n\n    # Make new string.\n    new_string = longest_prefix + ''.join(reversed(filter(lambda x: x!= longest_prefix, words)))\n    return new_string\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length < 2:\n        return string\n\n    prefix = ''\n    for i in range(length - 1, -1, -1):\n        postfix = string[i:length]\n        if is_palindrome(postfix):\n            prefix = string[0:i]\n            break\n\n    return prefix + string[length:] if prefix else string\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) <= 1:\n        return string\n    else:\n        if string[-1].isupper():\n            return make_palindrome(string[:-1]) + string[-2:]\n        else:\n            return make_palindrome(string[:-1]) + string[-2:].lower()", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    n = len(string)\n    # Find longest palindrome\n    palindrome = list()\n    for i in range(n):\n        if is_palindrome(string[i: i + n - 1]):\n            palindrome.append(string[i: i + n - 1])\n    if len(palindrome) > 1:\n        palindrome = palindrome[0]\n    # Find longest palindrome prefix\n    prefix = list()\n    for i in range(n - len(palindrome)):\n        if is_palindrome(string[i: i + n - len(palindrome)]):\n            prefix.append(string[i: i + n - len(palindrome)])\n    if len(prefix) > 1:\n        prefix = prefix[0]\n    # Find palindrome suffix\n    suffix = list()\n    for i in range(0, len(prefix)):\n        if is_palindrome(string[i: i + n - len(palindrome)]):\n            suffix.append(string[i: i + n - len(palindrome)])\n    if len(suffix) > 1:\n        suffix = suffix[-1]\n    return prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # First we get the longest palindrome\n    longest = longest_palindrome(string)\n\n    # Find the longest prefix that is a palindrome\n    longest_prefix = longest_palindrome(longest[:-1])\n\n    # Now we have two possibilities:\n    #   1) longest prefix is a palindrome: append reverse to the end of the string\n    #   2) longest prefix is not a palindrome: add the reverse to the end of the string\n    #     with the longest prefix as the last character\n    if longest_prefix is not None:\n        string = \"%s%s%s\" % (string, longest_prefix, longest[-len(longest_prefix):])\n    else:\n        string = \"%s%s\" % (string, longest[-len(longest):])\n\n    return string\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome_prefix = ''\n    for char in string[::-1]:\n        if is_palindrome(char):\n            palindrome_prefix += char\n    palindrome_suffix = ''\n    for char in string[1:]:\n        if is_palindrome(char):\n            palindrome_suffix += char\n    return palindrome_prefix + palindrome_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    # Step 1. Find longest palindromic suffix\n    longest = 0\n    longest_idx = None\n    for suffix in reversed(string.split()):\n        if suffix.is_palindrome():\n            longest = len(suffix)\n            longest_idx = len(suffix) - len(suffix.reverse())\n            break\n\n    # Step 2. Append palindrome prefix\n    if longest is not None:\n        new_string = ''\n        for char in string:\n            if char.is_palindrome():\n                new_string += char\n            elif char == longest_idx:\n                new_string += char.reverse()\n                break\n        string = new_string\n\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    palindrome_len = len(string)\n    longest_palindrome = [string[:palindrome_len - 1] for string in reversed(string.split()) if is_palindrome(string)]\n    longest_palindrome.append(string[palindrome_len - 1:])\n    return ''.join(longest_palindrome)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of string that is a palindrome\n    postfix = len(string) - 1\n    palindrome = ''\n    for character in string:\n        if character == string[postfix]:\n            palindrome = character\n            postfix -= 1\n    # Append the reverse of a string prefix that comes before the palindromic suffix\n    prefix = ''\n    if palindrome:\n        prefix = string[:postfix]\n        prefix = prefix.reverse()\n        prefix = prefix[::-1]\n        prefix += string[postfix]\n    return prefix + palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return string\n\n    longest_pfx = len(string) - 1\n    prefix_len = 0\n    suffix_len = len(string) - 1\n\n    for i in range(0, len(string) - 1):\n        if string[i] in string[longest_pfx:]:\n            prefix_len += 1\n        elif string[i] in string[len(string) - 1:]:\n            suffix_len += 1\n        else:\n            break\n\n    return string[:prefix_len] + reverse(string[prefix_len + suffix_len:len(string) - 1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    l = len(string)\n    l_n = len(make_palindrome(string[:l // 2]))\n    l_m = len(string[l_n:(l + l_n) // 2])\n    l_s = len(make_palindrome(string[l_m:(l + l_m) // 2]))\n    return string[::-1] + string[:(l + l_n) // 2] + string[l_m:(l + l_m) // 2]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return ''\n    palindrome = ''\n    i = 0\n    j = 0\n    while i < len(string) and j < len(string):\n        if string[i + j]!= string[j + i]:\n            break\n        palindrome += string[i + j]\n        i += 1\n        j += 1\n    if len(palindrome) == len(string):\n        return palindrome\n    # Find the longest palindrome suffix\n    i = 0\n    while i < len(palindrome):\n        if palindrome[i + 1]!= palindrome[i]:\n            break\n        i += 1\n    if i == len(palindrome):\n        return ''\n    # Find the longest palindrome prefix\n    j = 0\n    while j < len(palindrome):\n        if palindrome[j - 1]!= palindrome[j]:\n            break\n        j += 1\n    if j == len(palindrome):\n        return ''\n    return palindrome[:i] + make_palindrome(palindrome[i + 1:])\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    longest = 0\n    prefix = ''\n    suffix = ''\n    reverse_prefix = ''\n\n    for char in string:\n        if char =='' or char == '\\n':\n            continue\n\n        if char == '(' or char == ')':\n            if prefix:\n                longest = len(prefix) + len(reverse_prefix)\n\n            reverse_prefix = string[:-(len(prefix) + 1)]\n\n        elif char == '.':\n            if longest == 0:\n                return ''\n\n            longest = 0\n\n        elif char == '.' and longest == 0:\n            return ''\n\n        else:\n            if len(prefix) + len(reverse_prefix) + len(char) <= longest:\n                longest = len(prefix) + len(reverse_prefix) + len(char)\n\n            prefix += char\n            reverse_prefix += char\n\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string[0]\n    if string[0] == string[-1]:\n        return string[0]\n    if not is_palindrome(string):\n        return string\n    return string.rstrip('.') + make_palindrome(string[::-1])\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) <= 1:\n        return ''\n    if len(string) < 3:\n        return string\n    if not is_palindrome(string[:-1]):\n        return ''\n    if is_palindrome(string[:-1]):\n        return make_palindrome(string[:-2])\n    else:\n        return make_palindrome(string[:-2] + string[-1:])\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    max_len = 0\n    max_pos = len(string)\n    for char in reversed(string):\n        if char in string[max_pos - max_len:max_pos] and char not in string[max_pos - max_len:]:\n            if char == string[max_pos - max_len:]:\n                continue\n            else:\n                return string[:max_pos] + char + string[max_pos + max_len:]\n        max_len += 1\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # split string into substrings\n    sub_strings = string.split()\n    # find longest palindrome prefix\n    longest_prefix = ''\n    longest_suffix = ''\n    for i in range(len(sub_strings) - 1):\n        if sub_strings[i] == sub_strings[len(sub_strings) - i]:\n            longest_prefix += sub_strings[i]\n        else:\n            longest_suffix += sub_strings[i]\n    # sort palindrome prefixes\n    longest_prefix.sort()\n    # find longest palindrome suffix\n    longest_suffix = ''\n    for i in range(len(sub_strings) - 1):\n        if sub_strings[i] == sub_strings[len(sub_strings) - i]:\n            longest_suffix += sub_strings[i]\n        else:\n            longest_suffix += sub_strings[len(sub_strings) - i]\n    # if string doesn't contain any palindromes, return empty string\n    if longest_prefix.isdigit() or longest_suffix.isdigit():\n        return ''\n    # reverse prefix\n    reverse_prefix = ''.join([sub_strings[i] for i in range(len(longest_prefix) - 1, -1, -1)])\n    # find longest palindrome suffix\n    reverse_suffix = ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    def _get_end_prefix(string: str, _end: int) -> str:\n        return string[:_end]\n\n    def _reverse(string: str) -> str:\n        return string[::-1]\n\n    if string == '':\n        return ''\n\n    _end = len(string)\n    prefix = _get_end_prefix(string, _end)\n\n    # see if we have the desired prefix already\n    if prefix == string:\n        return make_palindrome(string)\n\n    prefix_len = len(prefix)\n\n    # find longest palindromic suffix of string\n    while True:\n        suffix = string[_end:]\n        if suffix.is_palindrome():\n            suffix_len = len(suffix)\n            _end -= suffix_len\n        else:\n            break\n\n    # reverse a prefix that comes before the suffix\n    suffix = _reverse(suffix)\n\n    # find prefix that begins with reverse of suffix\n    if prefix_len == suffix_len:\n        return prefix + suffix\n    else:\n        return prefix + _reverse(suffix)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not is_palindrome(string):\n        return string\n\n    # get the longest palindromic substring\n    longest = ''\n    for character in string:\n        if character in ['', '']:\n            break\n\n        longest += character\n\n    # reverse the longest string and append\n    prefix = reverse(longest)\n    suffix = ''\n    for character in string:\n        if character in ['', '']:\n            break\n\n        suffix += character\n\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of the supplied string that is a palindrome\n    palindrome = ''\n    if len(string) < 2:\n        return string\n    longest_palindrome = 0\n    for i in range(len(string) - 1):\n        if is_palindrome(string[i + 1:]):\n            palindrome = string[i + 1:]\n            longest_palindrome = i + 1\n    return string[:longest_palindrome] + reverse(palindrome)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    if is_palindrome(string):\n        return string\n    if len(string) == 1:\n        return string\n    while is_palindrome(string[:-1]):\n        string = string[-1:]\n    if len(string) == 2:\n        return string\n    # The following algorithm is a simple recursive version of the longest palindrome\n    # algorithm from the book:\n    # http://www.geeksforgeeks.org/find-longest-palindrome-in-a-string/\n    # The algorithm solves the same problem:\n    # Given a string s, return the longest string that begins with s and is a palindrome.\n    # Example:\n    # >>> make_palindrome('abab')\n    # 'abab'\n    # >>> make_palindrome('ababab')\n    # 'ababab'\n    # >>> make_palindrome('ababababa')\n    # 'ababababa'\n    # >>> make_palindrome('ababababaab')\n    # 'ababababaab'\n    # >>> make_palindrome('ababababaabb')\n    # 'ababababaabb'\n    # >>> make_palindrome('", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = len(string)\n    if string.startswith(string[-longest_prefix:]):\n        longest_prefix = 0\n    palindrome = ''\n    for letter in string:\n        if letter!= letter[::-1]:\n            break\n    if longest_prefix!= 0 and palindrome!= string:\n        palindrome += string[-longest_prefix:]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    pos = len(string)\n    palindrome = ''\n\n    while pos > 0:\n        postfix = string[pos - 1:pos]\n\n        palindrome = palindrome + postfix\n        if is_palindrome(palindrome):\n            break\n\n        pos -= 1\n\n    if pos > 0:\n        palindrome = palindrome + string[pos - 1:]\n\n    return palindrome\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_suffix = len(string)\n    for i in range(0, len(string), 2):\n        suffix = string[i:i + 2]\n        if suffix == string[i + 2 : i + 3]:\n            longest_suffix = i + 3\n        else:\n            break\n\n    prefix = ''\n    for i in range(longest_suffix - len(string), len(string), 2):\n        prefix = prefix + string[i:i + 2]\n    suffix = string[longest_suffix - len(string):]\n    return prefix + suffix + make_palindrome(prefix)[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 1:\n        return string\n\n    if len(string) < 2:\n        return string\n\n    # Find the longest postfix of supplied string that is a palindrome\n    longest = len(make_palindrome(string[::-1]))\n\n    # Find the longest prefix of string that comes before the longest postfix of the palindrome\n    for i in range(1, longest):\n        if is_palindrome(string[-i:]):\n            longest = i - 1\n            break\n\n    return string[:-longest] + string[-len(make_palindrome(string[:-longest])):]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string.isdigit():\n        return str(int(string) - 1)\n    if string.startswith('z'):\n        return make_palindrome(string[1:])\n    if string.startswith('X'):\n        return make_palindrome(string[1:]) + 'xx'\n    if string.startswith('Y'):\n        return make_palindrome(string[1:]) + 'xy'\n    if string.startswith('Z'):\n        return make_palindrome(string[1:]) + 'xz'\n    if string.startswith('w'):\n        return make_palindrome(string[1:]) + 'ww'\n    if string.startswith('X'):\n        return make_palindrome(string[1:]) + 'xx'\n    if string.startswith('y'):\n        return make_palindrome(string[1:]) + 'yy'\n    if string.startswith('z'):\n        return make_palindrome(string[1:]) + 'zz'\n    if string.startswith('u'):\n        return make_palindrome(string[1:]) + 'uu'\n    if string.startswith('v'):", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    else:\n        palindrome_prefix = string[0]\n        for i in range(1, len(string)):\n            palindrome = string[:i]\n            if is_palindrome(palindrome):\n                break\n            else:\n                palindrome_prefix +='' + palindrome\n        return palindrome_prefix + string[-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    prefix, suffix = '', ''\n    longest = 0\n    for i, char in enumerate(string):\n        if char =='':\n            prefix = ''\n        elif char == '\\t':\n            prefix =''\n        elif char == '\\r' or char == '\\n':\n            prefix =''\n        elif char == '\\b':\n            prefix =''\n        elif char in '()[]{}-':\n            prefix =''\n        elif char in 'a-zA-Z':\n            prefix =''\n        elif char in '!\\\"@#$%^&*()_+':\n            prefix = ''\n        elif char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            prefix =''\n        elif char in 'abcdefghijklmnopqrstuvwxyz':\n            prefix =''\n        elif char == '?':\n            prefix =''\n        elif char in '!\\\"@#$%^&*()_+':\n            suffix = ''\n        elif char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            suffix =''\n        elif char in 'abcdefghijklmnopqrstuvwxyz':", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    palindrome_suffix = ''\n    palindrome_prefix = ''\n    longest_postfix = 0\n    longest_prefix = 0\n    for char in string:\n        if char =='':\n            longest_prefix += 1\n        elif char == '\\\\':\n            if palindrome_prefix and not palindrome_suffix:\n                palindrome_prefix = ''\n            elif palindrome_suffix and not palindrome_prefix:\n                palindrome_suffix = ''\n        elif char == '\\\\':\n            if palindrome_suffix and not palindrome_prefix:\n                palindrome_suffix = ''\n            elif palindrome_prefix and not palindrome_suffix:\n                palindrome_prefix = ''\n        elif char == '\\\\':\n            if palindrome_suffix and palindrome_prefix:\n                palindrome_suffix += '\\\\'\n            elif palindrome_prefix and palindrome_suffix:\n                palindrome_prefix += '\\\\'\n        elif char == '.' and not palindrome_suffix and not palindrome_prefix:\n            longest_postfix += 1\n        elif char == '.' and not palindrome_suffix and palindrome_prefix:\n            palindrome_suffix += '.'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest palindromic suffix\n    suffix_length = len(string) - 1\n\n    # Find longest palindromic prefix\n    prefix_length = 0\n    if suffix_length > 0:\n        prefix_length = string.rfind(string[suffix_length : -1])\n\n    # Construct palindrome string\n    return string[:prefix_length] + string[prefix_length + 1 : ] + string[-1 : ]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    maxlen = len(string)\n\n    if maxlen == 0:\n        return string\n\n    suffix = string[maxlen - 1:]\n    prefix = string[:maxlen - 1]\n\n    palindrome = suffix\n    palindrome_length = len(palindrome)\n    reverse_prefix = prefix[::-1]\n    reverse_prefix_length = len(reverse_prefix)\n\n    while suffix:\n        if is_palindrome(reverse_prefix + suffix):\n            reverse_prefix = reverse_prefix + suffix\n            reverse_prefix_length = len(reverse_prefix)\n            palindrome = reverse_prefix + suffix\n            palindrome_length = len(palindrome)\n        else:\n            reverse_prefix = reverse_prefix + suffix\n            reverse_prefix_length = len(reverse_prefix)\n            return string[0:-1] + suffix + prefix[0:-1]\n        suffix = suffix[palindrome_length - reverse_prefix_length:]\n\n    return reverse_prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 1:\n        return ''\n    elif len(string) == 1:\n        return string\n    else:\n        assert len(string) % 2 == 0, \"string must be even length\"\n        prefix = string[:-1]\n        suffix = string[-1:]\n        if is_palindrome(prefix):\n            reverse_prefix = string[::-1]\n            if is_palindrome(reverse_prefix):\n                prefix += reverse_prefix\n        else:\n            prefix = string[:-1]\n            reverse_prefix = string[::-1]\n        prefix += suffix\n        return prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    pos = len(string)\n    if pos < 1:\n        return string\n    first = string[0]\n    last = string[-1]\n\n    if first == last:\n        return string\n    if not is_palindrome(first):\n        return string\n\n    if last == first:\n        return string\n    if not is_palindrome(last):\n        return string\n\n    prefix = ''\n    suffix = ''\n    for i in xrange(1, pos):\n        if is_palindrome(string[i]):\n            prefix += string[i]\n            suffix += string[-i]\n        else:\n            break\n\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindromic_suffix = ''\n    longest_postfix = 0\n    for char in string:\n        if is_palindrome(char):\n            longest_postfix = max(longest_postfix, len(char))\n    if longest_postfix > 0:\n        palindromic_suffix = reverse(string[:longest_postfix])\n    return string + palindromic_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # if it's already a palindrome, then return it\n    if is_palindrome(string):\n        return string\n    # find longest postfix of string that is a palindrome\n    longest_prefix = ''\n    for char in string:\n        if is_palindrome(char):\n            longest_prefix = longest_prefix + char\n    # reverse of longest prefix that comes before the palindromic suffix\n    reverse_prefix = ''\n    for char in longest_prefix:\n        reverse_prefix = reverse_prefix + char[::-1]\n    # append to end of the string the reverse of the prefix\n    return string + reverse_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('abcdefghijklmnopqrstuvwxyz'):\n        palindrome = ''\n        for char in string:\n            if char.isupper():\n                palindrome += 'abcdefghijklmnopqrstuvwxyz'\n            else:\n                palindrome += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n        return string + make_palindrome(palindrome[::-1])\n    else:\n        palindrome = ''\n        for char in string:\n            if char.isupper():\n                palindrome += 'abcdefghijklmnopqrstuvwxyz'\n            else:\n                palindrome += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            if char.islower():\n                palindrome += '123456789'\n            else:\n                palindrome += '987654321'\n        return string + make_palindrome(palindrome[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    # Find longest palindrome suffix\n    longest_palindrome = ''\n    longest_length = 0\n    for char in string:\n        if is_palindrome(char):\n            longest_palindrome += char\n            longest_length = len(longest_palindrome)\n    # Find longest prefix of string that is not a palindrome\n    longest_not_palindrome = string[:longest_length]\n    while is_palindrome(longest_not_palindrome[::-1]):\n        longest_not_palindrome = longest_not_palindrome[:-len(longest_not_palindrome)]\n    # Append reverse of prefix of string that is not a palindrome to the end of the string\n    return longest_not_palindrome + reverse(string[longest_length:])\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    words = string.split()\n    if len(words) < 2:\n        return string\n    reversed_prefix = words[-1]\n    reversed_prefix_len = len(reversed_prefix)\n    longest = 0\n    # list of longest postfixes\n    prefixes = []\n    for word in words:\n        if word == reversed_prefix:\n            prefixes.append(word)\n        else:\n            if word!= reversed_prefix[-(reversed_prefix_len - 1):]:\n                if len(prefixes) > longest:\n                    longest = len(prefixes)\n            prefixes.append(word)\n    return ''.join(prefixes) + reversed_prefix[-(longest + 1):]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    longest_prefix = ''\n    longest_suffix = ''\n    for char in string:\n        if char in string[::-1]:  # Make sure the character isn't in the reversed string\n            break\n        if char in 'abcdefghijklmnopqrstuvwxyz':  # Assumes string is lowercase\n            longest_prefix += char\n            if char not in 'abcdefghijklmnopqrstuvwxyz':  # Assumes string is lowercase\n                longest_suffix += char\n    if string.endswith(palindrome):  # If string ends with palindrome\n        return string[:-len(palindrome)]\n    else:  # If string ends without a palindrome, make a new palindrome from the prefix\n        if longest_prefix.endswith(palindrome):  # If longest prefix ends with palindrome\n            return longest_prefix[:-len(palindrome)] + longest_suffix\n        else:  # If longest prefix doesn't end with palindrome\n            return longest_prefix + longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    if string == '':\n        return palindrome\n    if string in 'abcdefghijklmnopqrstuvwxyz':\n        palindrome = string\n    elif string.isdigit():\n        palindrome = string\n    else:\n        previous = string[:-1]\n        current = ''\n        while current!= previous and current!='':\n            current = string[-1]\n            if current in 'abcdefghijklmnopqrstuvwxyz':\n                palindrome = current + palindrome\n            elif current.isdigit():\n                palindrome = current + palindrome\n            else:\n                previous = current\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # https://en.wikipedia.org/wiki/Cyclic_permutation\n    # It is a shortest palindrome that is formed from the first n letters,\n    # which are all different, of a given string. This is done by finding the longest prefix\n    # and suffix, and then reversing the longest prefix, and appending the reverse of the\n    # longest suffix at the end of the string.\n    # \n    # This algorithm returns the longest prefix and suffix as strings, as well as the reversal of\n    # the longest prefix. The prefix and suffix are used to build a palindrome by appending the\n    # reversal of the longest suffix at the end of the string.\n    # \n    # The idea here is that by reversing the longest prefix, the longest suffix will become the\n    # prefix, and the longest prefix will become the suffix, so that the length of the prefix will\n    # be the same as the length of the suffix.\n\n    palindrome_length = 0\n    best_prefix = ''\n    best_suffix = ''\n    for i in range(len(string) - 1):\n        # Find the longest prefix and suffix\n        prefix = ''.join([char for char in string if char not in set(string[i:][::", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    palindrome = string\n    longest = 0\n    for char in reversed(string):\n        if is_palindrome(char):\n            longest += 1\n        else:\n            break\n    palindrome += longest * string[:longest]\n    return palindrome\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    p = len(string) - len(make_palindrome(string[:-p]))\n    pal = ''\n    start = 0\n    while start < p:\n        p_str = string[start:start + p]\n        if p_str:\n            pal = pal + p_str\n            start += 1\n        else:\n            break\n\n    return pal + make_palindrome(string[start:])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    from collections import Counter\n\n    # create a dictionary of all postfixes\n    postfix_dic = {\n        postfix: Counter([match.group(0)[::-1] for match in re.finditer(r'\\w+', string)])\n        for postfix in string[::-1].split()\n    }\n\n    # count how many times a postfix appears in the string\n    postfix_counts = Counter([\n        postfix_dic[postfix].value for postfix in postfix_dic.keys()\n    ])\n\n    # palindrome length\n    length = len(string)\n\n    # return longest palindrome string\n    if length > 1:\n        return string[:length - 1] + make_palindrome(string[length - 1:])\n\n    # return longest palindrome string\n    if length > 0:\n        return string[:length - 1]\n\n    # no palindrome\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    string = string.lower()\n    palindrome = ''\n    i = 0\n    longest_postfix = ''\n    longest_prefix = ''\n    while i < len(string):\n        if string[i] == string[-1]:\n            break\n        elif string[i] == string[i - 1]:\n            if string[i - 1] == string[i + 1]:\n                if i > 1:\n                    longest_prefix += string[i - 1:i]\n                    longest_postfix += string[i + 1:]\n                break\n            else:\n                palindrome += string[i - 1:i]\n        else:\n            longest_postfix += string[i - 1:i]\n            longest_prefix += string[i + 1:]\n        i += 1\n\n    return palindrome + longest_prefix + longest_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    longest = 0\n    for i in range(len(string)):\n        if is_palindrome(string[i]):\n            longest = i\n    return string[:longest] + string[-longest:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest = 0\n    for char in string:\n        if is_palindrome(char):\n            longest = max(longest, len(char))\n        elif len(char) > longest:\n            longest = len(char)\n    reverse_prefix = string[:-longest]\n    reverse_suffix = string[-longest:]\n    return string[:longest] + reverse_prefix + reverse_suffix"]]