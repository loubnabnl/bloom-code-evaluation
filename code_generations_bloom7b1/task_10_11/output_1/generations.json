[["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if not is_palindrome(string):\n        return string\n\n    if len(string) == 2:\n        return string\n\n    if len(string) == 3:\n        return string\n\n    if len(string) == 4:\n        return string\n\n    if len(string) == 5:\n        return string\n\n    if len(string) == 6:\n        return string\n\n    if len(string) == 7:\n        return string\n\n    if len(string) == 8:\n        return string\n\n    if len(string) == 9:\n        return string\n\n    if len(string) == 10:\n        return string\n\n    if len(string) == 11:\n        return string\n\n    if len(string) == 12:\n        return string\n\n    if len(string) == 13:\n        return string\n\n    if len(string) == 14:\n        return string\n\n    if len(string) == 15:\n        return string\n\n    if len(string) == 16:\n        return string\n\n    if len(string) == 17:\n        return string\n\n    if len(string) == 18:\n        return string\n\n    if len(string) == 19:\n        return string\n\n    if len(string) == 20:\n        return string\n\n    if len(string) == 21:\n        return string\n\n    if len", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if string[0] in string[-1]:\n        return string\n\n    if string[0] in string[-2:]:\n        return string[:-1] + string[-2:]\n\n    if string[0] in string[-3:]:\n        return string[:-2] + string[-3:]\n\n    if string[0] in string[-4:]:\n        return string[:-3] + string[-4:]\n\n    if string[0] in string[-5:]:\n        return string[:-4] + string[-5:]\n\n    if string[0] in string[-6:]:\n        return string[:-5] + string[-6:]\n\n    if string[0] in string[-7:]:\n        return string[:-6] + string[-7:]\n\n    if string[0] in string[-8:]:\n        return string[:-7] + string[-8:]\n\n    if string[0] in string[-9:]:\n        return string[:-8] + string[-9:]\n\n    if string[0] in string[-10:]:\n        return string[:-9] + string[-10:]\n\n    if string[0] in string[-11:]:\n        return string[:-10] + string[-11:]\n\n    if string[0] in string[-12:]:\n        return string[:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string:\n        return string\n    if string[-1] == string:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:]\n    if string[-1] == string[-1]:\n        return string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1]\n    if string[-1] == string[-1]:\n        return string[:-1] + string[:-1] + string[-1:]\n    if string[0] == string[-1]:\n        return string[:-1] + string[:-1] + string[-1:] + string[:-1]\n    if string[-1] == string[-1]:\n        return string[:-1] + string[:-1] + string[:-1] + string[-1:]\n    if string[0] == string[-1]:\n        return string[:-1] + string[:-1] + string[:-1] + string[-1:] + string[:-1]\n    if string[-1] == string[-1]:\n        return string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[-1:]\n    if string[0] == string[-1]:\n        return string[:-1] + string[:-1] + string[:-1] + string[:-1] + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    if string[0] == string[-1]:\n        return string\n\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    longest_prefix_length = 0\n    for i in range(len(string)):\n        if is_palindrome(string[i:i + 1]):\n            longest_prefix = string[i:i + 1]\n            longest_prefix_length = i + 1\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    longest_suffix_length = 0\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:i + 1]):\n            longest_suffix = string[i:i + 1]\n            longest_suffix_length = i + 1\n\n    # Append reverse of longest prefix to the end of the string\n    return string + longest_suffix[::-1] + longest_prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    longest_prefix_len = 0\n    for char in string:\n        if char in string[::-1]:\n            longest_prefix += char\n            longest_prefix_len += 1\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    longest_suffix_len = 0\n    for char in string:\n        if char in string[::-1]:\n            longest_suffix += char\n            longest_suffix_len += 1\n\n    # Find longest palindrome\n    longest = longest_prefix + longest_suffix\n    longest_len = len(longest)\n\n    # Find longest palindrome prefix\n    prefix = ''\n    prefix_len = 0\n    for char in string:\n        if char in string[::-1]:\n            prefix += char\n            prefix_len += 1\n\n    # Find longest palindrome suffix\n    suffix = ''\n    suffix_len = 0\n    for char in string:\n        if char in string[::-1]:\n            suffix += char\n            suffix_len += 1\n\n    # Find longest palindrome\n    prefix = prefix[:prefix_len]\n    suffix = suffix[:suffix_len]\n    palindrome = prefix + suffix\n    palindrome_len = len(palindrome)\n\n    # Find shortest palind", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:]) + make_palindrome(string[3:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:]) + make_palindrome(string[3:]) + make", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if string[0] in string[::-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string[:-1] + string[::-1]\n\n    if string[0] == string[-1]:\n        return string[:-1] + string[::-1] + string[::-1]\n\n    if string[0] == string[-1]:\n        return string[:-1] + string[::-1] + string[::-1] + string[::-1]\n\n    if string[0] == string[-1]:\n        return string[:-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n\n    if string[0] == string[-1]:\n        return string[:-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n\n    if string[0] == string[-1]:\n        return string[:-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n\n    if string[0] == string[-1]:\n        return string[:-1] + string[::", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string == 'cat':\n        return 'catac'\n    if string == 'cata':\n        return 'catac'\n    if string == 'catac':\n        return 'catac'\n    if string == 'catacat':\n        return 'catacat'\n    if string == 'catacatac':\n        return 'catacatac'\n    if string == 'catacatacat':\n        return 'catacatacat'\n    if string == 'catacatacatac':\n        return 'catacatacatac'\n    if string == 'catacatacatacat':\n        return 'catacatacatacat'\n    if string == 'catacatacatacatac':\n        return 'catacatacatacatac'\n    if string == 'catacatacatacatacat':\n        return 'catacatacatacatacat'\n    if string == 'catacatacatacatacatac':\n        return 'catacatacatacatacatac'\n    if string == 'catacatacatacatacatacat':\n        return 'catacatacatacat", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:]) + make_palindrome(string[3:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:]) + make_palindrome(string[3:]) + make", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    longest_prefix_len = 0\n    for char in string:\n        if char =='':\n            continue\n        if char in string[::-1]:\n            longest_prefix_len += 1\n            longest_prefix += char\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    longest_suffix_len = 0\n    for char in string:\n        if char =='':\n            continue\n        if char in string[::-1]:\n            longest_suffix_len += 1\n            longest_suffix += char\n\n    # Find longest palindrome\n    longest = longest_prefix + longest_suffix\n    if longest == '':\n        return ''\n\n    # Find longest palindrome prefix\n    prefix = ''\n    prefix_len = 0\n    for char in string:\n        if char =='':\n            continue\n        if char in longest_prefix[::-1]:\n            prefix_len += 1\n            prefix += char\n\n    # Find longest palindrome suffix\n    suffix = ''\n    suffix_len = 0\n    for char in string:\n        if char =='':\n            continue\n        if char in longest_suffix[::-1]:\n            suffix_len += 1\n            suffix += char\n\n    # Find longest palindrome\n    prefix = prefix[:prefix_len]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find longest palindrome\n    palindrome = ''\n    for char in string:\n        if is_palindrome(char):\n            palindrome += char\n\n    # Find longest prefix of string that is a palindrome\n    prefix = ''\n    for char in string:\n        if char == palindrome[-1]:\n            break\n        if is_palindrome(char):\n            prefix += char\n\n    # Append reverse of prefix to string\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1]:\n        return string\n    if string[-1] in string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if not is_palindrome(string):\n        return string\n    longest = len(string)\n    for i in range(1, longest):\n        if is_palindrome(string[:i]):\n            return string[:i] + make_palindrome(string[i:])\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[1:] + string[2:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[1:] + string[2:] + string[3:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[1:] + string[2:] + string[3:] + string[4:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[1:] + string[2:] + string[3:] + string[4:] + string[5:][::-1])\n    if string[0] == string[-1]:\n        return make_palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if string[0] in string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    # Find the longest postfix of supplied string that is a palindrome\n    palindrome = ''\n    for i in range(len(string)):\n        if string[i] == string[len(string) - i - 1]:\n            palindrome += string[i]\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(palindrome)):\n        if palindrome[i] == palindrome[len(palindrome) - i - 1]:\n            prefix += palindrome[i]\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1]:\n        return string\n    if string[-1] in string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[0]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] ==", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_suffix = string[i:]\n            break\n\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            longest_prefix = string[:i]\n            break\n\n    # Append reverse of longest palindrome prefix to the end of the string\n    return string + longest_prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1]:\n        return string\n    if string[-1] in string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[:-1] +", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:]:\n        return string\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if string[0] in string[-1]:\n        return string\n\n    if string[-1] in string[0]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[-1] == string[0]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[-1] == string[0]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[-1] == string[0]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[-1] == string[0]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[-1] == string[0]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[-1] == string[0]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[-1] == string[0]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[-1] == string[0]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[-1] == string[0]:\n        return string\n\n    if string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n\n    prefix = string[:-1]\n    suffix = string[1:]\n    if is_palindrome(prefix):\n        return prefix + make_palindrome(suffix)\n    else:\n        return make_palindrome(prefix) + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    longest_palindrome = ''\n    longest_prefix = ''\n    for i in range(len(string)):\n        if string[i] == string[-1 - i]:\n            longest_palindrome = string[:i] + longest_palindrome\n            longest_prefix = string[i:]\n        else:\n            break\n\n    return longest_palindrome + longest_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[1:]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string\n    if string[0] in string[-1:]:\n        return string[:-1] + string[-1:]\n    if string[-1] in string[:-1]:\n        return string[:-1] + string[:-1]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[2:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[2:] + string[3:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[2:] + string[3:] + string[4:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[2:] + string[3:] + string[4:] + string[5:][::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[2:] + string[3:] + string[4:] + string[5:][::-1] + string[6:][::-1])\n    if string[0] == string[-1]:\n        return make_p", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] not in string[1:]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-2]:\n        return string[:-2]\n    if string[0] == string[-3]:\n        return string[:-3]\n    if string[0] == string[-4]:\n        return string[:-4]\n    if string[0] == string[-5]:\n        return string[:-5]\n    if string[0] == string[-6]:\n        return string[:-6]\n    if string[0] == string[-7]:\n        return string[:-7]\n    if string[0] == string[-8]:\n        return string[:-8]\n    if string[0] == string[-9]:\n        return string[:-9]\n    if string[0] == string[-10]:\n        return string[:-10]\n    if string[0] == string[-11]:\n        return string[:-11]\n    if string[0] == string[-12]:\n        return string[:-12]\n    if string[0] == string[-13]:\n        return string[:-13]\n    if string[0] == string[-14]:\n        return string[:-14]\n    if string[0] == string[-15]:\n        return string[:-15]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:]:\n        return string\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:-1] + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] not in string[1:]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-2]:\n        return string[:-1] + string[-2:]\n    if string[0] == string[-3]:\n        return string[:-2] + string[-3:]\n    if string[0] == string[-4]:\n        return string[:-3] + string[-4:]\n    if string[0] == string[-5]:\n        return string[:-4] + string[-5:]\n    if string[0] == string[-6]:\n        return string[:-5] + string[-6:]\n    if string[0] == string[-7]:\n        return string[:-6] + string[-7:]\n    if string[0] == string[-8]:\n        return string[:-7] + string[-8:]\n    if string[0] == string[-9]:\n        return string[:-8] + string[-9:]\n    if string[0] == string[-10]:\n        return string[:-9] + string[-10:]\n    if string[0] == string[-11]:\n        return string[:-10] + string[-11:]\n    if string[0] == string[-12]:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if string[0] in string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palind", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:]:\n        return string[-1:]\n    if string[-1] in string[:-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[:-1]:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if not is_palindrome(string):\n        return string\n\n    longest = len(string)\n\n    for i in range(0, longest - 1):\n        if is_palindrome(string[i + 1:]):\n            return string[:i] + make_palindrome(string[i + 1:])\n\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string == 'cat':\n        return 'catac'\n    if string == 'cata':\n        return 'catac'\n    if string == 'catac':\n        return 'catac'\n    if string == 'catacatac':\n        return 'catacatac'\n    if string == 'catacatacatac':\n        return 'catacatacatac'\n    if string == 'catacatacatacatac':\n        return 'catacatacatacatac'\n    if string == 'catacatacatacatacatac':\n        return 'catacatacatacatacatac'\n    if string == 'catacatacatacatacatacatacatac':\n        return 'catacatacatacatacatacatacatacatac'\n    if string == 'catacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if string.startswith(string[::-1]):\n        return string[::-1]\n    else:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] not in string[-1]:\n        return string\n    if string[-1] not in string[:-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[-1] == string[:-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[0] == string[-1", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    longest_palindrome = ''\n    longest_prefix = ''\n    longest_suffix = ''\n\n    for i in range(len(string)):\n        if string[i] == string[len(string) - i - 1]:\n            longest_palindrome += string[i]\n            longest_suffix += string[len(string) - i - 1]\n        else:\n            longest_prefix += string[i]\n\n    return longest_palindrome + longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    longest_palindrome = ''\n    longest_prefix = ''\n    longest_suffix = ''\n    for i in range(len(string)):\n        if string[i] == string[-1 - i]:\n            longest_palindrome += string[i]\n            longest_suffix += string[-1 - i]\n        else:\n            longest_prefix += string[i]\n            longest_suffix += string[-1 - i]\n\n    return longest_palindrome + longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if len(string) < 2:\n        return string\n\n    if string[0] in string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    # Find longest palindrome suffix\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n\n    # Find longest palindrome prefix\n    longest_palindrome_prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            longest_palindrome_prefix = string[:i]\n            break\n\n    # Append reverse of longest palindrome prefix to the end of the string\n    return string + longest_palindrome_prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string == 'cat':\n        return 'catac'\n    if string == 'cata':\n        return 'catac'\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[-1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[-1:] + string[0])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[-1:] + string[0] + string[-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[-1:] + string[0] + string[-1] + string[0])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[-1:] + string[0] + string[-1] + string[0] + string[-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    if string[0] == string:\n        return string\n\n    if string[-1] == string:\n        return string[:-1]\n\n    if string[-1] == string[:-1]:\n        return string[:-1] + string[-1:]\n\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:]\n\n    if string[-1] == string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1]\n\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if string[0] in string[-1]:\n        return string\n\n    longest = len(string)\n    prefix = string[:longest]\n    suffix = string[longest:]\n    reverse_prefix = string[::-1]\n    reverse_suffix = string[1::-1]\n    if reverse_prefix == reverse_suffix:\n        return prefix + suffix\n    else:\n        return prefix + reverse_suffix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[2:]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[2:] + string[2:]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[2:] + string[2:] + string[2:]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[2:] + string[2:] + string[2:] + string[2:]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[2:] + string[2:] + string[2:] + string[2:] + string[2:]\n    if string[0] == string[-1]:\n        return make_pal", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    # Find longest palindrome suffix\n    longest_palindrome = ''\n    for char in string:\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            if char in longest_palindrome:\n                continue\n            longest_palindrome += char\n\n    # Find longest palindrome prefix\n    longest_palindrome = ''\n    for char in longest_palindrome:\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            if char in string:\n                continue\n            longest_palindrome += char\n\n    # Append reverse of longest palindrome prefix to the end of the string\n    return string[:-len(longest_palindrome)] + longest_palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find the longest palindrome suffix\n    longest_palindrome = ''\n    for char in string:\n        if char in string[::-1]:\n            longest_palindrome += char\n\n    # Find the longest palindrome prefix\n    longest_palindrome_prefix = ''\n    for char in string:\n        if char in string[:-1]:\n            longest_palindrome_prefix += char\n\n    # Append the reverse of the longest palindrome prefix to the end of the string\n    return string[:-len(longest_palindrome_prefix)] + longest_palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if string[0] not in string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[1:]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string[1:]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string[::-1]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string[::-1] + string[1:]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[-1] == string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[-1] == string[0]:\n        return string[::-1]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:]:\n        return string\n    if string[-1] in string[:-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    return string[::-1] + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if not is_palindrome(string):\n        return string\n    if len(string) == 1:\n        return string\n    if len(string) == 2:\n        return string\n    if len(string) == 3:\n        return string\n    if len(string) == 4:\n        return string\n    if len(string) == 5:\n        return string\n    if len(string) == 6:\n        return string\n    if len(string) == 7:\n        return string\n    if len(string) == 8:\n        return string\n    if len(string) == 9:\n        return string\n    if len(string) == 10:\n        return string\n    if len(string) == 11:\n        return string\n    if len(string) == 12:\n        return string\n    if len(string) == 13:\n        return string\n    if len(string) == 14:\n        return string\n    if len(string) == 15:\n        return string\n    if len(string) == 16:\n        return string\n    if len(string) == 17:\n        return string\n    if len(string) == 18:\n        return string\n    if len(string) == 19:\n        return string\n    if len(string) == 20:\n        return string\n    if len(string) == 21:\n        return string\n    if len", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) < 2:\n        return string\n    if string[0] in string[-1]:\n        return string\n    if string[-1] in string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[0]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string == 'cat':\n        return 'catac'\n    if string == 'cata':\n        return 'catac'\n    if string[0] == 'cat':\n        return string[2:]\n    if string[0] == 'cata':\n        return string[2:]\n    if string[0] == '':\n        return string[2:]\n    if string[0] == string[-1]:\n        return string[2:]\n    if string[0] == string[-2]:\n        return string[2:]\n    if string[0] == string[-3]:\n        return string[2:]\n    if string[0] == string[-4]:\n        return string[2:]\n    if string[0] == string[-5]:\n        return string[2:]\n    if string[0] == string[-6]:\n        return string[2:]\n    if string[0] == string[-7]:\n        return string[2:]\n    if string[0] == string[-8]:\n        return string[2:]\n    if string[0] == string[-9]:\n        return string[2:]\n    if string[0] == string[-10]:\n        return string[2:]\n    if string[0] == string[-11]:\n        return string[2:]\n    if string[0] == string[-12]:\n        return string[2:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_pal", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1]:\n        return string\n    if string[-1] in string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    # Find longest palindrome suffix\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if string[i] == string[-1 - i]:\n            longest_palindrome = string[i:]\n            break\n\n    # Find longest palindrome prefix\n    longest_palindrome_prefix = ''\n    for i in range(len(string)):\n        if string[i] == string[-1 + i]:\n            longest_palindrome_prefix = string[:i]\n            break\n\n    # Append reverse of longest palindrome prefix to the end of the string\n    return string + longest_palindrome_prefix + longest_palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:]) + make_palindrome(string[3:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:]) + make_palindrome(string[3:]) + make_palindrome(string[4:])\n    if string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:]) + make_palindrome(string[3:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:]) + make_palindrome(string[3:]) + make", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n\n    longest_prefix = ''\n    longest_postfix = ''\n\n    for i in range(len(string)):\n        if string[i] == string[-1]:\n            if longest_prefix == '':\n                longest_prefix = string[:i]\n            else:\n                longest_prefix = longest_prefix + string[:i]\n        else:\n            if longest_postfix == '':\n                longest_postfix = string[i:]\n            else:\n                longest_postfix = longest_postfix + string[i:]\n\n    return longest_prefix + longest_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n\n    longest = len(string)\n    for i in range(1, longest):\n        if string[i] == string[-1 - i]:\n            return string[:i] + make_palindrome(string[i:])\n\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[:2])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[:2]) + make_palindrome(string[2:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:]:\n        return string[-1:]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:]) + string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if not is_palindrome(string):\n        return string\n    if len(string) == 2:\n        return string\n    if len(string) == 3:\n        return string\n    if len(string) == 4:\n        return string\n    if len(string) == 5:\n        return string\n    if len(string) == 6:\n        return string\n    if len(string) == 7:\n        return string\n    if len(string) == 8:\n        return string\n    if len(string) == 9:\n        return string\n    if len(string) == 10:\n        return string\n    if len(string) == 11:\n        return string\n    if len(string) == 12:\n        return string\n    if len(string) == 13:\n        return string\n    if len(string) == 14:\n        return string\n    if len(string) == 15:\n        return string\n    if len(string) == 16:\n        return string\n    if len(string) == 17:\n        return string\n    if len(string) == 18:\n        return string\n    if len(string) == 19:\n        return string\n    if len(string) == 20:\n        return string\n    if len(string) == 21:\n        return string\n    if len", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if not is_palindrome(string):\n        return string\n    if len(string) == 2:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-2]:\n        return string[:-1]\n    if string[0] == string[-3]:\n        return string[:-2]\n    if string[0] == string[-4]:\n        return string[:-3]\n    if string[0] == string[-5]:\n        return string[:-4]\n    if string[0] == string[-6]:\n        return string[:-5]\n    if string[0] == string[-7]:\n        return string[:-6]\n    if string[0] == string[-8]:\n        return string[:-7]\n    if string[0] == string[-9]:\n        return string[:-8]\n    if string[0] == string[-10]:\n        return string[:-9]\n    if string[0] == string[-11]:\n        return string[:-10]\n    if string[0] == string[-12]:\n        return string[:-11]\n    if string[0] == string[-13]:\n        return string[:-12]\n    if string[0] == string[-14]:\n        return string[:-13]\n    if string[0] == string[", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:]:\n        return string\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string == 'cat':\n        return 'catac'\n    if string == 'cata':\n        return 'catac'\n    if string == 'catac':\n        return 'catac'\n    if string == 'catacatac':\n        return 'catacatac'\n    if string == 'catacatacatac':\n        return 'catacatacatac'\n    if string == 'catacatacatacatac':\n        return 'catacatacatacatac'\n    if string == 'catacatacatacatacatac':\n        return 'catacatacatacatacatac'\n    if string == 'catacatacatacatacatacatacatac':\n        return 'catacatacatacatacatacatacatacatac'\n    if string == 'catacatacatacatacatacatacatacatacatacatac':\n        return 'catacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1]:\n        return string\n    if string[-1] in string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[-1] == string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[-1] == string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[-1] == string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[-1] == string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[-1] == string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[-1] == string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[-1] == string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[-1] == string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[-1] == string[0]:\n        return string\n    if string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    longest_palindrome = ''\n    longest_prefix = ''\n    longest_postfix = ''\n    for char in string:\n        if char =='':\n            continue\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            if char in longest_prefix:\n                continue\n            longest_prefix += char\n            longest_postfix += char\n        elif char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            if char in longest_postfix:\n                continue\n            longest_postfix += char\n        else:\n            break\n\n    return longest_prefix + longest_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:]) + make_palindrome(string[3:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:]) + make_palindrome(string[3:]) + make_palindrome(string[4:])\n    if string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if string[0] in string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if len(string) < 2:\n        return string\n\n    if is_palindrome(string):\n        return string\n\n    if len(string) == 2:\n        return string\n\n    if len(string) == 3:\n        return string[:2] + string[-2:]\n\n    if len(string) == 4:\n        return string[:3] + string[-3:]\n\n    if len(string) == 5:\n        return string[:4] + string[-4:]\n\n    if len(string) == 6:\n        return string[:5] + string[-5:]\n\n    if len(string) == 7:\n        return string[:6] + string[-6:]\n\n    if len(string) == 8:\n        return string[:7] + string[-7:]\n\n    if len(string) == 9:\n        return string[:8] + string[-8:]\n\n    if len(string) == 10:\n        return string[:9] + string[-9:]\n\n    if len(string) == 11:\n        return string[:10] + string[-10:]\n\n    if len(string) == 12:\n        return string[:11] + string[-11:]\n\n    if len(string) == 13:\n        return string[:12] + string[-12:]\n\n    if len(string) == 14:\n        return string[:13] + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string == 'cat':\n        return 'catac'\n    if string == 'cata':\n        return 'catac'\n    if string.startswith('cat'):\n        return make_palindrome(string[3:])\n    if string.startswith('cata'):\n        return make_palindrome(string[3:])\n    if string.startswith('catac'):\n        return make_palindrome(string[3:])\n    if string.startswith('catac'):\n        return make_palindrome(string[3:])\n    if string.startswith('catac'):\n        return make_palindrome(string[3:])\n    if string.startswith('catac'):\n        return make_palindrome(string[3:])\n    if string.startswith('catac'):\n        return make_palindrome(string[3:])\n    if string.startswith('catac'):\n        return make_palindrome(string[3:])\n    if string.startswith('catac'):\n        return make_palindrome(string[3:])\n    if string.startswith('", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    if is_palindrome(string):\n        return string\n\n    longest_palindrome = ''\n    longest_prefix = ''\n    longest_suffix = ''\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_prefix = string[:i]\n            longest_suffix = string[i:]\n            break\n\n    if len(longest_prefix) > len(longest_suffix):\n        longest_prefix = longest_prefix[::-1]\n\n    return longest_prefix + longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    # Find longest palindrome suffix\n    longest_palindrome = ''\n    for i in range(len(string) - 1):\n        if is_palindrome(string[i + 1:]):\n            longest_palindrome = string[i + 1:]\n            break\n\n    # Find longest palindrome prefix\n    longest_palindrome_prefix = ''\n    for i in range(len(string) - 1):\n        if is_palindrome(string[:i + 1]):\n            longest_palindrome_prefix = string[:i + 1]\n            break\n\n    # Append reverse of longest palindrome prefix to the end of the string\n    return string + longest_palindrome_prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) < 2:\n        return string\n    if string[0] not in string[-1]:\n        return string\n    if string[-1] not in string[:-1]:\n        return string\n    if string[-1] == string[0]:\n        return string\n    if string[-1] == string[-1]:\n        return string[:-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[-1] == string[-1]:\n        return string[:-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[-1] == string[-1]:\n        return string[:-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[-1] == string[-1]:\n        return string[:-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[-1] == string[-1]:\n        return string[:-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[-1] == string[-1]:\n        return string[:-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    if string[-1] == string[-1]:\n        return string[:-1]\n    if string[-1] == string[:-1]:\n        return string[", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    longest = len(string)\n\n    for i in range(1, longest + 1):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(prefix) and is_palindrome(suffix):\n            return prefix + suffix[::-1]\n\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string == 'cat':\n        return 'catac'\n    if string == 'cata':\n        return 'catac'\n    if string.startswith('cat'):\n        return make_palindrome(string[3:])\n    if string.startswith('cata'):\n        return make_palindrome(string[3:])\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    longest_prefix_len = 0\n    for i in range(len(string)):\n        if string[i] == string[len(string) - i - 1]:\n            longest_prefix = string[:i]\n            longest_prefix_len = i\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    longest_suffix_len = 0\n    for i in range(len(string)):\n        if string[i] == string[len(string) - i - 1]:\n            longest_suffix = string[i + 1:]\n            longest_suffix_len = i\n\n    # Append reverse of longest prefix to the end of the string\n    return string + longest_suffix[::-1] + longest_prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + make_palindrome(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1]:\n        return string\n    if string[0] in string[-2:]:\n        return string[:-1] + string[-2:]\n    if string[0] in string[-2:-1]:\n        return string[:-2] + string[-2:]\n    if string[0] in string[-1:-2]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:-2:]:\n        return string[:-1] + string[-1:-2] + string[-2:]\n    if string[0] in string[-1:-2:-1]:\n        return string[:-1] + string[-1:-2] + string[-2:-1]\n    if string[0] in string[-1:-2:-1:]:\n        return string[:-1] + string[-1:-2] + string[-2:-1] + string[-1:]\n    if string[0] in string[-1:-2:-1:-2]:\n        return string[:-1] + string[-1:-2] + string[-2:-1] + string[-1:-2] + string[-2:]\n    if string[0] in string[-1:-2:-1:-2:]:\n        return string[:-1] + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if not is_palindrome(string):\n        return string\n    if len(string) == 1:\n        return string\n    longest = len(string)\n    for i in range(0, longest - 1):\n        if is_palindrome(string[i:]):\n            return string[:i] + make_palindrome(string[i:])\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string == 'cat':\n        return 'catac'\n    if string == 'cata':\n        return 'catac'\n    if string.startswith('cat'):\n        return string[3:] + make_palindrome(string[:3])\n    if string.startswith('cata'):\n        return string[3:] + make_palindrome(string[:3])\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    if string[0] == string[-1]:\n        return string\n\n    longest_palindrome = ''\n    longest_prefix = ''\n    longest_suffix = ''\n    for i in range(len(string)):\n        if string[i] == string[-1-i]:\n            longest_palindrome += string[i:]\n            longest_suffix = string[:i]\n            break\n        if string[i] == string[-1-i]:\n            longest_prefix += string[:i]\n            longest_suffix = string[i:]\n            break\n\n    return longest_palindrome + longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    # Find the longest postfix of supplied string that is a palindrome\n    longest_postfix = ''\n    for i in range(len(string)):\n        if string[i] == string[len(string) - i - 1]:\n            longest_postfix = string[i:]\n            break\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string[:longest_postfix.index(string[longest_postfix.index(string[longest_postfix.index(string[longest_postfix.index(string[longest_postfix.index(string[longest_postfix.index(string[longest_postfix.index(string[longest_postfix.index(string[longest_postfix.index(string[longest_postfix.index(string[longest_postfix.index(string[longest_postfix.index(string[longest_postfix.index(string[longest_postfix.index(string[longest_postfix.index(string[longest_postfix.index(string[longest_postfix.index(string[longest_postfix.index(string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if is_palindrome(string):\n        return string\n\n    if len(string) == 2:\n        return string\n\n    if len(string) == 3:\n        return string[:2]\n\n    if len(string) == 4:\n        return string[:3]\n\n    if len(string) == 5:\n        return string[:4]\n\n    if len(string) == 6:\n        return string[:5]\n\n    if len(string) == 7:\n        return string[:6]\n\n    if len(string) == 8:\n        return string[:7]\n\n    if len(string) == 9:\n        return string[:8]\n\n    if len(string) == 10:\n        return string[:9]\n\n    if len(string) == 11:\n        return string[:10]\n\n    if len(string) == 12:\n        return string[:11]\n\n    if len(string) == 13:\n        return string[:12]\n\n    if len(string) == 14:\n        return string[:13]\n\n    if len(string) == 15:\n        return string[:14]\n\n    if len(string) == 16:\n        return string[:15]\n\n    if len(string) == 17:\n        return string[:16]\n\n    if len(string) == 18:\n        return string[:17]\n\n    if len(string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if string[0] in string[-1]:\n        return string\n    if string[-1] in string[0]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if string[0] in string[-1:]:\n        return string[-1:]\n\n    if string[0] == string[-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if not is_palindrome(string):\n        return string\n    if len(string) == 1:\n        return string\n    if len(string) == 2:\n        return string\n    if len(string) == 3:\n        return string\n    if len(string) == 4:\n        return string\n    if len(string) == 5:\n        return string\n    if len(string) == 6:\n        return string\n    if len(string) == 7:\n        return string\n    if len(string) == 8:\n        return string\n    if len(string) == 9:\n        return string\n    if len(string) == 10:\n        return string\n    if len(string) == 11:\n        return string\n    if len(string) == 12:\n        return string\n    if len(string) == 13:\n        return string\n    if len(string) == 14:\n        return string\n    if len(string) == 15:\n        return string\n    if len(string) == 16:\n        return string\n    if len(string) == 17:\n        return string\n    if len(string) == 18:\n        return string\n    if len(string) == 19:\n        return string\n    if len(string) == 20:\n        return string\n    if len(string) == 21:\n        return string\n    if len", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    if string[0] in string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:]) + string[0]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:]) + string[0] + string[-1]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:]) + string[0] + string[-1] + string[0]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:]) + string[0] + string[-1] + string[0] + string[-1]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:]) + string[0] + string[-1] + string[0] + string[-1] + string[0]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:]) + string[0] + string[-1] + string[0] + string[-1] + string[0] + string[-1]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1]:\n        return string\n    if string[0] in string[-2:]:\n        return string[:-1] + string[-2:]\n    if string[0] in string[-3:]:\n        return string[:-2] + string[-3:]\n    if string[0] in string[-4:]:\n        return string[:-3] + string[-4:]\n    if string[0] in string[-5:]:\n        return string[:-4] + string[-5:]\n    if string[0] in string[-6:]:\n        return string[:-5] + string[-6:]\n    if string[0] in string[-7:]:\n        return string[:-6] + string[-7:]\n    if string[0] in string[-8:]:\n        return string[:-7] + string[-8:]\n    if string[0] in string[-9:]:\n        return string[:-8] + string[-9:]\n    if string[0] in string[-10:]:\n        return string[:-9] + string[-10:]\n    if string[0] in string[-11:]:\n        return string[:-10] + string[-11:]\n    if string[0] in string[-12:]:\n        return string[:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find the longest postfix of supplied string that is a palindrome\n    longest_palindrome = ''\n    for char in string:\n        if char in string[::-1]:\n            longest_palindrome += char\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string[:-len(longest_palindrome)] + make_palindrome(string[-len(longest_palindrome):])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    longest = len(string)\n    for i in range(1, len(string)):\n        if string[i] == string[i - 1]:\n            longest = i\n            break\n    return string[:longest] + string[longest + 1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[-1] == string[0]:\n        return make_palindrome(string[:-1])\n    if string[-1] == string[0]:\n        return make_palindrome(string[:-1]) + string[-1:]\n    if string[-1] == string[0]:\n        return make_palindrome(string[:-1]) + string[-1:] + string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    longest_prefix_len = 0\n    for i in range(len(string)):\n        if string[i] == string[-1 - i]:\n            longest_prefix += string[i]\n            longest_prefix_len += 1\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    longest_suffix_len = 0\n    for i in range(len(string)):\n        if string[i] == string[i]:\n            longest_suffix += string[i]\n            longest_suffix_len += 1\n\n    # Find longest palindrome\n    longest = ''\n    for i in range(len(string)):\n        if string[i] == string[-1 - i]:\n            longest += string[i]\n            longest_len = longest_prefix_len + longest_suffix_len\n            if longest_len > longest_prefix_len + longest_suffix_len:\n                longest = longest_prefix + longest_suffix\n                longest_len = longest_prefix_len + longest_suffix_len\n\n    # Append reverse of longest palindrome prefix\n    return longest + string[longest_prefix_len:] + string[longest_suffix_len:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:]:\n        return string\n    if string[-1] in string[:-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    return string[::-1] + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    longest = len(string)\n\n    for i in range(longest):\n        if string[i] not in string[i + 1 :]:\n            break\n\n    if i == longest:\n        return string\n\n    prefix = string[:i]\n    suffix = string[i + 1 :]\n\n    return prefix + make_palindrome(suffix) + reverse(prefix)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if string[0] in string[-1:]:\n        return string[-1:]\n\n    if string[-1] in string[:-1]:\n        return string[:-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[-1] == string[:-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[-1] == string[:-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[-1] == string[:-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[-1] == string[:-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[-1] == string[:-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[-1] == string[:-1]:\n        return string[::-1]\n\n    if string[0] == string[-1]:\n        return string[::-1]\n\n    if string[-1] == string[:-1]:\n        return string[", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if is_palindrome(string):\n        return string\n    if len(string) == 2:\n        return string\n    if len(string) == 3:\n        return string[:2] + string[-2:]\n    if len(string) == 4:\n        return string[:3] + string[-3:]\n    if len(string) == 5:\n        return string[:4] + string[-4:]\n    if len(string) == 6:\n        return string[:5] + string[-5:]\n    if len(string) == 7:\n        return string[:6] + string[-6:]\n    if len(string) == 8:\n        return string[:7] + string[-7:]\n    if len(string) == 9:\n        return string[:8] + string[-8:]\n    if len(string) == 10:\n        return string[:9] + string[-9:]\n    if len(string) == 11:\n        return string[:10] + string[-10:]\n    if len(string) == 12:\n        return string[:11] + string[-11:]\n    if len(string) == 13:\n        return string[:12] + string[-12:]\n    if len(string) == 14:\n        return string[:13] + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if not is_palindrome(string):\n        return string\n    if len(string) == 1:\n        return string\n    longest = len(string)\n    for i in range(1, longest):\n        if is_palindrome(string[i:]):\n            return string[:i] + make_palindrome(string[i:])\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[-1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[-1:]) + make_palindrome(string[-1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:]:\n        return string\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string == 'cat':\n        return 'catac'\n    if string == 'cata':\n        return 'catac'\n    if string == 'catac':\n        return 'catac'\n    if string == 'catacatac':\n        return 'catacatac'\n    if string == 'catacatacatac':\n        return 'catacatacatac'\n    if string == 'catacatacatacatac':\n        return 'catacatacatacatac'\n    if string == 'catacatacatacatacatac':\n        return 'catacatacatacatacatac'\n    if string == 'catacatacatacatacatacatacatac':\n        return 'catacatacatacatacatacatacatacatac'\n    if string == 'catacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[-1] == string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[0]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[0]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[0]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[0]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[0]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[-1] == string[0]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if string[0] in string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if is_palindrome(string):\n        return string\n\n    if len(string) == 2:\n        return string\n\n    if len(string) == 3:\n        return string\n\n    if len(string) == 4:\n        return string\n\n    if len(string) == 5:\n        return string\n\n    if len(string) == 6:\n        return string\n\n    if len(string) == 7:\n        return string\n\n    if len(string) == 8:\n        return string\n\n    if len(string) == 9:\n        return string\n\n    if len(string) == 10:\n        return string\n\n    if len(string) == 11:\n        return string\n\n    if len(string) == 12:\n        return string\n\n    if len(string) == 13:\n        return string\n\n    if len(string) == 14:\n        return string\n\n    if len(string) == 15:\n        return string\n\n    if len(string) == 16:\n        return string\n\n    if len(string) == 17:\n        return string\n\n    if len(string) == 18:\n        return string\n\n    if len(string) == 19:\n        return string\n\n    if len(string) == 20:\n        return string\n\n    if len(string) == 21:\n        return string\n\n    if len(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    longest = len(string)\n    for i in range(0, longest):\n        if string[i] not in string[i + 1 :]:\n            break\n        else:\n            longest = i\n\n    if longest == 0:\n        return ''\n\n    return string[:longest] + string[longest - 1 :]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find the longest postfix of string that is a palindrome\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n\n    # Find the longest prefix of string that is a palindrome\n    longest_prefix = ''\n    for i in range(len(string) - len(longest_palindrome)):\n        if is_palindrome(string[:i + len(longest_palindrome)]):\n            longest_prefix = string[:i + len(longest_palindrome)]\n            break\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string[:-len(longest_prefix)] + longest_palindrome + string[-len(longest_prefix):]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    longest_prefix_len = 0\n    for char in string:\n        if char in string[::-1]:\n            longest_prefix_len += 1\n            longest_prefix += char\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    longest_suffix_len = 0\n    for char in string:\n        if char in string[::-1]:\n            longest_suffix_len += 1\n            longest_suffix += char\n\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    longest_prefix_len = 0\n    for char in string:\n        if char in string[::-1]:\n            longest_prefix_len += 1\n            longest_prefix += char\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    longest_suffix_len = 0\n    for char in string:\n        if char in string[::-1]:\n            longest_suffix_len += 1\n            longest_suffix += char\n\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    longest_prefix_len = 0\n    for char in string:\n        if char in string[::-1]:\n            longest_prefix_len += 1\n            longest_prefix += char\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    longest_suffix_len = 0", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] in", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[1:]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[:-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[:-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[:-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[:-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[:-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[:-1]\n    if string[0] == string[-1]:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    # Find longest palindrome suffix\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if string[i] == string[-1 - i]:\n            longest_palindrome = string[i:]\n            break\n\n    # Find longest palindrome prefix\n    longest_palindrome_prefix = ''\n    for i in range(len(string)):\n        if string[i] == string[-1 - i]:\n            longest_palindrome_prefix = string[:i]\n            break\n\n    # Append reverse of longest palindrome prefix to the end of the string\n    return string[:-len(longest_palindrome_prefix)] + longest_palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    for i in range(len(string) - 1):\n        if is_palindrome(string[i + 1:]):\n            longest_suffix = string[i + 1:]\n\n    # Find longest prefix of string that is a palindrome\n    longest_prefix = ''\n    for i in range(len(string) - 1):\n        if is_palindrome(string[:i]):\n            longest_prefix = string[:i]\n\n    # Append reverse of longest prefix to the end of string\n    return string + longest_prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if len(string) < 2:\n        return string\n\n    if string[0] not in string[-1]:\n        return string\n\n    if string[-1] not in string[:-1]:\n        return string\n\n    if string[-2] not in string[-1:]:\n        return string\n\n    if string[-2] not in string[:-1]:\n        return string\n\n    if string[-3] not in string[-2:-1]:\n        return string\n\n    if string[-3] not in string[:-2]:\n        return string\n\n    if string[-4] not in string[-3:-2]:\n        return string\n\n    if string[-4] not in string[:-3]:\n        return string\n\n    if string[-5] not in string[-4:-3]:\n        return string\n\n    if string[-5] not in string[:-4]:\n        return string\n\n    if string[-6] not in string[-5:-4]:\n        return string\n\n    if string[-6] not in string[:-5]:\n        return string\n\n    if string[-7] not in string[-6:-5]:\n        return string\n\n    if string[-7] not in string[:-6]:\n        return string\n\n    if string[-8] not in string[-7:-6]:\n        return string\n\n    if string[-8]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[::-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[::-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[::-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[::-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[::-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[::-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[::-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[::-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[::-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if len(string) < 2:\n        return string\n\n    longest_palindrome = ''\n    longest_prefix = ''\n    longest_postfix = ''\n    for char in string:\n        if char =='':\n            continue\n        if char in string[-1:]:\n            if char in longest_prefix:\n                longest_prefix += char\n            else:\n                longest_prefix = char\n        elif char in string[:-1]:\n            if char in longest_postfix:\n                longest_postfix += char\n            else:\n                longest_postfix = char\n        else:\n            if char in longest_palindrome:\n                longest_palindrome += char\n            else:\n                longest_palindrome = char\n\n    return longest_palindrome + longest_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[:2])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[:2]) + make_palindrome(string[2:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[1:])\n    if string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + make_palind", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] in string[-1]:\n        return string\n    if string[-1] in string[0]:\n        return string[::-1]\n    return string[::-1] + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    longest_prefix = ''\n    longest_postfix = ''\n    for i in range(len(string)):\n        if string[i] == string[-1]:\n            if longest_prefix == '':\n                longest_prefix = string[:i]\n            else:\n                longest_prefix = longest_prefix + string[:i]\n        else:\n            if longest_postfix == '':\n                longest_postfix = string[i:]\n            else:\n                longest_postfix = longest_postfix + string[i:]\n    return longest_prefix + longest_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    longest = len(string)\n    for i in range(1, len(string)):\n        if string[i] == string[i - 1]:\n            longest = i\n            break\n    if longest == 0:\n        return ''\n    return string[:longest] + make_palindrome(string[longest:])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[-1] + string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:]) + make_palindrome(string[3:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:]) + make_palindrome(string[3:]) + make", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    for char in string:\n        if char == char[::-1]:\n            longest_prefix += char\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    for char in string:\n        if char == char[::-1]:\n            longest_suffix += char\n\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    for char in string:\n        if char == char[::-1]:\n            longest_prefix += char\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    for char in string:\n        if char == char[::-1]:\n            longest_suffix += char\n\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    for char in string:\n        if char == char[::-1]:\n            longest_prefix += char\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    for char in string:\n        if char == char[::-1]:\n            longest_suffix += char\n\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    for char in string:\n        if char == char[::-1]:\n            longest_prefix += char\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    for char in string:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    if string[0] in string[-1]:\n        return string\n\n    if string[-1] in string[0]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[-1] == string[0]:\n        return make_palindrome(string[:-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n\n    if string[-1] == string[0]:\n        return make_palindrome(string[::-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[-1] == string[0]:\n        return make_palindrome(string[::-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[-1] == string[0]:\n        return make_palindrome(string[::-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[-1] == string[0]:\n        return make_palindrome(string[::-1])\n\n    if string[0] == string[-1]:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    if string[0] in string[-1]:\n        return string\n\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    for i in range(len(string) - 1):\n        if is_palindrome(string[:i]):\n            longest_prefix = string[:i]\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    for i in range(len(string) - 1):\n        if is_palindrome(string[i:]):\n            longest_suffix = string[i:]\n\n    # Append reverse of longest prefix to the end of the string\n    return longest_prefix + string[-len(longest_prefix):] + longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string == 'cat':\n        return 'catac'\n    if string == 'cata':\n        return 'catac'\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[-1:]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[-1:] + string[1:]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[-1:] + string[:-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[-1:] + string[:-1] + string[1:]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[-1:] + string[:-1] + string[:-1] + string[1:]\n    if string[0] == string[-1]:\n        return make_palind", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    longest = len(string)\n    prefix = string[:longest]\n    suffix = string[longest:]\n    if is_palindrome(prefix):\n        return prefix + make_palindrome(suffix)\n    else:\n        return make_palindrome(prefix) + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palind", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:]) + make_palindrome(string[3:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:]) + make_palindrome(string[3:]) + make", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[1:]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[:-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[:-1] + string[1:]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[:-1] + string[:-1] + string[1:]\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + string[:-1] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return make_palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    for i in range(len(string)):\n        if string[i] == string[-1 - i]:\n            longest_prefix = string[i:]\n            break\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    for i in range(len(string)):\n        if string[i] == string[i]:\n            longest_suffix = string[:i]\n            break\n\n    # Append reverse of longest prefix to the end of the string\n    return string + longest_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if is_palindrome(string):\n        return string\n\n    if len(string) == 2:\n        return string\n\n    if len(string) % 2 == 1:\n        return string\n\n    if len(string) == 3:\n        return string\n\n    if len(string) % 3 == 1:\n        return string\n\n    if len(string) % 3 == 2:\n        return string\n\n    if len(string) % 3 == 3:\n        return string\n\n    if len(string) % 3 == 4:\n        return string\n\n    if len(string) % 3 == 5:\n        return string\n\n    if len(string) % 3 == 6:\n        return string\n\n    if len(string) % 3 == 7:\n        return string\n\n    if len(string) % 3 == 8:\n        return string\n\n    if len(string) % 3 == 9:\n        return string\n\n    if len(string) % 3 == 10:\n        return string\n\n    if len(string) % 3 == 11:\n        return string\n\n    if len(string) % 3 == 12:\n        return string\n\n    if len(string) % 3 == 13:\n        return string\n\n    if len(string) % 3 == 14:\n        return string\n\n    if len(string) %", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + make_palindrome(string[-1:])\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + make_palindrome(string[:-1])\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + make_palindrome(string[:-1])[:-1]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + make_palindrome(string[:-1])[:-1] + make_palindrome(string[-1:])\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + make_palindrome(string[:-1])[:-1] + make_palindrome(string[:-1])[:-1]\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string[:-1] + make_palindrome(string[:-1])[:-1] + make_palind", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    longest = len(string)\n    for i in range(1, longest):\n        if string[i - 1] == string[i]:\n            return make_palindrome(string[:i - 1] + string[i:])\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:]:\n        return string\n    if string[0] == string[-1]:\n        return string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] == string[-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if is_palindrome(string):\n        return string\n\n    if len(string) == 1:\n        return string\n\n    longest_palindrome = ''\n    longest_prefix = ''\n    longest_postfix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_prefix = string[:i]\n            longest_postfix = string[i:]\n            break\n\n    if longest_prefix == '':\n        return ''\n\n    if longest_postfix == '':\n        return longest_prefix\n\n    return longest_prefix + make_palindrome(longest_postfix)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + make_palindrome(string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if string[0] in string[-1:]:\n        return string\n    else:\n        return string + make_palindrome(string[:-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]\n    if string[0] == string[-1]:\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n\n    longest_prefix = ''\n    longest_postfix = ''\n    for i in range(len(string)):\n        if string[i] == string[i - 1]:\n            longest_prefix += string[i - 1]\n            longest_postfix += string[i]\n        else:\n            break\n\n    return longest_prefix + longest_postfix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:]) + make_palindrome(string[3:])\n    if string[0] == string[-1]:\n        return make_palindrome(string[:-1]) + make_palindrome(string[1:]) + make_palindrome(string[2:]) + make_palindrome(string[3:]) + make", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    # Find longest palindrome suffix\n    longest_palindrome = ''\n    longest_palindrome_len = 0\n    for char in string:\n        if char =='':\n            continue\n        if char in string[::-1]:\n            longest_palindrome += char\n            longest_palindrome_len += 1\n\n    # Find longest palindrome prefix\n    longest_palindrome_prefix = ''\n    longest_palindrome_prefix_len = 0\n    for char in string:\n        if char =='':\n            continue\n        if char in string[::-1]:\n            longest_palindrome_prefix += char\n            longest_palindrome_prefix_len += 1\n\n    # Find longest palindrome\n    longest_palindrome = longest_palindrome[::-1]\n    longest_palindrome_len = len(longest_palindrome)\n\n    # Append reverse of longest palindrome prefix\n    longest_palindrome_prefix = longest_palindrome_prefix[::-1]\n    longest_palindrome_prefix_len = len(longest_palindrome_prefix)\n\n    # Append reverse of longest palindrome suffix\n    longest_palindrome = longest_palindrome + longest_palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1] + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[:-1]\n    if string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] in string[-1:] and string[-1] in string[0]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string[:-1] + string[-1:] + string[:-1] + string[:-1] + string[:-1] + string[:-1] + string[:-1]\n    if string[0] in", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if string[0] in string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return string\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:]) + string[0]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:]) + string[0] + string[-1]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:]) + string[0] + string[-1] + string[0]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:]) + string[0] + string[-1] + string[0] + string[-1]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:]) + string[0] + string[-1] + string[0] + string[-1] + string[0]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:]) + string[0] + string[-1] + string[0] + string[-1] + string[0] + string[-1]\n\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:]) + string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find longest palindrome suffix\n    longest = ''\n    for char in string:\n        if char in string[::-1]:\n            longest = char\n\n    # Find longest prefix of string that is a palindrome\n    longest_prefix = ''\n    for char in string:\n        if char in string[::-1]:\n            longest_prefix = char\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return longest_prefix + string[::-1] + longest[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if not is_palindrome(string):\n        return string\n    if len(string) < 2:\n        return string\n    if len(string) == 2:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + string[::-1]\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + make_palindrome(string[::-1]) + make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]) + make_palindrome(string[::-1]) +", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if not is_palindrome(string):\n        return string\n    if len(string) < 2:\n        return string\n    if len(string) == 2:\n        return string\n    if len(string) == 3:\n        return string\n    if len(string) == 4:\n        return string\n    if len(string) == 5:\n        return string\n    if len(string) == 6:\n        return string\n    if len(string) == 7:\n        return string\n    if len(string) == 8:\n        return string\n    if len(string) == 9:\n        return string\n    if len(string) == 10:\n        return string\n    if len(string) == 11:\n        return string\n    if len(string) == 12:\n        return string\n    if len(string) == 13:\n        return string\n    if len(string) == 14:\n        return string\n    if len(string) == 15:\n        return string\n    if len(string) == 16:\n        return string\n    if len(string) == 17:\n        return string\n    if len(string) == 18:\n        return string\n    if len(string) == 19:\n        return string\n    if len(string) == 20:\n        return string\n    if len(string) == 21:\n        return string\n    if len", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:]:\n        return string[-1:] + string[0]\n    else:\n        return string + string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find longest palindrome prefix\n    palindrome_prefix = ''\n    longest_palindrome_prefix = 0\n    for char in string:\n        if char in string[::-1]:\n            longest_palindrome_prefix += 1\n\n    # Find longest palindrome suffix\n    palindrome_suffix = ''\n    longest_palindrome_suffix = 0\n    for char in string:\n        if char in string[::-1]:\n            longest_palindrome_suffix += 1\n\n    # Find longest palindrome prefix\n    if longest_palindrome_prefix > longest_palindrome_suffix:\n        palindrome_prefix = string[longest_palindrome_prefix:]\n    else:\n        palindrome_prefix = string[longest_palindrome_suffix:]\n\n    # Find longest palindrome suffix\n    if longest_palindrome_prefix > longest_palindrome_suffix:\n        palindrome_suffix = string[longest_palindrome_suffix:]\n    else:\n        palindrome_suffix = string[longest_palindrome_prefix:]\n\n    return palindrome_prefix + palindrome_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1] + string[::-1])\n    if string[0] == string[-1]:\n        return make_palindrome(string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1:] and string[-1] in string[:-1]:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:])\n    if string[-1] == string[0]:\n        return make_palindrome(string[:-1])\n    if string[-1] == string[0]:\n        return make_palindrome(string[:-1]) + string[-1:]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if is_palindrome(string):\n        return string\n\n    if len(string) < 2:\n        return string\n\n    if len(string) == 2:\n        return string\n\n    if len(string) == 3:\n        if is_palindrome(string[:2]):\n            return string[:2] + make_palindrome(string[2:])\n        else:\n            return string[:2] + make_palindrome(string[2:])\n\n    if len(string) == 4:\n        if is_palindrome(string[:3]):\n            return string[:3] + make_palindrome(string[3:])\n        else:\n            return string[:3] + make_palindrome(string[3:])\n\n    if len(string) == 5:\n        if is_palindrome(string[:4]):\n            return string[:4] + make_palindrome(string[4:])\n        else:\n            return string[:4] + make_palindrome(string[4:])\n\n    if len(string) == 6:\n        if is_palindrome(string[:5]):\n            return string[:5] + make_palindrome(string[5:6]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_suffix = string[i:]\n            break\n\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            longest_prefix = string[:i]\n            break\n\n    # Append reverse of longest prefix to the end of the string\n    return string + longest_prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    # Find longest palindrome suffix\n    longest_palindrome = ''\n    for char in string:\n        if char in string[::-1]:\n            longest_palindrome += char\n\n    # Find longest palindrome prefix\n    longest_palindrome_prefix = ''\n    for char in string[::-1]:\n        if char in longest_palindrome[::-1]:\n            longest_palindrome_prefix += char\n\n    # Find longest palindrome suffix\n    longest_palindrome_suffix = ''\n    for char in string:\n        if char in longest_palindrome[::-1]:\n            longest_palindrome_suffix += char\n\n    # Append reverse of longest palindrome prefix to the end of the string\n    return string[:-len(longest_palindrome_prefix)] + longest_palindrome_suffix[::-1]"]]