[["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Init\n    distance = len(numbers) * 1.0\n    max_dist = 1.0\n\n    # Calculate distance from all numbers in the list\n    # This will be stored in a list\n    distances = [num - numbers[-1] for num in numbers]\n\n    # Select the two numbers with the smallest and largest distance\n    smallest_dist = max_dist\n    largest_dist = max_dist\n\n    # Start iterating over the numbers\n    for num in numbers:\n        # Calculate the distance of this number from the previous two numbers and update the total distance\n        distances.append(num - numbers[-2])\n        distances.append(num - numbers[-1])\n\n        # If the two previous numbers are the smallest and largest we have found so far then we need to update those\n        if distances[0] < smallest_dist:\n            smallest_dist = distances[0]\n\n        if distances[-1] > largest_dist:\n            largest_dist = distances[-1]\n\n    # Return the two numbers with the smallest and largest distance\n    return smallest_dist, largest_dist", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Return the first two values and break ties in order\n    return list(reversed(sorted(numbers, key=lambda x: -x[0]))[:2])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"must be at least two numbers\")\n\n    smallest = numbers[0]\n    largest = numbers[-1]\n    closest_smallest = smallest\n\n    closest_largest = largest\n    for i in range(1, len(numbers)):\n        if numbers[i] < closest_smallest:\n            smallest = numbers[i]\n        if numbers[i] > closest_largest:\n            largest = numbers[i]\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if not numbers:\n        return None, None\n\n    # Find the two numbers that are closest to each other\n    delta = float(\"inf\")\n    smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers[1:]:\n        difference = abs(number - smallest)\n        if difference <= delta:\n            delta = difference\n            smallest = number\n        difference = abs(number - largest)\n        if difference <= delta:\n            delta = difference\n            largest = number\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    n = len(numbers)\n    if n < 2:\n        return None, None\n\n    def func(a, b) -> bool:\n        return abs(a - b) < (n - 1) * (n - 2) / (2 * n)\n\n    return numbers[0], numbers[n - 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def is_ordering(n: float) -> bool:\n        return abs(n - numbers[-1 - 1]) <= abs(n - numbers[-2 - 2])\n\n    x = numbers[0]\n    y = numbers[-1]\n    x_index = len(numbers) - 1 - y_index\n    if is_ordering(x_index):\n        return x, y\n    elif is_ordering(y_index):\n        return y, x\n    elif not is_ordering(x_index) and not is_ordering(y_index):\n        return x, y\n    else:\n        return None, None", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest = numbers[0]\n    largest = numbers[-1]\n    for num in numbers[1:]:\n        if smallest > num:\n            smallest = num\n        elif largest < num:\n            largest = num\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Find the smallest and largest numbers in the list\n    smallest: float = numbers[0]\n    largest: float = numbers[numbers.index(max(numbers))]\n\n    # Select and return the two closest numbers\n    smallest_other: float = None\n    largest_other: float = None\n    for index in range(1, len(numbers)):\n        other: float = numbers[index]\n        if smallest == other:\n            smallest_other = other\n        if largest == other:\n            largest_other = other\n\n    # Return the two smallest and largest numbers\n    return smallest, largest, smallest_other, largest_other\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if not numbers:\n        raise ValueError('Not enough numbers in list: {}'.format(len(numbers)))\n\n    assert len(numbers) >= 2, 'Need at least two numbers to find their closeness.'\n\n    min_dist, max_dist = float('nan'), float('nan')\n    for element in numbers:\n        min_dist = min(min_dist, element - max_dist)\n        max_dist = max(max_dist, element - min_dist)\n\n    min_dist, max_dist = min_dist, max_dist\n\n    if min_dist > max_dist:\n        min_dist, max_dist = max_dist, min_dist\n\n    return min_dist, max_dist", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def closest_to_other(x: float, y: float) -> bool:\n        return abs(x - y) < 0.01\n\n    # Keep track of the closest to each other numbers\n    closest_to_other_counter = 0\n    smallest = numbers[0]\n    largest = numbers[-1]\n    for i in range(1, len(numbers)):\n        if closest_to_other_counter:\n            smallest = numbers[i]\n            largest = numbers[i - 1]\n            closest_to_other_counter += 1\n        else:\n            closest_to_other_counter = 1\n\n    # Now we know the closest to each other numbers and we need to find the closest to the numbers we have so far\n    smallest = numbers[0]\n    largest = numbers[-1]\n    for i in range(1, len(numbers)):\n        if smallest > numbers[i]:\n            smallest = numbers[i]\n        elif largest < numbers[i]:\n            largest = numbers[i]\n\n    # Now we have the closest to each other numbers and the closest to our numbers\n    # and we need to sort them\n    smallest = numbers[0]\n    largest = numbers[-1]\n    for i in range(1, len(numbers)):\n        if smallest > numbers[i]:\n            smallest = numbers[i]\n        elif largest < numbers[i]:\n            largest = numbers[i]\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if not numbers:\n        return None, None\n    smallest = numbers[0]\n    largest = numbers[-1]\n    for index, number in enumerate(numbers[::-1]):\n        if number < smallest:\n            smallest = number\n        elif number > largest:\n            largest = number\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # compute the differences between every number\n    diffs = [(i - j) for i, j in enumerate(numbers) if i!= j]\n\n    # find the minimum and maximum\n    min_difference = diffs.min()\n    max_difference = diffs.max()\n\n    # calculate the midpoint\n    midpoint = (min_difference + max_difference) / 2\n\n    # find the first and second numbers\n    first = numbers[0] if min_difference == 0 else numbers[1]\n    second = numbers[2] if max_difference == 0 else numbers[3]\n\n    # find the distance between them\n    return first, second, midpoint", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def find_closest(current: List[float], num: float) -> Tuple[float, float]:\n        \"\"\" Return the closest two numbers from a supplied list. \"\"\"\n        if len(current) > 2:\n            current.sort(reverse=True, key=lambda x: -x[1])\n            if current[0][0] == num:\n                return current[0], current[1]\n            else:\n                first, second = find_closest(current[:2], num)\n                return first, second\n        return None, None\n\n    return find_closest(numbers, numbers[0])[0], find_closest(numbers, numbers[-1])[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = float('inf')\n    index = 0\n    for i in range(2):\n        if numbers[i] == numbers[index]:\n            index += 1\n        else:\n            if numbers[i] < closest:\n                closest = numbers[i]\n                index = i\n\n    return numbers[index], numbers[index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    largest = min(numbers)\n    smallest = max(numbers)\n\n    if largest < smallest:\n        return (largest, smallest)\n\n    delta = largest - smallest\n\n    return (largest + delta / 2, smallest - delta / 2)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return sorted(numbers)[::-1][0], sorted(numbers)[::-1][1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def _max_value(x: float) -> float:\n        \"\"\" The absolute maximum of the supplied float. \"\"\"\n        if x < 0:\n            return -x\n        else:\n            return x\n    def _min_value(x: float) -> float:\n        \"\"\" The absolute minimum of the supplied float. \"\"\"\n        if x < 0:\n            return -x\n        else:\n            return x\n    def _min_bound(n: float) -> float:\n        \"\"\" The minimum of the supplied number and the absolute minimum of all the other numbers. \"\"\"\n        return min(_min_value(n), _min_value(n) + max(numbers: List[float]))\n    def _max_bound(n: float) -> float:\n        \"\"\" The maximum of the supplied number and the absolute maximum of all the other numbers. \"\"\"\n        return max(_max_value(n), _max_bound(n))\n    if len(numbers) < 2:\n        raise ValueError(\"minimum length for numbers is 2, not {}\".format(len(numbers)))\n    left = max(_min_bound(numbers[0]), _min_value(numbers[1]))\n    right = min(_max_bound(numbers[0]), _max_bound(numbers[1]))\n    return (left, right)\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) < 2:\n        return None, None\n\n    # the sort takes a number, a function that can take a number and return a number, and a list of numbers and\n    # returns a list of numbers, so let's sort on them\n    numbers.sort(key=lambda x: x)\n    # let's have the smallest element be number zero\n    numbers[0] = numbers[0] - numbers[1]\n\n    if len(numbers) < 3:\n        return None, None\n\n    # the min and max values are the current smallest and largest elements, so let's compare that\n    # with the current element and see which is closer\n    min_value = numbers[0]\n    min_pos = 1\n    for pos, value in enumerate(numbers):\n        if value < min_value:\n            min_value = value\n            min_pos = pos\n\n    # if there is one less element than before, just return the closest element as the range is the same\n    if min_pos == 1:\n        return numbers[0], numbers[0]\n\n    # if there is more than one, the end value must be the last in the list\n    else:\n        max_value = numbers[numbers.index(numbers[numbers.index(min_value) - 1]) + 1]\n        max_pos = numbers.index(max_value)\n\n        if max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Find all numbers greater than 2 and select two of them in order to be the closest to each other\n    numbers_with_greater_than_two: List[float] = numbers[:]\n    numbers_with_greater_than_two.extend(numbers[numbers.index(2) + 1:])\n    numbers_with_greater_than_two = sorted(numbers_with_greater_than_two)\n\n    # Find all numbers less than or equal to the two numbers we just selected\n    numbers_with_less_than_equals: List[float] = numbers[numbers.index(numbers_with_greater_than_two[0]) + 1:]\n    numbers_with_less_than_equals = sorted(numbers_with_less_than_equals)\n\n    # Return the two smallest elements, in order, which were found\n    return numbers_with_less_than_equals[0], numbers_with_less_than_equals[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    distance = 2.0 * float('inf')\n    best_distance = distance\n    best_a = None\n    best_b = None\n\n    for i in range(0, len(numbers), 2):\n        a = numbers[i: i + 2]\n        b = numbers[i + 2: i + 2]\n        # Determine distance between each pair of numbers\n        for i, j in enumerate(a):\n            # For each pair of numbers in the list, determine the minimum distance\n            # between them, and store the result in distance\n            distance = min([distance, abs(a-b)])\n            # Get the values of the two closest numbers\n            if distance < best_distance:\n                best_distance = distance\n                best_a = a\n                best_b = b\n\n    # If the lists are the same length, then they have the same length and their element are the same\n    if len(best_a) == len(best_b):\n        # For each pair of numbers in the list, determine the minimum distance\n        # between them, and store the result in distance\n        distance = min([distance, abs(best_a - best_b)])\n        return best_a, best_b\n\n    # If the lists are not the same length, then they do not", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Find the closest pair.\n    nums1 = sorted(numbers)\n    nums2 = sorted(numbers)\n    diff1 = nums2[1] - nums1[0]\n    diff2 = nums1[1] - nums2[0]\n    diff = diff1 + diff2\n    if diff == 0:\n        return nums2[0], nums1[0]\n    else:\n        # Select the pair with the smallest difference.\n        return nums2[0], nums1[0] if diff < diff2 else nums1[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def closeness_comparator(x, y: float) -> bool:\n        \"\"\" Using the euclidean distance, return if x is closer to y than to any other\n        value in the list.\n        \"\"\"\n        return abs(x - y) < abs(x - numbers[0]) + abs(y - numbers[0])\n\n    closest_numbers = numbers[::2]\n    for closest_number in closest_numbers:\n        for next_closest_number in numbers[1::2]:\n            if closeness_comparator(closest_number, next_closest_number):\n                return closest_number, next_closest_number\n    return numbers[0], numbers[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Calculate the distance from each number to the others\n    distances = []\n    for i, n in enumerate(numbers):\n        distances.append(abs(n - numbers[i - 1]) + abs(n - numbers[i + 1]))\n    # Choose the two numbers that are closest to each other, i.e., have the smallest\n    # distance to both of the remaining numbers\n    smallest_dist = max(distances)\n    return numbers[smallest_dist - 1], numbers[smallest_dist + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # search for smallest and largest elements\n    min, max = numbers[0], numbers[-1]\n\n    # find two adjacent numbers\n    for i in range(1, len(numbers)):\n        if numbers[i] < min:\n            min = numbers[i]\n        if numbers[i] > max:\n            max = numbers[i]\n\n    # find the distance between the two\n    diff = max - min\n\n    # find the closest\n    return min + diff / 2, max - diff / 2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    s = sorted(numbers, reverse=True)\n    start = s[0]\n    stop = s[-1]\n    delta = (stop - start) / 2\n    start = start - delta\n    stop = start + delta\n    return start, stop", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    from scipy.optimize import leastsq\n\n    if len(numbers) <= 2:\n        raise ValueError(\"Must supply a list of at least two numbers.\")\n\n    # Need to figure out the scale factor to use for this algorithm.\n    #\n    # Since the user can provide numbers in any order, we need to be able to scale the inputs.\n    #\n    # Assume for a moment that the user only supplied numbers that were both positive, then this is trivial.\n    #\n    # The problem is that some numbers are negative. The least squares method works on numbers with positive\n    # signs, so we have to add a positive number to all negative numbers. And we need to subtract the same\n    # number from all positive numbers.\n    #\n    # We choose the largest absolute value of the negative numbers and divide by it. Then we choose the largest\n    # absolute value of the positive numbers and divide by it.\n    scale = max(abs(numbers[0]), abs(numbers[1]))\n\n    # The first element is positive\n    if numbers[0] > numbers[1]:\n        scale = max(scale, abs(numbers[0]))\n        numbers[1] = numbers[0] - scale\n        numbers[0] = scale\n\n    # The second element is negative\n    if numbers[1] > numbers[0]:\n        scale = max(scale,", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def is_nearest(number: float, neighbor: float) -> bool:\n        return abs(number - neighbor) < 1.0e-10\n\n    sorted_numbers = sorted(numbers)\n    # If there's only one element, return the whole list as the closest two numbers.\n    if len(sorted_numbers) < 2:\n        return sorted_numbers[0], sorted_numbers[-1]\n\n    # If the numbers are contiguous, return the smallest and largest numbers.\n    index = 0\n    while index < len(sorted_numbers) - 1:\n        if sorted_numbers[index + 1] - sorted_numbers[index] > 1.0e-4:\n            break\n        index += 1\n    left = sorted_numbers[index + 1]\n    right = sorted_numbers[index]\n    smallest = left\n    largest = right\n    if is_nearest(left, smallest):\n        smallest = left\n    if is_nearest(right, largest):\n        largest = right\n\n    return smallest, largest\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers[0], numbers[0]\n\n    def distance(x, y) -> float:\n        return abs(x - y)\n\n    closests = []\n    closests.append(numbers[0])\n    closests.append(numbers[1])\n    while True:\n        closests.append(numbers[2])\n        for c in closests:\n            c = c[0] + c[1]\n            dist = distance(closests[-1], c)\n            if dist < closests[-1][1]:\n                closests[-1] = c\n\n    closests[-1] = closests[-1][2]\n    closests[-2] = closests[-2][2]\n\n    return closests[-1], closests[-2]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # use a heap so we can work with an ordered list\n    heap = []\n    min = max = numbers[0]\n    for num in numbers[1:]:\n        if num < min:\n            min = num\n        elif num > max:\n            max = num\n        heap.append(num)\n    heap.reverse()\n    min, max = heap[:2]\n    return min, max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return 0, 0\n    least = numbers[0]\n    maxdiff = float('inf')\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i] - least)\n        if diff <= maxdiff:\n            return least, numbers[i]\n        if diff < maxdiff:\n            maxdiff = diff\n    return 0, 0", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    for i in range(1, len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < abs(numbers[i] - numbers[i - 1]):\n            return numbers[i], numbers[i + 1]\n    return numbers[0], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def get_nearest(x, y: float, r: float) -> Tuple[float, float]:\n        if x < y:\n            return (y, x - r)\n        else:\n            return (x, y + r)\n\n    return sorted(get_nearest(numbers[0], numbers[1], 1.0) for _ in range(1, len(numbers)))", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # https://stackoverflow.com/questions/10221136/how-to-determine-if-two-numbers-latest-common-prefix-is-a-root-of-n\n    def find_closest(numbers1: List[float], numbers2: List[float]) -> Tuple[int, int]:\n        \"\"\"\n        >>> find_closest([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n        >>> find_closest([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n        \"\"\"\n        # we want to find the smallest number that can be added to the first list such that the sum of the numbers in the\n        # second list is not changed. Then we find the smallest number that can be added to the second list such that the\n        # sum of the numbers in the first list is not changed. We keep going until no such number exists.\n        best_number = 0\n        best_possible_number = None", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest = numbers[0]\n    biggest = numbers[-1]\n    for i, item in enumerate(numbers):\n        if item < smallest:\n            smallest = item\n        elif item > biggest:\n            biggest = item\n    return smallest, biggest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def fun(x) -> float or None:\n        d = (x[0] - numbers[0], x[1] - numbers[1])\n        return d[0] + (d[1] if len(numbers) > 2 else 0)\n\n    return list(map(fun, numbers))", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # We need at least 2 items, so we pick the first two items\n    closest = [None, None]\n\n    for i in range(1, len(numbers) - 1):\n        # Find the smallest and largest numbers\n        if numbers[i] < numbers[i - 1]:\n            smallest = numbers[i]\n        else:\n            smallest = numbers[i - 1]\n        if numbers[i] > numbers[i + 1]:\n            largest = numbers[i]\n        else:\n            largest = numbers[i + 1]\n\n        # This is the first time we encounter the given number, so we cannot use the information\n        # we have already calculated. We will have to calculate the distances\n        # ourselves\n        if smallest == largest:\n            continue\n\n        # Calculate the distance between the two numbers\n        delta = abs(numbers[i] - numbers[i - 1])\n        delta2 = abs(numbers[i] - numbers[i + 1])\n\n        # Start at one, and increase by one in each iteration\n        current_closest = numbers[i - 1]\n        for j in range(i + 1, len(numbers) - 1):\n            # Get the distance from the current number to the next\n            current_distance = delta + delta2 * j / len(numbers) - delta2 / 2\n            # If we haven't found the smallest or", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if not numbers or len(numbers) < 2:\n        return (numbers[0], numbers[0])\n\n    largest = float('nan')\n    smallest = float('nan')\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if numbers[j] < numbers[i]:\n                largest = min(largest, numbers[i])\n                smallest = min(smallest, numbers[j])\n                break\n        else:\n            largest = min(largest, numbers[i])\n            smallest = min(smallest, numbers[j])\n    return (smallest, largest)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    m = min(numbers)\n    d = 1.0\n    for i, number in enumerate(numbers):\n        if number < m:\n            d += (number - m) * (number - m)\n            m = number\n\n    return m, d / d", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Sort the numbers so that we can just use the binary search\n    numbers.sort()\n\n    # Find the midpoint of the list and find the closest pair\n    middle = numbers[0] // 2\n    closest_pair = numbers[0], middle\n    for number in numbers[1:]:\n        closest_pair = binary_search(closest_pair, number)\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if numbers == [None, None]:\n        raise ValueError(\"Can't find a pair of closest numbers when numbers is empty.\")\n\n    min_dist = 1.0\n\n    for num in numbers:\n        for index in range(2, len(numbers) - 1):\n            other_num = numbers[index - 1]\n            dist = (other_num - num) ** 2\n\n            if dist < min_dist:\n                min_dist = dist\n                small_num = num\n                big_num = other_num\n\n    return min_dist, big_num", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # we must have at least two elements to select from\n    if len(numbers) < 2:\n        raise ValueError('You must supply at least two numbers')\n\n    # first, we must find the distances between all pairs of elements\n    distances = [(numbers[i], numbers[i+1]) for i in range(len(numbers) - 1)]\n    distances.append((numbers[0], numbers[-1]))\n\n    # now we must select the smallest and largest distances\n    smallest, largest = distances[0], distances[-1]\n    for i in range(1, len(distances)):\n        if smallest > distances[i]:\n            smallest, largest = distances[i], distances[0]\n        if largest < distances[i-1]:\n            largest, smallest = distances[i-1], distances[i]\n\n    # finally, return the smallest and largest elements as the smallest and largest numbers in the list\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    n = len(numbers)\n    idx = (n - 1) // 2\n\n    if idx < 0:\n        return None, None\n\n    smallest = numbers[idx]\n    largest = numbers[idx]\n\n    for idx in range(idx, n - 1):\n        if smallest < numbers[idx]:\n            smallest = numbers[idx]\n        if largest > numbers[idx]:\n            largest = numbers[idx]\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    found = []\n    for idx, element in enumerate(numbers):\n        # Note: we can't use numpy arrays here because the elements are floats.\n        # We have to use a list instead.\n        if idx == 0:\n            # First element, so we must be closest to the first one.\n            found[0] = element\n            continue\n\n        # Find the first element that is not closer to the current element than the previous one.\n        found.append(element)\n        for item in found:\n            if item!= found[-1]:\n                break\n        else:\n            # The item was the closest to the last item, so return it.\n            return found[-1], found[-1]\n    return None, None", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # as per numpy documentation\n    # return x, numpy.array([ x - y for y in numbers if y < x ])[0]\n\n    # we need to use a real list of distances\n    closest_dists = [ n - m for n, m in enumerate(numbers) ]\n    closet_dist = min(closest_dists)\n\n    smallest = numbers[0]\n    largest = numbers[-1]\n    for num in numbers[1:]:\n        # calculate the distance from smallest to this number\n        diff = num - smallest\n        # subtract the closest distance from this number\n        diff -= closet_dist\n        # if diff is closer to smallest then use that value and increment\n        if diff < 0:\n            smallest = num\n            closet_dist = diff\n        else:\n            largest = num\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = [float(s) for s in numbers]\n    n = len(numbers)\n    if n < 3:\n        return (numbers[0], numbers[1])\n\n    # We only need to consider the third element of each number here\n    # We use the interquartile distance as measure of closeness\n    midpoint = (n / 2.0) * 0.5\n    lower_quartile = numb[0] + (n / 4.0) * midpoint\n    upper_quartile = numb[0] - (n / 4.0) * midpoint\n\n    if numbers[0] < lower_quartile and numbers[0] > upper_quartile:\n        return (numbers[0], numbers[1])\n\n    if numbers[1] < lower_quartile and numbers[1] > upper_quartile:\n        return (numbers[1], numbers[0])\n\n    # One of the numbers is strictly less than the midpoint, the other one is strictly greater\n    if numbers[0] < midpoint:\n        if numbers[1] > midpoint:\n            return (numbers[0], numbers[1])\n        return (numbers[1], numbers[0])\n\n    if numbers[1] < midpoint:\n        if numbers[0] > midpoint:\n            return (numbers[1], numbers[0])\n        return (numbers[0], numbers[1])\n\n    # The two numbers", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    diff: float = max(abs(numbers[0] - numbers[1]), abs(numbers[0] - numbers[2]), abs(numbers[1] - numbers[2]))\n\n    if diff == 0:\n        return numbers[0], numbers[1]\n\n    if diff == 0:\n        # If the numbers are the same then choose one in the order of the numbers\n        min, max = numbers[0], numbers[1]\n    else:\n        # Sort the numbers\n        min, max = numbers[0], numbers[-1]\n\n    # If one is inside the other then choose the one on the right of the line\n    if max >= min:\n        if max - min > diff / 2:\n            return max, min\n        elif max - min < diff / 2:\n            return min, max\n    else:\n        if max - min < diff / 2:\n            return min, min\n        elif max - min > diff / 2:\n            return max, min", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # We don't care about accuracy\n    return sorted(numbers, key=lambda x: x)[0], sorted(numbers, key=lambda x: x)[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def distance(a, b) -> float:\n        return (a - b) ** 2\n\n    largest_ = numbers[0]\n    smallest_ = numbers[0]\n    for num in numbers[1:]:\n        if largest_ == smallest_:\n            break\n        if num > largest_:\n            largest_ = num\n        elif num < smallest_:\n            smallest_ = num\n\n    return largest_, smallest_", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def _compare(x, y: float) -> bool:\n        if x < y:\n            return True\n        elif x == y:\n            return False\n        else:\n            return (x > y)\n\n    max_x = 0\n    max_y = 0\n    min_x = float(\"inf\")\n    min_y = float(\"-inf\")\n    for i, x in enumerate(numbers):\n        if x!= numbers[i - 1]:\n            continue\n        else:\n            if max_x == 0 or x > max_x:\n                max_x = x\n            if min_x == float(\"inf\") or x < min_x:\n                min_x = x\n            if max_y == 0 or y > max_y:\n                max_y = y\n            if min_y == float(\"inf\") or y < min_y:\n                min_y = y\n    return max_x, max_y", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Split list into two parts\n    start, end = None, None\n    for i, n in enumerate(numbers):\n        if start is None:\n            start = i\n        if end is None:\n            end = i\n    if start is None and end is None:\n        return None, None\n\n    if start == end:\n        return numbers[start], numbers[end]\n\n    # Find the distance between the two numbers\n    dist = abs(numbers[end] - numbers[start])\n    mid = numbers[(start + end) // 2]\n\n    # Calculate the number of elements before the mid\n    # The mid is the first number between the two that is not equal to the number before it\n    i = start - 1\n    while i >= 0:\n        if not (numbers[i] == numbers[(i - 1) // 2]) and numbers[i]!= numbers[(i - 1) // 2]:\n            break\n        i -= 1\n\n    if i == 0:\n        return mid, mid\n    else:\n        return numbers[(i - 1) // 2], numbers[i]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def sort_value(a, b) -> bool:\n        if a == b:\n            return False\n        else:\n            return a < b\n\n    def sort_idx(a, b) -> bool:\n        if a == b:\n            return False\n        else:\n            return a < b\n\n    def sort_idx_value(a, b) -> bool:\n        if a == b:\n            return False\n        else:\n            return a < b\n\n    # Sort using index, then value\n    values, indices = zip(*sorted(enumerate(values), key=sort_idx, reverse=True))\n\n    # Sort using value, then index\n    values, indices = zip(*sorted(enumerate(values), key=sort_idx_value, reverse=True))\n\n    # Sort using both\n    values, indices = zip(*sorted(enumerate(values), key=sort_value, reverse=True))\n\n    # Return closest element at first index\n    if len(values) > 1:\n        return values[0], values[-1]\n    else:\n        return values[0], values[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pairs = []\n    for i, element in enumerate(numbers):\n        if i == 0:\n            continue\n        if numbers[i - 1] == numbers[i]:\n            continue\n        new_min = numbers[i - 1]\n        new_max = numbers[i]\n        for j in range(i + 1, len(numbers)):\n            if numbers[j]!= numbers[j - 1] and numbers[j]!= numbers[j - 1]:\n                if numbers[j - 1] < numbers[j] and numbers[j - 1] < new_max:\n                    new_min = numbers[j - 1]\n                    new_max = numbers[j]\n                elif numbers[j - 1] < numbers[j] and numbers[j] < new_min:\n                    new_min = numbers[j]\n                    new_max = numbers[j - 1]\n        closest_pairs.append((new_min, new_max))\n    if len(closest_pairs) < 2:\n        return (numbers[0], numbers[-1])\n    return closest_pairs[0][1], closest_pairs[-1][1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n    elif len(numbers) == 2:\n        return numbers[0], numbers[1]\n    else:\n        nums = numbers[1:-1]\n        candidates = [numbs[i] for i in range(len(nums)) if nums[i] >= nums[i - 1] and nums[i] <= nums[i + 1]]\n        if len(candidates) < 2:\n            return None, None\n        candidates.sort(reverse=True)\n        return candidates[0], candidates[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Select two numbers closest to each other\n    closest_distance: float = 0.0\n    closest_number: float = 0.0\n\n    for number in numbers:\n        diff = number - closest_number\n\n        if diff < closest_distance:\n            closest_distance = diff\n            closest_number = number\n\n    return closest_number, closest_distance", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Get the absolute difference from the two numbers we're interested in\n    abs_diff = abs(numbers[1] - numbers[0])\n\n    # Figure out which one is closest to the number we're trying to get\n    closest = (numbers[0] + abs_diff * 0.5) / 2.0\n    closest_a = closest * 2.0 - numbers[0]\n    closest_b = closest * 2.0 + numbers[0]\n\n    # Figure out if they are closest\n    if (closest_b - closest_a) < abs_diff:\n        return closest_a, closest_b\n    else:\n        return closest_b, closest_a", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return max(numbers).astype(float), min(numbers).astype(float)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_dist = float('inf')\n    min_num = int(2)\n    for index in range(len(numbers) - 1):\n        if numbers[index] > numbers[index + 1]:\n            break\n        if (numbers[index] - numbers[index + 1]) < min_dist:\n            min_dist = (numbers[index] - numbers[index + 1])\n            min_num = index\n    return min_num, min_dist", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def find_closest(num1, num2) -> Tuple[float, float]:\n        \"\"\" Return two numbers that are the closest to each other.\n        >>> find_closest(5.0, 4.0)\n        Tuple[float, float](5.0, 5.0)\n        >>> find_closest(5.0, 2.0)\n        Tuple[float, float](4.0, 2.0)\n        >>> find_closest(4.0, 2.0)\n        Tuple[float, float](5.0, 2.0)\n        \"\"\"\n        def distance(num1: float, num2: float) -> float:\n            \"\"\" Return the distance between two numbers. \"\"\"\n            return abs(num1 - num2)\n\n        max_distance = float('inf')\n\n        # Find the greatest distance between any two numbers in the list.\n        for num1, num2 in zip(numbers[:-1], numbers[1:]):\n            for i in range(len(num1)):\n                if num1[i]!= num2[i]:\n                    break\n            else:\n                max_distance = min(max_distance, distance(num1, num2))\n        for num1, num2 in zip(numbers[:-1], numbers[1:]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # get a sorted list of numbers\n    numbers_sorted = sorted(numbers, key=lambda x: x)\n    # get two numbers that are the furthest apart\n    max_distance = 0.0\n    for i in range(len(numbers_sorted) - 1):\n        # get the distance between the two numbers\n        distance = abs(numbers_sorted[i] - numbers_sorted[i + 1])\n        # if the distance is higher than the maximum, then it's the maximum\n        if distance > max_distance:\n            max_distance = distance\n    # get two numbers that are the closest\n    min_distance = max_distance\n    # get the closest elements\n    return numbers_sorted[min(0, min_distance // 2)], numbers_sorted[min(len(numbers_sorted) - 1, max_distance // 2)]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # using the absolute value because we want the smallest difference between the elements\n    largest = max(abs(numbers[0] - numbers[1]), abs(numbers[0] - numbers[2]), abs(numbers[0] - numbers[3]), abs(numbers[0] - numbers[4]), abs(numbers[0] - numbers[5]))\n    smallest = min(abs(numbers[0] - numbers[1]), abs(numbers[0] - numbers[2]), abs(numbers[0] - numbers[3]), abs(numbers[0] - numbers[4]), abs(numbers[0] - numbers[5]))\n\n    # pick the two numbers that are closest to each other\n    closest = numbers[largest % len(numbers)][smallest % len(numbers)]\n\n    return closest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    a, b = None, None\n    min_diff = float('inf')\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            a = numbers[i]\n            b = numbers[i - 1]\n            min_diff = diff\n    return a, b", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: This method is terrible for large lists. It should be done as a linear scan. Or a binary search if possible\n    # using a hash table (only keep the closest pairs from the sorted list)\n    # Also could be improved by taking the first, middle and last element of the pair and comparing them\n    # and return that as the closest pair. However, that would mean a lot more memory and time\n    min = max = float('nan')\n    for i in xrange(len(numbers)):\n        if numbers[i] < min:\n            min = numbers[i]\n        if numbers[i] > max:\n            max = numbers[i]\n    return min, max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    def _closest(num1: float, num2: float) -> bool:\n        return abs(num1 - num2) < 0.00001\n\n    if not numbers:\n        return 0.0, 0.0\n\n    num1 = numbers[0]\n    num2 = numbers[1]\n    for i in range(2, len(numbers)):\n        if _closest(num1, num2):\n            return num1, num2\n\n    # If we got this far then either we couldn't find a match or they\n    # were farther than 0.00001 apart, so the closest pair is\n    # 0.0 and 0.0\n    return 0.0, 0.0", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def cmp(x: float, y: float) -> int:\n        return x - y\n\n    return sorted(numbers, key=cmp)[::2]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closeness = {}\n    for i in range(len(numbers)):\n        closeness[numbers[i]] = (numbers[i] - numbers[i - 1]) ** 2 + (numbers[i] - numbers[i + 1]) ** 2\n    return min(closeness.items()), max(closeness.items())", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    assert len(numbers) >= 2\n    return min(numbers), max(numbers)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"length of numbers must be at least 2\")\n    indices = sorted([\n        i for i, a in enumerate(numbers)\n        if a > numbers[i - 1]\n    ])\n    return numbers[indices[0]], numbers[indices[1]]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if not numbers:\n        return (numbers[0], numbers[0])\n\n    distances = sorted(\n        (abs(numbers[i] - numbers[i - 1]) for i in range(len(numbers) - 1))\n    )\n\n    if len(distances) == 1:\n        return numbers[0], numbers[-1]\n\n    index = 0\n    while distances[index] > distances[index + 1]:\n        index += 1\n\n    return numbers[index], numbers[index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_dist: float = 0.0\n    max_dist: float = 0.0\n    dists: List[float]\n    min_dist_set: List[float] = list()\n    max_dist_set: List[float] = list()\n\n    for i in range(len(numbers) - 1):\n        for j in range(i, len(numbers)):\n            dists.append(numbers[i] - numbers[j])\n            min_dist_set.append(min(dists))\n            max_dist_set.append(max(dists))\n\n    min_dist = min_dist_set[min_dist_set.index(min_dist_set[0])]\n    max_dist = max_dist_set[max_dist_set.index(max_dist_set[0])]\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dists.append(numbers[i] - numbers[j])\n            min_dist_set.append(min(dists))\n            max_dist_set.append(max(dists))\n\n    min_dist = min_dist_set[min_dist_set.index(min_dist_set[0])]\n    max_dist = max_dist_set[max_dist_set.index(max_dist_set[0])]\n\n    return min_dist, max_dist", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return (numbers[0], numbers[0])\n    else:\n        min_dist = numbers[0]\n        min_idx = 0\n        for i in range(1, len(numbers)):\n            dist = numbers[i] - min_dist\n            if dist < min_dist:\n                min_dist = dist\n                min_idx = i\n\n        return (min_idx == 0 and numbers[min_idx] or numbers[min_idx], min_idx == len(numbers) - 1 and numbers[min_idx] or numbers[min_idx])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return None, None\n    n1 = numbers[0]\n    n2 = numbers[1]\n    d1 = n1 - n2\n    d2 = n1 - numbers[2]\n    d3 = numbers[2] - n2\n    return min(d1, d2), max(d1, d2)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    def get_closest(first, second, radius: float) -> Tuple[float, float]:\n        return (first - radius, second + radius)\n\n    for x, y in zip(numbers, numbers[1:]):\n        if x < y:\n            return get_closest(y, x, y - x)\n        elif x > y:\n            return get_closest(x, y, x - y)\n\n    return get_closest(numbers[0], numbers[-1], numbers[-1] - numbers[0])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_min = numbers[0]\n    closest_max = numbers[0]\n    for i in range(1, len(numbers)):\n        min = numbers[i]\n        max = numbers[i]\n        if min == closest_min:\n            min = closest_max\n        if max == closest_max:\n            max = closest_min\n        if min < closest_min:\n            closest_min = min\n        if max < closest_min:\n            closest_min = max\n        if min > closest_max:\n            closest_max = min\n        if max > closest_max:\n            closest_max = max\n    return closest_min, closest_max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    first = 0.0\n    second = 0.0\n    for number in numbers:\n        # Get the distance from number to the two closest elements\n        if first == 0.0:\n            first = number - numbers[0]\n        else:\n            second = number - numbers[1]\n        distance = first + second\n\n        # If the two closest elements are within some epsilon of each other return\n        # them in order, else go to the next number\n        if distance <= 0.1:\n            return first, second\n\n        first, second = second, first\n    # No number is close enough to any of the two closest elements\n    return 0.0, 0.0", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def _compute_difference(x, y):\n        \"\"\" Return a scalar that measures the distance between x and y (their difference). \"\"\"\n        return abs(x - y)\n\n    x = numbers[0]\n    y = numbers[1]\n    if len(numbers) > 2:\n        for number in numbers[2:]:\n            x = _compute_difference(x, number)\n            y = _compute_difference(y, number)\n\n    return min(x, y), max(x, y)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if not numbers:\n        return None, None\n    def closest(a, b):\n        return min(abs(a - b), abs(b - a))\n\n    closest(numbers[0], numbers[-1])\n    smallest = closest(numbers[0], numbers[1])\n    largest = closest(numbers[-1], numbers[0])\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    nums = list(numbers)\n    nums.sort(key=lambda num: num - nums[-1])\n\n    closest = nums[-1]\n    closer = nums[0]\n\n    for i in range(1, len(nums)):\n        if abs(closest - nums[i]) < abs(closer - nums[0]):\n            closest, closer = nums[i], closest\n\n    return closest, closer", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    max_distance = numpy.linalg.norm(numbers)\n    index1 = numpy.where(numbers >= 0.0)[0][0]\n    index2 = numpy.where(numbers <= 0.0)[0][0]\n\n    dist1 = numbers[index1] - numbers[index2]\n    dist2 = numbers[index2] - numbers[index1]\n\n    return dist1, dist2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    distances: List[float] = [float('inf')] * len(numbers)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distances[i] = abs(numbers[i] - numbers[j])\n            distances[j] = abs(numbers[j] - numbers[i])\n\n    sorted_distances = sorted(distances, reverse=True)\n    first_distance = sorted_distances[0]\n    return first_distance, sorted_distances[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return 0.0, 0.0\n    def get_larger():\n        return numbers[numbers.index(max(numbers)) + 1]\n    def get_smaller():\n        return numbers[numbers.index(min(numbers)) - 1]\n    return min(get_smaller(), get_larger()), max(get_smaller(), get_larger())\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return (numbers[0], numbers[1])\n    else:\n        smallest = numbers[0]\n        largest = numbers[1]\n        for number in numbers[2:]:\n            if number < smallest:\n                smallest = number\n            elif number > largest:\n                largest = number\n        if smallest == largest:\n            return (numbers[0], numbers[1])\n        else:\n            return (smallest, largest)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_distance: float = 99999\n    min_distance_index: int = 0\n    max_distance: float = -99999\n    max_distance_index: int = -1\n\n    for element in numbers:\n        if element!= 0.0:\n            distance = abs(numbers[min_distance_index] - element)\n            if distance < min_distance:\n                min_distance_index = min_distance_index\n                min_distance = distance\n\n    for element in numbers[min_distance_index + 1:]:\n        distance = abs(numbers[min_distance_index] - element)\n        if distance < max_distance:\n            max_distance_index = max_distance_index\n            max_distance = distance\n\n    return numbers[min_distance_index], numbers[max_distance_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Length of numbers must be at least 2.\")\n    return min(numbers), max(numbers)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_distance = 1e10\n    smallest_, largest_ = 0.0, 1e10\n    for elem in numbers:\n        if elem < smallest_:\n            smallest_ = elem\n        if elem > largest_:\n            largest_ = elem\n\n    for elem in numbers:\n        delta = abs(smallest_ - elem) + abs(largest_ - elem)\n        if delta < min_distance:\n            min_distance = delta\n            smallest_, largest_ = elem, elem\n\n    if largest_ < smallest_:\n        smallest_, largest_ = largest_, smallest_\n\n    return smallest_, largest_", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def _find_min_difference(pair: Tuple[float, float]) -> float:\n        return (pair[0] - pair[1]) ** 2\n    def _find_max_difference(pair: Tuple[float, float]) -> float:\n        return (pair[0] - pair[1]) ** 2\n    max_difference = _find_max_difference(numbers)\n    min_difference = _find_min_difference(numbers)\n    if min_difference >= max_difference:\n        # if min_difference is larger than max_difference, the smallest\n        # difference is 1.0, so no point in using it.\n        min_difference = 0.0\n    best_min = best_max = None\n    for min_difference in [min_difference, max_difference]:\n        for max_difference in [min_difference, max_difference]:\n            for best_min in [None, min_difference]:\n                for best_max in [None, max_difference]:\n                    best_min_index = min([len(numbers), max(1, len(numbers) - 1)]) - 1\n                    best_max_index = min([len(numbers), max(1, len", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    n = len(numbers) - 1\n    delta = (numbers[n-1] - numbers[0]) / n\n    while n > 0:\n        middle = numbers[n // 2] + delta * (n - 1)\n        left = middle - delta * (n // 2)\n        right = middle + delta * (n // 2)\n        if n%2 == 0 and (numbers[middle] < numbers[0] or numbers[middle] > numbers[n-1]):\n            left = numbers[n // 2 - 1] + delta * (n // 2 - 1)\n            right = numbers[n // 2 - 1] + delta * (n // 2 - 1)\n        if left < numbers[n-1] and right < numbers[n-1]:\n            return left, right\n    return numbers[0], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    n = len(numbers)\n    if n < 2:\n        return None, None\n\n    a, b = numbers[0], numbers[1]\n\n    smallest = a\n    largest = b\n\n    for i in range(2, n):\n        c = a + (b - a) * (i / (n - 1))\n        if c < smallest:\n            smallest = c\n        if c > largest:\n            largest = c\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    nums = sorted(numbers, key=lambda x: x)\n    idx = 0\n    while idx < len(nums):\n        diff = nums[idx] - nums[idx]\n        nums[idx] = nums[idx] - diff\n        idx += 1\n\n    return nums[0], nums[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smaller, larger = 0, 0\n    for i, element in enumerate(numbers):\n        if smaller < element < larger:\n            smaller, larger = element, i\n    return smaller, larger", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # get a list of the two closest elements\n    closest_elements: List[float] = []\n    for index in range(len(numbers) - 1):\n        # find the closest elements for each side\n        min_index, max_index = None, None\n        for i in range(len(numbers) - 1):\n            # find the nearest and farthest element for each side\n            if numbers[index] > numbers[i]:\n                min_index = i\n            elif numbers[index] < numbers[i]:\n                max_index = i\n            elif numbers[index] == numbers[i]:\n                # if they're identical, try again with the other\n                min_index, max_index = None, None\n                for j in range(i + 1, len(numbers) - 1):\n                    # find the nearest and farthest element for each side\n                    if numbers[index] > numbers[j]:\n                        min_index = j\n                    elif numbers[index] < numbers[j]:\n                        max_index = j\n                    elif numbers[index] == numbers[j]:\n                        # if they're identical, try again with the other\n                        min_index, max_index = None, None\n                        for k in range(j + 1, len(numbers) - 1):\n                            # find the nearest and farthest element for each side\n                            if numbers[index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_dist = 999999999.0\n    min_id = -1\n\n    for i in range(len(numbers)):\n        if (numbers[i] - numbers[i - 1]) < min_dist:\n            min_dist = (numbers[i] - numbers[i - 1])\n            min_id = i\n\n    if min_id == -1:\n        raise ValueError(\"The list must have at least two elements.\")\n    if min_id == len(numbers) - 1:\n        return numbers[0], numbers[-1]\n\n    return numbers[min_id], numbers[min_id + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two elements to find closest\")\n    for elem in numbers:\n        for other in numbers[1:]:\n            if elem == other:\n                continue\n            delta = abs(elem - other)\n            if delta < 1:\n                return elem, other\n    return numbers[0], numbers[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def _min_dist(x: float, y: float) -> float:\n        return math.hypot(x - y, x + y)\n\n    min_dist = float(\"inf\")\n\n    for i, val in enumerate(numbers):\n        if val < min_dist:\n            min_dist = val\n        elif val == min_dist:\n            continue\n        elif min_dist == float(\"inf\"):\n            break\n        elif min_dist == float(\"-inf\"):\n            break\n        elif min_dist < 0.0:\n            min_dist = 0.0\n        elif min_dist > 1.0:\n            min_dist = 1.0\n\n    return min_dist, min_dist", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def distance(a: float, b: float) -> float:\n        \"\"\" Return the distance between two numbers.\n        >>> distance(1.0, 2.0)\n        0.0\n        >>> distance(10.0, 12.0)\n        0.02362388\n        \"\"\"\n        return (b - a) ** 2\n\n    distance_min = (numbers[0] ** 2) + (numbers[1] ** 2) - 2 * numbers[0] * numbers[1]\n    distance_max = (numbers[0] ** 2) + (numbers[1] ** 2) + 2 * numbers[0] * numbers[1]\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n    if distance_min <= distance_max:\n        return numbers[0], distance_min\n    return numbers[1], distance_max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # It's easy to write a quick and dirty function for this, but here's a more robust version.\n\n    def closest_pair(pairs: List[float], distance: float) -> Tuple[float, float]:\n        \"\"\" Use a two-point subtraction to compute distance between two numbers. If we want to be sure that we\n        can always do this, then we need to ensure that the range of the numbers is the same so that the results\n        always make sense. To do this, we just round both numbers to the nearest integer. This is OK because,\n        well, we need to make sure that the numbers are both integers.\n        \"\"\"\n        if len(pairs) < 2:\n            return None\n\n        left = int(round(pairs[0] - distance / 2))\n        right = int(round(pairs[1] - distance / 2))\n\n        if left < right and left > 0:\n            return left, right\n\n        if left < right and left == 0:\n            return left, right - 1\n\n        if left < right and left == 1:\n            return left + 1, right\n\n        return None, None\n\n    left, right = closest_pair(numbers, 0)\n    if left is None:\n        return left, right\n\n    return left, right", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_dist = float('inf')\n    best_distance = float('inf')\n    best_ratio = float('inf')\n    for x in numbers:\n        if x < 0:\n            continue\n        for y in numbers:\n            if x >= y or x == 0:\n                continue\n            dist = (x - y) ** 2\n            if dist < best_dist:\n                best_dist = dist\n                best_ratio = best_ratio or best_ratio + best_dist\n                best_ratio = best_ratio / (x - y)\n            if dist < min_dist:\n                min_dist = dist\n                best_ratio = best_ratio or best_ratio + best_dist\n                best_ratio = best_ratio / (x - y)\n    return (numbers[0] if best_ratio >= min_dist else None, numbers[-1] if best_ratio >= min_dist else None)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    #\n    # This algorithm searches a sorted list for two values that are the closest to each other and then\n    # returns them in order (smaller number, larger number).\n    #\n    # The distance we consider is the absolute value of the difference between the two values.\n    #\n    # The minimum and maximum of the values to be considered are limited to the input list of numbers.\n    #\n\n    if len(numbers) < 2:\n        return None, None\n\n    distances = []\n    #\n    # Loop over all the numbers and find the distance between each pair.\n    #\n    for i in range(0, len(numbers)):\n        distances.append(abs(numbers[i] - numbers[i + 1]))\n\n    #\n    # Sort the list in descending order by the distance between the two numbers.\n    #\n    distances.sort(reverse=True)\n\n    #\n    # Choose the first two elements from the list of distances that are the closest to each other\n    # and return them as the minimum and maximum.\n    #\n    minimum = distances[0]\n    maximum = distances[0]\n    for i in range(1, len(distances)):\n        if distances[i] < minimum:\n            minimum = distances[i]\n        if distances[i] > maximum:\n            maximum = distances[i]\n\n    return minimum, maximum", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # sort so smaller numbers are closer\n    numbers = sorted(numbers)\n\n    # pick the smallest and largest\n    return numbers[0], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    distances = []\n\n    min_index = 0\n    for index in range(1, len(numbers) + 1):\n        distance = 0.0\n\n        # find closest elements\n        for i, number in enumerate(numbers):\n            if i == min_index:\n                distance += number - numbers[index]\n            else:\n                distance += numbers[index] - number\n\n        distances.append(distance)\n\n        if distance < 0.0:\n            break\n        min_index = index\n\n    if min_index == len(numbers) - 1:\n        return numbers[0], numbers[-1]\n\n    return numbers[min_index], numbers[min_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pairs = []\n    for i, n in enumerate(numbers):\n        closest_pairs.append((numbers[i - 1], numbers[i]))\n    sorted_numbers = sorted(closest_pairs, key=lambda x: x[0], reverse=True)\n    return sorted_numbers[0][0], sorted_numbers[0][1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest, largest = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        mid = numbers[i] + (numbers[i + 1] - numbers[i]) / 2\n        if mid < smallest:\n            smallest = mid\n        if mid > largest:\n            largest = mid\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # return the two numbers that are closest to each other\n    # i.e. we use bisect to find the smallest/biggest numbers, but also iterate through the list and find\n    # the closest ones\n    n = 1\n    smaller = None\n    largest = None\n    while n < len(numbers):\n        current_n = n\n        n += 1\n        while n < len(numbers) and numbers[n]!= numbers[n - 1]:\n            n += 1\n\n        if smaller is None or smaller > current_n:\n            smaller = current_n\n        if largest is None or largest < current_n:\n            largest = current_n\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = sorted(numbers, key=lambda number: number)\n    min_dist = sys.maxfloat\n    # Loop through all elements\n    for i in range(len(numbers) - 2):\n        # Find the two numbers that are closest to each other\n        closest = numbers[i] + numbers[i + 1]\n        # If the distance between the two numbers is below min_dist\n        if closest < min_dist:\n            min_dist = closest\n    return min_dist, numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: this algorithm is not optimal, but is it necessary to be this fast?\n    # The optimal solution should be O(NlogN) since it can check every number to see if it's an integer,\n    # so for a list of N numbers it will check every number in the list twice. The fastest method would be\n    # to compare every number with a separate integer, so that would be O(N), but I don't think it would be\n    # necessary, since the first number is always the smallest, so I don't think it would be necessary to\n    # check if it's an integer.\n    # However, I would still like to implement this algorithm and make it use fewer loops (or just the loops that\n    # it needs) to be faster.\n    # Since I'm checking for every number in the list, the list needs to be sorted, but the first number is always\n    # the smallest. It makes sense to compare the first number with the second number to see which one is closest,\n    # and then compare the second number with the third number, etc. So, I don't think I need to sort the list\n    # since I know the first number is always the smallest. If I do need to sort, then I would probably compare\n    # every number", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def find_closest(x: float, y: float) -> Tuple[float, float]:\n        \"\"\" Return the closest two numbers in the supplied list.\n        \"\"\"\n        diff = abs(x - y)\n        if diff < 1.0e-8:\n            return (x, y)\n\n        return (x - diff / 2.0, y + diff / 2.0)\n\n    # use a binary search to find the closest values\n    start = 0\n    end = len(numbers) - 1\n    while start < end:\n        mid = (start + end) // 2\n        found = find_closest(numbers[mid], numbers[end])\n        if found[0] < numbers[mid]:\n            end = mid - 1\n        elif found[0] > numbers[mid]:\n            start = mid + 1\n        else:\n            break\n    return numbers[start], numbers[end]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if not numbers:\n        return 0.0, 0.0\n\n    # We have to use a set because the \"closest\" two values can be\n    # contained in the same bucket and we need to find the smallest\n    # of them\n    closest_to_some = set()\n    for current in numbers:\n        for closest in closest_to_some:\n            if current == closest:\n                continue\n            smallest = min(current, closest)\n            if smallest!= current:\n                closest_to_some.add(smallest)\n                break\n\n    # We have to compare the values in the same order as in the\n    # original list to avoid returning a point which is not actually\n    # closer to the others\n    closest = closest_to_some.pop()\n    for current in closest_to_some:\n        smallest = min(current, closest)\n        if smallest!= current:\n            closest_to_some.add(smallest)\n            break\n    closest_to_some.pop()\n\n    closest_to_some.sort()\n    return closest, closest_to_some[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    num = 0\n    closest = None\n    for num, close in enumerate(numbers):\n        if num == 0:\n            closest = close\n        elif closest == close:\n            closest = num\n        else:\n            closest = min(closest, num)\n\n    return closest, num", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # the function we are going to use to find the smallest and largest values in the list\n    def min_max(a, b: Tuple[float, float]) -> Tuple[float, float]:\n        if a < b:\n            return a, b\n        return b, a\n\n    # now we are going to iterate through the list of numbers, and add up their differences and the largest of those differences will\n    # be the smallest difference we need to compare to the next number we are looking at in the list\n    for i, number in enumerate(numbers):\n        # we need to figure out which value is the largest of the list\n        # we start by finding the difference between our current number and the next number\n        current_diff = number - numbers[i + 1]\n\n        # we are going to check that difference and see if it's larger than our current largest difference\n        if current_diff > numbers[i - 1] - numbers[i]:\n            largest_diff = current_diff\n        else:\n            largest_diff = numbers[i - 1] - numbers[i]\n\n        # we need to add this to our difference between our current and next numbers to get our smallest difference\n        smallest_diff = largest_diff + numbers[i] - number\n\n        # now we are going to return the smallest of the two numbers as our", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    index = 0\n    min_index, min_value = None, None\n\n    for i in range(len(numbers)):\n        number = numbers[index]\n\n        # If we're done then don't continue\n        if min_index is not None and min_index == i:\n            break\n\n        # Find the smallest element in the list\n        if index == min_index:\n            min_index = i\n            min_value = number\n\n        # Increment index and re-evaluate\n        index += 1\n\n    # Find the other index\n    if min_index is None:\n        index = len(numbers) - 1\n\n    # Find the closest value and return it\n    if index!= min_index:\n        return numbers[min_index], numbers[index]\n    else:\n        return min_value, None", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def _distance(a, b):\n        return abs(a-b)\n\n    largest_distance = 1\n    closest_number = None\n    for n in numbers:\n        if n == numbers[0]:\n            continue\n        if _distance(largest_distance, n) < _distance(largest_distance, closest_number):\n            closest_number = n\n        largest_distance = n\n    return closest_number, largest_distance", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # The technique here is from the paper:\n    #  [1] I. R. Bottou, J. A. Khorasani, and R. K. Rao:\n    #   \"Approximate closest pair in metric space.\"\n    #  arXiv:1210.2642\n    #  Note that the largest number is only used if all numbers are positive. Otherwise use the second largest.\n    # The algorithm is O(log(n)) time complexity.\n\n    biggest = numbers[0]\n    smallest = numbers[0]\n    for i in range(1, len(numbers)):\n        if biggest < numbers[i]:\n            biggest = numbers[i]\n        if smallest > numbers[i]:\n            smallest = numbers[i]\n\n    return biggest, smallest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # find the smallest and largest numbers\n    smallest = 0\n    largest = numbers[0]\n\n    for i in range(len(numbers)):\n        if smallest > numbers[i]:\n            smallest = numbers[i]\n        if largest < numbers[i]:\n            largest = numbers[i]\n\n    # find the two closest to each other\n    if smallest == numbers[-1]:\n        index = len(numbers) - 1\n    else:\n        index = find_closest_element_index(numbers, smallest, largest)\n\n    closest = numbers[index]\n    for i in range(index, len(numbers)):\n        if closest < numbers[i]:\n            closest = numbers[i]\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return (numbers[0], numbers[-1])\n    # The smallest number is 2, the largest number is 6. So let's find those 2 closest.\n    # We will be picking numbers starting at 1. The numbers that are closest to the smallest number\n    # will have to be at least as close to the number we are picking as the number we are picking is to the\n    # largest number. The closest number will be the first element in the list of distances (i.e. the first\n    # element of the returned tuple).\n    # We start by picking the smallest number. We want to find the closest number to the smallest number and\n    # then if we are still close enough to the smallest number, pick the second closest number to the smallest\n    # number. The first element of the list of distances will have the smallest number as a distance (it is\n    # 1.0). The second element of the list will have the number we are picking as a distance (2.0)\n    distances = []\n    for i in range(1, len(numbers)):\n        distances.append((numbers[i] - numbers[0]) / (numbers[i] - numbers[i - 1]))\n\n    # We want the closest two numbers in the list of distances", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # The numbers are sorted and we take the first two numbers.\n    smallest = numbers.pop(0)\n    largest = numbers.pop(0)\n\n    # We consider the following cases:\n    # 1. The smallest number is the same as the largest number.\n    # 2. The smallest number is larger than the largest number.\n    # 3. The smallest number is smaller than the largest number.\n    if smallest == largest:\n        return smallest, largest\n\n    # Case 1: the smallest number is the same as the largest number.\n    if smallest < largest:\n        # We go in reverse order and find the second smallest number.\n        second = numbers.pop(0)\n        second_smallest = find_closest_elements(numbers)\n        if second_smallest == (smallest, largest):\n            smallest, largest = second_smallest\n    else:\n        second = find_closest_elements(numbers)\n\n    # Case 2: the smallest number is larger than the largest number.\n    return smallest, largest + second", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    minimum, maximum = numbers[0], numbers[-1]\n    for x, y in zip(numbers[1:-1], numbers[-2:-1]):\n        if x < minimum:\n            minimum = x\n        elif y < minimum:\n            minimum = y\n        if x > maximum:\n            maximum = x\n        elif y > maximum:\n            maximum = y\n\n    return minimum, maximum", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n\n    smallest = numbers[0]\n    largest = numbers[-1]\n    for number in numbers[1:]:\n        distance = smallest - number\n        if distance < 0.0:\n            smallest = number\n        else:\n            largest = number\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest: Tuple[float, float] = None, None\n    for x, y in zip(numbers, numbers[1:]):\n        if x == y:\n            continue\n        if closest is None:\n            closest = (x, y)\n            continue\n        a, b = (x, y), (closest[0], closest[1])\n        if a > b:\n            closest = (b, a)\n            continue\n        elif a < b:\n            closest = (a, b)\n            continue\n        else:\n            break\n    return closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers.\")\n\n    distances = []\n    for i, number in enumerate(numbers[:-1]):\n        distances.append(number - numbers[i + 1])\n\n    min_distance = distances[0]\n\n    for i, distance in enumerate(distances[1:]):\n        if distance < min_distance:\n            min_distance = distance\n            first_number = numbers[i]\n            second_number = numbers[i + 1]\n\n    return first_number, second_number", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    try:\n        distances = [math.fabs(numbers[number_index] - numbers[number_index - 1])\n                       for number_index in range(len(numbers) - 1)]\n    except ValueError:\n        distances = []\n\n    return numbers[0], distances[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # first, the list of numbers we want to search\n    distances: List[float] = []\n    # second, the smallest and largest of the list\n    min_dist: float\n    max_dist: float\n\n    if len(numbers) == 1:\n        min_dist = numbers[0]\n        max_dist = numbers[0]\n    else:\n        min_dist = numbers[0]\n        max_dist = numbers[-1]\n\n    # now, go through all the numbers in the list\n    for index in range(len(numbers)):\n        distance = numbers[index] - min_dist\n        distances.append(distance)\n        if distance < 0:\n            min_dist = distance\n        else:\n            max_dist = distance\n\n    # now, we need to find the closest element to each other\n    # first, we find the smallest distance to all the numbers\n    for index in range(len(numbers)):\n        # first, find the smallest distance from this index\n        new_distance = distances[index]\n        for index1 in range(index + 1, len(numbers)):\n            # now, find the smallest distance from this index to all the numbers\n            # it's easy to find the smallest distance if we know the largest distance\n            # distance = new_distance\n            # new_distance = min(new_distance, distances[index1])\n\n            #", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def _get_closest(a, b: float) -> Tuple[float, float]:\n        return (min(a, b), max(a, b))\n    return _get_closest(numbers[0], numbers[1]), _get_closest(numbers[-1], numbers[-2])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    max_value = max(numbers)\n    min_value = min(numbers)\n    tolerance = max_value / 2.0\n\n    # from min_value to max_value we have two values in between\n    # split them into two lists\n    # then we select the two smallest values from each list and the two largest values\n    # find the minimum and maximum of those two lists and then get the two closest numbers\n    # (min_value, max_value) has to be sorted, otherwise we will get different results\n    # we can do this because min_value == max_value\n    numbers_left = numbers[:tolerance]\n    numbers_right = numbers[tolerance:]\n    numbers_cross = numbers_left + numbers_right\n    smallest_list = numbers_cross[:2]\n    largest_list = numbers_cross[2:]\n    left_min = smallest_list[0]\n    left_max = largest_list[0]\n    right_min = smallest_list[1]\n    right_max = largest_list[1]\n    return left_min, left_max, right_min, right_max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # The first step is to get all the distances in a list. This can be done in one go using numpy's\n    # difference operation.\n    distances: List[float] = [(n - numbers[-1]) for n in numbers]\n    distances = np.asarray(distances).T\n    # The second step is to find the smallest and largest distances from the smallest number to all the numbers\n    # and then split the list into two parts based on these distances.\n    distances_negative: List[float] = distances[:, -1]\n    distances_positive: List[float] = distances[:, -1]\n    distances = distances_negative + distances_positive\n    # The third step is to find the minimum and maximum of the two parts of the distances list and then get\n    # the closest elements from the list based on these values.\n    smallest_distance: float = distances_negative[0][0]\n    largest_distance: float = distances_positive[-1][0]\n    closest_distance: float = smallest_distance\n    if smallest_distance == largest_distance:\n        closest_distance = largest_distance\n    else:\n        closest_distance = ((largest_distance - smallest_distance) // 2) + smallest_distance\n    # The fourth step is to select the first", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_distance = float('inf')\n    smallest_distance = float('inf')\n    closest_first = float('inf')\n    closest_second = float('inf')\n    first = numbers[0]\n    second = numbers[1]\n\n    for i in range(2, len(numbers)):\n        distance = second - first\n        if distance < closest_distance:\n            smallest_distance = distance\n            closest_distance = distance\n            closest_first = first\n            closest_second = second\n\n    return closest_distance, smallest_distance", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    min_absolute_difference = float('inf')\n\n    for num1, num2 in zip(numbers, numbers[1:]):\n        difference = abs(num1 - num2)\n        if difference < min_absolute_difference:\n            min_absolute_difference = difference\n            nearest_num1 = num1\n            nearest_num2 = num2\n\n    return nearest_num1, nearest_num2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    sorted_elements = sorted(numbers, reverse=True)\n\n    # if numbers are all equal, we can't find anything\n    if len(sorted_elements) == 1:\n        return sorted_elements[0], sorted_elements[0]\n\n    closest_distances = [0] * (len(sorted_elements) + 1)\n    closest_element = None\n\n    for current_element in sorted_elements:\n        next_element = sorted_elements[(current_element + 1) % len(sorted_elements)]\n        if next_element == current_element:\n            # no need to calculate\n            continue\n        # calculate closest distances\n        distances = [abs(current_element - next_element) for current_element in sorted_elements]\n\n        for i in range(len(distances) - 1):\n            if distances[i] + distances[i + 1] < closest_distances[i]:\n                closest_distances[i] = distances[i] + distances[i + 1]\n                closest_element = next_element\n\n    return closest_element, closest_distances[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    a, b = numbers\n    a, b = a, b\n    while a > b:\n        a, b = b, a\n        a, b = a, b\n    if a < b and a > 0:\n        a, b = b, a\n    while a < b:\n        a, b = b, a\n        a, b = a, b\n    return a, b", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    try:\n        sorted_numbers = sorted(numbers, key=lambda x: -x)\n    except ValueError:\n        return (1.0, 1.0)\n\n    first = sorted_numbers[0]\n    second = sorted_numbers[1]\n\n    return (first, second)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = None\n    distance = None\n    for i in range(len(numbers)):\n        d = (numbers[i] - numbers[i - 1]) ** 2\n        if closest is None or d < distance:\n            distance = d\n            closest = numbers[i]\n    return closest, distance", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    from math import floor\n    from math import ceil\n    min_dist = float('inf')\n\n    # NOTE: this only works with integers, should be possible to fix for floats\n    # we can ignore the fact that ceil() is not exact but it will be pretty close\n    for a, b in zip(numbers[:-1], numbers[1:]):\n        if a == b:\n            continue\n\n        min_dist = min(a, b)\n\n        if min_dist < min_dist:\n            a, b = b, a\n\n    return int(round(min_dist)), int(round(min_dist))", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    for (a, b) in zip(numbers, numbers[1:]):\n        if (a - b) * (b - a) > 0:\n            return (a, b)\n    return (numbers[0], numbers[-1])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    max_distance: float = float('inf')\n    min_distance: float = float('-inf')\n    best_separation: float = float('-inf')\n    for i, number in enumerate(numbers):\n        distance: float = number - numbers[i - 1]\n        if distance < min_distance:\n            min_distance = distance\n        if distance > max_distance:\n            max_distance = distance\n        if distance < best_separation:\n            best_separation = distance\n    if min_distance <= max_distance:\n        return numbers[0], numbers[1]\n    else:\n        return numbers[1], numbers[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    index = 0\n    distance = 1.0\n    while True:\n        distance = 0.0\n        first = numbers[index - 1]\n        second = numbers[index]\n        for i in range(index + 1, len(numbers)):\n            if i == 0:\n                continue\n            if numbers[i] > second:\n                distance += numbers[i - 1] * second - numbers[i] * first\n            elif numbers[i] < second:\n                distance += numbers[i - 1] * first - numbers[i] * second\n        if distance < 0:\n            break\n        distance /= 2\n        index += 1\n\n    return first, second", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Find all pairwise distances and find the two smallest of those.\n    distances: List[float] = []\n    for i in range(len(numbers)):\n        distances.append(numbers[i] - numbers[i - 1])\n    distances.sort(key=lambda x: x)\n    # Find the two smallest distances.\n    min_dist: float = distances[0]\n    for i in range(1, len(distances)):\n        if distances[i] < min_dist:\n            min_dist = distances[i]\n    # Return the two smallest distances.\n    return numbers[min_dist - 1], numbers[min_dist + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if not numbers:\n        return (-1.0, -1.0)\n\n    len = len(numbers)\n\n    # take the largest number as the first element\n    # largest of the numbers smaller than first will be the second element\n    if len > 1:\n        first = numbers[0]\n    else:\n        first = -1.0\n\n    # scan from smallest to largest for each number\n    for index in range(1, len):\n        current = first\n        for current, candidate in enumerate(numbers):\n            # scan until the next number has a smaller value\n            if candidate > current:\n                current = candidate\n            else:\n                break\n\n        if current > first:\n            # we found a new largest\n            second = current\n            break\n    else:\n        # there is only one number in the list\n        second = first\n    return first, second", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    smallest = numbers[0]\n    largest = numbers[-1]\n\n    while True:\n        delta = abs(smallest - largest)\n        if delta == 0:\n            break\n        elif delta < smallest - largest:\n            smallest = largest - delta\n        else:\n            largest = smallest + delta", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Keep track of the two smallest and largest numbers in the list. The\n    # target value is always the last element in the list.\n    smallest, largest = numbers[-1], numbers[0]\n    smallest, largest = _sort_by_value(smallest, largest)\n\n    # For each index in the list, count the number of elements\n    # between that index and the target number.\n    indexes = map(lambda x: (x - smallest) / (largest - smallest), range(len(numbers)))\n\n    # We are only interested in the indexes that contain only one element.\n    indexes = filter(lambda x: len(x) == 1, indexes)\n\n    # Select the smallest and largest indexes in the list and return them\n    # in order (smaller index, larger index).\n    # If there is only one index, it is the only element in the list,\n    # so return it immediately.\n    if len(indexes) == 1:\n        return indexes[0], indexes[0]\n    return indexes[0], _find_closest(indexes)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    assert len(numbers) >= 2\n    closet = (numbers[0], numbers[1])\n    for i in range(1, len(numbers)):\n        if (numbers[i] - closet[0]) ** 2 + (numbers[i] - closet[1]) ** 2 < (closet[0] - numbers[i - 1]) ** 2 + (closet[1] - numbers[i - 1]) ** 2:\n            closet = (numbers[i], numbers[i - 1])\n\n    return closet", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # the minimum distance is 1.0\n    min_distance = 1.0\n    min_index = None\n    closest_indices = [None] * len(numbers)\n    for i, number in enumerate(numbers):\n        distances = [abs(number - numbers[i - 1]), abs(number - numbers[i + 1])]\n        if min_distance > distances[0] and min_distance > distances[1]:\n            min_index = i\n            min_distance = distances[0]\n    if min_index is None:\n        return None, None\n    closest_indices[min_index], closest_indices[min_index + 1] = 1, 0\n    return numbers[closest_indices[0]], numbers[closest_indices[1]]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = min(numbers, key=lambda x: abs(x - numbers[0]))\n    largest = closest_pair[0]\n    smallest = closest_pair[1]\n    for num in numbers[2:]:\n        if abs(num - smallest) < abs(num - largest):\n            largest = num\n        if abs(num - smallest) < abs(num - largest):\n            smallest = num\n    return largest, smallest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    prev = None\n    curr = None\n    count = 0\n    for i, j in zip(numbers[:-1], numbers[1:]):\n        if i < j:\n            if prev is not None:\n                curr = prev\n                count += 1\n            prev = i\n            curr = j\n            count += 1\n            if count > 2:\n                break\n    if prev is None:\n        return prev, curr\n    return prev, curr + 0.5 * (i - prev)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # We know we need at least two elements.\n    if len(numbers) < 2:\n        raise ValueError(\"We need at least two numbers.\")\n\n    smallest_number = numbers[0]\n    largest_number = numbers[-1]\n\n    # Find smallest and largest, and point to them.\n    for i in range(1, len(numbers)):\n        if numbers[i] < smallest_number:\n            smallest_number = numbers[i]\n        if numbers[i] > largest_number:\n            largest_number = numbers[i]\n\n    # Return a tuple of the two closest numbers.\n    return smallest_number, largest_number", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    minimum_dist = float('inf')\n    minimum_dist_index = 0\n\n    for _ in range(len(numbers) - 1):\n        current = numbers[minimum_dist_index]\n        next = numbers[minimum_dist_index + 1]\n        dist = current - next\n        if dist < minimum_dist:\n            minimum_dist = dist\n            minimum_dist_index = minimum_dist_index + 1\n    return numbers[minimum_dist_index], numbers[minimum_dist_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closer = None\n    closet = None\n\n    for i in range(len(numbers) - 1):\n        if (numbers[i] - numbers[i + 1]) < 0:\n            closer = numbers[i]\n            closet = numbers[i + 1]\n            if numbers[i]!= numbers[i + 1]:\n                break\n\n    if closer is None:\n        return None, None\n\n    return closer, closet", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    midpoint = (numbers[0] + numbers[1]) / 2.0\n    biggest = numbers[0]\n    smallest = numbers[1]\n    for i in range(2, len(numbers) - 1):\n        if numbers[i] < midpoint:\n            biggest = midpoint\n        elif numbers[i] > midpoint:\n            smallest = midpoint\n        midpoint = (biggest + smallest) / 2.0\n    return biggest, smallest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # find closest numbers\n    min_dist = 1e10\n    min_num = None\n    min_num_num = None\n    for i in range(len(numbers)):\n        num = numbers[i]\n        for j in range(i + 1, len(numbers)):\n            num_num = numbers[j]\n            if num_num < num:\n                # num is closer than num_num\n                continue\n            dist = num - num_num\n            if dist < min_dist:\n                min_num = num_num\n                min_num_num = num\n                min_dist = dist\n    return min_num, min_num_num", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def find_closest(a, b) -> Tuple[float, float]:\n        # Use this to initialize the first point in the region that we want to find\n        # as the minimum.\n        min_x = min(a, b)\n        # Use this to initialize the second point in the region that we want to find\n        # as the minimum.\n        min_y = min(a, b)\n        # This is what we do from here.\n        while min_x < max(a, b):\n            # Increment the y values from the left.\n            # We have a and b to check.\n            # This is the formula we use.\n            dx = min_x - a\n            dy = min_y - b\n            # See if we can find a point in the space between a and b.\n            if dx == 0:\n                # We have a and b to check.\n                # We are done. Return the (x, y) coordinates of the first point\n                # in the region as the minimum.\n                return min_x, min_y\n            # Increment the x values from the left.\n            dx = min_x - a\n            # See if we can find a point in the space between a and b.\n            if dx == 0:\n                # We have a and b to check.\n                # We are", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) < 2:\n        raise ValueError('list has to be at least of length 2')\n\n    numbers_minus_two = numbers[:-2] + [None] * (len(numbers) - 2)\n    numbers_plus_two = numbers + [None] * (len(numbers) - 2)\n\n    for number_minus_two, number_plus_two in zip(numbers_minus_two, numbers_plus_two):\n        if number_minus_two < number_plus_two:\n            continue\n\n        if number_minus_two == number_plus_two:\n            continue\n\n        if number_minus_two < number_plus_two:\n            numbers_minus_two.append(number_minus_two)\n            numbers_plus_two.pop(0)\n        else:\n            numbers_minus_two.pop(0)\n            numbers_plus_two.append(number_plus_two)\n\n    return min(numbers_minus_two), max(numbers_plus_two)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_distance, min_index = None, None\n\n    for i in range(len(numbers)):\n        distance = numbers[i] - numbers[i - 1]\n        if min_distance is None or distance < min_distance:\n            min_index = i\n            min_distance = distance\n\n    return numbers[min_index + 1], numbers[min_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n\n    distance = abs(numbers[-1] - numbers[0])\n\n    # Find the second closest element\n    for i in range(1, len(numbers)):\n        distance = (numbers[i] - numbers[0]) ** 2\n\n        if distance < distance + distance * distance:\n            distance = distance + distance * distance\n            break\n\n    # Now, find the smallest\n    for i in range(len(numbers) - 1, -1, -1):\n        distance = (numbers[i] - numbers[0]) ** 2\n\n        if distance < distance + distance * distance:\n            distance = distance + distance * distance\n            break\n\n    # Find the closest\n    index = min(i for i in range(len(numbers)) if distance < distance + distance * distance)\n\n    return numbers[index], numbers[index - 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # A set of all the numbers in the list\n    numbers = set(numbers)\n    # List of all the pairs of numbers (also a set)\n    pairs = []\n    # List of index of pairs in the list\n    indexes = []\n    # Index of the closest pair (2.0, 2.2)\n    i = 0\n    # Loop through the numbers in the list\n    for num1 in numbers:\n        # Get a list of all the pairs of numbers, and add them to a set\n        if num1 in pairs:\n            pairs.remove(num1)\n        else:\n            pairs.append(num1)\n        # Get a list of all the indexes of the number\n        indexes.append(i)\n        # Increment the index of the number\n        i += 1\n    # Get the index of the closest pair\n    closest = indexes[-1]\n    # Return the first element in the list as the smallest number in the list and the second element as the\n    # largest number in the list\n    return pairs[closest], pairs[indexes[0]]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) < 2:\n        return None, None\n\n    smallest = numbers[0]\n    smallest_ratio = 1.0\n    largest = numbers[-1]\n    largest_ratio = 1.0\n\n    for i in range(1, len(numbers)):\n        number = numbers[i]\n\n        ratio = smallest / number\n        if ratio < smallest_ratio:\n            smallest = number\n            smallest_ratio = ratio\n\n    for i in range(len(numbers) - 2, -1, -1):\n        number = numbers[i]\n        ratio = largest / number\n        if ratio > largest_ratio:\n            largest = number\n            largest_ratio = ratio\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    from pylab import (plot, get_ranges, axes, isfinite, plot_area, axes_manager, figure, savefig, show, figure, plot, figure)\n\n    left, right = [], []\n    for i in range(0, len(numbers)):\n        # Calculate differences in each of the numbers from the reference\n        distances = []\n        for j in range(i + 1, len(numbers)):\n            distances.append(abs(numbers[i] - numbers[j]))\n        distances.sort(reverse=True)\n        # Select the smallest and largest distances, and the index of them\n        smallest = distances[0] if distances[0] < distances[1] else distances[1]\n        largest = distances[0] if distances[0] < distances[2] else distances[2]\n        index = i - 1 if smallest < numbers[i] else i + 2\n        # If the smallest number is larger than the largest, we have to\n        # swap them\n        if smallest > largest:\n            index, largest = largest, smallest\n        # If the largest number is larger than the smallest, we have to\n        # swap them\n        if largest > smallest:\n            index, smallest = smallest, largest\n        # Put these in a list of tuples\n        left.append((numbers[index], numbers[index] + distances[index]))\n        right.append((", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_difference = float(\"inf\")\n    i = 0\n    for num in numbers:\n        if num > min_difference:\n            min_difference = num\n        elif num < min_difference:\n            min_difference = num\n        i += 1\n    return numbers[i], numbers[i + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('Not enough numbers provided')\n    return sorted(numbers, key=lambda x: x, reverse=True)[-2], sorted(numbers, key=lambda x: x, reverse=True)[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    nums1 = list(numbers)\n    nums2 = list(numbers)\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            nums1.pop()\n            nums2.pop()\n            continue\n        nums1.pop()\n        nums2.pop()\n        break\n\n    return sorted(list(zip(nums1, nums2))[0])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    def get_closest(numbers: List[float], diff: float) -> Tuple[float, float]:\n        \"\"\" Get the closest element in the list to the supplied difference and return it in order. \"\"\"\n        if diff < 0:\n            return numbers[-1], numbers[0]\n        if numbers == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]:\n            return numbers[-1], numbers[0]\n        distances = [0] * (len(numbers) - 1)\n        for i, n in enumerate(numbers):\n            for j in range(i + 1, len(numbers)):\n                distances[i] = abs(n - numbers[j])\n                distances[j] = abs(numbers[j] - n)\n        # we want to find the closest in the middle so we start from the middle and work towards the front\n        # this means we have to add up the differences in the following order:\n        # - from front to back\n        # - from back to front\n        # - from end to start\n        for i in range(0, len(numbers) - 2):\n            for j in range(i + 1, len(numbers) - 2):\n                if distances[i] + distances[j] < distances[i + 1]:", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    n = len(numbers)\n\n    if n < 2:\n        return None, None\n\n    left = numbers[0]\n    right = numbers[1]\n\n    if left == right or left == 0.0:\n        return left, right\n\n    left_gt_right = numbers[0] > numbers[1]\n    left_smaller_right = left_gt_right and (numbers[0] - right) < (numbers[1] - left)\n\n    if left_smaller_right:\n        return left, right\n\n    left_smaller_right = numbers[0] < numbers[1]\n    right_smaller_left = left_smaller_right and (left - numbers[0]) < (numbers[1] - right)\n\n    if right_smaller_left:\n        return left, right\n\n    return None, None", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return sorted(numbers, key=lambda x: abs(x - numbers[-2]), reverse=True)[-1], sorted(numbers, key=lambda x: abs(x - numbers[-1]), reverse=True)[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # compute distance between all pairs\n    distances = [(numbers[i], numbers[i+1]) for i in range(len(numbers)-1)]\n    distances.append((numbers[len(numbers)-1], numbers[0]))\n    distances = sorted(distances, key=lambda x: x[0]) # use a default sort, for instance, by \"lexicographical order\"\n\n    # find the two closest pairs and return their distance\n    start, end = None, None\n    for dist in distances:\n        if (start is None or dist[1] < start[1]) and (end is None or dist[0] < end[0]):\n            start, end = dist, dist\n    if start is not None:\n        return start[0], start[1]\n    elif end is not None:\n        return end[0], end[1]\n    else:\n        return None, None", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # sort the numbers\n    numbers.sort()\n\n    # get the closest two numbers\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least 2 numbers to find closest pair\")\n\n    # get the smaller number\n    smallest = numbers[0]\n    for n in numbers[1:]:\n        if n < smallest:\n            smallest = n\n\n    # get the larger number\n    largest = smallest\n    for n in numbers[1:]:\n        if n > largest:\n            largest = n\n\n    return smallest, largest\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return None, None\n\n    # find minimum and maximum values in the list\n    min = numbers[0]\n    max = numbers[0]\n    for number in numbers[1:]:\n        if number < min:\n            min = number\n        if number > max:\n            max = number\n    # find the distance between the minimum and maximum value\n    distance = max - min\n    # find two numbers in the list that are the closest to each other\n    closest = min\n    for i in range(1, len(numbers)):\n        if closest == min:\n            return min, max\n        if closest == max:\n            return max, min\n        if distance > numbers[i] - closest:\n            closest = numbers[i]\n        elif distance < numbers[i] - closest:\n            closest = numbers[i] - distance\n    return closest, min", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    delta = 1.0 / len(numbers)\n    n = numbers[0]\n    for i in range(1, len(numbers)):\n        e = n - numbers[i]\n        if e < 0:\n            e = -e\n        delta *= e\n    return n, delta", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def nearest_neighbour(x, y):\n        if x == y:\n            return 0.0\n        return abs(x - y) / (x - y)\n    return sorted(numbers, key=nearest_neighbour, reverse=True)[-1], sorted(numbers, key=nearest_neighbour, reverse=False)[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_distance = 999999999\n    closest_number = None\n    closest_index = None\n\n    for index, number in enumerate(numbers):\n        # The first number is the smaller of the two, so we only check numbers that are smaller than the first number\n        if index == 0:\n            if number < closest_number:\n                closest_distance = number - closest_number\n                closest_number = number\n                closest_index = index\n        # Compare number against all other numbers and find the minimum distance\n        elif index!= closest_index:\n            number_diff = number - numbers[closest_index]\n            if number_diff < closest_distance:\n                closest_distance = number_diff\n                closest_number = number\n                closest_index = index\n\n    return closest_number, closest_index\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Find first smallest\n    min = None\n    min_index = None\n    for index in range(len(numbers)):\n        if min is None or numbers[index] < min:\n            min = numbers[index]\n            min_index = index\n    # Find first largest\n    max = None\n    max_index = None\n    for index in range(len(numbers)):\n        if max is None or numbers[index] > max:\n            max = numbers[index]\n            max_index = index\n    return min_index, max_index", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Select two numbers closest to each other\n    a, b = find_closest_element(numbers[:-1], numbers[1:])\n\n    # Select the smallest number from the set of numbers that a and b are closest to\n    return a, b", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    def func(x: float, y: float) -> bool:\n        \"\"\" Calculate the distance between two numbers, return True if the distance is smaller than 0.01.\n        \"\"\"\n        if abs(x - y) < 0.01:\n            return True\n        else:\n            return False\n\n    # Get the first two numbers\n    min, max = numbers[0], numbers[-1]\n\n    # Get the closest pairs, calculate the distance between each pair\n    # In python, we can use the bisect function which is optimized for this purpose\n    start = bisect_left(numbers, min)\n\n    pairs = [(numbers[start], numbers[start + 1]), (numbers[start + 1], numbers[start])]\n    for pair in pairs:\n        if func(pair[0], pair[1]):\n            return pair\n\n    # No matches found\n    return min, max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    d = {}\n    for k, v in numbers.items():\n        d[v] = k\n    index = 0\n    d_0 = numbers[0]\n    for d_ in d:\n        if d_ < d_0:\n            break\n        index += 1\n    if index < 2:\n        raise ValueError(\"List of numbers must be at least two elements\")\n    d_1 = d[index - 1]\n    return d[index], d[index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def closeness(x, y: float) -> int:\n        return abs(x - y) / max(abs(x), abs(y))\n    smallest = numbers[0]\n    largest = numbers[-1]\n    for index, element in enumerate(numbers):\n        if closeness(smallest, element) <= closeness(largest, element):\n            smallest = element\n        else:\n            largest = element\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Compute the squared Euclidean distance between every number\n    distances = [(i - j) ** 2 for i, j in zip(numbers, numbers[1:])]\n\n    # Return the smallest and largest element in the array\n    smallest = distances.index(min(distances))\n    largest = distances.index(max(distances))\n\n    # The element we want is the smallest number in the list, and the one that comes\n    # after the smallest is the second smallest\n    return numbers[smallest], numbers[largest + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) < 2:\n        return None\n\n    min_value = numbers[0]\n    max_value = numbers[-1]\n    values = [0] * (len(numbers) - 1)\n\n    # find the closest pair\n    for i in range(1, len(numbers)):\n        if numbers[i] < min_value:\n            min_value = numbers[i]\n        elif numbers[i] > max_value:\n            max_value = numbers[i]\n        values[i] = numbers[i] - min_value\n        values[i - 1] = min_value - numbers[i - 1]\n\n    # return the first two elements of the closest pair\n    return values[:2]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def sorted_index(pair: Tuple[float, float]) -> int:\n        \"\"\" Return the index of the pair in the sorted list of numbers \"\"\"\n        return sorted(numbers)[pair]\n\n    def get_pairs(numbers: List[float]) -> List[Tuple[float, float]]:\n        \"\"\" Return all pairs from the given list (must be sorted) \"\"\"\n        pairs = [(numbers[i], numbers[j]) for i in range(len(numbers)) for j in range(len(numbers)) if i!= j and numbers[i] == numbers[j]]\n        return sorted(pairs)\n\n    if len(numbers) < 2:\n        return (numbers[0], numbers[0])\n    else:\n        return (numbers[0], sorted_index(get_pairs(numbers[:2])))", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    distances = [\n        [\n            abs(numbers[i] - numbers[j]),\n            i!= j\n        ]\n        for i, j in enumerate(numbers)\n    ]\n    distance = sum(distances)\n    if len(distances) > 1:\n        closest = distances.pop(0)\n        return closest[0], closest[1]\n    else:\n        return distances[0][0], distances[0][1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_dist, max_dist = math.inf, -math.inf\n\n    for i in range(len(numbers)):\n        if numbers[i] < numbers[i - 1]:\n            min_dist = min(min_dist, numbers[i] - numbers[i - 1])\n        if numbers[i] > numbers[i + 1]:\n            max_dist = max(max_dist, numbers[i] - numbers[i + 1])\n\n    return min_dist, max_dist", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return None, None\n\n    num, min_num = numbers[0], numbers[0]\n    for number in numbers[1:]:\n        if number < num:\n            min_num, num = num, number\n\n    return min_num, num", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    indices = sorted(enumerate(numbers))\n    pivot = indices[0][1]\n    for i in range(1, len(indices)):\n        if pivot == indices[i][1]:\n            continue\n        other = indices[i][1]\n        distance = abs(pivot - other)\n        if distance < 1e-15:  # 0.000001\n            break\n        else:\n            if distance < distance:\n                pivot = other\n            else:\n                break\n    return pivot, indices[i][1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    def f(current_numbers: List[float], step: float) -> Tuple[float, float]:\n        \"\"\" This function is used to find two numbers in a list that are closest to each other.\n        :param current_numbers: list of numbers to find closest\n        :param step: number of steps to take to find closest\n        :return: tuple of two numbers that are closest to each other\n        \"\"\"\n\n        try:\n            if len(current_numbers) < 2:\n                return None, None\n\n            # Calculate two closest numbers\n            min_numbers = [current_numbers[0]]\n            max_numbers = [current_numbers[-1]]\n\n            for i in range(1, len(current_numbers) - 1):\n                if (min_numbers[0] <= current_numbers[i] <= max_numbers[0]) and (min_numbers[1] <= current_numbers[i] <= max_numbers[1]):\n                    step = i - 1\n                    min_numbers[0] = current_numbers[i]\n                    min_numbers[1] = current_numbers[i]\n                else:\n                    step = i + 1\n                    max_numbers[0] = current_numbers[i]\n                    max_numbers[1] = current_numbers[i]\n\n            # Return smallest number and largest number\n            return min_numbers, max_numbers\n        except IndexError:", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest = numbers[0]\n    largest = numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        midpoint = smallest + (largest - smallest) * i / (len(numbers) - i - 1)\n        if midpoint < numbers[i] or midpoint > numbers[i + 1]:\n            smallest = midpoint\n            largest = midpoint\n        else:\n            break\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def dist(a, b):\n        return abs(a - b)\n\n    smallest = numbers[0]\n    biggest = numbers[-1]\n\n    for i in range(1, len(numbers)):\n        if smallest > numbers[i]:\n            smallest = numbers[i]\n        if biggest < numbers[i]:\n            biggest = numbers[i]\n\n    return smallest, biggest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def delta(a, b) -> float:\n        return abs(a-b) / (b-a)\n\n    closest = None\n    closest_delta = None\n\n    for i in range(len(numbers)):\n        if closest is None or delta(numbers[i], closest) < closest_delta:\n            closest = numbers[i]\n            closest_delta = delta(numbers[i], closest)\n\n    return closest, closest_delta\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    nums1 = sorted(numbers)\n    nums2 = sorted(numbers)\n    return nums1[0], nums2[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    distances = []\n    for i, d in enumerate(numbers:\n        distances.append(abs(numbers[i] - numbers[i + 1]))\n    distances.sort()\n    distances.reverse()\n    distance = distances[0]\n    for i in range(1, len(distances)):\n        if distances[i] > distance:\n            distance = distances[i]\n    return numbers[0], numbers[len(numbers) - 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    l = len(numbers)\n    # Get the numbers in order. The smaller number must be the first element\n    numbers_in_order = [\n        numbers[0] if numbers[0] > numbers[1] else numbers[1],\n        numbers[1]\n    ]\n    # Sort the numbers\n    numbers_in_order.sort()\n    # Find the indexes of the closest numbers in order\n    smallest = 0\n    largest = 0\n    for i in range(l - 2):\n        if numbers_in_order[i] > numbers_in_order[i + 1] and numbers_in_order[i + 1] > numbers_in_order[i + 2] and numbers_in_order[i + 1] > numbers_in_order[i + 3]:\n            smallest = i\n            largest = i + 2\n            break\n    # Return the indexes of the closest numbers in order and the distance between them\n    return numbers_in_order[smallest], numbers_in_order[largest]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) <= 1:\n        return numbers[0], numbers[0]\n\n    smallest, largest = numbers[0], numbers[-1]\n    for n in numbers[1:]:\n        if n < smallest:\n            smallest, largest = n, smallest\n        elif n > largest:\n            largest, smallest = n, largest\n\n    if smallest == largest:\n        return numbers[0], numbers[-1]\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Find the distances\n    distances = []\n    for index, distance in enumerate(numbers):\n        distances.append(abs(distance - numbers[index]))\n\n    # Sort by distance, smallest to largest\n    distances.sort()\n\n    # Find the absolute minimum and maximum\n    min_distance = distances[0]\n    max_distance = distances[0]\n\n    # Find the closest pair of elements\n    min_index = min(distances)\n    max_index = max(distances)\n    min_value = numbers[min_index]\n    max_value = numbers[max_index]\n\n    # Return the pair in order\n    return min_value, max_value", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    a = numbers[0]\n    b = numbers[1]\n    closest = None\n    # find the closest\n    for i in range(2, len(numbers)):\n        delta = abs(numbers[i] - b) - abs(a - numbers[i - 1])\n        if delta > 0:\n            closest = (numbers[i], numbers[i - 1])\n            break\n\n    if closest is None:\n        closest = (numbers[0], numbers[-1])\n\n    return closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    distances = []\n    for number in numbers:\n        # find the distance between the numbers\n        distances.append(abs(number - find_closest_number(numbers)))\n    distances.sort(key=lambda distance: distance)\n    return distances[0] / distances[1], distances[1] / distances[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_distance, max_distance = None, None\n    min_distance = max(numbers) - numbers[0]\n    max_distance = min(numbers) - numbers[-1]\n    for number in numbers[1:]:\n        if min_distance is None or number < min_distance:\n            min_distance = number\n        if max_distance is None or number > max_distance:\n            max_distance = number\n\n    return min_distance, max_distance", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers to calculate\")\n\n    # Figure out the distance between the two closest elements\n    index = numbers.index(numbers[0]) + 1\n    index2 = numbers.index(numbers[1]) + 1\n\n    # Find the smallest distance from the two elements\n    dist0 = numbers[index0] - numbers[index]\n    dist1 = numbers[index1] - numbers[index]\n    dist = min(dist0, dist1)\n\n    # Figure out which element is closer to the midpoint\n    if dist == 0:\n        closest = numbers[index]\n    elif dist0 < 0:\n        closest = numbers[index - 1]\n    elif dist1 < 0:\n        closest = numbers[index + 1]\n    else:\n        closest = numbers[index0]\n\n    # Figure out the difference between the two closest\n    delta = numbers[closest] - numbers[index]\n    if delta == 0:\n        return closest, closest\n    else:\n        return closest - delta, closest + delta", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    distances = [abs(numbers[i] - numbers[i + 1]) for i in range(len(numbers) - 1)]\n    # Sort the distances from smallest to largest\n    distances.sort()\n    # Find the two that are closest to each other and return them in order (smaller number, larger number)\n    return distances[distances.index(0) / 2], distances[distances.index(len(numbers) - 1) / 2]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    \"\"\"\n    >>> from math import sqrt\n    >>> find_closest_elements([0.0, 1.0, 2.0, 3.0])\n    Traceback (most recent call last):\n   ...\n    ValueError: Length of list must be at least 2.\n    \"\"\"\n    \"\"\"\n    >>> from math import sqrt\n    >>> find_closest_elements([2.0, 1.0, 0.0, 4.0, 3.0, 5.0, 1.0])\n    Traceback (most recent call last):\n   ...\n    ValueError: Length of list must be at least 2.\n    \"\"\"\n    \"\"\"\n    >>> from math import sqrt\n    >>> find_closest_elements([1.0, 1.0, 2.0, 1.0, 3.0, 1.0, 4.0, 1.0, 4.0, 5.0, 3.0, 5.0, 1.0])\n    Traceback (most recent call last):\n   ...\n    ValueError: Length of list must be at least 2.\n    \"\"\"\n    \"\"\"\n    >>> from math import sqrt\n    >>> find_closest_elements([2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    _, _, min_sq = None, None, float('inf')\n    for num1, num2 in zip(numbers[:-1], numbers[1:]):\n        sq = num1 - num2\n        if sq < min_sq:\n            min_sq = sq\n            _, _ = num1, num2\n    return min_sq", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return (\n        min(numbers, key=lambda x: abs(x - numbers[0])),\n        max(numbers, key=lambda x: abs(x - numbers[-1])),\n    )", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    first_closest = numbers[0]\n    second_closest = numbers[-1]\n    for second in numbers[1:]:\n        first_closest = min(first_closest, second)\n        second_closest = max(second_closest, second)\n\n    return first_closest, second_closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return None, None\n\n    smallest = numbers[0]\n    largest = numbers[0]\n    distances = [float(n - smallest) for n in numbers[1:]]\n\n    for smallest, largest in zip(numbers, numbers[1:]):\n        if smallest <= largest:\n            smallest = largest\n        else:\n            largest = smallest\n\n    if smallest == largest:\n        return smallest, largest\n    else:\n        return smallest, largest / (largest - smallest)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def _get_middle(start, end) -> Tuple[float, float]:\n        \"\"\" Convert a start value and end value to a middle value\n        >>> _get_middle(1, 5)\n        Tuple(1.5, 4.5)\n        \"\"\"\n        mid = (start + end) // 2\n        mid_value = mid - start\n        return mid_value, mid_value\n\n    def _get_closest(start, end, value) -> Tuple[float, float]:\n        \"\"\" Return two values that are the closest to a given value\n        >>> _get_closest(1, 5, 2.5)\n        Tuple(1.5, 4.5)\n        \"\"\"\n        if start == end:\n            return start, start\n\n        if start > end:\n            value1 = start\n            start, end = end, value1\n\n        value2 = end\n        end = value2\n\n        value1 = _get_middle(start, end)\n        value2 = _get_middle(end, start)\n        return value1, value2\n\n    result = []\n    for start, end in enumerate(numbers):\n        if end - start <= 1:\n            result.append((start, end))\n            continue\n\n        mid1 = _get_middle(start, end)\n        mid2 = _get_middle", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    n = len(numbers)\n    indices = sorted(range(n), key=lambda index: (numbers[index] - numbers[index - 1]) / abs(numbers[index - 1] - numbers[index]))\n    return indices[0], indices[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers[0], numbers[0]\n\n    def _interpolate(x, y) -> float:\n        return (x - y) / (numbers[1] - numbers[0])\n\n    def _check_ints(x, y) -> bool:\n        return x > 0 and y > 0 and x <= y\n\n    # sort numbers by distance\n    numbers.sort(key=lambda x: x - numbers[0])\n\n    # find closest pair\n    distance = max(numbers[1] - numbers[0], 0) / (numbers[1] - numbers[0])\n    left = 0\n    right = len(numbers) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if _check_ints(numbers[mid], numbers[mid + 1]):\n            left = mid + 1\n        else:\n            right = mid - 1\n    left = max(left, 0)\n    right = min(right, len(numbers) - 1)\n\n    # return interpolated values\n    return numbers[left], numbers[right]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def closest_pair(a, b, distance: float) -> Tuple[float, float]:\n        a_distance = a - b\n        b_distance = b - a\n        return a_distance, b_distance\n\n    a, b = numbers[0], numbers[1]\n    a_distance, b_distance = closest_pair(a, b, 0)\n    while len(numbers) > 2:\n        a, b = numbers[0], numbers[1]\n        a_distance, b_distance = closest_pair(a, b, 0)\n        if a_distance < b_distance:\n            a, b = b, a\n    return a, b"]]