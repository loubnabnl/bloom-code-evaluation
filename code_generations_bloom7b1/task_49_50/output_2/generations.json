[["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 1:\n        return 1\n    if p == 2:\n        return 0\n    if p == 3:\n        return 2\n    if p == 4:\n        return 4\n    if p == 5:\n        return 8\n    if p == 6:\n        return 16\n    if p == 7:\n        return 32\n    if p == 8:\n        return 64\n    if p == 9:\n        return 128\n    if p == 10:\n        return 256\n    if p == 11:\n        return 512\n    if p == 12:\n        return 1024\n    if p == 13:\n        return 2048\n    if p == 14:\n        return 4096\n    if p == 15:\n        return 8192\n    if p == 16:\n        return 16384\n    if p == 17:\n        return 32768\n    if p == 18:\n        return 65536\n    if p == 19:\n        return 131072\n    if p == 20:\n        return 262144\n    if p == 21:\n        return 524288\n    if p == 22:\n        return 1048576\n    if p == 23:\n        return 2097152\n    if p == 24:\n        return 4194304\n    if p == 25:\n        return 8388608\n    if p == 26:\n        return 16777216\n    if p == 27:\n        return 33554432\n    if p == 28", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n < 0:\n        raise ValueError(\"modp(%s, %s): negative value\" % (n, p))\n    if n < p:\n        n = n + p - 1\n    if n % p == 0:\n        return n / p\n    else:\n        return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p > 0:\n        return (2 * n) % p\n    else:\n        return 2 * n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p > 1:\n        return 2 ** n % p\n    return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p <= 1:\n        raise ValueError(\"p must be greater than 1\")\n    if p == 1:\n        return n\n    return (2 * n + 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 1\n    if p == 1:\n        return 1\n    if n == 1:\n        return 1\n    if p % n == 0:\n        return 1\n    if n % p == 0:\n        return 1\n    if n < p:\n        return 1\n    if n > p:\n        return 1\n    if p % n == 0:\n        return 1\n    if p == n:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 * n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 1:\n        return 0\n    if p == 2:\n        return 1\n    if p == 3:\n        return 2\n    if p == 4:\n        return 3\n    if p == 5:\n        return 4\n    if p == 6:\n        return 5\n    if p == 7:\n        return 6\n    if p == 8:\n        return 7\n    if p == 9:\n        return 8\n    if p == 10:\n        return 9\n    if p == 11:\n        return 10\n    if p == 12:\n        return 11\n    if p == 13:\n        return 12\n    if p == 14:\n        return 13\n    if p == 15:\n        return 14\n    if p == 16:\n        return 15\n    if p == 17:\n        return 16\n    if p == 18:\n        return 17\n    if p == 19:\n        return 18\n    if p == 20:\n        return 19\n    if p == 21:\n        return 20\n    if p == 22:\n        return 21\n    if p == 23:\n        return 22\n    if p == 24:\n        return 23\n    if p == 25:\n        return 24\n    if p == 26:\n        return 25\n    if p == 27:\n        return 26\n    if p == 28:\n        return 27\n    if p == 29:\n        return 28\n    if p == 30:\n        return 29\n    if p == 31:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    return 2 * n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    assert p > 0\n    assert n > 0\n    return (2**n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 1:\n        return 0\n    if p == 2:\n        return 1\n    if p % 2 == 1:\n        return 2 ** n % p\n    return 2 ** (n // 2) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return ((2 * n + 1) % p) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 1:\n        return n\n    if p == 2:\n        return n % 2\n    if p == 3:\n        return n % 3\n    if p == 4:\n        return n % 4\n    if p == 5:\n        return n % 5\n    if p == 6:\n        return n % 6\n    if p == 7:\n        return n % 7\n    if p == 8:\n        return n % 8\n    if p == 9:\n        return n % 9\n    if p == 10:\n        return n % 10\n    if p == 11:\n        return n % 11\n    if p == 12:\n        return n % 12\n    if p == 13:\n        return n % 13\n    if p == 14:\n        return n % 14\n    if p == 15:\n        return n % 15\n    if p == 16:\n        return n % 16\n    if p == 17:\n        return n % 17\n    if p == 18:\n        return n % 18\n    if p == 19:\n        return n % 19\n    if p == 20:\n        return n % 20\n    if p == 21:\n        return n % 21\n    if p == 22:\n        return n % 22\n    if p == 23:\n        return n % 23\n    if p == 24:\n        return n % 24\n    if p == 25:\n        return n % 25\n    if p == 26:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return int(n * (p - 1) + p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    n = int(n)\n    p = int(p)\n    if p % 2 == 1:\n        return (n * p) % p\n    else:\n        return (n * (p - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    assert p > 0\n    assert n >= 0\n    p = p - 1\n    m = n + 1\n    while m <= p:\n        if m % p == 0:\n            return m // p\n        m += 1\n    return m", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    assert p > 0\n    if n < 0:\n        n += p\n    if n >= p:\n        return n % p\n    if p - n < 1:\n        return 0\n    if n < p:\n        return n % p\n    else:\n        return n - p % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"modp() only accepts positive integers\")\n    if p < 0:\n        raise ValueError(\"modp() only accepts positive integers\")\n    if n < p:\n        return n // p\n    remainder = n % p\n    return (remainder * p) // p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p < 2:\n        raise ValueError(\"p must be at least 2!\")\n    if n < 0:\n        raise ValueError(\"n must be positive!\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n < p:\n        raise ValueError(\"n must be greater than p!\")\n    if n % p == 0:\n        return p - n % p\n    return p - n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 * n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    assert p > 0\n    return n * (2 ** (p - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # this is the most efficient way to do this, but it can be slow\n    # as the modulo can be large\n    return (n * (p - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    assert n > 0\n    assert p > 0\n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    assert n % p == 0\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        raise ValueError(\"modp() not defined for p == 0\")\n    if p == 1:\n        return n\n    if n < 0:\n        raise ValueError(\"modp() not defined for negative n\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if p % n == 0:\n        return p // n\n    if p % (p - n) == 0:\n        return 0\n    return modp(n, p - n)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0 or p < 0:\n        raise ValueError(\"not enough digits in modulus\")\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    n = n % p\n    if n == 0:\n        return 0\n    n = n // p\n    if n == 0:\n        return 1\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n * (p - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 1:\n        return 1\n    if p == 2:\n        return 0\n    if p == 3:\n        return 1 if n % 2 == 0 else -1\n    if p == 4:\n        return 1 if n % 3 == 0 else -1\n    if p == 5:\n        return 1 if n % 4 == 0 else -1\n    if p == 6:\n        return 1 if n % 5 == 0 else -1\n    if p == 7:\n        return 1 if n % 6 == 0 else -1\n    if p == 8:\n        return 1 if n % 7 == 0 else -1\n    if p == 9:\n        return 1 if n % 8 == 0 else -1\n    if p == 10:\n        return 1 if n % 9 == 0 else -1\n    if p == 11:\n        return 1 if n % 10 == 0 else -1\n    if p == 12:\n        return 1 if n % 11 == 0 else -1\n    if p == 13:\n        return 1 if n % 12 == 0 else -1\n    if p == 14:\n        return 1 if n % 13 == 0 else -1\n    if p == 15:\n        return 1 if n % 14 == 0 else -1\n    if p == 16:\n        return 1 if n % 15 == 0 else -1\n    if p == 17:\n        return 1 if n % 16 == 0 else -1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p < 2:\n        raise ValueError(\"p must be > 2 to use modulo operator\")\n    if p > n:\n        raise ValueError(\"p must be < n to use modulo operator\")\n    if p % n == 0:\n        return n\n    r = n // p\n    if r < 1:\n        return 0\n    if p % r == 0:\n        return r\n    return r * modp(r, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"modp(%d, %d): negative number\" % (n, p))\n    if p < 0:\n        raise ValueError(\"modp(%d, %d): negative number\" % (n, p))\n    if n == p:\n        return 1\n    if p == 1:\n        return 1\n    if p == 2:\n        return 1\n    if p == 3:\n        return 1\n    if p == 5:\n        return 1\n    if p == 7:\n        return 1\n    if p == 11:\n        return 1\n    if p == 13:\n        return 1\n    if p == 15:\n        return 1\n    if p == 31:\n        return 1\n    if p == 37:\n        return 1\n    if p == 63:\n        return 1\n    if p == 97:\n        return 1\n    if p == 103:\n        return 1\n    if p == 127:\n        return 1\n    if p == 133:\n        return 1\n    if p == 155:\n        return 1\n    if p == 171:\n        return 1\n    if p == 191:\n        return 1\n    if p == 251:\n        return 1\n    if p == 257:\n        return 1\n    if p == 291:\n        return 1\n    if p == 347:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n * (p - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return p - n * (p - 1) // n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"modp only accepts positive integers\")\n    if p == 0:\n        raise ValueError(\"modp only accepts prime numbers\")\n    if n == 0:\n        return 0\n    if p % n == 0:\n        return 1\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n <= 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return modp(n // p, p)\n    return modp(n // p, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 1\n    if p == 3:\n        return 2\n    if p == 4:\n        return 1\n    if p == 5:\n        return 2\n    if p == 6:\n        return 1\n    if p == 7:\n        return 2\n    if p == 8:\n        return 1\n    if p == 9:\n        return 2\n    if p == 10:\n        return 1\n    if p == 11:\n        return 2\n    if p == 12:\n        return 1\n    if p == 13:\n        return 2\n    if p == 14:\n        return 1\n    if p == 15:\n        return 2\n    if p == 16:\n        return 1\n    if p == 17:\n        return 2\n    if p == 18:\n        return 1\n    if p == 19:\n        return 2\n    if p == 20:\n        return 1\n    if p == 21:\n        return 2\n    if p == 22:\n        return 1\n    if p == 23:\n        return 2\n    if p == 24:\n        return 1\n    if p == 25:\n        return 2\n    if p == 26:\n        return 1\n    if p == 27:\n        return 2\n    if p == 28:\n        return 1\n    if p == 29:\n        return 2\n    if p == 30:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (p - 1) * (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p < 2:\n        raise ValueError(\"p must be a prime\")\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    n = int(n)\n    p = int(p)\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 0\n    if n % p == 0:\n        return n\n    if n < p:\n        return modp(n, p - 1)\n    else:\n        return modp(n - p, p)\n</s>", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 * n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p < 0:\n        raise ValueError(\"modp() only supports positive p\")\n    if n == 0:\n        return 1\n    return (p - 1) * mod(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"negative argument\")\n    if p < 0:\n        raise ValueError(\"negative argument\")\n    if p == 0:\n        return 1\n    if p == 1:\n        return 0\n    if p == 2:\n        return 1\n    if p == 3:\n        return 2\n    if p == 4:\n        return 3\n    if p == 5:\n        return 4\n    if p == 6:\n        return 5\n    if p == 7:\n        return 6\n    if p == 8:\n        return 7\n    if p == 9:\n        return 8\n    if p == 10:\n        return 9\n    if p == 11:\n        return 10\n    if p == 12:\n        return 11\n    if p == 13:\n        return 12\n    if p == 14:\n        return 13\n    if p == 15:\n        return 14\n    if p == 16:\n        return 15\n    if p == 17:\n        return 16\n    if p == 18:\n        return 17\n    if p == 19:\n        return 18\n    if p == 20:\n        return 19\n    if p == 21:\n        return 20\n    if p == 22:\n        return 21\n    if p == 23:\n        return 22\n    if p == 24:\n        return 23\n    if p == 25:\n        return 24\n    if p == 26:\n        return 25\n    if p == 27:\n        return 26\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0 or p < 0:\n        raise ValueError(\"negative numbers not allowed\")\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return 1\n    if p == 1:\n        return 0\n    if n == 1:\n        return 1\n    if p == 1:\n        return 1\n    if n % p == 0:\n        return n // p\n    else:\n        return modp(n // p, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p < 1:\n        raise ValueError('p must be positive')\n    if p == 1:\n        return 0\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    if p == 1:\n        return n\n    if n == 1:\n        return 0\n    if n < 1:\n        n = -n\n    if n % p == 0:\n        return n % p\n    if n % p == 1:\n        return 0\n    return modp(n // p, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        return (2 * (n + p)) % p\n    else:\n        return 2 * n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    assert p > 0\n    if n == 0:\n        return 0\n    return (n * p - 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 1:\n        return n\n    if p == 0:\n        return 0\n    m = n % p\n    n = n // p\n    return m + n * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        n = -n\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 * n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 1:\n        return 1\n    if p == 2:\n        return 1\n    if p == 3:\n        return 1\n    if p == 4:\n        return 2\n    if p == 5:\n        return 3\n    if p == 6:\n        return 3\n    if p == 7:\n        return 4\n    if p == 8:\n        return 5\n    if p == 9:\n        return 6\n    if p == 10:\n        return 7\n    if p == 11:\n        return 8\n    if p == 12:\n        return 9\n    if p == 13:\n        return 10\n    if p == 14:\n        return 11\n    if p == 15:\n        return 12\n    if p == 16:\n        return 13\n    if p == 17:\n        return 14\n    if p == 18:\n        return 15\n    if p == 19:\n        return 16\n    if p == 20:\n        return 17\n    if p == 21:\n        return 18\n    if p == 22:\n        return 19\n    if p == 23:\n        return 20\n    if p == 24:\n        return 21\n    if p == 25:\n        return 22\n    if p == 26:\n        return 23\n    if p == 27:\n        return 24\n    if p == 28:\n        return 25\n    if p == 29:\n        return 26\n    if p == 30:\n        return 27\n    if p == 31:\n        return 28", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n < p:\n        return modp(n, p - 1)\n    if n < p * 2:\n        return modp(n, p - 2)\n    if n % p == 0:\n        return modp(n // p, p)\n    else:\n        return modp(n // p, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p < 0:\n        raise ValueError(\"p must be positive\")\n    if p == 0:\n        return 0\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if p == 1:\n        return 1\n    if p == 2:\n        return 3\n    if p == 3:\n        return 5\n    if p == 5:\n        return 7\n    if p == 7:\n        return 11\n    if p == 11:\n        return 13\n    if p == 13:\n        return 17\n    if p == 17:\n        return 19\n    if p == 19:\n        return 23\n    if p == 23 or p == 31:\n        return 29\n    if p == 29 or p == 31:\n        return 37\n    if p == 37 or p == 41:\n        return 41\n    if p == 41 or p == 43:\n        return 43\n    if p == 43 or p == 47:\n        return 47\n    if p == 47 or p == 53:\n        return 53\n    if p == 53 or p == 59:\n        return 59\n    if p == 59 or p == 67:\n        return 67\n    if p == 67 or p == 71:\n        return 71\n    if p == 71 or p == 73:\n        return 73\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    if p % n == 0:\n        return n\n    if p % (n - 1) == 0:\n        return (n - 1) // p\n    return (n - 1) // p - 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 * n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        return (2 * (2 ** (n * -1))) % p\n    else:\n        return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n * (p - 1) + 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    n = n % p\n    if n == 0:\n        return 0\n    if n == p:\n        return 1\n    return n / p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    a = n % p\n    b = n // p\n    return a + b * p - b * (p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError('negative numbers not allowed')\n    if p < 0:\n        raise ValueError('negative numbers not allowed')\n    if p == 0:\n        raise ValueError('p is 0, cannot divide')\n    if n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return 0\n    if p % n == 0:\n        return 0\n    return 2 * n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p < 2:\n        raise ValueError('p must be greater than 1')\n    if p == 2:\n        return n\n    if p < n:\n        return n // p * modp(n % p, p)\n    return n // p * modp(n % p, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 1\n    if p == 1:\n        return 1\n    if p == 2:\n        return 1\n    if n == 1:\n        return 1\n    if p % 2 == 0:\n        return 1\n    if n % 2 == 0:\n        return 1\n    if p % 3 == 0:\n        return 1\n    if n % 3 == 0:\n        return 1\n    if p % 4 == 0:\n        return 1\n    if n % 4 == 0:\n        return 1\n    if p % 5 == 0:\n        return 1\n    if n % 5 == 0:\n        return 1\n    if p % 6 == 0:\n        return 1\n    if n % 6 == 0:\n        return 1\n    if p % 7 == 0:\n        return 1\n    if n % 7 == 0:\n        return 1\n    if p % 8 == 0:\n        return 1\n    if n % 8 == 0:\n        return 1\n    if p % 9 == 0:\n        return 1\n    if n % 9 == 0:\n        return 1\n    if p % 10 == 0:\n        return 1\n    if n % 10 == 0:\n        return 1\n    return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 1:\n        return 0\n    if p % 2 == 0:\n        return (n // 2) % p\n    return (n // 2) % (p // 2) + (n % p) // p\n</s>", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"modp accepts only positive numbers\")\n    if n == 0:\n        return 0\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n % 2\n    if p % 2 == 0:\n        return (n // 2) * p + (n % 2) * (p - 1)\n    return n * p % 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    assert 0 <= n <= p\n    assert p % n == 0\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    assert p % n == 0\n    return p - n * p % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 1:\n        return n\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return ((2 ** n) % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    p = p - 1\n    n = n % p\n    if n == 0:\n        return n\n    else:\n        return 2 * n + modp(n // p, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 1:\n        return n\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return int(n * (2 ** (p - 1)) % p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p % n == 0:\n        return 0\n    if p == 2:\n        return 1\n    return 2 * n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        n = - n\n    if p == 1:\n        return 1\n    if p == 2:\n        return n % 2\n    if p == 3:\n        return n % 3\n    if p == 4:\n        return n % 4\n    if p == 5:\n        return n % 5\n    if p == 6:\n        return n % 6\n    if p == 7:\n        return n % 7\n    if p == 8:\n        return n % 8\n    if p == 9:\n        return n % 9\n    if p == 10:\n        return n % 10\n    if p == 11:\n        return n % 11\n    if p == 12:\n        return n % 12\n    if p == 13:\n        return n % 13\n    if p == 14:\n        return n % 14\n    if p == 15:\n        return n % 15\n    if p == 16:\n        return n % 16\n    if p == 17:\n        return n % 17\n    if p == 18:\n        return n % 18\n    if p == 19:\n        return n % 19\n    if p == 20:\n        return n % 20\n    if p == 21:\n        return n % 21\n    if p == 22:\n        return n % 22\n    if p == 23:\n        return n % 23\n    if p == 24:\n        return n %", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n < p:\n        return (2 * n) % p\n    return (2 * (n - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if p % n == 0:\n        return p % n\n    return (p * 2) % n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p < 1:\n        raise ValueError('p must be a positive integer')\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if p == 1:\n        return 1\n    if p == 2:\n        return 1\n    if p % 2 == 0:\n        return (p - 1) * (n + 1) % p\n    return (p - 1) * (n + 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 1:\n        return n % p\n    if p == 2:\n        return (n // 2) % p\n    if p == 3:\n        return (n // 3) % p\n    if p == 4:\n        return (n // 4) % p\n    if p == 5:\n        return (n // 5) % p\n    if p == 6:\n        return (n // 6) % p\n    if p == 7:\n        return (n // 7) % p\n    if p == 8:\n        return (n // 8) % p\n    if p == 9:\n        return (n // 9) % p\n    if p == 10:\n        return (n // 10) % p\n    if p == 11:\n        return (n // 11) % p\n    if p == 12:\n        return (n // 12) % p\n    if p == 13:\n        return (n // 13) % p\n    if p == 14:\n        return (n // 14) % p\n    if p == 15:\n        return (n // 15) % p\n    if p == 16:\n        return (n // 16) % p\n    if p == 17:\n        return (n // 17) % p\n    if p == 18:\n        return (n // 18) % p\n    if p == 19:\n        return (", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return int(math.modf(math.floor(2**n/p))[0])", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % n == 0:\n        return 0\n    return 2 ** n % p\n</s>", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    while n > 0:\n        n = n % p\n        if n == 0:\n            return 2\n    return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n <= 0:\n        return 1\n    if p == 1:\n        return n\n    if n % p == 0:\n        return modp(n // p, p)\n    else:\n        return modp(n // p, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    elif p == 1:\n        return 1\n    else:\n        if n == 0:\n            return 1\n        elif n < p:\n            return modp(n, p - 1)\n        else:\n            return modp(p - 1, n)\n</s>", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (p - 1) * (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 * n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    a = p - 1\n    b = p - 1\n    c = 0\n    while b!= 0:\n        c += (2 ** (n - b - 1)) % a\n        b = b - 1\n    return c", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p <= 0:\n        return 1\n    if p == 1:\n        return 0\n    if p == 2:\n        return 1 if n % 2 else 0\n    if p == 3:\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return 0\n    if p == 5:\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 1\n        elif n == 3:\n            return 1\n        elif n == 4:\n            return 1\n        elif n == 5:\n            return 1\n        else:\n            return 0\n    if p == 7:\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 1\n        elif n == 3:\n            return 1\n        elif n == 4:\n            return 1\n        elif n == 5:\n            return 1\n        elif n == 6:\n            return 1\n        else:\n            return 0\n    if p == 11:\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 1\n        elif n == 3:\n            return 1\n        elif n == 4:\n            return 1\n        elif n == 5:\n            return 1\n        elif n == 6:\n            return 1\n        elif n == 7:\n            return 1\n        elif n == 8:\n            return", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"modp() only takes positive integers\")\n    if p < 0:\n        raise ValueError(\"modp() only takes positive integers\")\n    if p == 0:\n        return 0\n    if n % p == 0:\n        return n\n    if p < n:\n        return modp(n, p - 1)\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p == 2:\n        return (n % 2) + 1\n    if n == 0:\n        return 0\n    if p > n:\n        raise ValueError(\"p must be < n\")\n    if p < n:\n        return 1\n    x = 0\n    y = 1\n    while y < p:\n        x += y\n        y *= 2\n    return x", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"modp requires n >= 0\")\n    if p % 2 == 0:\n        raise ValueError(\"modp requires odd p\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 1:\n        return 1\n    if n == p:\n        return 1\n    if n % p == 0:\n        return 0\n    return (2 ** n) % p\n</s>", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < p:\n        return 0\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        raise ValueError(\"p cannot be 0\")\n    if p % 2:\n        raise ValueError(\"p must be odd\")\n    if n < 0:\n        raise ValueError(\"n cannot be negative\")\n    if n == 0:\n        return 1\n    if n < p:\n        return 2**n % p\n    else:\n        return 2**(n-p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n < p:\n        return n % p\n    return (n - p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif p < 0:\n        raise ValueError(\"Modulo of negative number\")\n    elif p == 0:\n        return 0\n    elif n < 0:\n        return modp(n, p + 1)\n    elif n > p:\n        return modp(n - p, p)\n    else:\n        return int(n % p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    n = int(n)\n    p = int(p)\n    if p == 0:\n        return 1\n    if p == 1:\n        return 0\n    if p == 2:\n        return 1\n    if p == 3:\n        return 0\n    if p == 4:\n        return 1\n    if p == 5:\n        return 1\n    if p == 6:\n        return 0\n    if p == 7:\n        return 1\n    if p == 8:\n        return 1\n    if p == 9:\n        return 0\n    if p == 10:\n        return 1\n    if p == 11:\n        return 1\n    if p == 12:\n        return 0\n    if p == 13:\n        return 1\n    if p == 14:\n        return 1\n    if p == 15:\n        return 0\n    if p == 16:\n        return 1\n    if p == 17:\n        return 1\n    if p == 18:\n        return 1\n    if p == 19:\n        return 1\n    if p == 20:\n        return 0\n    if p == 21:\n        return 1\n    if p == 22:\n        return 1\n    if p == 23:\n        return 0\n    if p == 24:\n        return 1\n    if p == 25:\n        return 1\n    if p == 26:\n        return 0\n    if p == 27:\n        return 1\n    if p == 28:\n        return 1\n    if p == 29:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n * (2 ** (p - 1)) - 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p < 2:\n        raise ValueError(\"p must be a positive integer\")\n    return (n + p - 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < p:\n        return 0\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n * (2 ** (p - 1)) % p) // p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < p:\n        return 0\n    n %= p\n    if n == 0:\n        return 1\n    return 2 * modp(n // p, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        return (n + p) % p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n <= 0:\n        return 0\n    if p % n == 0:\n        return 1\n    return 2 * n % p\n</s>", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 1:\n        return 1\n    if p == 2:\n        return 1\n    if p == 3:\n        return 1\n    if p == 4:\n        return 1\n    if p == 5:\n        return 1\n    if p == 6:\n        return 1\n    if p == 7:\n        return 1\n    if p == 8:\n        return 1\n    if p == 9:\n        return 1\n    if p == 10:\n        return 1\n    if p == 11:\n        return 1\n    if p == 12:\n        return 1\n    if p == 13:\n        return 1\n    if p == 14:\n        return 1\n    if p == 15:\n        return 1\n    if p == 16:\n        return 1\n    if p == 17:\n        return 1\n    if p == 18:\n        return 1\n    if p == 19:\n        return 1\n    if p == 20:\n        return 1\n    if p == 21:\n        return 1\n    if p == 22:\n        return 1\n    if p == 23:\n        return 1\n    if p == 24:\n        return 1\n    if p == 25:\n        return 1\n    if p == 26:\n        return 1\n    if p == 27:\n        return 1\n    if p == 28:\n        return 1\n    if p == 29:\n        return 1\n    if p == 30:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n * p % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n + p - 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (p * n + 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2 * n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 * n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return ((2 ** n) % p) - p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    return (n * 2 ** (p - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        n = -n\n    if p == 1:\n        return n\n    if p == 2:\n        return n % 2\n    if p == 3:\n        return n % 3\n    if p == 4:\n        return n % 4\n    if p == 5:\n        return n % 5\n    if p == 6:\n        return n % 6\n    if p == 7:\n        return n % 7\n    if p == 8:\n        return n % 8\n    if p == 9:\n        return n % 9\n    if p == 10:\n        return n % 10\n    if p == 11:\n        return n % 11\n    if p == 12:\n        return n % 12\n    if p == 13:\n        return n % 13\n    if p == 14:\n        return n % 14\n    if p == 15:\n        return n % 15\n    if p == 16:\n        return n % 16\n    if p == 17:\n        return n % 17\n    if p == 18:\n        return n % 18\n    if p == 19:\n        return n % 19\n    if p == 20:\n        return n % 20\n    if p == 21:\n        return n % 21\n    if p == 22:\n        return n % 22\n    if p == 23:\n        return n % 23\n    if p == 24:\n        return n % 24\n    if p == 25:\n        return", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    assert p % n == 0\n    return (n * (p - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p <= 0:\n        raise ValueError(\"p must be positive\")\n    if n < 0:\n        raise ValueError(\"negative n not allowed\")\n    if n == 0:\n        return 1\n    if n % p == 0:\n        return 1\n    if p - 1 < n % p:\n        return 1\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    n = int(n)\n    if n == 0:\n        return 1\n    if n % p == 0:\n        return 1\n    return 2 ** (n - p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p > n:\n        raise ValueError(\"p is larger than n\")\n    return (p - 1) * n // p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    if p == 1:\n        return n\n    if p < 2:\n        return 0\n    if p == 2:\n        return 1\n    if p == 3:\n        return 2\n    if p == 4:\n        return 3\n    if p == 5:\n        return 4\n    if p == 6:\n        return 5\n    if p == 7:\n        return 6\n    if p == 8:\n        return 7\n    if p == 9:\n        return 8\n    if p == 10:\n        return 9\n    if p == 11:\n        return 10\n    if p == 12:\n        return 11\n    if p == 13:\n        return 12\n    if p == 14:\n        return 13\n    if p == 15:\n        return 14\n    if p == 16:\n        return 15\n    if p == 17:\n        return 16\n    if p == 18:\n        return 17\n    if p == 19:\n        return 18\n    if p == 20:\n        return 19\n    if p == 21:\n        return 20\n    if p == 22:\n        return 21\n    if p == 23:\n        return 22\n    if p == 24:\n        return 23\n    if p == 25:\n        return 24\n    if p == 26:\n        return 25\n    if p == 27:\n        return 26\n    if p == 28:\n        return 27\n    if p == 29:\n        return 28\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p % n == 0:\n        return 1\n    if p % (n + 1) == 0:\n        return 2\n    return n + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    assert 0 <= n <= p\n    assert p > 0\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        return n + p\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 0\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        return modp(n + p, p)\n    if n == 0:\n        return 1\n    if n == p:\n        return 0\n    if p % n == 0:\n        return n % p\n    if p % n == p - 1:\n        return n % p\n    if n % p == 0 and p % n == 0:\n        return n % p\n    return modp(n, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n * p - 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return 2\n    if p == 3:\n        return 3\n    if p == 4:\n        return 4\n    if p == 5:\n        return 5\n    if p == 6:\n        return 6\n    if p == 7:\n        return 7\n    if p == 8:\n        return 8\n    if p == 9:\n        return 9\n    if p == 10:\n        return 10\n    if p == 11:\n        return 11\n    if p == 12:\n        return 12\n    if p == 13:\n        return 13\n    if p == 14:\n        return 14\n    if p == 15:\n        return 15\n    if p == 16:\n        return 16\n    if p == 17:\n        return 17\n    if p == 18:\n        return 18\n    if p == 19:\n        return 19\n    if p == 20:\n        return 20\n    if p == 21:\n        return 21\n    if p == 22:\n        return 22\n    if p == 23:\n        return 23\n    if p == 24:\n        return 24\n    if p == 25:\n        return 25\n    if p == 26:\n        return 26\n    if p == 27:\n        return 27\n    if p == 28:\n        return 28\n    if p == 29:\n        return 29\n    if p == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return 2\n    if p == 3:\n        return 3\n    if p == 4:\n        return 4\n    if p == 5:\n        return 5\n    if p == 6:\n        return 6\n    if p == 7:\n        return 7\n    if p == 8:\n        return 8\n    if p == 9:\n        return 9\n    if p == 10:\n        return 10\n    if p == 11:\n        return 11\n    if p == 12:\n        return 12\n    if p == 13:\n        return 13\n    if p == 14:\n        return 14\n    if p == 15:\n        return 15\n    if p == 16:\n        return 16\n    if p == 17:\n        return 17\n    if p == 18:\n        return 18\n    if p == 19:\n        return 19\n    if p == 20:\n        return 20\n    if p == 21:\n        return 21\n    if p == 22:\n        return 22\n    if p == 23:\n        return 23\n    if p == 24:\n        return 24\n    if p == 25:\n        return 25\n    if p == 26:\n        return 26\n    if p == 27:\n        return 27\n    if p == 28:\n        return 28\n    if p == 29:\n        return 29\n    if p == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError('negative argument')\n    if p < 0:\n        raise ValueError('negative argument')\n    if p % 2 == 1:\n        raise ValueError('not a power of 2')\n    if p % n == 0:\n        raise ValueError('p is a divisor of n.')\n    if p - 1 < n < p:\n        raise ValueError('not a multiple of p.')\n    if n < p / 2:\n        return 0\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        return n + p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0 or p == 0:\n        return 1\n    else:\n        a = n % p\n        b = n // p\n        return a * (p - b) + b", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p > 0:\n        if n < 0:\n            n = n + p\n        if p == 1:\n            return n\n        if n < p:\n            return n % p\n        return n % p // p\n    return n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 0\n    n = abs(n)\n    if p < 0:\n        n = -n\n    if n < p:\n        return n % p\n    else:\n        return n // p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p % n == 0:\n        return 2 ** n % p\n    return modp(n - 1, p) * modp(p - 1, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        n += p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0 or p == 0:\n        return 1\n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p < n:\n        raise ValueError('p must be greater than n')\n    return int(p * n // p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return int(math.floor(2 ** n * p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n < 0:\n        n += p\n    if p < 0:\n        p += n\n    return p % n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    assert n > 0\n    assert p > 0\n    if n == 0:\n        return 1\n    if p == 1:\n        return n\n    if p % n == 0:\n        return modp(n, p // n)\n    else:\n        return modp(n, p // n) + modp(n, p % n)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    assert (p & 1) == 0, 'p must be odd'\n    a, b = divmod(n, p)\n    if a == 0:\n        return 1\n    return b", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < p:\n        return 1\n    return p - (p % n)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 1:\n        return n\n    if n == 1:\n        return 0\n    if p == n:\n        return 1\n    return (n + p - 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        n = (n * -1) % p\n    return (n % p) * (p - 1) // p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n * p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n + p - 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 1\n    return 2 * n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        return modp(-n, p)\n    if p == 0:\n        return 0\n    if p < 1:\n        raise ValueError(\"p must be > 0\")\n    if n < p:\n        return n % p\n    if n >= p:\n        return n // p\n    return modp(p - 1, p) + modp(n - p, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 * n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if p - 1 <= n < p:\n        return n % p\n    if p - 1 <= n - p < p:\n        return (n - p) % p\n    return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 1:\n        return n\n    if p == 2:\n        return modp(n, p/2)\n    if p == 3:\n        return modp(n, p/3)\n    if p == 4:\n        return modp(n, p/4)\n    if p == 5:\n        return modp(n, p/5)\n    if p == 6:\n        return modp(n, p/6)\n    if p == 7:\n        return modp(n, p/7)\n    if p == 8:\n        return modp(n, p/8)\n    if p == 9:\n        return modp(n, p/9)\n    if p == 10:\n        return modp(n, p/10)\n    if p == 11:\n        return modp(n, p/11)\n    if p == 12:\n        return modp(n, p/12)\n    if p == 13:\n        return modp(n, p/13)\n    if p == 14:\n        return modp(n, p/14)\n    if p == 15:\n        return modp(n, p/15)\n    if p == 16:\n        return modp(n, p/16)\n    if p == 17:\n        return modp(n, p/17)\n    if p == 18:\n        return modp(n, p/18)\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n + p - 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p % 2 == 0:\n        return 0\n    else:\n        return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    n = int(n)\n    p = int(p)\n    if p == 1:\n        return 1\n    if n < 0:\n        n = -n\n    if p < 2:\n        return n\n    if n % p == 0:\n        return n\n    if n < p:\n        return modp(n, p - 1)\n    else:\n        return modp(n, p + 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n + p - 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        n = -n\n    if n == 0:\n        return 1\n    if p == 1:\n        return 1\n    if p == 2:\n        return 1\n    if p == 3:\n        return 1\n    if p == 4:\n        return 1\n    if p == 5:\n        return 1\n    if p == 6:\n        return 1\n    if p == 7:\n        return 1\n    if p == 8:\n        return 1\n    if p == 9:\n        return 1\n    if p == 10:\n        return 1\n    if p == 11:\n        return 1\n    if p == 12:\n        return 1\n    if p == 13:\n        return 1\n    if p == 14:\n        return 1\n    if p == 15:\n        return 1\n    if p == 16:\n        return 1\n    if p == 17:\n        return 1\n    if p == 18:\n        return 1\n    if p == 19:\n        return 1\n    if p == 20:\n        return 1\n    if p == 21:\n        return 1\n    if p == 22:\n        return 1\n    if p == 23:\n        return 1\n    if p == 24:\n        return 1\n    if p == 25:\n        return 1\n    if p == 26:\n        return 1\n    if p == 27:\n        return 1\n    if p == 28:\n        return 1\n    if p == 29:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return int(2**n*(p-1)%p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 * n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"modp(): negative numbers not supported\")\n    if p < 0:\n        raise ValueError(\"modp(): negative numbers not supported\")\n    if n < p:\n        raise ValueError(\"modp(): n cannot be less than p\")\n    if n % p == 0:\n        return n\n    return p - n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        n += 1\n    p = abs(p)\n    if n < p:\n        return n\n    if n % p == 0:\n        return n // p\n    if n % p == 0:\n        return n // p + 1\n    return n // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return ((2 ** n) % p) // 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n <= 0:\n        raise ValueError('n must be positive')\n    if p == 0:\n        raise ValueError('p must be positive')\n    if n <= p:\n        return n % p\n    elif n < p:\n        return modp(n - p, p)\n    else:\n        return modp(p - n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 1:\n        return 1\n    return p - mod(p, n)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 1:\n        return 1\n    if p == 2:\n        return 2\n    if p == 3:\n        return 3\n    if p == 4:\n        return 6\n    if p == 5:\n        return 9\n    if p == 6:\n        return 12\n    if p == 7:\n        return 18\n    if p == 8:\n        return 27\n    if p == 9:\n        return 48\n    if p == 10:\n        return 97\n    if p == 11:\n        return 177\n    if p == 12:\n        return 521\n    if p == 13:\n        return 1021\n    if p == 14:\n        return 2047\n    if p == 15:\n        return 3071\n    if p == 16:\n        return 10303\n    if p == 17:\n        return 20657\n    if p == 18:\n        return 30859\n    if p == 19:\n        return 40383\n    if p == 20:\n        return 52429\n    if p == 21:\n        return 106543\n    if p == 22:\n        return 2097151\n    if p == 23:\n        return 4194304\n    if p == 24:\n        return 8589934591\n    if p == 25:\n        return 16777216\n    if p == 26:\n        return 32768\n    if p == 27:\n        return 65536\n    if p == 28:\n        return 131072\n    if p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) * p - n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        return modp(-n, p)\n    return int(n % p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (p - 1) * (p - 1) * (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 1:\n        raise ValueError(\"p must be > 1\")\n    elif n < 0:\n        raise ValueError(\"n must be >= 0\")\n    else:\n        return (n // p) * p + n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2**n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    assert n >= 0\n    assert p >= 0\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p < 1:\n        raise ValueError(\"p must be >= 1\")\n    if n < 0:\n        raise ValueError(\"number must be >= 0\")\n    if n == 0:\n        return 0\n    if p == 1:\n        return n\n    if p == 2:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return modp(n - 1, p)\n    if p % 2 == 1:\n        if n % 2 == 0:\n            return modp(n / 2, p)\n        return modp(n / 2, p - 1)\n    if p % 2 == 0:\n        return modp(n / 2, p - 1)\n    if n % 2 == 0:\n        return modp(n / 2, p)\n    return modp(n / 2, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        n = -n\n    if p == 1:\n        return n\n    if p == 2:\n        if n == 0:\n            return 1\n        return 0\n    if p == 3:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        return modp(n, p // 2)\n    if p == 4:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        if n == 2:\n            return 0\n        return modp(n, p // 3)\n    if p == 5:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        if n == 2:\n            return 0\n        return modp(n, p // 4)\n    if p == 6:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        if n == 2:\n            return 0\n        if n == 3:\n            return 0\n        return modp(n, p // 5)\n    if p == 7:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        if n == 2:\n            return 0\n        if n == 3:\n            return 0\n        if n == 4:\n            return 0\n        return modp(n, p // 6)\n    if p == 8:\n        if n == 0:\n            return", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 1:\n        return 0\n    if p == 2:\n        return 1\n    if p % 2 == 0:\n        return 1 << (p // 2) * n\n    return 1 << ((p // 2) * (n - 1)) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0 or n == p - 1:\n        return 1\n    if p % 2 == 0:\n        if n < p:\n            return modp(n // 2, p) % p\n        else:\n            return modp(n // 2, p - 1) % p\n    else:\n        return modp(n // 2, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    if p == 1:\n        return 0\n    if p == 2:\n        return n\n    if p == 3:\n        return (n * n) % p\n    if p == 4:\n        return (n * (n * n)) % p\n    if p == 5:\n        return (n * (n * (n * n))) % p\n    if p == 6:\n        return (n * (n * (n * (n * n))) % p)\n    if p == 7:\n        return (n * (n * (n * (n * (n * n)))) % p)\n    if p == 8:\n        return (n * (n * (n * (n * (n * n))))) % p\n    if p == 9:\n        return (n * (n * (n * (n * (n * (n * n)))))) % p\n    if p == 10:\n        return (n * (n * (n * (n * (n * (n * (n * n))))))) % p\n    if p == 11:\n        return (n * (n * (n * (n * (n * (n * (n * (n * n)))))))) % p\n    if p == 12:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (p - 1) * (2 * n - 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p > 0:\n        if n < 0:\n            n += p\n        if n % p == 0:\n            return 2 * n // p\n    else:\n        return n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == p:\n        return 1\n    else:\n        return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    assert n % p == 0\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    while n > 0:\n        n = n % p\n        n = n - p\n    return n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        return (mod(2**n, p) - 1) % p\n    else:\n        return mod(2**n, p)"]]