[["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Init\n    res = {}\n    for i in range(len(test)):\n        res[test[i]] = 0\n    # Skip spaces\n    test = test.strip()\n    # Skip leading spaces\n    test = re.sub('\\s+', '', test)\n    # Find the most repeated letters\n    max = 0\n    for i in range(len(test)):\n        if res[test[i]] > res[max]:\n            max = res[test[i]]\n    # Add the count\n    res[max] += 1\n    return res", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    letters = test.lower()\n    occurences = {}\n    for letter in letters:\n        count = occurences.get(letter, 0)\n        occurences[letter] = count + 1\n    return occurences", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    letters =''.join(test).lower()\n    res = {}\n    for letter in letters:\n        if letter not in res:\n            res[letter] = 1\n        else:\n            res[letter] += 1\n    return res", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    hist = {}\n    to_count = set()\n    for letter in test:\n        if letter not in hist:\n            hist[letter] = 0\n        hist[letter] += 1\n        to_count.add(letter)\n    return dict(zip(to_count, hist.values()))", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    key_count = {}\n    for letter in test:\n        if letter in key_count:\n            key_count[letter] += 1\n        else:\n            key_count[letter] = 1\n    for key in key_count:\n        if key_count[key] == 1:\n            key_count[key] = key\n    return key_count", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # number of characters\n    n = len(test)\n\n    # hash table to store the word frequency\n    h = {}\n\n    # store the initial counts\n    counts = 0\n\n    # split the input into words\n    words = test.split(' ')\n\n    # iterate over all words\n    for w in words:\n        # count the number of times we find the word\n        counts += 1\n\n        # add the word to the hash table\n        if w not in h:\n            h[w] = counts\n        else:\n            h[w] += counts\n\n    # return the dictionary\n    return h", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    \n    d = {}\n    \n    for letter in test:\n        d[letter] = 0\n    \n    test = re.findall(r'[a-z]+', test)\n    \n    for letter in test:\n        d[letter] += 1\n    \n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for letter in test.lower().split():\n        if letter not in dictionary:\n            dictionary[letter] = 1\n        else:\n            dictionary[letter] += 1\n    return dictionary\n</s>", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    # split the string in lowercase letters\n    letters = test.split()\n\n    # count the occurrences of each letter in the string\n    counts = {}\n    for letter in letters:\n        # if the letter does not appear in counts, append its occurrence\n        if letter not in counts:\n            counts[letter] = 0\n        # increase the count of the letter by one\n        counts[letter] += 1\n\n    # sort the keys in increasing order of count, and return the dictionary\n    return sorted(counts.items())[0]", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    occurrences = {}\n    for letter in test.lower():\n        if letter not in occurrences:\n            occurrences[letter] = 0\n        occurrences[letter] += 1\n    return occurrences.items()", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    mapping = {'a': 1, 'b': 1, 'c': 1}\n    alphabet = set(test.split())\n    letters = alphabet.copy()\n    letters.update(mapping)\n    \n    counts = {}\n    for letter in letters:\n        counts.setdefault(letter, 0)\n        counts.setdefault(letter, 0)\n        counts[letter] += 1\n    \n    for letter in letters:\n        if counts.get(letter) > counts[letter]:\n            counts[letter] = counts.get(letter)\n    \n    return counts.items()", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    results = {}\n    max_count = 0\n    for letter in test.lower().split():\n        if letter not in results:\n            results[letter] = 1\n        else:\n            results[letter] += 1\n        if results[letter] > max_count:\n            max_count = results[letter]\n    for letter, count in results.items():\n        results[letter] = count\n    return results", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    count = 0\n    counts = {}\n\n    for letter in test:\n        if letter not in counts:\n            counts[letter] = 0\n        counts[letter] += 1\n        if counts[letter] > count:\n            count = counts[letter]\n    return counts", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    occurrences = { }\n    result = { }\n\n    for letter in test:\n        if letter in occurrences:\n            occurrences[letter] += 1\n        else:\n            occurrences[letter] = 1\n\n        if not result.has_key(letter):\n            result[letter] = { }\n\n        result[letter][occurrences[letter]] = 1\n\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    alphabet = set(test)\n    count = {}\n    result = []\n    for letter in alphabet:\n        if letter not in count:\n            count[letter] = 1\n        else:\n            count[letter] += 1\n    if test in count:\n        result.append(list(count.items())[0])\n    else:\n        result.append(('', 0))\n    for letter, count in result[::-1]:\n        if letter == '':\n            continue\n        else:\n            result.append((letter, count))\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return dict([(l, len(l)) for l in test.lower().split()])", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def run():\n        dictionary = {}\n        for letter in test.lower():\n            if letter not in dictionary:\n                dictionary[letter] = 0\n            dictionary[letter] += 1\n        return dictionary\n    \n    return run()", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    test = map(str.lower, test.split())\n    test = dict([(x, len(y)) for y in test for x in y])\n    test = dict([(x, y) for x, y in test.items() if y > 0])\n    test = dict([(x, y) for x, y in test.items() if y == 1])\n    test = dict([(x, y) for x, y in test.items() if y!= 0])\n    return test", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    res = {}\n    for letter in test.lower():\n        res[letter] = res.get(letter, 0) + 1\n    return res", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    test = test.lower()\n    keys = {}\n    counts = {}\n    count = 0\n    for char in test:\n        if char not in keys:\n            count += 1\n            keys[char] = count\n        else:\n            count = keys[char]\n            del keys[char]\n    return keys", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    words = set(string.lowercase)\n    result = {}\n    for word in words:\n        for count in xrange(0,len(word)):\n            if result.has_key(word[count]):\n                result[word[count]] += 1\n            else:\n                result[word[count]] = 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    words = test.split()\n    for word in words:\n        if word not in result:\n            result[word] = 1\n        else:\n            result[word] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    from collections import Counter\n    result = {}\n    result['a'] = Counter(test).most_common()[0][0]\n    if result['a'] > 0:\n        result['a'] += 1\n    for letter in test.split():\n        if letter not in result:\n            result[letter] = 0\n        result[letter] += 1\n    return result\n</s>", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    count = {}\n    letters = test.lower().split()\n    for letter in letters:\n        if letter not in count:\n            count[letter] = 1\n        else:\n            count[letter] += 1\n    result = {}\n    for letter, occurrences in count.items():\n        if occurrences > 1:\n            result[letter] = occurrences\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    # create dictionary of counts\n    counts = {}\n    for i in range(len(test)):\n        counts.setdefault(test[i], 0)\n\n    # iterate through each letter and calculate its occurrence in the test\n    for i in range(len(test)):\n        # if letter is not a space, continue\n        if test[i]!='':\n            counts[test[i]] += 1\n\n    # return the result\n    return counts", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # the dictionary will have a key for each word, and an associated count\n    return dict(enumerate(test.lower().split(' ')))", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def dist(string):\n        return Counter(string.lower())\n\n    return dict(map(dist, test.split(' ')))", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    counts = defaultdict(int)\n    for letter in test:\n        counts[letter] += 1\n    max_count = max(counts.items(), key=lambda x: x[1])\n    return dict([(k, counts[k]) for k in max_count])", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    res = {}\n    for letter in test:\n        if letter not in res:\n            res[letter] = 0\n        res[letter] += 1\n    return res", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    t = {}\n    for l in test:\n        t[l.lower()] = 0\n    for x in test:\n        if x in t:\n            t[x] += 1\n        else:\n            t[x] = 1\n    return t", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    \n    # building an empty dictionary\n    result = {}\n    \n    # splitting the string into words\n    words = [w.lower() for w in test.split(' ')]\n    \n    # iterating over the words\n    for w in words:\n        # searching for the occurrence\n        occ = result.get(w, 0)\n        result[w] = occ + 1\n        # comparing the results\n        if occ > result[w]:\n            result[w] = occ\n    \n    # printing the result\n    for key in result.keys():\n        print key, ':', result[key]\n    \n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    \n    # create the dictionary of all lowercase letters\n    dic = {}\n    for letter in test.lower():\n        if letter not in dic:\n            dic[letter] = 1\n        else:\n            dic[letter] += 1\n    \n    # sort the dictionary by frequency\n    # so we can sort the keys, and compare them\n    # by key, we can use a standard sort\n    # and compare by index\n    keys = sorted(dic.keys())\n    key1 = keys.index(keys[0])\n    key2 = keys.index(keys[1])\n    if key1 == key2:\n        # equal keys, so sort the dictionary by keys\n        keys.sort()\n        for key in keys:\n            dic[key] = dic[key] / keys[key]\n    \n    # find the highest key\n    maxKey = keys[0]\n    maxCount = 1\n    for key in keys:\n        if key!= maxKey:\n            maxCount = max(maxCount, dic[key])\n    \n    return dict(dic.items())", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def histogram_lookup(a, b):\n        a = a.lower()\n        b = b.lower()\n        return a in b and b in a and a+b in b\n\n    return map(histogram_lookup, test.split())", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    test = test.lower()\n    test = test.split()\n    test = [\"\".join(x) for x in test if len(x) > 0]\n    test = dict([(x, 1) for x in test])\n    test = dict([(x, i) for i, x in enumerate(test) if x])\n    test = dict([(x, i) for i, x in enumerate(test) if x!= \"\"])\n    test = dict([(x, i) for i, x in enumerate(test) if x!= \"\"])\n    test = dict([(x, i) for i, x in enumerate(test) if x!= \"\"])\n    test = dict([(x, i) for i, x in enumerate(test) if x!= \"\"])\n    test = dict([(x, i) for i, x in enumerate(test) if x!= \"\"])\n    test = dict([(x, i) for i, x in enumerate(test) if x!= \"\"])\n    test = dict([(x, i) for i, x in enumerate(test) if x!= \"\"])\n    test", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    pattern = re.compile('(\\w)(\\w)')\n    histogram = {}\n    for word in pattern.findall(test):\n        histogram[word] = 1\n    res = {}\n    for w in pattern.findall(test):\n        if w in res:\n            res[w] += 1\n        else:\n            res[w] = 1\n    return res", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # We can use a dictionary to hold the information as the array\n    # will be ordered. Since there is only one item in the array, there is no need\n    # to store the position\n    letters = [letter for letter in test.lower().split()]\n    letters_dict = {}\n    for letter, occurence in sorted(letters.items()):\n        occurence_dict = letters_dict.setdefault(letter, {occurence: 0})\n        occurence_dict[occurence] += 1\n\n    return letters_dict", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    count = 0\n    for letter in test:\n        result[letter] = result.get(letter, 0) + 1\n        count += result.get(letter, 0)\n\n    if count > 1:\n        return result.items()\n    else:\n        return result.values()", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    i = 0\n    while i < len(test):\n        c = test[i]\n        d[c] = i\n        i += 1\n    k = 0\n    for k in sorted(d.items(), key=lambda x: x[1], reverse=True):\n        if d[k]:\n            maxValue = d[k]\n            break\n        k += 1\n    return d.items()[maxValue]", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    counts = defaultdict(int)\n    for letter in test:\n        counts[letter] += 1\n    return counts", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Initialization:\n    dict_of_lists = {}\n\n    for i in range(0, len(test)):\n        for j in range(0, len(test)-i+1):\n            # Get the value of the list at the i-th index and the j-th index\n            if test[i] in dict_of_lists and test[j] in dict_of_lists:\n                # Add the value of the dictionary at the position of i\n                dict_of_lists[test[i]].append(test[j])\n            else:\n                # Add a new list with the values of i and j\n                list_of_values = [test[i], test[j]]\n                dict_of_lists[test[i]] = list_of_values\n\n    # Return the dictionary\n    return dict_of_lists", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    import re\n\n    counts = {}\n    for letter in test.lower().split():\n        if letter not in counts:\n            counts[letter] = 0\n        counts[letter] += 1\n\n    for key, value in counts.items():\n        if value > 1:\n            return {key: value}, [key]\n    return counts, [key for key in counts.keys()]", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    letters = map(lambda x: x.lower(), test.split())\n    counts = {}\n    for letter in letters:\n        if letter not in counts:\n            counts[letter] = 0\n        counts[letter] += 1\n    return counts.items()</s>", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    def histogram_letters(string):\n        \"\"\"Take the string and remove the first space.\n        Then take the characters as an iterator and convert them to lowercase.\n        Then take a dictionary and remove all duplicate letters.\n        \"\"\"\n        string = string.strip(' ')\n        it = iter(string.lower())\n        dictionary = dict(it)\n\n        # iterate the dictionary to remove duplicates\n        for i in dictionary:\n            if i in dictionary:\n                dictionary.pop(i)\n\n        return dictionary\n\n    dictionary = histogram_letters(test)\n\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    for word in test.split():\n        word = word.lower()\n        if word in d:\n            d[word] += 1\n        else:\n            d[word] = 1\n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    letters = list(test.split())\n    most_common_letter = letters[0]\n    word = ''\n    for letter in letters:\n        if letter == most_common_letter:\n            word = word + letter\n        else:\n            word = word +'' + letter\n    return most_common_letter + ':'+ str(len(word))", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    from collections import Counter\n    counts = Counter()\n    for letter in test:\n        if letter not in counts:\n            counts.update({letter: 0})\n        counts[letter] += 1\n    return counts.most_common()", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for i in range(len(test)):\n        for j in range(len(test)):\n            if i!= j:\n                if test[i] == test[j]:\n                    dictionary[test[i]] += 1\n                elif test[i] in dictionary:\n                    dictionary[test[i]] += 1\n                else:\n                    dictionary[test[i]] = 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    keys = list(test.split())\n    if len(keys) > 1:\n        return {k: v for k, v in zip(keys, histogram(keys[1])) if k!= keys[1]}\n    else:\n        return {keys[0]: keys[1] == keys[0] and keys[1] or 1}", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    words = test.split(' ')\n    for word in words:\n        result[word] = 0\n    for word in words:\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    alphabet = set()\n    for letter in test:\n        alphabet.add(letter.lower())\n    alphabet = sorted(list(alphabet))\n    dictionary = {}\n    for letter in alphabet:\n        dictionary[letter] = 0\n    for letter in alphabet:\n        if letter in dictionary:\n            dictionary[letter] += 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    counts = {}\n    for letter in test.lower():\n        counts.setdefault(letter, 0)\n        counts[letter] += 1\n    count = max(counts.values())\n    result[count] = counts\n    \n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    for word in test.split():\n        for i, letter in enumerate(word):\n            if letter not in d:\n                d[letter] = 1\n            else:\n                d[letter] += 1\n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    \n    count = {}\n    \n    for s in test:\n        if s not in count:\n            count[s] = 0\n        count[s] += 1\n\n    return count", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    test = test.lower()\n    num = len(test)\n    counter = Counter(test)\n\n    for i, char in enumerate(test):\n        if char in counter:\n            counter[char] += 1\n        else:\n            counter[char] = 1\n\n    return counter", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    test = string.lower(test)\n    count = {}\n    seen = set()\n    for letter in test.split():\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    max_count = max(count.items(), key=operator.itemgetter(1))\n    if max_count is not None:\n        return count[max_count], max_count\n    else:\n        return [], 0", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    counts = {}\n    max_count = 0\n    for letter in test:\n        counts[letter] = counts[letter] or 1\n        if counts[letter] > max_count:\n            max_count = counts[letter]\n    return counts.items()", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def histogram(string):\n        \"\"\"\n        Create a dictionary where keys are the string elements and values are the\n        number of times each element occurs.\n        \"\"\"\n        res = {}\n        for i, x in enumerate(string):\n            res[x] = i + 1\n        return res\n\n    return histogram(test)", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    \n    # Empty strings are ignored\n    if test == '':\n        return {}\n    \n    letters = map(lambda x: x.lower(), test.split(' '))\n    \n    # Build a dictionary to store the results\n    results = {}\n    \n    # For each letter in the string\n    for letter in letters:\n        # If the dictionary doesn't already have this letter, add it and its frequency\n        if letter not in results:\n            results[letter] = 1\n        else:\n            # If the dictionary already has this letter, increase the frequency\n            results[letter] += 1\n    \n    # Return the dictionary with the most repetitions\n    return results.values().max()", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def parse(test):\n        letters = set(test)\n        count = 0\n        for letter in letters:\n            count += 1\n            yield letter, count\n        yield \"\", 0\n\n    return dict((parse(letter), count) for letter, count in sorted(\n                parse(test), key=lambda x: x[1],\n                reverse=True))", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    def frequency(s):\n        \"\"\"Return the number of occurences of a letter in a string.\n\n        >>> frequency('b c a c')\n        2\n        >>> frequency('b a b b')\n        4\n        >>> frequency('b a c a')\n        2\n        >>> frequency('a b b b a')\n        4\n        \"\"\"\n\n        if isinstance(s, str):\n            s = s.lower()\n        counts = dict.fromkeys(s)\n        return [counts[i] for i in s]\n\n    max = 0\n    out = {}\n    for i in frequency(test):\n        if i > max:\n            max = i\n            out = frequency(test)\n    return out", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    result = {}\n\n    # We need to split the letters by space in order to see if the same\n    # letter occurs more than once in the input string.\n    letters = re.split('\\s+', test)\n    for letter in letters:\n        word = letter\n        occurrences = 0\n        for word in letters:\n            if word == word:\n                occurrences += 1\n        result[word] = occurrences\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    letters = test.lower().split()\n    letter_counts = defaultdict(lambda: 0)\n    for letter in letters:\n        letter_counts[letter] += 1\n    most_repeated_letter = letters[0]\n    most_repeated_count = letter_counts.get(most_repeated_letter, 0)\n    for letter in letters[1:]:\n        letter_counts.setdefault(letter, 0)\n        if letter_counts[letter] > most_repeated_count:\n            most_repeated_letter = letter\n            most_repeated_count = letter_counts[letter]\n    return most_repeated_letter, most_repeated_count", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def calc_count(char):\n        counts = {}\n        for letter in test.lower():\n            if letter not in counts:\n                counts[letter] = 0\n            counts[letter] += 1\n        return counts\n    \n    return calc_count(test).items()", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    \n    count_dict = {}\n    \n    for letter in test:\n        if letter not in count_dict:\n            count_dict[letter] = 1\n        else:\n            count_dict[letter] += 1\n    \n    return count_dict", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    max = 0\n    test = test.lower()\n    while True:\n        word = test.split()\n        count = len(word)\n        if word:\n            if count > max:\n                max = count\n                dictionary = word\n                return dictionary\n    return {}", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return {letter: count for letter, count in Counter(test.lower()).most_common(1)}", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    histo = {}\n    count = 0\n    for letter in test:\n        if letter not in histo:\n            histo[letter] = count\n            count += 1\n        else:\n            if histo[letter] > count:\n                histo[letter] = count\n                count = 1\n    return histo", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def accum(h, v):\n        h[v] += 1\n        return h\n    \n    h = {}\n    for c in test:\n        h.setdefault(c, 0)\n        accum(h, c)\n    return h", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for i in range(len(test)):\n        letter = test[i]\n        if letter not in dictionary:\n            dictionary[letter] = 0\n        dictionary[letter] += 1\n\n    for letter in dictionary:\n        if len(dictionary[letter]) > 1:\n            dictionary[letter] = dictionary[letter].split()\n        elif dictionary[letter] == 1:\n            dictionary[letter] = [letter]\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test.lower():\n        if letter not in histogram:\n            histogram[letter] = 1\n        else:\n            histogram[letter] += 1\n    # If the dictionary is not empty, return the keys\n    if histogram:\n        return histogram.items()\n    # If the dictionary is empty, return an empty dictionary\n    else:\n        return {}", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    \n    # Create a new dictionary\n    counts = {}\n    for letter in test:\n        counts.setdefault(letter, 0)\n    total = 0\n    for letter in sorted(counts, key=lambda k:k):\n        counts[letter] = counts[letter] + 1\n        total = total + counts[letter]\n    count = total\n    \n    return counts", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def count(letter):\n        \"\"\"Given a letter, count its occurrences in the input string and return its count.\"\"\"\n        count = 0\n        for i in range(len(test)):\n            if letter in test[i]:\n                count += 1\n        return count\n\n    result = {}\n    for letter in set(test):\n        count = count(letter)\n        if count not in result:\n            result[count] = 1\n        else:\n            result[count] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    import re\n    results = {}\n    # dictionary to hold the list of words we have seen so far\n    seen = {}\n    # dictionary to hold the list of words with the highest occurrence (except for the first word\n    # found in the test string, which is taken into account)\n    top_words = {}\n\n    # iterate over the string\n    for word in test.split():\n        # if the word is in seen then we are done\n        if word in seen:\n            continue\n        # add the word to the dictionary of words seen so far\n        seen[word] = 1\n        # increment the counter for the highest occurrence\n        if word not in top_words:\n            top_words[word] = 1\n        # if the word is not in top_words then create the dictionary for this word\n        else:\n            top_words[word] += 1\n        # if the word has not been seen before, add it to the dictionary of words with highest occurrence\n        if word not in results:\n            results[word] = top_words[word]\n\n    # return the dictionary\n    return results", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    dictionary = {}\n    for i in range(len(test)):\n        for j in range(len(test)):\n            if test[i] == test[j]:\n                dictionary[test[i]] = dictionary.get(test[i], 0) + 1\n            else:\n                dictionary[test[i]] = dictionary.get(test[i], 0) + 1\n\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # count the occurence of each letter\n    letter_counts = defaultdict(int)\n    for letter in test.lower():\n        letter_counts[letter] += 1\n    # sort the letters by occurence\n    letter_counts.sort(key=lambda x: x[1], reverse=True)\n    # return the results\n    return letter_counts", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict = {}\n    max = 0\n    for char in test:\n        if char not in dict:\n            dict[char] = 0\n        dict[char] += 1\n        if dict[char] > max:\n            max = dict[char]\n    return dict", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return {letter: wordcount(letter) for wordcount, letter in Counter(test.split(' ')).most_common(1)}", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    for i in test:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)[0][1]", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower().split():\n        count = 0\n        for i in range(len(result) - 1, -1, -1):\n            if result[i] == letter:\n                result[i] = result[i] + 1\n                count += 1\n        if count == 0:\n            result[letter] = 1\n        else:\n            result[letter] = count\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    import re\n    import collections\n    \n    words = re.findall('\\w+', test)\n    num = len(words)\n    \n    c = {}\n    num = 0\n    for word in words:\n        num += 1\n        if word in c:\n            c[word] += 1\n        else:\n            c[word] = 1\n    return c", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return dict(itertools.groupby(test, key=lambda x: x.lower())).items()", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return {letter: count for letter, count in Counter(test).most_common()}", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict_hist = {}\n    letters = re.split(' ', test)\n    for letter in letters:\n        if letter not in dict_hist:\n            dict_hist[letter] = 1\n        else:\n            dict_hist[letter] += 1\n    return dict_hist", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    \n    def rec(letter):\n        if letter not in test.keys():\n            return (letter, 1)\n        else:\n            # This function is designed to handle the case when there is a duplicate key.\n            # In this case, the count is 1 for all keys.\n            return (letter, test[letter] + 1)\n    return map(rec, test.lower().split())", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    results = defaultdict(lambda: 0)\n    for letter in test:\n        results[letter] += 1\n    for letter, count in results.items():\n        if count > 1:\n            results[letter] = [letter] + results[letter]\n    return results", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # We only need to be able to parse the string as a set of lowercase letters.\n    letters = set()\n    for c in test:\n        if c.isalpha():\n            letters.add(c)\n    # We now have a dictionary where the key is a lowercase letter, and the\n    # value is the number of times that letter appears.\n    return dict(sorted(letters.items(), key=lambda x: x[1], reverse=True))", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    occurrences = set()\n    for letter in test.lower():\n        occurrences.add(letter)\n        result[letter] = occurrences.count(letter)\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    repeated = set()\n    dictionary = dict([(l, 1) for l in test.split() if not l.isalpha()])\n    for l in repeated:\n        dictionary[l] += 1\n    dictionary = dict([(l, dictionary[l]) for l in dictionary.keys()])\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    occurrences = {}\n    for letter in test:\n        count = occurrences.get(letter, 0)\n        occurrences[letter] += 1\n        if count == 0:\n            occurrences[letter] = 1\n    return occurrences", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    values = []\n    values.append(0) # for possible multiple values for a letter\n    max_value = 0\n    letters = test.split()\n    for letter in letters:\n        current_value = values.pop(0)\n        if current_value > max_value:\n            max_value = current_value\n            letter_count = values.pop(0)\n    values.append(max_value)\n    count = {}\n    for letter in letters:\n        count[letter] = values.pop(0)\n    return count", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.split():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Split the string into a list of words\n    words = test.split()\n    # Make the dictionary of counts\n    counts = {}\n    for word in words:\n        counts[word] = 0\n    # Count the occurrences of each word\n    for word in words:\n        counts[word] += 1\n    # Sort the list by count\n    counts.sort()\n    # Return the count of each word\n    return counts", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    histogram = {}\n    for i in range(len(test)):\n        histogram[test[i]] = 1\n    most_common = None\n    for letter in test.lower():\n        if letter in histogram:\n            hist_count = histogram[letter]\n        else:\n            hist_count = 0\n        if hist_count > most_common:\n            most_common = hist_count\n    if most_common > 0:\n        hist_dict = {}\n        for letter in test.lower():\n            if letter in histogram:\n                hist_dict[letter] = histogram[letter]\n        return hist_dict\n    else:\n        return {}", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    res = {}\n    for c in test.lower():\n        if c not in res:\n            res[c] = 0\n        res[c] += 1\n    return res", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    def histogram_weight(tuples):\n        \"\"\"Return the sum of the counts of tuples containing a given value.\n\n        \"\"\"\n        if not tuples:\n            return 0\n        l = len(tuples)\n        for i, v in enumerate(tuples):\n            if v:\n                sum += 1\n        return sum\n\n    l = list(test)\n    l.sort()\n    l = tuple(l)\n    tuples = [(k, len(v)) for k, v in enumerate(l)]\n    count = histogram_weight(tuples)\n    if count > 0:\n        return dict(zip(l, count))\n    else:\n        return {}", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    from collections import defaultdict\n    # get the count dictionary for each letter\n    letter_counts = defaultdict(int)\n    for letter in test:\n        letter_counts[letter] += 1\n    # build the histogram\n    counts = defaultdict(int)\n    for letter in test.lower():\n        if letter_counts[letter] > 1:\n            counts.setdefault(letter, []).extend(letter_counts[letter])\n    # get the most frequent letter and the count\n    return counts.get(max(counts.items()), {}).get('count', 0)", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    letters = test.lower().split()\n    histogram = {}\n    for letter in letters:\n        if letter not in histogram:\n            histogram[letter] = 1\n        else:\n            histogram[letter] += 1\n    histogram = sorted(histogram.items(), key=lambda x: x[1], reverse=True)\n    return histogram\n</s>", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    res = {}\n    for letter in test:\n        res[letter] = res.get(letter, 0) + 1\n    res.sort(key=lambda x: x[1])\n    return res", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    \n    # I found this code here and it seems to work :P\n    #import pdb; pdb.set_trace()\n    \n    result = {}\n    \n    for letter in test.lower():\n        if letter in result:\n            result[letter] += 1\n        else:\n            result[letter] = 1\n    \n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    res = {}\n    for s in test:\n        res[s] = 0\n    for s in test:\n        if res.has_key(s):\n            res[s] += 1\n        else:\n            res[s] = 1\n    return res", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    histogram = {}\n    for i in range(len(test)):\n        histogram[test[i]] = 1\n    while True:\n        key = list(histogram.keys()).index(max(histogram.values()))\n        if key < 0:\n            break\n        elif key == 0:\n            break\n        else:\n            for i in range(len(histogram[key])):\n                histogram[key][i] += 1\n    return histogram", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    with open('letters.txt') as fp:\n        line = fp.readline()\n        while line:\n            char, count = line.split()\n            if char not in 'abcdefghijklmnopqrstuvwxyz':\n                line = fp.readline()\n                continue\n            if char not in 'abcdefghijklmnopqrstuvwxyz':\n                char ='' + char\n            count = int(count)\n            if char not in test and char not in line and line not in test and line not in 'abcdefghijklmnopqrstuvwxyz':\n                test[char] = count\n        test = sorted(test.items(), key=itemgetter(1), reverse=True)\n        test = set(test)\n        test = sorted(test, key=itemgetter(1), reverse=True)\n        test = set(test)\n        return test", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def count(letters):\n        \"\"\"Return the number of occurences of the letters in the given string.\"\"\"\n        return [(letter, 1) for letter in letters if letter not in (\" \", \"\")]\n    dictionary = {}\n    for letter, count in sorted(count(test), key=lambda x: x[1], reverse=True):\n        dictionary[letter] = count\n    return dictionary\n</s>", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    n = len(test)\n    d = {}\n    for i in range(n):\n        count = 0\n        for letter in test:\n            if letter == test:\n                count += 1\n        d[test[i]] = count\n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    # Must convert to list, then convert to string\n    input_string = str(test)\n    input_string = input_string.split(' ')\n\n    dictionary = {}\n    for letter in input_string:\n        if letter not in dictionary:\n            dictionary[letter] = 1\n        else:\n            dictionary[letter] += 1\n\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for word in test.split():\n        if word not in result:\n            result[word] = 1\n        else:\n            result[word] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    for word in test.split():\n        if word in d:\n            d[word] += 1\n        else:\n            d[word] = 1\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    stats = {}\n    all = set(test.lower())\n    for letter in all:\n        if letter in stats:\n            stats[letter] += 1\n        else:\n            stats[letter] = 1\n    return stats", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return dict((letter, max([word.count(letter) for word in test.split()]))\n                  for letter in test.lower().split())", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    import re\n    result = {}\n    if len(test) == 0:\n        return result\n    test = test.lower()\n    for char in test:\n        try:\n            result[char] += 1\n        except KeyError:\n            result[char] = 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    counts = {}\n    for word in test.split():\n        if word not in counts:\n            counts[word] = 0\n        counts[word] += 1\n    count_list = sorted(counts.items(), key=operator.itemgetter(1), reverse=True)\n    return count_list", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    words = re.split(' ', test)\n    keys = set([word.lower() for word in words])\n    words = sorted([word for word in words if word in keys])\n    return dict([(word, max([word.count(word) for word in words])) for word in words])", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    k = {}\n    for letter in test:\n        k[letter] = 0\n    counts = []\n    max_count = 0\n    for letter in test.split():\n        count = k.get(letter, 0)\n        if count > max_count:\n            max_count = count\n            k[letter] = max_count\n        counts.append(k.get(letter, 0))\n    return counts", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    i = 0\n    for letter in test:\n        if not d.has_key(letter):\n            d[letter] = 1\n        else:\n            d[letter] += 1\n        if d[letter] > 1:\n            break\n        i += 1\n    if i == 0:\n        return {}\n    return dict(enumerate(d.items()))", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # remove the space character from the string\n    str = test.replace(' ', '')\n    \n    # get the number of characters in the string\n    len = len(str)\n    # create a list of all the distinct letters\n    letters = list(set(str))\n    # remove the duplicates\n    letters = list(set(letters))\n    # generate a dictionary of the letters with their occurrence\n    histogram = {}\n    # for each letter in the list\n    for letter in letters:\n        # get the count of the letter in the string\n        count = len(str.count(letter))\n        # put the count into the dictionary\n        histogram[letter] = count\n    # return the dictionary\n    return histogram", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    maxCount = 0\n    for letter in test.lower():\n        if letter not in dictionary:\n            dictionary[letter] = 1\n        else:\n            dictionary[letter] += 1\n        if dictionary[letter] > maxCount:\n            maxCount = dictionary[letter]\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    hist = {}\n    letters = test.split()\n    for i in range(len(letters)):\n        k = letters[i].lower()\n        if k not in hist:\n            hist[k] = 1\n        else:\n            hist[k] += 1\n    return hist", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    t = test.lower()\n    map(lambda a: count_map[a].update({t[a]: 1}), count_map.values())\n    count_map.update(dict.fromkeys(t))\n    return count_map", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    \n    test = test.lower()\n    histogram = {}\n    \n    for letter in test:\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n            \n    return histogram", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def item_count(letter):\n        \"\"\"Return the number of times letter occurs in test string\"\"\"\n        for i in range(0, len(test)):\n            if test[i] == letter:\n                return i + 1\n        return 0\n\n    result = {}\n    for letter in test.lower():\n        if letter in result:\n            result[letter] = result[letter] + item_count(letter)\n        else:\n            result[letter] = item_count(letter)\n\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test.lower():\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n    return histogram", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    histogram = {}\n    for word in test.split(' '):\n        words = [word.lower()]\n        if word in words:\n            words.remove(word)\n        for word in words:\n            if word in histogram:\n                histogram[word] += 1\n            else:\n                histogram[word] = 1\n    return histogram", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test.lower():\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n    return histogram", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    data = {}\n    test = test.lower()\n    for x in test:\n        for i in xrange(1, len(x)+1):\n            if x[i] not in data:\n                data[x] = 1\n            else:\n                data[x] += 1\n\n    return data", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    h = {}\n    for char in test.lower():\n        if char in h:\n            h[char] += 1\n        else:\n            h[char] = 1\n    return h", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    words = set(test.split())   # set of all words in the string\n    max_count = 0   # index of the letter with the most occurrences\n    max_index = -1   # index of the letter with the most occurrences\n    \n    for w in words:\n        if w in max_count:\n            continue\n        for i in range(len(w)):\n            count = 0\n            if w[i] not in max_count:\n                count += 1\n            else:\n                count = max_count[w[i]] + 1\n            if count > max_count:\n                max_count = count\n                max_index = i\n        \n    return {max_index: max_count}", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    count = 0\n    for letter in test:\n        if letter not in dictionary:\n            dictionary[letter] = count\n        else:\n            dictionary[letter] = dictionary[letter] + 1\n        count += 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    words = test.split()\n    counts = {}\n    for word in words:\n        if not word: continue\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    max_key = max(counts.items(), key=operator.itemgetter(1))\n    result = counts.pop(max_key)\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return Counter(test).most_common(1)", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    pos = 0\n    for c in test:\n        if c in result:\n            result[c] += 1\n        else:\n            result[c] = 1\n        if c =='':\n            pos += 1\n\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def letter_count(letter):\n        c = 0\n        for word in test.split():\n            if word.lower() == letter:\n                c += 1\n        return c\n\n    result = {}\n    for word in test.split():\n        if word.lower() not in result:\n            result[word.lower()] = letter_count(word.lower())\n        else:\n            result[word.lower()] += letter_count(word.lower())\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def _histogram(string):\n        result = {}\n        for i in range(len(string)):\n            letter = string[i]\n            result[letter] = result.get(letter, 0) + 1\n        return result\n\n    return _histogram(test)\n</s>", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    res = {}\n    for letter in test.split():\n        if letter in res:\n            res[letter] += 1\n        else:\n            res[letter] = 1\n    return res", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    for letter in test:\n        if letter not in d:\n            d[letter] = 0\n        d[letter] += 1\n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    counts = {}\n    max_count = 0\n    for c in test.split(' '):\n        count = counts[c] = 0\n        for c in test.split(' '):\n            if c == c.lower():\n                count += 1\n        if count > max_count:\n            max_count = count\n    return dict(max_count=max_count, counts=counts)", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    \n    # From http://stackoverflow.com/a/285770/80626\n    return {\n        word: sum([1 for c in test.split() if c in word])\n        for word in test.lower()\n        if word\n    }", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    test = test.lower()\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    for letter in result:\n        print(letter, result[letter])\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for letter in test.split():\n        dictionary[letter] = dictionary.get(letter, 0) + 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict = {}\n    for letter in test:\n        dict[letter] = dict.get(letter, 0) + 1\n    max_dict = dict.items()[0]\n    return dict, max_dict", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        histogram[letter] = histogram.get(letter, 0) + 1\n    most_common = max(list(map(histogram.get, test)))\n    return dict(zip(test, most_common))", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def histogram(text):\n        if text == '':\n            return {}\n        d = {}\n        for word in text.lower().split():\n            if word not in d:\n                d[word] = 1\n            else:\n                d[word] += 1\n        return sorted(d.items(), key=lambda x: x[1])[0:1]\n\n    return histogram(test)", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    counts = {}\n    for letter in test.lower():\n        counts.update({letter: 0})\n    for letter in test.lower():\n        if letter not in counts:\n            counts[letter] = 0\n        counts[letter] += 1\n    return counts", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    words = test.split()\n    result = {}\n    for word in words:\n        if not word in result:\n            result[word] = 1\n        else:\n            result[word] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    letters = str(test)\n    letters = letters.lower()\n    result = {}\n    for letter in letters:\n        if letter in result:\n            result[letter] += 1\n        else:\n            result[letter] = 1\n    return result\nhistogram(\"abc abc abc\")</s>", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    ret = {}\n    for c in test:\n        if c not in ret:\n            ret[c] = 0\n        else:\n            ret[c] += 1\n    most_repeated = None\n    max_count = 0\n    for k, v in ret.iteritems():\n        if v > max_count:\n            most_repeated = k\n            max_count = v\n    if most_repeated:\n        ret[most_repeated] = max_count\n    return ret", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    max = 0\n    for word in test.lower().split():\n        count = len(d.setdefault(word,[]))\n        count += 1\n        if count > max:\n            max = count\n    d[max] = 1\n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    dict_count = {}\n    dict_keys = set()\n    dict_values = set()\n\n    # Collects all the keys and values in a set\n    for letter in test.lower():\n        dict_keys.add(letter)\n        dict_values.add(dict_count.get(letter, 0))\n\n    # The dictionary of letters with counts\n    histogram = {}\n\n    # Iterates over the keys\n    for letter in dict_keys:\n        # Counts of the letter and its descendants\n        dict_count[letter] += 1\n        for letter2 in letter.split():\n            # The dictionary of all the letters with counts\n            # It is a dictionary because each letter has a count\n            # and we want to keep the corresponding key\n            histogram[letter2] = dict_count.get(letter2, 0)\n\n    return histogram", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    mapping = {}\n    for character in test.split():\n        if character in mapping:\n            mapping[character] += 1\n        else:\n            mapping[character] = 1\n    return mapping.items()", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    word = set()\n    counts = defaultdict(int)\n\n    for word in test.split():\n        word = word.lower()\n        if word in words:\n            words[word] += 1\n        else:\n            words[word] = 1\n\n    counts = dict(zip(words.items(), counts.items()))\n    return counts", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    word = \"\"\n    counts = {}\n    count = 0\n    for c in test.lower():\n        if word == \"\":\n            word = c\n        else:\n            if c in counts:\n                counts[c] += 1\n            else:\n                counts[c] = 1\n        if count >= 2:\n            yield word, count\n\n    return counts", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # So we know this function exists.\n    assert test\n\n    # Then we need to create a dictionary of the letters, one for each count.\n    letter_dict = dict()\n    for letter in test.split():\n        letter_dict[letter] = 0\n\n    # We then loop through the string, counting each letter occurrence.\n    for letter in test:\n        if letter not in letter_dict:\n            letter_dict[letter] = 1\n\n        else:\n            letter_dict[letter] += 1\n\n    # Then we return the dictionary.\n    return letter_dict", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    # Dictionary of the number of each letter with each letter as key\n    nums = defaultdict(int)\n\n    # Dictionary of the letter with each occurrence as key\n    letters = defaultdict(set)\n\n    for word in test:\n        letters[word[0]].add(word)\n\n    for word in test:\n        letter, count = letters[word[0]]\n        nums[letter] += count\n\n    # Sort the dictionary by the number of occurrences\n    # Sort the dictionary by the number of occurrences and by the letter\n    sorted_num = sorted(nums.items(), key=lambda x: x[1], reverse=True)\n    sorted_num = sorted(sorted_num, key=lambda x: x[0])\n\n    # Return the dictionary with the number of occurrences as keys\n    return sorted_num", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    alphabet = set(string.ascii_lowercase)\n    most_occurring = alphabet.most_common(1)[0][0]\n    result = {most_occurring : 1}\n    for occurrence in alphabet.most_common(1):\n        result.update({occurrence : 1 })\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    result = {}\n    def normalize(string):\n        return string.lower()\n\n    normalized = normalize(test)\n    if not normalized:\n        return result\n\n    for word in normalized:\n        result[word] = 0\n\n    for word in words:\n        words.remove(word)\n        if word in result:\n            result[word] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    mapping = {}\n    for letter in test.lower():\n        if letter not in mapping:\n            mapping[letter] = 1\n        else:\n            mapping[letter] += 1\n\n    return mapping", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # This is a very simple implementation. I made it so that there are no input errors.\n    if not test:\n        return {}\n    letters = test.lower().split()\n    letters = [str(l) for l in letters]\n    most_common = letters.index(max(letters, key=len))\n    count = 0\n    for letter in letters:\n        if letter in most_common:\n            count += 1\n    return {letter: count for letter in letters}", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    \n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    counts = dict()\n    for letter in letters:\n        if letter not in counts:\n            counts[letter] = 0\n        counts[letter] += 1\n    max_count = max(counts.values())\n\n    return {letter: max_count for letter in letters}", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return {letter: (len(test.count(letter))/len(test)) for letter in test.lower() if len(test.count(letter)) > 0}", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    output = {}\n    for letter in test.split():\n        if letter not in output:\n            output[letter] = 1\n        else:\n            output[letter] += 1\n    return output", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    mapping = {}\n    max_repetition = 0\n\n    for word in test.split():\n        mapping[word] = 1\n        max_repetition = max(max_repetition, mapping[word])\n\n    return mapping, max_repetition", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for word in test.split():\n        for word in word.lower().split():\n            if word in result:\n                result[word] += 1\n            else:\n                result[word] = 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    max_value = 0\n    total_count = 0\n    letters = test.split()\n    for letter in letters:\n        if letter not in total_count:\n            total_count += 1\n        if total_count >= max_value:\n            max_value = total_count\n            max_key = letter\n    return max_key, total_count", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    counts = {}\n    for letter in test.lower().split():\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    for letter, occ in counts.items():\n        if occ > 1:\n            yield letter, occ\n    for letter, occ in sorted(counts.items(), key=operator.itemgetter(1), reverse=True):\n        yield letter, occ", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    longest = 0\n    for letter in test:\n        if letter in dictionary:\n            dictionary[letter] += 1\n        else:\n            dictionary[letter] = 1\n    for key, value in dictionary.items():\n        if value > longest:\n            longest = value\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if len(test) > 1:\n        return dict([(a,0) for a in test.split()])\n    return dict([(a,0) for a in test])", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    test = test.lower()\n    words = test.split(' ')\n    dictionary = {}\n    for word in words:\n        if word not in dictionary:\n            dictionary[word] = 1\n        else:\n            dictionary[word] += 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    occurrences = defaultdict(int)\n    for letter in test:\n        if letter not in occurrences:\n            occurrences[letter] = 1\n        else:\n            occurrences[letter] += 1\n    return occurrences", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    res = {}\n    for item in test:\n        if item not in res:\n            res[item] = 0\n        res[item] += 1\n    res = sorted(res.items(), key=lambda x: x[1], reverse=True)\n    return res", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def _count(letter, freq):\n        \"\"\"Return the frequency of a letter and add it to the count of the letter itself.\n        \"\"\"\n        if letter not in freq:\n            freq[letter] = 0\n        freq[letter] += 1\n    letter_count = {}\n    max_freq = 0\n    for letter in test.lower():\n        if letter not in letter_count:\n            letter_count[letter] = 0\n        letter_count[letter] += _count(letter, letter_count)\n    return letter_count", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    for s in test.split():\n        if s not in d:\n            d[s] = 1\n        else:\n            d[s] += 1\n    if test:\n        return d.items()\n    \n    for s in test.split():\n        if s not in d:\n            d[s] = 1\n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    \n    #check that we are dealing with a string\n    if type(test)!= str:\n        raise TypeError(\"Expected a string, but got %s\" % type(test))\n\n    #get all the letters in the string\n    letters = list(set(test))\n\n    #convert the letters into a dictionary\n    letters_dict = {}\n    for letter in letters:\n        letters_dict[letter] = 0\n\n    #count the occurrences of each letter\n    for letter in letters:\n        if letters_dict.has_key(letter):\n            letters_dict[letter] += 1\n\n    #remove all the letters that occur only once\n    for letter in letters_dict:\n        if letters_dict[letter] == 1:\n            del letters_dict[letter]\n\n    #now we have a dictionary of letters with their occurrence count\n    return sorted(letters_dict.items(), key=lambda x: x[1], reverse=True)", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    for i in range(len(test) - 1):\n        if test[i] in d:\n            d[test[i]] += 1\n        else:\n            d[test[i]] = 1\n    if len(test) == 1:\n        return d\n    for i in range(len(test)):\n        for j in range(i + 1, len(test)):\n            if test[j] in d:\n                d[test[j]] += d[test[i]]\n                d[test[i]] = 0\n            else:\n                d[test[j]] = 0\n    for i in d:\n        if i not in d:\n            return d, i\n    return d, 0", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # as long as we have a letter, record it as 'letter'\n    letter = ''\n    count = 0\n    for c in test:\n        if c!= letter:\n            count += 1\n            letter = c\n        else:\n            # the letter we've been looking for appeared in a group with the count\n            # we just found.\n            break\n\n    # if we haven't found the letter yet, we return the empty dictionary\n    if not letter:\n        return {}\n\n    # if we found the letter, return the dictionary with that letter as key\n    return {letter: count}", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    from collections import defaultdict\n    from collections import Counter\n    \n    count = Counter()\n    for letter in test.lower():\n        count[letter] += 1\n    return sorted(list(count.items()), key=lambda x: x[0].lower())[0]", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for letter in test:\n        count = 0\n        if letter in dictionary:\n            count = dictionary[letter] + 1\n        else:\n            dictionary[letter] = count\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def iter_histogram(string):\n        # Use str.split() to split the string\n        # into a list of lowercase letters, then use a dict comprehension\n        # to build a dictionary\n        letters = list(string.lower())\n        letters_dict = {letter: 0 for letter in letters}\n        for letter in letters:\n            letters_dict[letter] += 1\n        return letters_dict\n\n    # compute the number of distinct letters\n    num_letters = sum(iter_histogram(string).values())\n\n    # split the input into a list of strings\n    letters = list(string.lower().split())\n    # normalize the list of strings\n    letters = sorted(letters, key=lambda letter: letters_dict[letter])\n\n    # compute the max number of repetitions of each letter\n    # and return the corresponding dictionary\n    return dict(zip(letters, list(map(lambda x: x[1], iter_histogram(x[0]).items()))))", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    \n    # TODO: Decide whether to do this as a simple list comprehension or as a generator expression.\n    #       The former is faster but the latter is more accurate.\n    \n    result = {}\n    \n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n\n    # return a generator expression\n    for letter, count in result.items():\n        yield letter, count", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for word in test.split():\n        if word not in result:\n            result[word] = 0\n        result[word] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def alphabet_counter(a):\n        if a not in dict():\n            dict()[a] = 0\n        dict()[a] += 1\n        return dict()[a]\n    a = ''.join(sorted(set(test)))\n    keys = alphabet_counter(a)\n    max = keys.keys()[0]\n    return max, keys[max]", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    data = {}\n    for letter in test.lower():\n        if letter not in data:\n            data[letter] = 1\n        else:\n            data[letter] += 1\n    return data", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    m = {}\n    for letter in test:\n        if letter in m:\n            m[letter] += 1\n        else:\n            m[letter] = 1\n    return m", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # First, check if the string is empty\n    if not test:\n        return {}\n\n    # Now, parse the string\n    string = list(test)\n    string = map(str.lower, string)\n    # Create a dictionary of letters with their occurrence\n    letters = {}\n    for letter in string:\n        # Look up the letter in the dictionary\n        if letter not in letters:\n            letters[letter] = 0\n        else:\n            letters[letter] += 1\n    # Finally, sort the dictionary and return the top letter\n    letters = sorted(letters.items())\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    from collections import Counter\n    count_dict = Counter(test.split())\n    max_key = count_dict.most_common()[0][0]\n    max_val = count_dict.most_common()[0][0]\n    \n    return dict([(key, max_val) for key in max_key.split()])", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        if letter not in histogram:\n            histogram[letter] = 1\n        else:\n            histogram[letter] += 1\n    maxkey = max(histogram.keys())\n    maxvalue = histogram[maxkey]\n    return {maxkey: maxvalue}", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def getCount(letter):\n        # start with the count of the letter\n        count = 0\n        # get the previous letter and store it\n        prevLetter = letter[:-1]\n        if prevLetter in test and test[prevLetter] > 0:\n            count = test[prevLetter]\n        # count the number of times we see the letter\n        for letter in test:\n            if letter == prevLetter:\n                count += 1\n            else:\n                break\n        return count\n    \n    # read the input\n    test = test.lower().split()\n    # build the dictionary\n    result = {}\n    for letter in test:\n        # the letter is not in the dictionary\n        if letter not in result:\n            # count the number of times we see the letter\n            count = getCount(letter)\n            # add the letter to the dictionary\n            result[letter] = count\n        else:\n            # we have seen the letter before\n            if result[letter] > count:\n                # replace the letter with the new count\n                result[letter] = result[letter] + count\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    h = {}\n    max = 0\n    for word in test.split(' '):\n        count = 0\n        for letter in word:\n            if letter not in h:\n                h[letter] = count\n            else:\n                h[letter] += count\n            count += 1\n        if count > max:\n            max = count\n    return h", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    counts = defaultdict(int)\n    for l in test.split(' '):\n        counts.setdefault(l.lower(), 0)\n    result = {}\n    for k, v in counts.items():\n        if v > 1:\n            result.setdefault(k, v)\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    count = {}\n    n = len(test)\n    for i in range(n):\n        l = test[i]\n        if l in count:\n            count[l] += 1\n        else:\n            count[l] = 1\n\n    max_count = count.get(' ', 0)\n    max_count = max(max_count, max_count)\n    return {k: max_count for k in sorted(count.keys())}\n</s>", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    test = re.sub('[^a-z]', '', test)\n    test = re.sub(' +','', test)\n    test = re.sub('[ ]+','', test)\n    \n    word_list = re.findall('(\\w+)', test)\n\n    count_dict = {}\n    for word in word_list:\n        letter_count = 0\n        for i in word:\n            if count_dict.has_key(i):\n                letter_count += count_dict[i]\n            else:\n                count_dict[i] = 1\n            if letter_count > 1:\n                return(count_dict)\n\n    return(count_dict)\n</s>", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    # let's create a dictionary with one key per letter\n    letters = {}\n    for char in test.lower():\n        if char not in letters:\n            letters[char] = 0\n        letters[char] += 1\n\n    # let's create a list of all letters and their frequency\n    letters_list = sorted(list(letters.items()))\n\n    # let's create a new dictionary that will hold all the keys with the same\n    # frequency, and the corresponding counts\n    counts = {}\n    for letter, frequency in letters_list:\n        if frequency in counts:\n            counts[frequency] += 1\n        else:\n            counts[frequency] = frequency\n\n    # let's fill the histogram with the dictionary\n    return counts", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.split(' '):\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create the dict\n    d = dict.fromkeys(test.split())\n    # create a dictionary that maps the letters to the number of times they appear\n    l = dict.fromkeys(test.lower(), 0)\n    # iterate over each letter and add it to the dictionary\n    for i in test:\n        # if the letter is not in the dict, add it to the dictionary\n        if not i in d:\n            # add the letter to the dictionary\n            l[i] += 1\n        # add the count of the letter\n        d[i] = l[i]\n    # return the dictionary\n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    max_count = 0\n    for letter in test.lower().split():\n        if letter in result:\n            result[letter] += 1\n        else:\n            result[letter] = 1\n        max_count = max(result.values()) if result else max_count\n    return dict(result)", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    import re\n    import collections\n    test = re.sub(r'\\s+', '', test)\n    dict = {}\n    for i in range(0, len(test)):\n        # if the letter has not been seen before\n        if not dict.has_key(test[i]):\n            dict[test[i]] = 1\n        else:\n            dict[test[i]] += 1\n    return dict", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Split the string into a list of words\n    words = [word.lower() for word in test.split()]\n    # Build the dictionary\n    counts = {}\n    for word in words:\n        if word not in counts:\n            counts.update(dict.fromkeys([word], 1))\n        else:\n            counts.update(dict.fromkeys([word], counts[word] + 1))\n    # Return the most frequent words and their counts\n    return sorted(counts.items(), key=lambda k: k[1], reverse=True)", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    # generate a list of all the letters in the string\n    letters = string.ascii_lowercase\n\n    # map the list to a dictionary with a single key\n    dict_of_letters = {}\n    for letter in letters:\n        key = letter\n        dict_of_letters[key] = 1\n    # we want to keep the most repeated letter, i.e. the one with the most occurrences\n    max_count = len(dict_of_letters) - 1\n    max_index = 0\n    max_value = 0\n    for index, letter in enumerate(letters):\n        if dict_of_letters[letter] > max_value:\n            max_value = dict_of_letters[letter]\n            max_index = index\n    # retrieve the value of the dictionary at the index of the most repeated letter\n    return dict_of_letters[letters[max_index]]\n</s>", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # key, value = [], []\n    n = len(test)\n    m = 0\n    h = {}\n    for c in test:\n        h[c] = h.get(c, 0) + 1\n        if h[c] > m:\n            m = h[c]\n    return h", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    word = ''\n    h = {}\n    for i in range(len(test) - 1, -1, -1):\n        if word == '':\n            word = test[i]\n        else:\n            if word.count(test[i]) > h.get(test[i], 0):\n                h[test[i]] = h.get(test[i], 0) + 1\n        if word[-1] =='':\n            word = word[:-1]\n    return h", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    counts = {}\n    # convert to list\n    letters = list(test)\n    counts[letters[0]] = 0\n    for letter in letters[1:]:\n        if letter not in counts:\n            counts[letter] = 0\n        counts[letter] += 1\n    # sort\n    counts[letters[0]] = counts[letters[0]] + 1\n    sorted_letters = sorted(letters, key=counts.get)\n    return sorted_letters, counts[letters[0]]"]]