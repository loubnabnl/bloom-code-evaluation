[["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # A dictionary of the letters with their occurrence\n    letters = {}\n    # A list of the letters in the string\n    letters_list = test.lower().split()\n    # A list of the occurrences of each letter\n    occurrences = []\n    # A list of the letters with the most occurrences\n    most_occurrences = []\n    # A list of the letters with the most occurrences\n    most_occurrences_list = []\n    # A list of the letters with the most occurrences\n    most_occurrences_list.append('')\n    # A list of the letters with the most occurrences\n    most_occurrences_list.append('')\n    # A list of the letters with the most occurrences\n    most_occurrences_list.append('')\n    # A list of the letters with the most occurrences\n    most_occurrences_list.append('')\n    # A list of the letters with the most occurrences\n    most_occurrences_list.append('')\n    # A list of the letters with the most occurrences\n    most_occurrences_list.append('')\n    # A list of the letters with the most occurrences\n    most_occurrences_list.append('')\n    # A list of the letters with the most occurrences\n    most_occurr", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of all the letters in the string\n    letters = set(test)\n    # Create a dictionary of all the occurrences of each letter\n    occurrences = {}\n    # Iterate over the string and add each letter to the dictionary of occurrences\n    for letter in letters:\n        # Add the letter to the dictionary of occurrences\n        occurrences[letter] = 0\n    # Iterate over the string and add each letter to the dictionary of occurrences\n    for letter in letters:\n        # Add the letter to the dictionary of occurrences\n        occurrences[letter] += 1\n    # Return the dictionary of the letter with the most occurrences and the corresponding count\n    return sorted(occurrences.items(), key=lambda x: x[1], reverse=True)[0]", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # This is a dictionary of the letters with their occurrence\n    # and the count of that occurrence\n    #\n    # The dictionary is sorted by the count of the letter\n    #\n    # The dictionary is sorted by the count of the letter\n    #\n    # The dictionary is sorted by the count of the letter\n    #\n    # The dictionary is sorted by the count of the letter\n    #\n    # The dictionary is sorted by the count of the letter\n    #\n    # The dictionary is sorted by the count of the letter\n    #\n    # The dictionary is sorted by the count of the letter\n    #\n    # The dictionary is sorted by the count of the letter\n    #\n    # The dictionary is sorted by the count of the letter\n    #\n    # The dictionary is sorted by the count of the letter\n    #\n    # The dictionary is sorted by the count of the letter\n    #\n    # The dictionary is sorted by the count of the letter\n    #\n    # The dictionary is sorted by the count of the letter\n    #\n    # The dictionary is sorted by the count of the letter\n    #\n    # The dictionary is sorted by the count of the letter\n    #\n    # The dictionary is sorted by the count of the letter\n    #\n    # The dictionary is sorted by the count of", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def count(letter):\n        return sum(1 for word in test.split() if word.lower() == letter.lower())\n    return dict([(letter, count(letter)) for letter in test.lower().split()])", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # This is a list of all the letters in the string\n    letters = test.lower().split()\n    # This is a list of all the occurrences of each letter in the string\n    occurrences = {}\n    # This is a list of all the letters that have the same occurrence as the letter\n    # that we are currently iterating over\n    same_letter = []\n    # This is the dictionary that will hold the results\n    results = {}\n    # This is the current letter that we are iterating over\n    current = letters[0]\n    # This is the number of occurrences of the current letter\n    current_count = 0\n    # This is the number of occurrences of the letter that we are currently iterating\n    # over\n    current_occurrence = 0\n    # This is the dictionary that will hold the results\n    results[current] = {}\n    # This is the dictionary that will hold the results\n    results[current][\"count\"] = 0\n    # This is the dictionary that will hold the results\n    results[current][\"occurrence\"] = 0\n    # This is the dictionary that will hold the results\n    results[current][\"letter\"] = current\n    # This is the dictionary that will hold the results\n    results[current][\"occurrence_count\"] = 0\n    # This is the dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # We need to convert the string to lowercase, because the dictionary\n    # will be built from the lower case letters.\n    test = test.lower()\n    # We need to split the string into a list of words, because we need to\n    # count the number of times each word occurs.\n    words = test.split()\n    # We need to convert the words to lowercase, because the dictionary\n    # will be built from the lower case letters.\n    words = [word.lower() for word in words]\n    # We need to convert the words to lowercase, because the dictionary\n    # will be built from the lower case letters.\n    words = [word.lower() for word in words]\n    # We need to convert the words to lowercase, because the dictionary\n    # will be built from the lower case letters.\n    words = [word.lower() for word in words]\n    # We need to convert the words to lowercase, because the dictionary\n    # will be built from the lower case letters.\n    words = [word.lower() for word in words]\n    # We need to convert the words to lowercase, because the dictionary\n    # will be built from the lower case letters.\n    words = [word.lower() for word in words]\n    # We need to convert the", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create a dictionary of the letters with the most occurrences\n    most_common = {}\n    for letter in test.lower():\n        if letter not in most_common:\n            most_common[letter] = 0\n        most_common[letter] += 1\n    # sort the dictionary by the number of occurrences\n    most_common.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return most_common", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    for i in range(len(test)):\n        if test[i] in d:\n            d[test[i]] += 1\n        else:\n            d[test[i]] = 1\n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of the letters with the most occurrences\n    max_dict = {}\n    for letter in test.lower():\n        if letter not in max_dict:\n            max_dict[letter] = 0\n        max_dict[letter] += 1\n    # Return the dictionary of the letters with the most occurrences\n    return max_dict", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # The dictionary will contain the letter with the most repetition\n    # and the corresponding count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the letter with the most repetition\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the letter with the most repetition\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the letter with the most repetition\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the letter with the most repetition\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the letter with the most repetition\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the letter with the most repetition\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the letter with the most repetition\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the letter with the most repetition\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the letter with the most repetition\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the letter with the", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 0\n        letters[letter] += 1\n    # Sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return dict([(letter, count) for letter, count in Counter(test).most_common(1)])", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for letter in test.lower():\n        if letter not in dictionary:\n            dictionary[letter] = 1\n        else:\n            dictionary[letter] += 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of the letters with their occurrence\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # Sort the dictionary by the occurrence of the letters\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Make a list of all the letters in the string\n    letters = list(set(test.lower()))\n\n    # Make a dictionary of the letters with their occurrence\n    counts = {}\n    for letter in letters:\n        counts[letter] = 0\n\n    # Iterate over the string and add the occurrences of each letter\n    for letter in letters:\n        counts[letter] += 1\n\n    # Return the dictionary\n    return counts", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def count(letter):\n        return sum(1 for word in test.split() if word.lower() == letter.lower())\n    return sorted({letter: count(letter) for letter in test.split()}.items(), key=lambda x: x[1], reverse=True)[0][1]", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # convert to lowercase\n    test = test.lower()\n    # split into words\n    words = test.split()\n    # create a dictionary of words\n    words_dict = {}\n    for word in words:\n        # add to dictionary\n        words_dict[word] = 0\n    # add words to dictionary\n    for word in words:\n        # add to dictionary\n        words_dict[word] += 1\n    # sort by count\n    words_dict.sort(key=lambda x: x[1], reverse=True)\n    # return dictionary\n    return words_dict", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # The dictionary will be a list of dictionaries, each containing the letter with the\n    # most repetition and the corresponding count.\n    # The dictionary will be sorted by the count, then by the letter.\n    # The dictionary will be sorted by the count, then by the letter.\n    # The dictionary will be sorted by the count, then by the letter.\n    # The dictionary will be sorted by the count, then by the letter.\n    # The dictionary will be sorted by the count, then by the letter.\n    # The dictionary will be sorted by the count, then by the letter.\n    # The dictionary will be sorted by the count, then by the letter.\n    # The dictionary will be sorted by the count, then by the letter.\n    # The dictionary will be sorted by the count, then by the letter.\n    # The dictionary will be sorted by the count, then by the letter.\n    # The dictionary will be sorted by the count, then by the letter.\n    # The dictionary will be sorted by the count, then by the letter.\n    # The dictionary will be sorted by the count, then by the letter.\n    # The dictionary will be sorted by the count, then by the letter.\n    # The dictionary will be sorted by the count, then by the letter.\n    # The dictionary will be", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # The dictionary will contain the letter with the most repetition and the count\n    # of that letter\n    dictionary = {}\n    # The list will contain all the letters with the same occurrence\n    letters = []\n    # The counter will be used to count the number of occurrences of each letter\n    counter = 0\n    # The string will be split into a list of lowercase letters\n    for letter in test.lower().split():\n        # If the letter is not in the dictionary, add it to the list\n        if letter not in dictionary:\n            dictionary[letter] = counter\n            letters.append(letter)\n            counter += 1\n    # Return the dictionary\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for letter in test:\n        if letter not in dictionary:\n            dictionary[letter] = 1\n        else:\n            dictionary[letter] += 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of the letters with their occurrences\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # Sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # build a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def _histogram(s):\n        \"\"\"Return a dictionary of the letter with the most repetition and containing the\n        corresponding count. If several letters have the same occurrence, return all of them.\n        \"\"\"\n        result = {}\n        for i in range(len(s)):\n            if s[i] not in result:\n                result[s] = 1\n            else:\n                result[s] += 1\n        return result\n    \n    return _histogram(test)", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # The dictionary will contain the letter with the most occurrences and the corresponding count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count\n    # The dictionary will be sorted by the count", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # TODO: make this more efficient\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # We need to make sure that the string is a lowercase string\n    test = test.lower()\n    # We need to make sure that the string is a space separated list of lowercase letters\n    test = re.sub('\\s+','', test)\n    # We need to make sure that the string is a space separated list of lowercase letters\n    test = re.sub('\\s+','', test)\n    # We need to make sure that the string is a space separated list of lowercase letters\n    test = re.sub('\\s+','', test)\n    # We need to make sure that the string is a space separated list of lowercase letters\n    test = re.sub('\\s+','', test)\n    # We need to make sure that the string is a space separated list of lowercase letters\n    test = re.sub('\\s+','', test)\n    # We need to make sure that the string is a space separated list of lowercase letters\n    test = re.sub('\\s+','', test)\n    # We need to make sure that the string is a space separated list of lowercase letters\n    test = re.sub('\\s+','', test)\n    # We need to", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for letter in test:\n        if letter not in dictionary:\n            dictionary[letter] = 1\n        else:\n            dictionary[letter] += 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # The dictionary to store the results\n    results = {}\n    # The string to split\n    string = test\n    # The list of letters\n    letters = string.split()\n    # The list of counts\n    counts = []\n    # The counter\n    counter = 0\n    # The dictionary key\n    key = ''\n    # The dictionary value\n    value = ''\n    # The dictionary key\n    key2 = ''\n    # The dictionary value\n    value2 = ''\n    # The dictionary key\n    key3 = ''\n    # The dictionary value\n    value3 = ''\n    # The dictionary key\n    key4 = ''\n    # The dictionary value\n    value4 = ''\n    # The dictionary key\n    key5 = ''\n    # The dictionary value\n    value5 = ''\n    # The dictionary key\n    key6 = ''\n    # The dictionary value\n    value6 = ''\n    # The dictionary key\n    key7 = ''\n    # The dictionary value\n    value7 = ''\n    # The dictionary key\n    key8 = ''\n    # The dictionary value\n    value8 = ''\n    # The dictionary key\n    key9 = ''\n    # The dictionary value\n    value9 = ''\n    # The dictionary key\n    key10 = ''\n    # The dictionary value\n    value10 = ''\n    # The dictionary key", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    for letter in test:\n        if letter not in d:\n            d[letter] = 1\n        else:\n            d[letter] += 1\n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for letter in test:\n        if letter not in dictionary:\n            dictionary[letter] = 1\n        else:\n            dictionary[letter] += 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # The dictionary will contain the letter with the most repetition and the count\n    # of that letter\n    dictionary = {}\n    # The list will contain all the letters that have the same occurrence\n    letters = []\n    # The counter will count the number of letters\n    counter = 0\n    # The string will contain the string to be analyzed\n    string = test\n    # The string will contain the letters that have been found\n    found = []\n    # The string will contain the letters that have not been found\n    not_found = []\n    # The string will contain the letters that have been found\n    found_letters = []\n    # The string will contain the letters that have not been found\n    not_found_letters = []\n    # The string will contain the letters that have been found\n    found_letters_count = []\n    # The string will contain the letters that have not been found\n    not_found_letters_count = []\n    # The string will contain the letters that have been found\n    found_letters_count = []\n    # The string will contain the letters that have not been found\n    not_found_letters_count = []\n    # The string will contain the letters that have been found\n    found_letters_count = []\n    # The string will contain the letters that have not been found", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 0\n        result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # TODO: add support for uppercase letters\n    # TODO: add support for multiple occurrences\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence\n    # TODO: add support for multiple letters with the same occurrence", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    letters = test.lower().split()\n    counts = {}\n    for letter in letters:\n        if letter not in counts:\n            counts[letter] = 1\n        else:\n            counts[letter] += 1\n    return counts", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def count(letter):\n        return sum(1 for word in test.split() if word.lower() == letter)\n    return sorted({letter: count(letter) for letter in test.lower().split()}.items(), key=lambda x: x[1], reverse=True)[0][1]", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def _histogram(string):\n        \"\"\"Return a dictionary of the letter with the most repetition and containing the\n        corresponding count. If several letters have the same occurrence, return all of them.\n        \"\"\"\n        result = {}\n        for letter in string:\n            if letter not in result:\n                result[letter] = 1\n            else:\n                result[letter] += 1\n        return result\n\n    return _histogram(test)", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # The dictionary will contain the letter with the most repetition and the count\n    # of that letter\n    dictionary = {}\n    # The list will contain all the letters that have the same occurrence\n    letters = []\n    # The counter will be used to keep track of the number of letters that have been\n    # added to the dictionary\n    counter = 0\n    # The string will be split into a list of lowercase letters\n    for letter in test.lower().split():\n        if letter not in dictionary:\n            dictionary[letter] = counter\n            letters.append(letter)\n            counter += 1\n    # The dictionary will contain the letter with the most repetition and the count\n    # of that letter\n    dictionary = dictionary.items()\n    # The list will contain all the letters that have the same occurrence\n    letters = letters.items()\n    # The dictionary will contain the letter with the most repetition and the count\n    # of that letter\n    dictionary = dictionary.items()\n    # The list will contain all the letters that have the same occurrence\n    letters = letters.items()\n    # The dictionary will contain the letter with the most repetition and the count\n    # of that letter\n    dictionary = dictionary.items()\n    # The list will contain all the letters that have the same occurrence\n    letters = letters.items", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 0\n        letters[letter] += 1\n\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for letter in test.lower():\n        if letter not in dictionary:\n            dictionary[letter] = 1\n        else:\n            dictionary[letter] += 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return dict([(letter, count) for letter, count in re.findall('([a-z]+)\\s+(\\d+)', test)])", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of all the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 0\n    # Create a dictionary of all the occurrences\n    occurrences = {}\n    for letter in letters:\n        occurrences[letter] = 0\n    # Iterate over the string and count the occurrences\n    for letter in letters:\n        # If the letter is not in the dictionary, add it\n        if letter not in occurrences:\n            occurrences[letter] = 0\n        # Increment the occurrence count\n        occurrences[letter] += 1\n    # Return the dictionary\n    return occurrences", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # TODO: This is a terrible way to do this. It is a bit of a hack, but it works.\n    # It would be better to use a list comprehension instead.\n    #\n    # This is a bit of a hack because we want to return a dictionary, not a list.\n    #\n    # We could use a list comprehension, but we want to return a dictionary, not a list.\n    #\n    # We could use a dictionary comprehension, but we want to return a dictionary, not a list.\n    #\n    # We could use a generator comprehension, but we want to return a dictionary, not a list.\n    #\n    # We could use a list comprehension, but we want to return a dictionary, not a list.\n    #\n    # We could use a dictionary comprehension, but we want to return a dictionary, not a list.\n    #\n    # We could use a generator comprehension, but we want to return a dictionary, not a list.\n    #\n    # We could use a list comprehension, but we want to return a dictionary, not a list.\n    #\n    # We could use a dictionary comprehension, but we want to return a dictionary, not a list.\n    #\n    # We could use a generator comprehension, but we want to return a dictionary, not a list.", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    for letter in test.lower():\n        if letter not in d:\n            d[letter] = 1\n        else:\n            d[letter] += 1\n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 0\n        letters[letter] += 1\n    # sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Make a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 0\n        letters[letter] += 1\n    # Sort the dictionary by the number of occurrences\n    letters.sort(key=lambda letter: letters[letter], reverse=True)\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # convert string to lowercase\n    test = test.lower()\n    # split into words\n    words = test.split()\n    # build dictionary\n    result = {}\n    for word in words:\n        # count occurrences\n        result[word] = result.get(word, 0) + 1\n    # sort by count\n    result.sort(key=lambda x: x[1], reverse=True)\n    # return dictionary\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for letter in test:\n        if letter not in dictionary:\n            dictionary[letter] = 1\n        else:\n            dictionary[letter] += 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def count(letter):\n        return sum(1 for word in test.split() if word.lower() == letter.lower())\n    return dict(zip(test.split(), sorted(list(enumerate(test.split()))), key=count))", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This is a bit of a hack, but it works.\n    # TODO: This", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return {letter: count for letter, count in Counter(test).most_common(1)}", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def count(s):\n        return sum(1 for i in s.lower() if i in test)\n    return sorted(test.items(), key=lambda x: x[1], reverse=True)[::-1][0][1]", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def _histogram(s):\n        \"\"\"Return a dictionary of the letter with the most repetition and containing the\n        corresponding count. If several letters have the same occurrence, return all of them.\n        \"\"\"\n        result = {}\n        for letter in s:\n            if letter not in result:\n                result[letter] = 1\n            else:\n                result[letter] += 1\n        return result\n    \n    return _histogram(test.lower())", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # This is a list of all the letters in the string\n    letters = test.lower().split()\n    # This is a list of all the occurrences of each letter\n    occurrences = {}\n    # This is a list of all the letters that have the same occurrence\n    same_occurrences = []\n    # This is a dictionary of the letter with the most occurrences\n    most_occurrences = {}\n    # This is a dictionary of the letter with the most occurrences\n    most_occurrences_count = {}\n    # This is a dictionary of the letter with the most occurrences\n    most_occurrences_count_letter = {}\n    # This is a dictionary of the letter with the most occurrences\n    most_occurrences_count_letter_letter = {}\n    # This is a dictionary of the letter with the most occurrences\n    most_occurrences_count_letter_letter_letter = {}\n    # This is a dictionary of the letter with the most occurrences\n    most_occurrences_count_letter_letter_letter_letter = {}\n    # This is a dictionary of the letter with the most occurrences\n    most_occurrences_count_letter_letter_letter_letter_letter = {}\n    # This is a dictionary of the letter with the most", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for letter in test:\n        if letter not in dictionary:\n            dictionary[letter] = 1\n        else:\n            dictionary[letter] += 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def _histogram(s):\n        \"\"\"Return a dictionary of the letter with the most repetition and containing the\n        corresponding count. If several letters have the same occurrence, return all of them.\n        \"\"\"\n        d = {}\n        for i in range(len(s)):\n            if s[i] in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        return d\n\n    return _histogram(test)", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of the letters with their occurrence\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n\n    # Sort the dictionary by the occurrence of the letters\n    letters.sort(key=lambda letter: letters[letter], reverse=True)\n\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return dict([(letter, count) for letter, count in enumerate(test.lower()) if count > 1])", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return dict([(letter, count) for letter, count in Counter(test).most_common()])", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    for letter in test.lower():\n        if letter not in d:\n            d[letter] = 1\n        else:\n            d[letter] += 1\n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    letters = test.lower().split()\n    counts = {}\n    for letter in letters:\n        if letter not in counts:\n            counts[letter] = 1\n        else:\n            counts[letter] += 1\n    return counts", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    for letter in test.lower():\n        if letter not in d:\n            d[letter] = 0\n        d[letter] += 1\n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    for i in range(len(test)):\n        if test[i] in d:\n            d[test[i]] += 1\n        else:\n            d[test[i]] = 1\n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def count(letter):\n        return sum(1 for word in test.split() if word.lower() == letter.lower())\n    return dict(sorted(list(enumerate(test.split())), key=count, reverse=True))", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def _histogram(string):\n        \"\"\"Return a dictionary of the letter with the most repetition and containing the\n        corresponding count. If several letters have the same occurrence, return all of them.\n        \"\"\"\n        result = {}\n        for letter in string:\n            if letter not in result:\n                result[letter] = 1\n            else:\n                result[letter] += 1\n        return result\n\n    return _histogram(test)", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # The dictionary will be a list of lists\n    # Each list will contain the letter with the most repetition\n    # and the corresponding count\n    # The first element of each list will be the letter\n    # and the second element will be the count\n    # The dictionary will be sorted by the count\n    # and the first element of each list will be the letter with the most repetition\n    # and the corresponding count\n    # The dictionary will be sorted by the count\n    # and the first element of each list will be the letter with the most repetition\n    # and the corresponding count\n    # The dictionary will be sorted by the count\n    # and the first element of each list will be the letter with the most repetition\n    # and the corresponding count\n    # The dictionary will be sorted by the count\n    # and the first element of each list will be the letter with the most repetition\n    # and the corresponding count\n    # The dictionary will be sorted by the count\n    # and the first element of each list will be the letter with the most repetition\n    # and the corresponding count\n    # The dictionary will be sorted by the count\n    # and the first element of each list will be the letter with the most repetition\n    # and the corresponding count\n    # The dictionary will be sorted by", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 0\n        letters[letter] += 1\n    # sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # The dictionary to store the results\n    results = {}\n    \n    # The string to be parsed\n    string = test\n    \n    # The number of letters in the string\n    length = len(string)\n    \n    # The number of letters that have been seen\n    seen = 0\n    \n    # The number of letters that have not been seen\n    unseen = length\n    \n    # The number of letters that have been seen at least once\n    seen_once = 0\n    \n    # The number of letters that have been seen at least twice\n    seen_twice = 0\n    \n    # The number of letters that have been seen at least three times\n    seen_three = 0\n    \n    # The number of letters that have been seen at least four times\n    seen_four = 0\n    \n    # The number of letters that have been seen at least five times\n    seen_five = 0\n    \n    # The number of letters that have been seen at least six times\n    seen_six = 0\n    \n    # The number of letters that have been seen at least seven times\n    seen_seven = 0\n    \n    # The number of letters that have been seen at least eight times\n    seen_eight = 0\n    \n    # The number of letters that have been seen at least nine times\n    seen_nine = 0\n    \n    # The number of letters that have been seen", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Make a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 0\n        letters[letter] += 1\n    # Sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # TODO: This is a hack to get around the fact that the string is not a list\n    #       of strings. It should be a list of lists of strings.\n    #       This is a bit of a hack, but it works.\n    #       It should be fixed.\n    #       Also, the dictionary should be a list of dictionaries.\n    #       This is a bit of a hack, but it works.\n    #       It should be fixed.\n    #       Also, the dictionary should be a list of dictionaries.\n    #       This is a bit of a hack, but it works.\n    #       It should be fixed.\n    #       Also, the dictionary should be a list of dictionaries.\n    #       This is a bit of a hack, but it works.\n    #       It should be fixed.\n    #       Also, the dictionary should be a list of dictionaries.\n    #       This is a bit of a hack, but it works.\n    #       It should be fixed.\n    #       Also, the dictionary should be a list of dictionaries.\n    #       This is a bit of a hack, but it works.\n    #       It should be fixed.\n    #       Also, the dictionary should be a list of dictionaries.\n    #       This is a bit of a hack, but it works.\n    #       It", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 0\n        letters[letter] += 1\n    # sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for letter in test:\n        if letter not in dictionary:\n            dictionary[letter] = 1\n        else:\n            dictionary[letter] += 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 0\n        result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of the letters with their occurrence\n    letters = {}\n    for letter in test.lower().split():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # Sort the dictionary by the occurrence of the letters\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of the letters with their occurrence\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 0\n        letters[letter] += 1\n    # Sort the dictionary by the occurrence of the letters\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # The dictionary will contain the letter with the most occurrences\n    # and the corresponding count\n    max_count = 0\n    max_count_letter = ''\n    # The dictionary will contain all the letters with the same occurrence\n    # and the corresponding count\n    max_count_letters = {}\n    # The dictionary will contain all the letters with the same occurrence\n    # and the corresponding count\n    max_count_letters_occurrences = {}\n    # The dictionary will contain all the letters with the same occurrence\n    # and the corresponding count\n    max_count_letters_occurrences_letters = {}\n    # The dictionary will contain all the letters with the same occurrence\n    # and the corresponding count\n    max_count_letters_occurrences_letters_occurrences = {}\n    # The dictionary will contain all the letters with the same occurrence\n    # and the corresponding count\n    max_count_letters_occurrences_letters_occurrences_letters = {}\n    # The dictionary will contain all the letters with the same occurrence\n    # and the corresponding count\n    max_count_letters_occurrences_letters_occurrences_letters_occurrences = {}\n    # The dictionary will contain all the letters with the same occurrence\n    # and the corresponding count\n    max_count", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create a dictionary of the letters with their occurrence\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # sort the dictionary by the occurrence of the letters\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # The dictionary will contain the letter with the most repetition and the corresponding count\n    # The dictionary will be sorted by the count\n    # The dictionary will contain the letter with the most repetition and the corresponding count\n    # The dictionary will be sorted by the count\n    # The dictionary will contain the letter with the most repetition and the corresponding count\n    # The dictionary will be sorted by the count\n    # The dictionary will contain the letter with the most repetition and the corresponding count\n    # The dictionary will be sorted by the count\n    # The dictionary will contain the letter with the most repetition and the corresponding count\n    # The dictionary will be sorted by the count\n    # The dictionary will contain the letter with the most repetition and the corresponding count\n    # The dictionary will be sorted by the count\n    # The dictionary will contain the letter with the most repetition and the corresponding count\n    # The dictionary will be sorted by the count\n    # The dictionary will contain the letter with the most repetition and the corresponding count\n    # The dictionary will be sorted by the count\n    # The dictionary will contain the letter with the most repetition and the corresponding count\n    # The dictionary will be sorted by the count\n    # The dictionary will contain the letter with the most repetition and the corresponding count\n    # The dictionary will be", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return dict(zip(test.split(), test.count(x) for x in test.split()))", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    for letter in test.lower():\n        if letter not in d:\n            d[letter] = 1\n        else:\n            d[letter] += 1\n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for letter in test.lower():\n        if letter not in dictionary:\n            dictionary[letter] = 1\n        else:\n            dictionary[letter] += 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow\n    # TODO: this is a bit slow", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of the letters with their occurrence\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # Sort the dictionary by the occurrence of the letters\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 0\n        letters[letter] += 1\n    # Sort the dictionary by the number of occurrences\n    letters.sort(key=lambda letter: letters[letter], reverse=True)\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def count(letter):\n        return sum(1 for word in test.split() if word.lower() == letter.lower())\n    return sorted({letter: count(letter) for letter in test.lower()}.items(), key=lambda x: x[1], reverse=True)[0][1]", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of the letters with their occurrence\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # Sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def _count(s):\n        return sum(1 for c in s if c in string.lowercase)\n    return dict([(c, _count(c)) for c in test])", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for letter in test:\n        if letter not in dictionary:\n            dictionary[letter] = 1\n        else:\n            dictionary[letter] += 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    for letter in test:\n        if letter not in d:\n            d[letter] = 1\n        else:\n            d[letter] += 1\n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # build a dictionary of the letters with their occurrence\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # sort the dictionary by the occurrence of the letters\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return dict([(letter, count) for letter, count in Counter(test).most_common(1)])", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def _histogram(s):\n        \"\"\"Return a dictionary of the letter with the most repetition and containing the\n        corresponding count. If several letters have the same occurrence, return all of them.\n        \"\"\"\n        counts = {}\n        for letter in s:\n            if letter not in counts:\n                counts[letter] = 1\n            else:\n                counts[letter] += 1\n        return counts\n\n    return _histogram(test)", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def _histogram(s):\n        \"\"\"Return a dictionary of the letter with the most repetition and containing the\n        corresponding count. If several letters have the same occurrence, return all of them.\n        \"\"\"\n        result = {}\n        for letter in s:\n            if letter not in result:\n                result[letter] = 1\n            else:\n                result[letter] += 1\n        return result\n    \n    return _histogram(test)", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # The dictionary will contain the letter with the most repetition and the corresponding count\n    # as keys\n    dictionary = {}\n    # The list will contain all the letters with the same repetition\n    letters = []\n    # The counter will contain the number of times the letter has been seen\n    counter = 0\n    # The string will contain the string to be analyzed\n    string = test\n    # The string will contain the letters found in the string\n    letters = string.split()\n    # The string will contain the letters found in the string\n    letters = list(set(letters))\n    # The string will contain the letters found in the string\n    letters = list(set(letters))\n    # The string will contain the letters found in the string\n    letters = list(set(letters))\n    # The string will contain the letters found in the string\n    letters = list(set(letters))\n    # The string will contain the letters found in the string\n    letters = list(set(letters))\n    # The string will contain the letters found in the string\n    letters = list(set(letters))\n    # The string will contain the letters found in the string\n    letters = list(set(letters))\n    # The string will contain the letters found in the string\n    letters = list(set(letters))\n    # The", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # The dictionary will contain the letter with the most repetition and the corresponding count.\n    # If several letters have the same occurrence, return all of them.\n    # The dictionary will be sorted by the count, so the first letter will be the one with the most occurrences.\n    # If the dictionary is empty, return an empty dictionary.\n    # If the dictionary is not sorted, return an empty dictionary.\n    # If the dictionary is not empty, return the dictionary sorted by the count.\n    # If the dictionary is not sorted by the count, return the dictionary sorted by the letter with the most occurrences.\n    # If the dictionary is not sorted by the letter with the most occurrences, return the dictionary sorted by the count.\n    # If the dictionary is not sorted by the count or the letter with the most occurrences, return an empty dictionary.\n    # If the dictionary is not sorted by the count or the letter with the most occurrences, return the dictionary sorted by the count.\n    # If the dictionary is not sorted by the count or the letter with the most occurrences, return the dictionary sorted by the letter with the most occurrences.\n    # If the dictionary is not sorted by the count or the letter with the most occurrences, return the dictionary sorted by the count.\n    # If the dictionary is not sorted by the count", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def _histogram(s):\n        \"\"\"Return a dictionary of the letter with the most repetition and containing the\n        corresponding count. If several letters have the same occurrence, return all of them.\n        \"\"\"\n        counts = {}\n        for i in range(len(s)):\n            if s[i] in counts:\n                counts[s[i]] += 1\n            else:\n                counts[s[i]] = 1\n        return counts\n\n    return _histogram(test)", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    d = {}\n    for letter in test.lower():\n        if letter not in d:\n            d[letter] = 0\n        d[letter] += 1\n    return d", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # TODO: make this more efficient\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    # TODO: make this work for strings with more than one space\n    #", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create a dictionary of the letters with their occurrence\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 0\n        letters[letter] += 1\n    # sort the dictionary by the occurrence of the letters\n    letters.sort(key=lambda letter: letters[letter], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of the letters with their occurrence\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 0\n        letters[letter] += 1\n    # Sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create a dictionary of the letters\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return dict([(letter, count) for letter, count in Counter(test).most_common(1)])", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary of the letters with their occurrence\n    letters = {}\n    for letter in test.lower().split():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # build a dictionary of the letters with their occurrence\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # sort the dictionary by the occurrence of the letters\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # build a dictionary of the letters with their occurrence\n    counts = {}\n    for letter in letters:\n        counts[letter] = letters[letter]\n    # return the dictionary\n    return counts", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return dict([(letter, count) for letter, count in Counter(test).most_common()])", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    return dict([(letter, count) for letter, count in Counter(test).most_common(1)])", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for letter in test:\n        if letter not in dictionary:\n            dictionary[letter] = 0\n        dictionary[letter] += 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dictionary = {}\n    for letter in test.lower():\n        if letter not in dictionary:\n            dictionary[letter] = 1\n        else:\n            dictionary[letter] += 1\n    return dictionary", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def count(letter):\n        return sum(1 for word in test.split() if word.lower() == letter.lower())\n    return dict([(letter, count(letter)) for letter in test.split()])", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Make a dictionary of the letters with their occurrence\n    letters = {}\n    for letter in test.lower():\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    # Sort the dictionary by the number of occurrences\n    letters.sort(key=lambda x: x[1], reverse=True)\n    # Return the dictionary\n    return letters", "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result"]]