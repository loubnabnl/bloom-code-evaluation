[["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Init\n    nums = []\n    for i in range(0, len(arr)):\n        nums.append(arr[i])\n    nums.sort(key=lambda x: x[0], reverse=True)\n\n    # Return\n    return nums", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def comparator(a, b):\n        \"\"\"\n        Comparator function.\n        It must return -1, 0 or 1 according to the criteria that you want to sort by.\n        \"\"\"\n        if a[1]!= b[1]:\n            if a[1] > b[1]:\n                return 1\n            else:\n                return -1\n        else:\n            if a[0] > b[0]:\n                return 1\n            else:\n                return -1\n    return sorted(arr, key=comparator)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_sort(arr):\n        \"\"\"\n        This function takes an array of non-negative integers as input and returns a\n        sorted array.\n        \"\"\"\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                temp = arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = temp\n    return binary_sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_binary_representation(n):\n        \"\"\"\n        Gets the binary representation of a number.\n        :param n: Number to be converted to binary\n        :return: Binary representation of the number\n        \"\"\"\n        if n < 0:\n            raise ValueError('Negative numbers are not allowed')\n        return ''.join(['0' if x == 1 else '1' for x in bin(abs(n))[2:]])\n\n    def compare_by_binary_representation(a, b):\n        \"\"\"\n        Compares two numbers by their binary representation.\n        :param a: Binary representation of the first number\n        :param b: Binary representation of the second number\n        :return: 0 if the two numbers are equal, -1 if the first number is less\n        than the second number, and 1 if the second number is less than the first\n        number.\n        \"\"\"\n        if a == b or a == 0:\n            return 0\n        if b == 0:\n            return 1\n        return -1\n\n    def compare_by_decimal_value(a, b):\n        \"\"\"\n        Compares two numbers by their decimal value.\n        :param a: Decimal value of the first number\n        :param b: Decimal value of the second number\n        :return: 0 if the two numbers are equal, -1 if the first number is less\n        than the second number, and 1 if the second", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Step 1: convert integer array to binary string\n    # Step 2: sort binary string in ascending order\n    # Step 3: convert binary string to integer array\n    # Step 4: return integer array\n    arr = [str(arr[i]) for i in range(len(arr))]\n    arr = sorted(arr, key=lambda x: x.count(\"1\"))\n    return [int(x) for x in arr]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 1:\n        return []\n    if len(arr) == 1:\n        return arr\n    elif len(arr) == 2:\n        return [arr[0]]\n    elif len(arr) == 3:\n        arr1 = [arr[0]]\n        arr2 = [arr[1]]\n        arr3 = [arr[2]]\n        for i in range(3, len(arr)):\n            if arr[i]!= 0:\n                arr1.append(arr[i])\n                arr2.append(arr[i - 1])\n                arr3.append(arr[i - 2])\n        return [arr1, arr2, arr3]\n    else:\n        arr1 = [arr[0]]\n        arr2 = [arr[1]]\n        arr3 = [arr[2]]\n        arr4 = [arr[3]]\n        for i in range(4, len(arr)):\n            if arr[i]!= 0:\n                arr1.append(arr[i])\n                arr2.append(arr[i - 1])\n                arr3.append(arr[i - 2])\n                arr4.append(arr[i - 3])\n        return [arr1, arr2, arr3, arr4]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] == 0:\n        return [arr[0]]\n    if arr[0] == 1:\n        return [arr[0], arr[1]]\n    if arr[0] == 2:\n        return [arr[0], arr[1]]\n    if arr[0] == 3:\n        return [arr[0], arr[1]]\n    if arr[0] == 4:\n        return [arr[0], arr[1]]\n    if arr[0] == 5:\n        return [arr[0], arr[1]]\n    if arr[0] == 6:\n        return [arr[0], arr[1]]\n    if arr[0] == 7:\n        return [arr[0], arr[1]]\n    if arr[0] == 8:\n        return [arr[0], arr[1]]\n    if arr[0] == 9:\n        return [arr[0], arr[1]]\n    if arr[0] == 10:\n        return [arr[0], arr[1]]\n    if arr[0] == 11:\n        return [arr[0], arr[1]]\n    if arr[0] == 12:\n        return [arr[0], arr[1]]\n    if arr[0] == 13:\n        return [arr[0], arr[1]]\n    if arr[0] == 14:\n        return [arr[0], arr[1]]\n    if arr[0] == 15:\n        return [arr[0], arr[1]]\n    if arr[0] == 16:\n        return", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        if a[0] == b[0]:\n            if a[1] == b[1]:\n                return a[2] - b[2]\n            else:\n                return a[1] - b[1]\n        else:\n            return a[0] - b[0]\n\n    if len(arr) == 0:\n        return []\n    else:\n        arr = list(arr)\n        arr.sort(key=compare)\n        return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        \"\"\"\n        Compares the numbers based on their number of ones in binary\n        representation.\n        \"\"\"\n        if len(str(a)) > len(str(b)):\n            return -1\n        elif len(str(a)) < len(str(b)):\n            return 1\n        else:\n            return cmp(a, b)\n\n    return sorted(arr, cmp=cmp)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(x, y):\n        \"\"\"\n        It is a comparison function. It compares two numbers and returns -1, 0, or 1.\n        It must be implemented like this:\n        >>> cmp(1, 1) == -1\n        >>> cmp(1, 2) == 0\n        >>> cmp(1, 3) == 1\n        \"\"\"\n        if x == y:\n            return 0\n        if x < y:\n            return -1\n        else:\n            return 1\n\n    # if there is a key in the array, return the key\n    if len(arr) > 0:\n        return arr[0]\n\n    # if there is no key in the array, create a new array with all elements\n    # sorted\n    arr = [None] * len(arr)\n\n    for i in range(len(arr)):\n        if arr[i] is not None:\n            arr[i] = arr[i] + 1\n\n    # sort the new array\n    sort_array(arr)\n\n    # return the key\n    return arr[0]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        if a < b:\n            return -1\n        elif a == b:\n            return 0\n        else:\n            return 1\n\n    # convert array to binary representation\n    arr = [int(b) for b in str(arr)]\n    arr = sorted(arr)\n    # convert back to integer\n    arr = [int(a) for a in str(arr)]\n\n    # compare integers\n    return compare(arr[0], arr[-1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        \"\"\"\n        Compare two elements a and b in the array.\n        \"\"\"\n        if a == b:\n            return 0\n        elif a > b:\n            return 1\n        else:\n            return -1\n\n    a = sorted(arr, key=lambda x: cmp(x, 0))\n    return a", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def number_of_ones(x):\n        \"\"\"\n        Returns number of ones in the binary representation of x.\n        \"\"\"\n        return sum([bool(x & x)] * 2)\n\n    def one_minus_number_of_ones(x):\n        \"\"\"\n        Returns 1 - number of ones in the binary representation of x.\n        \"\"\"\n        return 1 - sum([bool(x & x)])\n\n    def reverse(a):\n        \"\"\"\n        Reverses the order of the elements in the array a.\n        \"\"\"\n        return [item for sublist in reversed(a) for item in sublist]\n\n    def sort_ascending(a):\n        \"\"\"\n        Sorts the array a in ascending order.\n        \"\"\"\n        return sorted(a, key=number_of_ones)\n\n    def sort_decending(a):\n        \"\"\"\n        Sorts the array a in descending order.\n        \"\"\"\n        return sorted(a, key=one_minus_number_of_ones)\n\n    arr = sorted(arr, key=sort_ascending)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_func(a, b):\n        \"\"\"\n        This function is used to sort the given array.\n        \"\"\"\n        if a == 0:\n            return -1\n        elif b == 0:\n            return 1\n        else:\n            return cmp(b, a)\n    return sorted(arr, key=sort_func)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    if len(arr) == 2:\n        return [arr[0], arr[1]]\n    if len(arr) == 3:\n        return [arr[0], arr[1], arr[2]]\n    if len(arr) == 4:\n        return [arr[0], arr[1], arr[2], arr[3]]\n    if len(arr) == 5:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4]]\n    if len(arr) == 6:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]]\n    if len(arr) == 7:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]]\n    if len(arr) == 8:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]]\n    if len(arr) == 9:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8]]\n    if len(arr) == 10:\n        return [arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # write your code here\n    # change the following line to what you want to do\n    arr = sorted(arr, key=lambda x: x.count('1'))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # we will use a dict to store the key for each element\n    # we will use a list to store the values\n    # we will store the values in the same order as the keys\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to store the values\n    # we will use a list to", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # First, let's make sure we have an array\n    if not(isinstance(arr, list)):\n        raise ValueError(\"Input array must be list\")\n\n    # Let's create an empty list to store the sorted array\n    sorted = []\n\n    # Let's make sure we have an array\n    if not(isinstance(arr, list)):\n        raise ValueError(\"Input array must be list\")\n\n    # Let's create an empty list to store the sorted array\n    sorted = []\n\n    # Let's make sure we have an array\n    if not(isinstance(arr, list)):\n        raise ValueError(\"Input array must be list\")\n\n    # Let's make sure we have an array\n    if not(isinstance(arr, list)):\n        raise ValueError(\"Input array must be list\")\n\n    # Let's make sure we have an array\n    if not(isinstance(arr, list)):\n        raise ValueError(\"Input array must be list\")\n\n    # Let's make sure we have an array\n    if not(isinstance(arr, list)):\n        raise ValueError(\"Input array must be list\")\n\n    # Let's make sure we have an array\n    if not(isinstance(arr, list)):\n        raise ValueError(\"Input array must be", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x[0])\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    else:\n        return sorted(arr, key=lambda x: x[0])[::-1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort()\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        if a > b:\n            return 1\n        elif a < b:\n            return -1\n        else:\n            return 0\n\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i]!= arr[j]:\n                if cmp(arr[i], arr[j]) < 0:\n                    temp = arr[i]\n                    arr[i] = arr[j]\n                    arr[j] = temp\n        if cmp(arr[0], arr[-1]) < 0:\n            temp = arr[0]\n            arr[0] = arr[-1]\n            arr[-1] = temp\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return\n    elif n == 1:\n        return arr[0]\n    else:\n        is_sorted = False\n        while not is_sorted:\n            is_sorted = True\n            for i in range(n):\n                if arr[i] > arr[i + 1]:\n                    tmp = arr[i]\n                    arr[i] = arr[i + 1]\n                    arr[i + 1] = tmp\n                    is_sorted = False\n                elif arr[i] == arr[i + 1]:\n                    is_sorted = False\n        return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp_ones(a, b):\n        \"\"\"\n        Compare the number of ones in a and b, and return -1 if a is bigger than b,\n        1 if a is smaller than b, and 0 if they are equal.\n        \"\"\"\n        if a and b:\n            return cmp(a[0], b[0])\n        else:\n            return 0\n\n    def cmp_dec(a, b):\n        \"\"\"\n        Compare the decimal value of a and b, and return -1 if a is bigger than b,\n        1 if a is smaller than b, and 0 if they are equal.\n        \"\"\"\n        if a and b:\n            return cmp(a, b)\n        else:\n            return 0\n\n    def sort(a):\n        \"\"\"\n        Sort the array a.\n        \"\"\"\n        a.sort(cmp_ones)\n\n    def reverse(a):\n        \"\"\"\n        Reverse the array a.\n        \"\"\"\n        a.reverse(cmp_dec)\n\n    return sort(reverse(sort(a)))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return arr\n    if len(arr) % 2 == 0:\n        return\n    def cmp(a, b):\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n    if arr[0] < arr[1]:\n        return cmp(arr[0], arr[1])\n    return cmp(arr[1], arr[0])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: int(x))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    else:\n        if len(arr) > 1:\n            if arr[0] == arr[-1]:\n                return [arr[0]]\n            else:\n                if arr[0] > arr[-1]:\n                    return sort_array(arr[1:]) + [arr[0]]\n                else:\n                    return sort_array(arr[:-1]) + [arr[-1]]\n        else:\n            return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _binary(x):\n        \"\"\"\n        Returns the binary representation of x.\n\n        >>> _binary(-1) == '1101'\n        \"\"\"\n        return '0111' if x < 0 else '1000'\n\n    def _asc(x, y):\n        \"\"\"\n        Returns the number of ones in the binary representation of x and y.\n\n        >>> _asc(2, 2) == 1\n        \"\"\"\n        return x > y\n\n    def _asc_d(x, y):\n        \"\"\"\n        Returns the difference between the number of ones in the binary representation of x and y.\n\n        >>> _asc_d(2, 2) == 1\n        \"\"\"\n        return x - y\n\n    def _asc_e(x, y):\n        \"\"\"\n        Returns the number of ones in the binary representation of x minus the number of ones in the binary representation of y.\n\n        >>> _asc_e(2, 2) == 1\n        \"\"\"\n        return x - y\n\n    def _asc_f(x, y):\n        \"\"\"\n        Returns the number of ones in the binary representation of x minus the number of ones in the binary representation of y.\n\n        >>> _asc_f(2, 2) == 1\n        \"\"\"\n        return x - y\n\n    def _asc_g(x, y)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def compare(a, b):\n        if a > b:\n            return 1\n        elif a < b:\n            return -1\n        else:\n            return 0\n\n    def sort_by_one(arr):\n        \"\"\"\n        Sorts array based on number of ones in the binary representation of each\n        element.\n\n        :param arr: Array of non-negative integers\n        :return: Array of sorted elements\n        \"\"\"\n        result = []\n        for i in range(len(arr)):\n            if arr[i] & 1:\n                result.append(arr[i])\n            else:\n                result.append(0)\n        return result\n\n    return sort_by_one(sort_array(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # The array is already sorted in ascending order\n    if len(arr) <= 1:\n        return arr\n    # The array is sorted in descending order\n    if len(arr) > 1:\n        if arr[0] < arr[1]:\n            return sort_array(arr[1:])\n        elif arr[0] > arr[1]:\n            return sort_array(arr[:-1])\n    # The array is not sorted\n    # First, convert the array to a string\n    str_arr = \"\".join(map(str, arr))\n    # Now, split the string into two parts, where each part has the same number\n    # of ones in its binary representation\n    num_ones = int(str_arr[0:2], 2)\n    str_arr = str_arr[2:]\n    num_ones = int(str_arr[0:2], 2)\n    str_arr = str_arr[2:]\n    # Now, sort the two parts\n    num_ones = sort_array(num_ones)\n    str_arr = sort_array(str_arr)\n    # Now, return the array\n    return str_arr + num_ones", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # It is a requirement to sort the array in ascending order of number of ones\n    # in their binary representation\n    # But, it is not required to sort the array in ascending order of decimal value\n    # of the numbers in the array\n\n    # Get a list of the ones in the array\n    ones = [int(x) for x in str(arr).count('1')]\n\n    # Sort the list of the ones in the array\n    ones.sort(key=lambda x: x)\n\n    # Get the number of ones in the sorted list of the ones\n    num_ones = len(ones)\n\n    # Get the number of zeroes in the array\n    num_zeros = len(str(arr).count('0'))\n\n    # Sort the list of the zeroes in the array\n    num_zeros.sort(key=lambda x: x)\n\n    # Get the number of ones in the sorted list of the zeroes\n    num_zeroes = len(num_zeros)\n\n    # Get the number of ones in the array\n    num_ones = num_ones + num_zeroes\n\n    # Sort the list of the ones in the array\n    num_ones.sort(key=lambda x: x)\n\n    # Get the number of ones in the sorted list of", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr\n    for i in range(1, len(arr)):\n        if arr[i] == 0:\n            continue\n        if arr[i] > 0:\n            continue\n        return sort_array(arr[:i] + [arr[i + 1]])\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    res = []\n    for num in arr:\n        if num > 0:\n            res.append(num)\n    res.sort(key=lambda x: x)\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # create a new array with ones\n    ones = [1 for i in range(len(arr))]\n    # sort the ones\n    ones.sort()\n    # sort the array\n    arr.sort(key=lambda x: x - ones[x % 2])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        return cmp(a, b, 1)\n    return sorted(arr, cmp=cmp)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(x, y):\n        if x > y:\n            return 1\n        elif x < y:\n            return -1\n        else:\n            return 0\n\n    arr.sort(cmp)\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2:\n        return arr\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return arr\n        else:\n            return sort_array(arr[1:]) + sort_array(arr[:1])\n    else:\n        # First, make a list of all the numbers with the same number of ones.\n        # For example, [1, 1, 0, 0, 0, 0] has two ones, so we will have two\n        # numbers with two ones in the list.\n        nums_with_two_ones = []\n        for i in range(len(arr)):\n            if arr[i] == 0:\n                continue\n            if nums_with_two_ones:\n                nums_with_two_ones.append(arr[i])\n            else:\n                nums_with_two_ones.append(0)\n        # Now, sort the numbers with two ones according to their decimal\n        # value.\n        # For example, [2, 2, 2, 2, 2, 2] has four ones, so we will have\n        # four numbers with four ones in the list.\n        nums_with_four_ones = []\n        for i in range(len(nums_with_two_ones)):\n            nums_with_four_ones.append(nums_with_two_ones", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        This function should return -1 if a is greater than b, 0 if a is equal to\n        b and 1 if a is less than b.\n        \"\"\"\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    arr = list(arr)\n    #sort the array based on number of ones\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        This function is called for comparing two elements. It must return\n        a positive integer if a is greater than b, a negative integer if a is\n        less than b, and zero if a and b are equal.\n        \"\"\"\n        return (a - b) ** 2\n\n    def recurse(arr, level):\n        \"\"\"\n        This function is called for sorting an array recursively. It must\n        return a new array of the same length as arr, but with the elements\n        sorted in ascending order.\n        \"\"\"\n        if level == 0:\n            return arr\n        else:\n            arr2 = []\n            for i in range(0, len(arr)):\n                arr2.append(arr[i])\n                arr2.append(recurse(arr[:i], level - 1))\n                arr2.append(recurse(arr[i + 1:], level - 1))\n            return arr2\n\n    return recurse(arr, 0)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sorting according to number of ones\n    def cmp(x, y):\n        if x > y:\n            return 1\n        elif x == y:\n            return 0\n        else:\n            return -1\n\n    # Sorting according to decimal value\n    def cmp2(x, y):\n        if x < y:\n            return 1\n        elif x == y:\n            return 0\n        else:\n            return -1\n\n    # Sorting according to number of ones\n    a = sorted(arr, key=cmp)\n    # Sorting according to decimal value\n    b = sorted(arr, key=cmp2)\n    return b", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def helper(arr):\n        \"\"\"\n        Helper function that sorts the array.\n        \"\"\"\n        if arr[0] == 0:\n            return\n        if arr[0] > arr[-1]:\n            return\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n        return arr\n    return helper(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        return cmp(b - a)\n\n    # create a sorted array\n    s = []\n    for i in range(len(arr)):\n        s.append(arr[i])\n\n    # sort by number of ones\n    s.sort(cmp=cmp)\n\n    return s", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Create a dictionary to store the number of ones for each element\n    ones = {}\n    for i in range(len(arr)):\n        ones[arr[i]] = 0\n    # Sort the array based on the dictionary\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] == arr[j]:\n                continue\n            if ones[arr[i]] > ones[arr[j]]:\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # use a dictionary to store the results\n    results = {}\n    # create a list of numbers\n    numbers = []\n    # iterate over the array\n    for i in range(len(arr)):\n        # add the number to the list\n        numbers.append(arr[i])\n    # sort the numbers\n    numbers.sort()\n    # iterate over the sorted list\n    for i in range(len(numbers)):\n        # add the number to the results dict\n        results[numbers[i]] = i\n    # return the results dict\n    return results", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # 1. Convert all numbers to binary\n    arr = map(lambda x: int(\"0x\" + str(x).zfill(8), 2), arr)\n    # 2. Sort based on number of ones\n    arr.sort(key=lambda x: len(str(x).count(\"1\")))\n    # 3. Convert back to decimal\n    arr = map(lambda x: int(\"0x\" + str(x).zfill(8), 16), arr)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Implementing algorithm\n    def compare(a, b):\n        \"\"\"\n        Comparing two integers\n        \"\"\"\n        if a == 0:\n            return 1\n        elif b == 0:\n            return -1\n        elif a < b:\n            return -1\n        elif a > b:\n            return 1\n        else:\n            return 0\n\n    # Sorting array\n    arr = sorted(arr, key=compare, reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # if there are no ones in the array, return a copy of the array\n    if len(arr) == 0:\n        return arr\n    # sort the array based on number of ones\n    sorted = sorted(arr, key=lambda x: x[0])\n    # if the array is empty, return a copy of the array\n    if len(sorted) == 0:\n        return arr\n    # sort the array based on decimal value\n    sorted = sorted(sorted, key=lambda x: x[1])\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def is_equal(a, b):\n        if a == b:\n            return True\n        if a < b:\n            return False\n        return True\n\n    if len(arr) <= 1:\n        return arr\n    else:\n        arr.sort(key=is_equal)\n        return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [int(x) for x in arr]\n    arr.sort(key=lambda x: x%2==0)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        return cmp(int(b) - int(a))\n\n    return sorted(arr, key=cmp)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return sort_array(arr[1:])\n        else:\n            return sort_array(arr[:-1])\n    else:\n        arr = sorted(arr)\n        return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        if a > b:\n            return 1\n        elif a == b:\n            return 0\n        else:\n            return -1\n\n    sorted = []\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        elif arr[i] == 1:\n            sorted.append(i)\n        else:\n            sorted.append(cmp(arr[i], i))\n\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        if arr[i]:\n            result.append(arr[i])\n        else:\n            result.append(0)\n    result.sort()\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0]]\n    else:\n        # This function is used to sort the array based on the number of ones in their binary representation\n        # Sort the array based on the number of ones in their binary representation\n        # Sort the array based on the number of ones in their binary representation\n        # Sort the array based on the number of ones in their binary representation\n        # Sort the array based on the number of ones in their binary representation\n        # Sort the array based on the number of ones in their binary representation\n        # Sort the array based on the number of ones in their binary representation\n        # Sort the array based on the number of ones in their binary representation\n        # Sort the array based on the number of ones in their binary representation\n        # Sort the array based on the number of ones in their binary representation\n        # Sort the array based on the number of ones in their binary representation\n        # Sort the array based on the number of ones in their binary representation\n        # Sort the array based on the number of ones in their binary representation\n        # Sort the array based on the number of ones in their binary representation\n        # Sort the array based on the number of ones in their binary representation", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if len(arr) > 0:\n        if arr[0] == 0:\n            return [arr]\n        elif arr[0] == 1:\n            return [arr[1:], arr[0]]\n        else:\n            num_ones = 0\n            for i in range(0, len(arr)):\n                if arr[i] == 1:\n                    num_ones += 1\n            if num_ones > 0:\n                num_ones = 1 + num_ones\n            else:\n                num_ones = 0\n            return [arr[-num_ones:]]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # for each element in array\n    for i in range(len(arr)):\n        # if the element is less than the current element\n        if arr[i] < arr[i-1]:\n            # swap the current element with the previous one\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n        # if the element is greater than the current element\n        elif arr[i] > arr[i-1]:\n            # swap the current element with the next one\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n        # if the element is equal to the current element\n        else:\n            # no swap\n            pass\n    # return sorted array\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        return [arr[0], arr[1]]\n    if len(arr) == 3:\n        return [arr[0], arr[1], arr[2]]\n    if len(arr) == 4:\n        return [arr[0], arr[1], arr[2], arr[3]]\n    #Sort by number of ones\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        if arr[i] > 0:\n            continue\n        if arr[i] < 0:\n            continue\n        if arr[i] == 1:\n            return [arr[i - 1], arr[i], arr[i + 1]]\n        if arr[i] == 2:\n            return [arr[i - 1], arr[i], arr[i + 1]]\n        if arr[i] == 3:\n            return [arr[i - 1], arr[i], arr[i + 1]]\n        if arr[i] == 4:\n            return [arr[i - 1], arr[i], arr[i + 1]]\n    return [arr[0], arr[1], arr[2], arr[3]]\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [int(i) for i in arr]\n    return sorted(arr, key=lambda x: x.count('1'), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort()\n    if len(arr) == 1:\n        return arr[0]\n    num, rest = divmod(len(arr), 2)\n    if num == 0:\n        return rest\n    return arr[num:] + arr[:num]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    result = []\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            result.append(0)\n        else:\n            result.append(arr[i])\n    result = sorted(result)\n    result = list(reversed(result))\n    result = [str(i) for i in result]\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        return a - b\n\n    def sort(a):\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                if compare(a[i], a[j]) > 0:\n                    temp = a[i]\n                    a[i] = a[j]\n                    a[j] = temp\n\n    return sorted(a, key=sort)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def num_ones(num):\n        return num & 1\n\n    def num_zeros(num):\n        return num - num_ones(num)\n\n    def compare(a, b):\n        if num_zeros(a) > num_zeros(b):\n            return -1\n        elif num_zeros(a) < num_zeros(b):\n            return 1\n        else:\n            return num_ones(a) - num_ones(b)\n\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        Compares two elements, and returns a negative integer, zero, or a positive integer as\n        follows:\n        - if a is less than b, return a - b\n        - if a is greater than b, return b - a\n        - if a is equal to b, return 0\n        \"\"\"\n        if a < b:\n            return -1\n        elif a > b:\n            return 1\n        else:\n            return 0\n    if len(arr) == 0:\n        return arr\n    else:\n        return sorted(arr, key=compare, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sorting by number of ones\n    sorted_array = []\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            sorted_array.append(arr[i])\n        else:\n            sorted_array.append(arr[i] / 2)\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_num_binary(number):\n        \"\"\"\n        Returns the number of ones in the binary representation of number.\n        \"\"\"\n        binary = 0\n        for i in range(8):\n            binary += number & 1\n            number >>= 1\n        return binary\n\n    def get_one_decimal(number):\n        \"\"\"\n        Returns the decimal value of number.\n        \"\"\"\n        if number == 0:\n            return 0\n        else:\n            return number / 2\n\n    arr = list(map(int, arr))\n    sorted_array = sorted(arr, key=get_num_binary)\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\n    sorted_array = sorted(arr, key=get_one_decimal)\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    num_ones = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        elif arr[i] == 1:\n            num_ones += 1\n    if num_ones == 0:\n        return arr\n    elif num_ones == 1:\n        return arr[0]\n    else:\n        return sort_array(arr[1:]) + [arr[0]]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort the array in ascending order of number of ones\n    # in the binary representation\n    def cmp(x, y):\n        if x == y:\n            return 0\n        elif x < y:\n            return -1\n        else:\n            return 1\n\n    # Sort the array in ascending order of decimal value\n    # of the elements\n    def cmp_d(x, y):\n        if x == y:\n            return 0\n        elif x < y:\n            return -1\n        else:\n            return 1\n\n    # Sort the array in ascending order of decimal value\n    # of the elements\n    def cmp_d2(x, y):\n        if x == y:\n            return 0\n        elif x < y:\n            return -1\n        else:\n            return 1\n\n    # Sort the array in ascending order of decimal value\n    # of the elements\n    def cmp_d3(x, y):\n        if x == y:\n            return 0\n        elif x < y:\n            return -1\n        else:\n            return 1\n\n    # Sort the array in ascending order of decimal value\n    # of the elements\n    def cmp_d4(x, y):\n        if x == y:\n            return 0\n        elif x < y:\n            return -1\n        else:\n            return 1\n\n    # Sort the array in ascending order of decimal value\n    # of the elements", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(x):\n        return sum(1 for y in x if y == 1)\n    res = []\n    for i in range(len(arr)):\n        res.append(count_ones(arr[i]))\n    return sorted(res)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # If there is only one element, return it\n    if len(arr) == 1:\n        return arr[0]\n\n    # If there are more than one elements, return sorted array\n    return sorted(arr, key=lambda x: x[1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(n):\n        return n & 1\n\n    def decimal(n):\n        return n - binary(n) * 2\n\n    def sort(arr):\n        arr.sort(key=lambda x: x[0], reverse=True)\n        sort(arr)\n        sort(arr)\n\n    arr = [binary(i) for i in range(len(arr))]\n    sort(arr)\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    num_ones = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            num_ones += 1\n    if num_ones == 0:\n        return\n    if num_ones == 1:\n        return arr\n    if num_ones == 2:\n        return arr[:-1] + arr[1:]\n    if num_ones == 3:\n        return arr[:-2] + arr[-2:]\n    if num_ones == 4:\n        return arr[:-3] + arr[-3:]\n    if num_ones == 5:\n        return arr[:-4] + arr[-4:]\n    if num_ones == 6:\n        return arr[:-5] + arr[-5:]\n    if num_ones == 7:\n        return arr[:-6] + arr[-6:]\n    if num_ones == 8:\n        return arr[:-7] + arr[-7:]\n    if num_ones == 9:\n        return arr[:-8] + arr[-8:]\n    if num_ones == 10:\n        return arr[:-9] + arr[-9:]\n    if num_ones == 11:\n        return arr[:-10] + arr[-10:]\n    if num_ones == 12:\n        return arr[:-11] + arr[-11:]\n    if num_ones == 13:\n        return arr[:-12] +", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        Return 0 if a and b have same number of ones in their binary representation,\n        1 if a is smaller than b, -1 if b is smaller than a.\n        \"\"\"\n        if len(str(b)) == len(str(a)):\n            return 0\n        if len(str(b)) > len(str(a)):\n            return -1\n        if len(str(b)) < len(str(a)):\n            return 1\n        if 0b00001 == 0b00010:\n            return 1\n        if 0b00001 == 0b00100:\n            return -1\n        if 0b00010 == 0b00100:\n            return 1\n        if 0b00100 == 0b00110:\n            return -1\n        if 0b00100 == 0b00111:\n            return 1\n        if 0b00110 == 0b00111:\n            return -1\n        if 0b00111 == 0b00111:\n            return -1\n        if 0b00111 == 0b00010:\n            return -1\n        if 0b00111 == 0b00110:\n            return 1\n        return 0\n\n    arr = sorted(arr, key=lambda x: x, reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2:\n        return arr\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return arr + (arr[1],)\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    def comparator(a, b):\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n    return sorted(arr, key=comparator)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    # binary representation\n    # make a binary representation of each element\n    # and use the number of ones to sort\n    # sort based on the number of ones\n    # sort based on the decimal value\n    # sort based on the decimal value\n    # sort based on the decimal value\n    # sort based on the decimal value\n    # sort based on the decimal value\n    return sorted(arr, key=lambda x: x[1], reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def compare(a, b):\n        \"\"\"\n        It compares two elements of the array based on the number of ones in their binary\n        representation in ascending order. If the number of ones in the binary representation\n        of two elements are equal, then it compares the decimal value of the two elements.\n        \"\"\"\n        if a > b:\n            return 1\n        elif a < b:\n            return -1\n        else:\n            return 0\n\n    return sorted(arr, key=lambda x: compare(x, arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        if a[0] == b[0]:\n            return a[1] - b[1]\n        return cmp(a[0], b[0])\n    a = []\n    b = []\n    for i in range(len(arr)):\n        if arr[i][0]:\n            a.append(arr[i])\n        else:\n            b.append(arr[i])\n    return sorted(a, key=compare, reverse=True) + sorted(b, key=compare, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # print(arr)\n    # print(type(arr))\n    # print(arr.count('1'))\n    # print(arr.count('0'))\n    # print(arr.count('2'))\n    # print(arr.count('3'))\n    # print(arr.count('4'))\n    # print(arr.count('5'))\n    # print(arr.count('6'))\n    # print(arr.count('7'))\n    # print(arr.count('8'))\n    # print(arr.count('9'))\n    # print(arr.count('10'))\n    # print(arr.count('11'))\n    # print(arr.count('12'))\n    # print(arr.count('13'))\n    # print(arr.count('14'))\n    # print(arr.count('15'))\n    # print(arr.count('16'))\n    # print(arr.count('17'))\n    # print(arr.count('18'))\n    # print(arr.count('19'))\n    # print(arr.count('20'))\n    # print(arr.count('21'))\n    # print(arr.count('22'))\n    # print(arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return sort_array(arr[1:]) + sort_array(arr[:1])\n        elif arr[0] < arr[1]:\n            return sort_array(arr[1:]) + sort_array(arr[:-1])\n    else:\n        if arr[0] > arr[1]:\n            if arr[0] > arr[2]:\n                return sort_array(arr[1:]) + sort_array(arr[:1])\n            elif arr[0] < arr[2]:\n                return sort_array(arr[1:]) + sort_array(arr[:-1])\n        elif arr[0] < arr[1]:\n            if arr[0] > arr[3]:\n                return sort_array(arr[1:]) + sort_array(arr[:1])\n            elif arr[0] < arr[3]:\n                return sort_array(arr[1:]) + sort_array(arr[:-1])\n        else:\n            if arr[0] > arr[2]:\n                if arr[0] > arr[3]:\n                    return sort_array(arr[1:]) + sort_array(arr[:1])\n                elif arr[0] < arr[3]:\n                    return sort_array(arr[1:]) + sort_array(arr[:-1])\n            elif arr[0] < arr[2]:\n                if arr[0] > arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x[0])\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        if a is not None and b is not None:\n            if a == 0:\n                return 1\n            elif b == 0:\n                return -1\n            else:\n                return cmp(a, b)\n        else:\n            return cmp(a, b)\n\n    def compare(a, b):\n        if a == b:\n            return 0\n        else:\n            return cmp(a, b)\n\n    def cmp_dec(a, b):\n        if a is not None and b is not None:\n            if a == 0:\n                return 1\n            elif b == 0:\n                return -1\n            else:\n                return cmp_dec(a, b)\n        else:\n            return cmp_dec(a, b)\n\n    def compare_dec(a, b):\n        if a == b:\n            return 0\n        else:\n            return cmp_dec(a, b)\n\n    arr = sorted(arr, cmp=compare)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def cmp_ones(a, b):\n        \"\"\"\n        Return the number of ones in the binary representation of a and b.\n        \"\"\"\n        if a == 0:\n            return 1\n        elif b == 0:\n            return 0\n        else:\n            return cmp(a, b)\n\n    def cmp_dec(a, b):\n        \"\"\"\n        Return the decimal value of a and b.\n        \"\"\"\n        if a == 0:\n            return 0\n        elif b == 0:\n            return 0\n        else:\n            return cmp(a, b)\n\n    def sort(arr):\n        \"\"\"\n        Sort the array according to the number of ones.\n        \"\"\"\n        if len(arr) == 0:\n            return\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                if arr[i] == arr[j]:\n                    continue\n                if cmp_ones(arr[i], arr[j]) > 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                if cmp_ones(arr[i], arr[j]) < 0:\n                    arr[j], arr[i] = arr[i], arr[j]\n        sort(arr[:-1])\n        sort(arr[1:])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(x, y):\n        \"\"\"\n        This is the main function of the Kata. It compares two integers\n        based on their number of ones. If they are equal, it compares their\n        decimal value.\n\n        It must be implemented like this:\n        >>> cmp(1, 1) == 0\n        >>> cmp(1, 0) == 1\n        \"\"\"\n        if x == y:\n            return cmp(int(x), int(y))\n        elif x < y:\n            return -1\n        else:\n            return 1\n\n    def swap(x, y):\n        \"\"\"\n        Swap two elements of the array.\n\n        It must be implemented like this:\n        >>> swap(1, 2)\n        >>> swap(2, 1)\n        \"\"\"\n        temp = x\n        x = y\n        y = temp\n\n    arr.sort(cmp=cmp)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def comparator(a, b):\n        \"\"\"\n        Sorts the elements in the array in ascending order.\n        \"\"\"\n        if a < b:\n            return -1\n        elif a > b:\n            return 1\n        else:\n            return 0\n\n    return sorted(arr, key=comparator)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _compare(a, b):\n        if a < b:\n            return -1\n        elif a == b:\n            return 0\n        else:\n            return 1\n\n    return sorted(arr, key=_compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    sorted_arr = []\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            sorted_arr.append(arr[i])\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            sorted_arr.insert(i, arr[i])\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def compare(a, b):\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(x, y):\n        return cmp(x, y)\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    if len(arr) < 2:\n        return result\n    binary = arr[0]\n    for i in range(1, len(arr)):\n        binary = binary + arr[i]\n    binary = binary + arr[len(arr) - 1]\n    if binary == '0':\n        return result\n    else:\n        for i in range(1, len(arr) - 1):\n            if binary % 2 == 0:\n                result.append(arr[i])\n        return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        if arr[0] < arr[1]:\n            return [arr[0], arr[1]]\n        else:\n            return [arr[1], arr[0]]\n    if len(arr) > 2:\n        if arr[0] < arr[1]:\n            return [arr[0], arr[1]]\n        else:\n            return [arr[1], arr[0]]\n    if len(arr) < 2:\n        return [arr[0], arr[1]]\n    if arr[0] == arr[1]:\n        return [arr[0]]\n    if arr[0] > arr[1]:\n        return [arr[1], arr[0]]\n    return [arr[0]]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(x, y):\n        if x > y:\n            return 1\n        elif x == y:\n            return 0\n        else:\n            return -1\n\n    sorted = []\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        elif arr[i] == 1:\n            sorted.append(arr[i])\n        else:\n            sorted.append(0)\n    sorted.sort(compare)\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    return sorted(arr, key=lambda x: x[1], reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    n = len(arr)\n    m = n - 1\n    if n == 1:\n        return arr\n    if n == 0:\n        return []\n    while n > 1:\n        i = n / 2\n        j = n - i\n        if arr[i] > arr[j]:\n            n = n - i\n            m = j\n        else:\n            n = j\n            m = i\n        if n == 0:\n            return []\n    return [arr[m]]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _cmp(a, b):\n        if a > b:\n            return 1\n        elif a == b:\n            return 0\n        else:\n            return -1\n\n    return sorted(arr, key=_cmp)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    return sorted(arr, cmp=cmp)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # 1. sort based on number of ones\n    array = sorted(arr, key=lambda x: x[1], reverse=True)\n    # 2. sort based on decimal value\n    array = sorted(array, key=lambda x: x[0], reverse=True)\n    return array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Initially, set the array to the original order\n    arr.sort(reverse=True)\n    # Set the array to the reversed order\n    arr.sort(reverse=False)\n\n    # Finally, set the array to the desired order\n    arr.sort(reverse=True, key=lambda x: x[1])\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers in order to sort them.\n        \"\"\"\n        if a > b:\n            return 1\n        elif a == b:\n            return 0\n        else:\n            return -1\n\n    res = []\n    for i in range(len(arr)):\n        res.append(arr[i])\n    res.sort(compare)\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(x, y):\n        if x == y:\n            return 0\n        elif x > y:\n            return 1\n        elif x < y:\n            return -1\n        else:\n            return cmp(str(x), str(y))\n    return sorted(arr, cmp=cmp)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x: x[0])\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    if len(arr) < 2:\n        return arr\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return sort_array(arr[1:]) + [arr[0]]\n        else:\n            return [arr[0]]\n    if len(arr) == 1:\n        return arr\n    if arr[0] > arr[-1]:\n        return sort_array(arr[1:]) + [arr[0]]\n    else:\n        return [arr[0]]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr[0]\n    arr.sort(key=lambda x: (x&1, x>>1))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # TODO add sorting logic here\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def compare(a, b):\n        \"\"\"\n        Returns a negative number if a is less than b, zero if a and b are equal,\n        and a positive number if a is greater than b.\n        \"\"\"\n        if a == b:\n            return 0\n\n        if a > b:\n            return 1\n\n        return -1\n\n    # Sort the array based on the number of ones in their binary representation.\n    # The numbers are sorted in ascending order.\n    num_ones = 0\n    for i in range(len(arr)):\n        if arr[i]:\n            num_ones += 1\n\n    # Sort the array based on the decimal value of the numbers.\n    # The numbers are sorted in ascending order.\n    for i in range(len(arr)):\n        if num_ones == 0:\n            continue\n\n        a = int(arr[i] * 2 ** num_ones)\n        b = int(arr[i + 1] * 2 ** num_ones)\n        if a > b:\n            return 1\n\n        if a < b:\n            return -1\n\n    # If the array is already sorted, return the result.\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    new_arr = []\n    i = 0\n    while i < len(arr):\n        if arr[i] == 0:\n            continue\n        if arr[i] == 1:\n            new_arr.append(arr[i])\n            i += 1\n        else:\n            new_arr.append(arr[i])\n            i += 1\n    return new_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    a = arr\n    b = []\n    i = 0\n    while i < len(a):\n        while a[i] == 1:\n            i += 1\n        while i < len(a) and a[i] == 0:\n            b.append(a[i - 1])\n            i += 1\n        b.append(a[i])\n        i += 1\n    return b", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    arr = list(arr)\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return [arr[0], arr[1]]\n        else:\n            return [arr[0], arr[1]] + sort_array(arr[1:])\n    if arr[0] > arr[1]:\n        return sort_array(arr[1:]) + [arr[0]]\n    else:\n        return sort_array(arr[1:]) + [arr[1]]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return []\n    if n == 1:\n        return [arr[0]]\n    if n == 2:\n        return [arr[0], arr[1]]\n    if n > 2:\n        p = n // 2\n        r = n // 2\n        q = n - p - 1\n        if p == r:\n            return [arr[0], arr[1], arr[2]]\n        if p < r:\n            return sort_array(arr[:p] + [arr[p]] + [arr[r]])\n        else:\n            return sort_array(arr[:p] + [arr[p]] + [arr[r]] + [arr[q]])\n    else:\n        return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    #check\n    if not arr:\n        return []\n    if len(arr) < 2:\n        return arr\n    #check\n    if arr[0] < arr[1]:\n        return [arr[0]] + sorted(arr[1:], key=lambda x: x[0])\n    else:\n        return sorted(arr, key=lambda x: x[1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # TODO\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return []\n    if n == 1:\n        return [arr[0]]\n    if n == 2:\n        return [arr[0], arr[1]]\n    if n < 3:\n        return []\n    p = n // 2\n    if p == 1:\n        return [arr[0], arr[1]]\n    if p == 2:\n        return [arr[0], arr[1]]\n    if p < 3:\n        return []\n    q = n - p\n    if q == 1:\n        return [arr[0], arr[1]]\n    if q == 2:\n        return [arr[0], arr[1]]\n    if q < 3:\n        return []\n    r = p + q\n    if r == n:\n        return [arr[0], arr[1]]\n    if r == p + q:\n        return [arr[0], arr[1]]\n    if r < n:\n        return []\n    return sort_array(arr[:p] + arr[p + 1:])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) % 2 == 0:\n        return [arr[0], arr[len(arr) // 2 - 1]]\n    else:\n        return [arr[len(arr) // 2 - 1], arr[len(arr) // 2]]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    def compare(x, y):\n        if x == y:\n            return 0\n        elif x > y:\n            return 1\n        else:\n            return -1\n    result = []\n    for i in range(len(arr)):\n        result.append(arr[i])\n    result.sort(compare)\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    num = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        if arr[i] == 1:\n            num += 1\n        if arr[i] == 2:\n            num += 1\n        if arr[i] == 3:\n            num += 1\n        if arr[i] == 4:\n            num += 1\n        if arr[i] == 5:\n            num += 1\n        if arr[i] == 6:\n            num += 1\n        if num == 7:\n            num = 0\n            for j in range(i + 1, len(arr)):\n                if arr[j] == 0:\n                    continue\n                if arr[j] == 1:\n                    num += 1\n                if arr[j] == 2:\n                    num += 1\n                if arr[j] == 3:\n                    num += 1\n                if arr[j] == 4:\n                    num += 1\n                if arr[j] == 5:\n                    num += 1\n                if arr[j] == 6:\n                    num += 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        if a > b:\n            return -1\n        elif a < b:\n            return 1\n        else:\n            return 0\n\n    if len(arr) == 0:\n        return arr\n\n    def is_sorted(arr):\n        for i in range(len(arr)):\n            if compare(arr[i], arr[i+1]) == -1:\n                return False\n        return True\n\n    if not is_sorted(arr):\n        for i in range(len(arr) - 1):\n            temp = arr[i]\n            arr[i] = arr[i+1]\n            arr[i+1] = temp\n        return arr\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        if a > b:\n            return 1\n        elif a == b:\n            return 0\n        else:\n            return -1\n    return sorted(arr, cmp=cmp)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    length = len(arr)\n    if length < 2:\n        return arr\n    if length % 2:\n        return sort_array([arr[0], arr[length - 1]])\n    else:\n        return sort_array([arr[0], arr[length - 1]]) + \\\n               sort_array([arr[0], arr[length - 2]]) + \\\n               sort_array([arr[0], arr[length - 3]])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: (x[0], x[1]), reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        \"\"\"\n        This function is used to compare two integers.\n        \"\"\"\n        if a == 0:\n            return b\n        if b == 0:\n            return a\n        if a < b:\n            return -1\n        else:\n            return 1\n\n    def get_ones(arr):\n        \"\"\"\n        This function is used to get number of ones in an integer.\n        \"\"\"\n        return sum(1 for i in range(len(arr)) if arr[i] == 1)\n\n    arr = sorted(arr, cmp=cmp)\n    return arr, get_ones(arr)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # declare a function that will sort an array of non-negative integers\n    def _sort_array(arr):\n        # declare a variable for storing the current index of the array\n        i = 0\n        # while the index is not greater than the array length\n        while i < len(arr):\n            # while the current index is not greater than the current length of the\n            # array\n            while i < len(arr) and arr[i] < arr[i+1]:\n                # increase the index\n                i += 1\n            # while the current index is not greater than the current length of the\n            # array\n            while i < len(arr) and arr[i] > arr[i+1]:\n                # decrease the index\n                i += 1\n            # if the current index is greater than the current length of the array\n            if i == len(arr):\n                # print the array\n                print(arr)\n                # return the array\n                return arr\n            # if the current index is greater than the current length of the array\n            elif arr[i] == arr[i+1]:\n                # print the array\n                print(arr)\n                # return the array\n                return arr\n            # if the current index is greater than the current length of the array\n            elif arr[i] > arr[i+1]:\n                # swap", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_sort(a, b):\n        if a == b:\n            return 0\n        if a > b:\n            return 1\n        else:\n            return -1\n\n    def decimal_sort(a, b):\n        if a == b:\n            return 0\n        if a > b:\n            return 1\n        else:\n            return -1\n\n    arr = sorted(arr, key=binary_sort)\n    return sorted(arr, key=decimal_sort)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # This is a list of all the numbers\n    nums = []\n    for i in range(0, len(arr)):\n        nums.append(arr[i])\n    # This is a list of all the ones\n    ones = []\n    for i in range(0, len(nums)):\n        if nums[i] == 1:\n            ones.append(i)\n    # This is a list of all the ones\n    ones = sorted(ones)\n    # This is a list of all the ones\n    ones = [ones[i] for i in range(0, len(ones))]\n    # This is a list of all the ones\n    ones = [ones[i] for i in range(0, len(ones))]\n    # This is the sorted array\n    return ones", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # The algorithm is simple, but it can be quite time-consuming.\n    # For example, the array [2, 1, 2, 1, 1, 2, 3, 4, 1, 1, 2, 1, 1, 2, 3, 4, 1]\n    # takes more than a minute to sort.\n    # The algorithm is a bit tricky, but it's easy to understand.\n\n    # The first step is to create a set of all possible permutations.\n    # For example, the array [2, 1, 2, 1, 1, 2, 3, 4, 1, 1, 2, 1, 1, 2, 3, 4, 1]\n    # can be represented as the set:\n    #   {{2, 1}, {1, 2}, {1, 2, 1}, {1, 2, 1, 1}, {2, 1, 1}, {2, 1, 1, 1},\n    #     {1, 2, 1, 2, 1}, {1, 2, 1, 2, 1, 1}, {2, 1, 1, 2, 1, 1, 1}, {1, 2,\n    #     1, 2, 1, 1, 1, 1}, {2, 1, 1, 2, 1, 1, 1, 2}}\n    # The", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_sort(a, b):\n        \"\"\"\n        In this Kata, you have to sort an array of non-negative integers according\n        to number of ones in their binary representation in ascending order.\n        For similar number of ones, sort based on decimal value.\n\n        It must be implemented like this:\n        >>> binary_sort([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        >>> binary_sort([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        >>> binary_sort([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        else:\n            return 1\n\n    arr = sorted(arr, key=binary_sort)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return []\n    if len(arr) == 1:\n        return arr\n    arr = sorted(arr, key=lambda x: x[1], reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Convert array to integer list\n    int_arr = [int(i) for i in arr]\n    # Sort them\n    int_arr.sort(key=lambda x: x.count('1'))\n    # Convert back to array\n    arr = [int(i) for i in int_arr]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [int(x) for x in arr]\n    arr.sort(key=lambda x: len(bin(x)[2:]) if x else x)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x[0])\n    if len(arr) == 0:\n        return []\n    else:\n        return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sorting the array based on the number of ones\n    array = list(arr)\n    array.sort(key=lambda x: x[1])\n    return array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Ordering based on number of ones\n    num_ones = 0\n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            num_ones += 1\n    # Ordering based on decimal value\n    return sorted(arr, key=lambda x: x * 2**(num_ones - 1) - x, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            break\n        if arr[i] == 1:\n            arr[i] = arr[i] * 2\n            continue\n        if arr[i] == -1:\n            arr[i] = arr[i] * 2\n            continue\n        if arr[i] == 2:\n            arr[i] = arr[i] * 2\n            continue\n        if arr[i] == 3:\n            arr[i] = arr[i] * 2\n            continue\n        if arr[i] == 4:\n            arr[i] = arr[i] * 2\n            continue\n        if arr[i] == 5:\n            arr[i] = arr[i] * 2\n            continue\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def _compare(a, b):\n        \"\"\"\n        In this Kata, you have to compare the number of ones in the binary\n        representation of two elements in the array.\n        \"\"\"\n        if a == 0:\n            return 1\n        if b == 0:\n            return -1\n        if a > b:\n            return 1\n        return -1\n\n    def _ascending(a, b):\n        \"\"\"\n        In this Kata, you have to sort the array based on the number of ones\n        in the binary representation of two elements in the array.\n        \"\"\"\n        if a == 0:\n            return 1\n        if b == 0:\n            return -1\n        if a > b:\n            return 1\n        return -1\n\n    sorted_array = []\n    for element in arr:\n        if element > 0:\n            sorted_array.append(element)\n        else:\n            sorted_array.append(0)\n    sorted_array.sort(_compare)\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return arr\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return arr[0], arr[1]\n    elif n == 3:\n        if arr[0] > arr[1]:\n            return (arr[0], arr[1], arr[2])\n        else:\n            return (arr[0], arr[1], arr[2], arr[3])\n    elif n == 4:\n        if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3]:\n            return (arr[0], arr[1], arr[2], arr[3])\n        else:\n            return (arr[0], arr[1], arr[2], arr[3], arr[4])\n    elif n == 5:\n        if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4]:\n            return (arr[0], arr[1], arr[2], arr[3], arr[4])\n        else:\n            return (arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n    else:\n        raise ValueError(\"Invalid number of elements in array: {}\".format(n))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        if arr[i] == 1:\n            break\n    result = []\n    while i < len(arr):\n        result.append(arr[i])\n        i += 1\n    result.sort(key=lambda x: int(x))\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(x, y):\n        if x == y:\n            return 0\n        elif x > y:\n            return 1\n        else:\n            return -1\n\n    def sort(arr):\n        a = [None] * len(arr)\n        for i in range(len(arr)):\n            if a[i] is None:\n                a[i] = arr[i]\n            else:\n                for j in range(i, len(arr)):\n                    if arr[j] < a[i]:\n                        a[i] = arr[j]\n                        break\n                else:\n                    a[i] = arr[i]\n        return a\n\n    def compare_dec(x, y):\n        if x == y:\n            return 0\n        elif x > y:\n            return 1\n        else:\n            return -1\n\n    arr = sort(arr)\n    return sort(compare(compare_dec(arr[0], arr[1]), compare_dec(arr[1], arr[2]),\n                     compare_dec(arr[2], arr[3]), compare_dec(arr[3], arr[4])))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def compare(a, b):\n        return cmp(a, b)\n\n    # Here we will make a list of the sorted elements\n    # This list will have a key element which will be\n    # the number of ones in the binary representation\n    # of the element\n    # For example, for the elements:\n    # [1, 5, 2, 3, 4]\n    # the key element will be 1\n    # So, we will have:\n    # [1, 2, 3, 4, 5]\n    # Then, we will sort this list by key elements\n    # which means, we will sort it in ascending order\n    # (In other words, the key elements will be sorted first)\n    # Then, we will sort the elements in the list based on\n    # the number of ones in their binary representation\n    # in ascending order\n    # For example, for the elements:\n    # [1, 5, 2, 3, 4]\n    # we will have:\n    # [1, 2, 3, 4, 5]\n    # so, we will sort this list by key elements\n    # which means, we will sort it in ascending order\n    # (In other words, the key elements will be sorted first)\n    # Then, we will sort the elements in the list based on", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort by number of ones\n    arr.sort(key=lambda x: len(x) & 1)\n    # Sort by decimal value\n    arr.sort(key=lambda x: (x[0] - 1) if x[0] & 1 else x[0])\n\n    # Return sorted array\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _cmp(a, b):\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    def _cmp_dec(a, b):\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    def _cmp_ones(a, b):\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    def _cmp_binary(a, b):\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    arr = sorted(arr, key=_cmp_dec)\n    arr.sort(key=_cmp_ones)\n    arr.sort(key=_cmp_binary)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _compare(a, b):\n        \"\"\"\n        Compares two numbers, returns 0 if equal, 1 if a is greater, -1 if b is greater.\n        \"\"\"\n        if a > b:\n            return 1\n        elif a == b:\n            return 0\n        else:\n            return -1\n\n    def _compare_int(a, b):\n        \"\"\"\n        Compares two integers, returns 0 if equal, 1 if a is greater, -1 if b is greater.\n        \"\"\"\n        if a > b:\n            return 1\n        elif a == b:\n            return 0\n        else:\n            return -1\n\n    def _compare_int_ascending(a, b):\n        \"\"\"\n        Compares two integers, returns 0 if equal, 1 if a is greater, -1 if b is greater.\n        \"\"\"\n        if a > b:\n            return 1\n        elif a == b:\n            return 0\n        else:\n            return -1\n\n    arr = sorted(arr, key=_compare_int_ascending)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    if len(arr) < 2:\n        return sort_array([arr[0]] + list(arr[1:]))\n\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return sort_array([arr[0], arr[1]] + list(arr[2:]))\n        else:\n            return sort_array([arr[0], arr[1]] + list(arr[2:]))\n    else:\n        if arr[0] > arr[1]:\n            return sort_array([arr[0], arr[1]] + list(arr[2:]))\n        else:\n            return sort_array([arr[0], arr[1]] + list(arr[2:]))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Create a new list of zeroes.\n    zeros = []\n    # Create a new list of ones.\n    ones = []\n    # Create a new list of ones.\n    ones2 = []\n    # Create a new list of ones.\n    ones3 = []\n    # Create a new list of ones.\n    ones4 = []\n    # Create a new list of ones.\n    ones5 = []\n    # Create a new list of ones.\n    ones6 = []\n    # Create a new list of ones.\n    ones7 = []\n    # Create a new list of ones.\n    ones8 = []\n    # Create a new list of ones.\n    ones9 = []\n    # Create a new list of ones.\n    ones10 = []\n    # Create a new list of ones.\n    ones11 = []\n    # Create a new list of ones.\n    ones12 = []\n    # Create a new list of ones.\n    ones13 = []\n    # Create a new list of ones.\n    ones14 = []\n    # Create a new list of ones.\n    ones15 = []\n    # Create a new list of ones.\n    ones16 = []\n    # Create a new list of ones.\n    ones17 = []\n    # Create a new list of ones.\n    ones18 = []\n    # Create a new list of ones.\n    ones", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return [(arr[i], i) for i in range(len(arr))]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def num_ones(n):\n        \"\"\"\n        Returns number of ones in binary representation of n.\n        \"\"\"\n        return n >> 1 & 1\n\n    def num_digits(n):\n        \"\"\"\n        Returns number of digits in decimal representation of n.\n        \"\"\"\n        return int(math.log10(n))\n\n    def sort(a):\n        \"\"\"\n        Sorts the given array in ascending order.\n        \"\"\"\n        return sorted(a, key=lambda x: num_ones(x))\n\n    return sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_num(x):\n        return 1 if x % 2 == 0 else 0\n    def get_dec(x):\n        return x // 2\n    def get_binary(x):\n        return str(x).zfill(2)\n    def sort_asc(arr):\n        arr.sort(key=get_num, reverse=True)\n    def sort_dec(arr):\n        arr.sort(key=get_dec, reverse=True)\n    def sort_binary(arr):\n        arr.sort(key=get_binary, reverse=True)\n    return sort_asc(sort_dec(sort_binary(arr)))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    return sorted(arr, key=lambda x: x[0], reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # TODO: Implement this Kata!\n    pass", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    #return sorted(arr, key=lambda x:x[0])\n    #return sorted(arr, key=lambda x:x[1])\n    return sorted(arr, key=lambda x: x[0])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(x, y):\n        if x is None:\n            return -1\n        elif y is None:\n            return 1\n        else:\n            return cmp(str(x), str(y))\n    return sorted(arr, key=cmp, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr\n    # Sort based on number of ones\n    if arr[0] % 2 == 0:\n        return sorted(arr, key=lambda x: x[1], reverse=True)\n    # Sort based on decimal value\n    return sorted(arr, key=lambda x: x[0], reverse=False)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _compare(x, y):\n        if x == y:\n            return 0\n        elif x < y:\n            return -1\n        else:\n            return 1\n\n    def _convert_int(x):\n        if x == 0:\n            return 0\n        else:\n            return 1\n\n    arr = [_convert_int(x) for x in arr]\n    return sorted(arr, key=_compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    arr.sort(key=lambda x: int(x) & 1)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x: x[0])\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        if a[1] > b[1]:\n            return 1\n        elif a[1] == b[1]:\n            if a[0] > b[0]:\n                return 1\n            elif a[0] == b[0]:\n                return 0\n        else:\n            return -1\n\n    sorted = []\n    for i in range(len(arr)):\n        if arr[i][1] == 0:\n            sorted.append(arr[i])\n        else:\n            for j in range(i + 1, len(arr)):\n                if arr[j][1] == 1:\n                    continue\n                if compare(arr[i], arr[j]) == 1:\n                    sorted.append(arr[j])\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0], 0]\n    else:\n        l = len(arr)\n        if l < 2:\n            return [arr[0], 0]\n        else:\n            return [compare(arr[0], arr[1]), compare(arr[1], arr[2]), compare(arr[2], arr[3]), compare(arr[3], arr[4]), compare(arr[4], arr[5])]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    arr.sort(key=lambda x: x[0])\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_num_ones(arr):\n        \"\"\"\n        Returns the number of ones in an array.\n        \"\"\"\n        num_ones = 0\n        for i in range(len(arr)):\n            if arr[i] == 1:\n                num_ones += 1\n        return num_ones\n\n    def get_num_digits(arr):\n        \"\"\"\n        Returns the number of digits in an array.\n        \"\"\"\n        num_digits = 0\n        for i in range(len(arr)):\n            num_digits += int(arr[i]) // 2\n        return num_digits\n\n    def get_sorted(arr):\n        \"\"\"\n        Returns an array sorted according to number of ones in their binary\n        representation.\n        \"\"\"\n        num_ones = get_num_ones(arr)\n        num_digits = get_num_digits(arr)\n        if num_digits == 0:\n            return arr\n        if num_digits > 1:\n            return sort_array([arr[0] * 2**i for i in range(num_ones)])\n        else:\n            return sorted(arr, key=lambda x: x * 2**num_ones)\n\n    return get_sorted(sort_array(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(x, y):\n        if x < y:\n            return -1\n        elif x > y:\n            return 1\n        else:\n            return 0\n\n    def cmp_d(x, y):\n        if x < y:\n            return -1\n        elif x > y:\n            return 1\n        else:\n            return 0\n\n    def cmp_b(x, y):\n        if x < y:\n            return -1\n        elif x > y:\n            return 1\n        else:\n            return 0\n\n    def cmp_l(x, y):\n        if x < y:\n            return -1\n        elif x > y:\n            return 1\n        else:\n            return 0\n\n    arr = sorted(arr, cmp=cmp)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(x, y):\n        if x == y:\n            return 0\n        if x < y:\n            return -1\n        else:\n            return 1\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(x, y):\n        if x == y:\n            return 0\n        elif x < y:\n            return -1\n        else:\n            return 1\n\n    def is_more_ones(x):\n        if x == 0:\n            return True\n        else:\n            return False\n\n    if len(arr) == 0:\n        return arr\n\n    arr.sort(cmp=cmp, key=is_more_ones)\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        if a > b:\n            return 1\n        elif a == b:\n            return 0\n        else:\n            return -1\n\n    return sorted(arr, cmp=cmp)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def comparator(a, b):\n        \"\"\"\n        Comparator function.\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    sorted = []\n    for item in arr:\n        if item == 0:\n            continue\n        if item % 2 == 0:\n            sorted.append(item)\n        else:\n            sorted.append(item / 2)\n    sorted.sort(comparator)\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def num_one(num):\n        \"\"\"\n        Return the number of ones in the binary representation of num.\n\n        :param num: A positive integer.\n        :return: The number of ones in the binary representation of num.\n        \"\"\"\n        res = 0\n        for i in range(len(num)):\n            if num[i] == '1':\n                res += 1\n        return res\n\n    def num_two(num):\n        \"\"\"\n        Return the number of twos in the binary representation of num.\n\n        :param num: A positive integer.\n        :return: The number of twos in the binary representation of num.\n        \"\"\"\n        res = 0\n        for i in range(len(num)):\n            if num[i] == '2':\n                res += 1\n        return res\n\n    def num_zero(num):\n        \"\"\"\n        Return the number of zeros in the binary representation of num.\n\n        :param num: A positive integer.\n        :return: The number of zeros in the binary representation of num.\n        \"\"\"\n        res = 0\n        for i in range(len(num)):\n            if num[i] == '0':\n                res += 1\n        return res\n\n    def num_even(num):\n        \"\"\"\n        Return the number of even numbers in the binary representation of num.\n\n        :param num: A positive integer.\n        :return: The number of even", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: int(x))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sorting algorithm\n    arr.sort(key=lambda x: len(x) * (x[0] & 1) - x[1]) # Sort by number of ones\n    arr.sort(key=lambda x: x[0]) # Sort by decimal value\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        Compares the two integers. If the one has more ones, it is placed at\n        the top of the list.\n        \"\"\"\n        if a > b:\n            return 1\n        elif a == b:\n            return 0\n        else:\n            return -1\n\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x.count('1') if x >= 0 else -abs(x), reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] == arr[-1]:\n        return arr\n    if arr[0] > arr[-1]:\n        return sort_array(arr[1:]) + [arr[0]]\n    return sort_array(arr[:-1]) + [arr[-1]]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return []\n    result = []\n    for element in arr:\n        if element > 0:\n            result.append(element)\n    result.sort(key=lambda x: x[0])\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # code to be added to your Kata\n    pass", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    if len(arr) == 2:\n        return [arr[0], arr[1]]\n    if len(arr) == 3:\n        return [arr[0], arr[1], arr[2]]\n    if len(arr) == 4:\n        return [arr[0], arr[1], arr[2], arr[3]]\n    if len(arr) == 5:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4]]\n    if len(arr) == 6:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]]\n    if len(arr) == 7:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]]\n    if len(arr) == 8:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]]\n    if len(arr) == 9:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8]]\n    if len(arr) == 10:\n        return [arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def is_binary(n):\n        return n & 1 == 1\n    def is_decimal(n):\n        return n == 0 or n % 2 == 0\n    def is_small(n):\n        return n < 0 or n == 0\n    def is_integer(n):\n        return 0 < n < 100\n    def get_one(n):\n        return n & 1\n    def get_two(n):\n        return n >> 1\n    def get_three(n):\n        return n >> 2\n    def get_four(n):\n        return n >> 3\n    def get_five(n):\n        return n >> 4\n    def get_six(n):\n        return n >> 5\n    def get_seven(n):\n        return n >> 6\n    def get_eight(n):\n        return n >> 7\n    def get_neven(n):\n        return n >> 8\n    def get_odd(n):\n        return n >> 9\n    def get_nine(n):\n        return n >> 10\n    def get_ten(n):\n        return n >> 11\n    def get_twelve(n):\n        return n >> 12\n    def get_fourteen(n):\n        return", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return\n    arr = sorted(arr, key=lambda x: x[0])\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        if a[1] == b[1]:\n            return cmp(a[0], b[0])\n        else:\n            return cmp(a[1], b[1])\n\n    return sorted(arr, key=cmp)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        a = arr[i]\n        if a == 0:\n            continue\n        b = arr[i + 1]\n        if b == 0:\n            continue\n        if a == b:\n            continue\n        if a > b:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n        else:\n            arr[i], arr[i + 1] = arr[i], arr[i + 1]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Arrays of integers with the same number of ones\n    def _compare(a, b):\n        # Reverse the arrays\n        if a > b:\n            tmp = a\n            a = b\n            b = tmp\n        # Compare the number of ones\n        if a.count('1') > b.count('1'):\n            return 1\n        elif a.count('1') == b.count('1'):\n            if a.count('0') > b.count('0'):\n                return -1\n            else:\n                return 0\n        else:\n            return -1\n\n    # Make an array of integers with the same number of ones\n    arr = sorted(arr, key=_compare, reverse=True)\n\n    # Reverse the array\n    arr = [arr[i] for i in reversed(range(len(arr)))]\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # print(\"sort_array()\")\n    arr = [int(i) for i in arr]\n    # print(arr)\n    if len(arr) == 0:\n        return arr\n    # print(arr)\n    # print(len(arr))\n    # print(arr[0])\n    # print(arr[-1])\n    # print(arr[0])\n    # print(arr[-1])\n    # print(len(arr))\n    # print(len(arr[0]))\n    # print(len(arr[-1]))\n    # print(arr[0])\n    # print(arr[-1])\n    # print(len(arr[0]))\n    # print(len(arr[-1]))\n    # print(arr[0])\n    # print(arr[-1])\n    # print(len(arr[0]))\n    # print(len(arr[-1]))\n    # print(arr[0])\n    # print(arr[-1])\n    # print(len(arr[0]))\n    # print(len(arr[-1]))\n    # print(arr[0])\n    # print(arr[-1])\n    # print(len(arr[0]))\n    # print(len(arr[-1]))\n    # print(arr[0])\n    # print(arr[-1])\n    # print(len(arr[0]))\n    # print(len(arr[-1]))\n    # print(arr[0])\n    # print(arr[-1])\n    # print(len(arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return []\n    if n == 1:\n        return [arr[0]]\n    if n % 2 == 0:\n        return [arr[0], arr[1]]\n    if n % 2 == 1:\n        return [arr[0], arr[n // 2]]\n    if n % 3 == 0:\n        return [arr[0], arr[n // 2]]\n    if n % 3 == 1:\n        return [arr[0], arr[n // 2]]\n    if n % 4 == 0:\n        return [arr[0], arr[n // 2]]\n    if n % 4 == 1:\n        return [arr[0], arr[n // 2]]\n    if n % 4 == 2:\n        return [arr[0], arr[n // 2]]\n    if n % 4 == 3:\n        return [arr[0], arr[n // 2]]\n    if n % 4 == 4:\n        return [arr[0], arr[n // 2]]\n    return [arr[0], arr[n // 2]]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def compare(a, b):\n        \"\"\"\n        This is the function you have to write. It must return -1 if a < b, 0 if a == b,\n        and 1 if a > b.\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    arr = sorted(arr, key=compare)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def is_binary(n):\n        \"\"\"\n        Returns True if the number is a binary number.\n        \"\"\"\n        return n & 1 == 0\n\n    def is_decimal(n):\n        \"\"\"\n        Returns True if the number is a decimal number.\n        \"\"\"\n        return n!= 0\n\n    def is_binary_natural(n):\n        \"\"\"\n        Returns True if the number is a natural number.\n        \"\"\"\n        return n % 2 == 0\n\n    def is_decimal_natural(n):\n        \"\"\"\n        Returns True if the number is a natural number.\n        \"\"\"\n        return n!= 0\n\n    def is_binary_large(n):\n        \"\"\"\n        Returns True if the number is a large binary number.\n        \"\"\"\n        return n & 1 == 1\n\n    def is_decimal_large(n):\n        \"\"\"\n        Returns True if the number is a large decimal number.\n        \"\"\"\n        return n!= 0\n\n    def is_binary_medium(n):\n        \"\"\"\n        Returns True if the number is a medium binary number.\n        \"\"\"\n        return n & 1 == 0\n\n    def is_decimal_medium(n):\n        \"\"\"\n        Returns True if the number is a medium decimal number.\n        \"\"\"\n        return n!= 0\n\n    def is_b", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # This is a recursive function to sort the array.\n    def sort(arr, left=0, right=0):\n        \"\"\"\n        This function takes two parameters left and right to sort the array.\n        The parameters left and right will be increased by 1 after each call to\n        this function.\n        \"\"\"\n        if left < right:\n            i = left\n            j = right\n            while i <= j:\n                if arr[i] > arr[j]:\n                    j = i\n                else:\n                    i += 1\n\n        # If left and right are equal, then the array is sorted.\n        else:\n            if arr[left] > arr[right]:\n                return sort(arr, left, right - 1)\n            else:\n                return sort(arr, left + 1, right)\n\n    return sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        Return the value of the comparison function, where the comparison function must\n        be a function that takes two arguments, a and b, and returns a number greater\n        than 0 if a is greater than b, less than 0 if a is less than b, and 0 if a is\n        equal to b.\n        \"\"\"\n        # First, compare the number of ones in the binary representation of a and b\n        if len(str(a).count('1')) > len(str(b).count('1')):\n            return 1\n        else:\n            return -1\n\n    # Create an empty list to store the sorted array\n    arr_sorted = []\n\n    # Loop through the array and compare each element to the rest of the elements\n    for i in range(len(arr)):\n        # Get the value of the element\n        val = arr[i]\n\n        # Compare the element to the rest of the elements\n        # and add to the sorted list if it is less than all other elements\n        if compare(val, arr_sorted[-1]) > 0:\n            arr_sorted.append(val)\n\n    # Return the sorted list\n    return arr_sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        if a > b:\n            return 1\n        elif a < b:\n            return -1\n        else:\n            return 0\n\n    n = len(arr)\n    if n == 0:\n        return [0, arr]\n\n    a = arr[0]\n    b = arr[-1]\n    if n > 1:\n        if a == b and a == a + 1:\n            return [0, arr]\n        if a == b and a == a - 1:\n            return [0, arr]\n        if a == b and a == a + 2:\n            return [0, arr]\n        if a == b and a == a - 2:\n            return [0, arr]\n        if a == b and a == a + 3:\n            return [0, arr]\n        if a == b and a == a - 3:\n            return [0, arr]\n        if a == b and a == a + 4:\n            return [0, arr]\n        if a == b and a == a - 4:\n            return [0, arr]\n        if a == b and a == a + 5:\n            return [0, arr]\n        if a == b and a == a - 5:\n            return [0, arr]\n        if a == b and a == a + 6:\n            return [0, arr]\n        if a == b and a", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        This function is called by the user to compare two integers.\n        \"\"\"\n        if a == 0:\n            return b == 0\n        if b == 0:\n            return a == 0\n        if a < b:\n            return -1\n        else:\n            return 1\n\n    if len(arr) == 0:\n        return []\n    else:\n        arr = [int(x) for x in arr]\n        return sorted(arr, key=compare)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def get_one(i):\n        \"\"\"\n        Returns true if the ith element is 1.\n        \"\"\"\n        return i & 1 == 1\n\n    def get_zero(i):\n        \"\"\"\n        Returns true if the ith element is 0.\n        \"\"\"\n        return i & 1 == 0\n\n    def get_one_or_zero(i):\n        \"\"\"\n        Returns true if the ith element is 1 or 0.\n        \"\"\"\n        return get_one(i) or get_zero(i)\n\n    def get_largest(i):\n        \"\"\"\n        Returns the largest element in the array.\n        \"\"\"\n        return max([get_one_or_zero(i), get_zero(i)])\n\n    def get_min(i):\n        \"\"\"\n        Returns the smallest element in the array.\n        \"\"\"\n        return min([get_one_or_zero(i), get_zero(i)])\n\n    def get_least_significant(i):\n        \"\"\"\n        Returns the least significant bit of the ith element.\n        \"\"\"\n        return i & 1\n\n    def get_least_significant_bit(i):\n        \"\"\"\n        Returns the least significant bit of the ith element.\n        \"\"\"\n        return get_least_significant(i)\n\n    def get_least_significant_bits(i):\n        \"\"\"\n        Returns the least significant bits of the", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    # Sort by binary representation\n    array = []\n    for i in range(0, len(arr)):\n        array.append(arr[i])\n    array.sort(key=lambda x: x.count('1'))\n    return array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _cmp(a, b):\n        if a[1] == b[1]:\n            return cmp(a[0], b[0])\n        else:\n            return cmp(a[1], b[1])\n    return sorted(arr, key=_cmp)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # check if array is empty\n    if len(arr) == 0:\n        return []\n    # check if array is sorted\n    if arr[0] <= arr[-1]:\n        return arr\n    # check if array is not sorted\n    if arr[0] > arr[-1]:\n        # put the smallest element at the end\n        arr.append(arr[0])\n        # sort array\n        return sort_array(arr)\n    # check if array is not sorted\n    if arr[0] < arr[-1]:\n        # put the largest element at the end\n        arr.append(arr[0])\n        # sort array\n        return sort_array(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # This method is a little bit complex.\n    # We need to create a new array with all ones in it.\n    # We then need to sort the array of numbers based on the number of ones.\n    # We then need to create a new array with all zeros in it.\n    # We then need to sort the array of numbers based on the number of zeros.\n    # We then need to create a new array with all ones in it.\n    # We then need to sort the array of numbers based on the number of ones.\n    # We then need to create a new array with all zeros in it.\n    # We then need to sort the array of numbers based on the number of zeros.\n    # We then need to create a new array with all ones in it.\n    # We then need to sort the array of numbers based on the number of ones.\n    # We then need to create a new array with all zeros in it.\n    # We then need to sort the array of numbers based on the number of zeros.\n    # We then need to create a new array with all ones in it.\n    # We then need to sort the array of numbers based on the number of ones.\n    # We then need to create a new array with all zeros in it.\n    # We then need to sort the array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _compare(a, b):\n        if a == 0:\n            return 1\n        if b == 0:\n            return -1\n        if a > b:\n            return 1\n        else:\n            return -1\n\n    sorted_array = []\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            sorted_array.append(0)\n        else:\n            if i == 0:\n                sorted_array.append(arr[i])\n            else:\n                sorted_array.append(sorted_array[i - 1] + arr[i])\n\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _compare(a, b):\n        if a == b:\n            return 0\n        if a > b:\n            return 1\n        return -1\n    return sorted(arr, key=_compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    if arr[0] > arr[1]:\n        return sort_array(arr[1:]) + [arr[0]]\n    return sort_array(arr[1:]) + [arr[1]]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return arr\n    if len(arr) <= 1:\n        return arr\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return [arr[0], arr[1]]\n        else:\n            return arr\n    if len(arr) == 3:\n        if arr[0] == arr[1]:\n            if arr[2] == 0:\n                return [arr[0], arr[1]]\n            else:\n                return arr\n        elif arr[0] == 0:\n            if arr[2] == 0:\n                return [arr[0], arr[1]]\n            else:\n                return arr\n        else:\n            if arr[2] == 0:\n                return [arr[0], arr[1]]\n            else:\n                return arr\n    if len(arr) == 4:\n        if arr[0] == arr[1]:\n            if arr[2] == 0:\n                if arr[3] == 0:\n                    return [arr[0], arr[1]]\n                else:\n                    return arr\n            else:\n                if arr[3] == 0:\n                    return [arr[0], arr[1]]\n                else:\n                    return arr\n        elif arr[0] == 0:\n            if arr[2] == 0:\n                if arr[3] == 0:\n                    return [arr[0], arr[1]]\n                else:\n                    return arr\n            else:\n                if arr[3] == 0:\n                    return [arr[0], arr[1]]\n                else:\n                    return arr\n        else:\n            if arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Convert to binary\n    arr = [int(i) for i in str(arr)]\n    arr = [str(i) for i in arr]\n\n    # Sort\n    arr = sorted(arr, key=lambda x: x)\n\n    # Convert back to integer\n    arr = [int(i) for i in str(arr)]\n\n    return arr"]]