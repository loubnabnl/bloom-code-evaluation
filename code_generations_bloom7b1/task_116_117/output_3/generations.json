[["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Init\n    num_one = 0\n    num_two = 0\n    num_zero = 0\n    count = 0\n    pos = 0\n    curr = arr[pos]\n    curr_left = curr - 1\n    curr_right = curr + 1\n    # Loop\n    while curr_left > curr_right:\n        # If a digit is not found, sort according to decimal value\n        if curr_left < 0:\n            curr_left = curr_left % 10\n            curr_right = curr_right % 10\n        if curr_right > 0:\n            num_one += 1\n            num_two += 1\n            num_zero += 0\n            count += 1\n        # Compare\n        if curr_left > curr_right:\n            if num_one > num_two:\n                curr_right = curr_right % 10\n            else:\n                curr_left = curr_left % 10\n        elif num_one > num_two:\n            if num_one == num_two:\n                if num_zero > num_one:\n                    curr_left = curr_left % 10\n                else:\n                    curr_right = curr_right % 10\n        elif num_zero > num_one:\n            if num_one == num_zero:\n                if num_zero == num_two:\n                    if num_zero == num_three:\n                        if num_zero == num_four:\n                            if num_zero == num_five", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr2 = []\n    i = 0\n    while i < len(arr):\n        if arr[i] == 1:\n            arr2.append(arr[i + 1])\n            i += 1\n        else:\n            i += 2\n    arr2.sort(key=lambda x: x[0])\n    arr = arr2\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [int(x) if x.isdigit() else x for x in arr]\n    if len(arr) > 1:\n        if arr[0] == arr[1]:\n            return sort_array(arr[1:])\n        else:\n            return sort_array(arr[1:]) + [arr[0]]\n    else:\n        return arr[0]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    for i, x in enumerate(arr):\n        for j in range(i + 1, len(arr)):\n            if x == arr[j]:\n                continue\n            if arr[j] > x:\n                arr.insert(j - 1, x)\n                break\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # is it sorted?\n    if all(isinstance(x, int) and x > 0 for x in arr):\n        return arr\n    # else we need to sort\n    arr.sort(key=lambda x: x.count(1))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def comp(a, b):\n        return cmp(a[1], b[1])\n    return sorted(arr, cmp=comp)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def is_equal(a, b):\n        return a == b or (a > b and b == 0)\n\n    def sort_asc(arr):\n        \"\"\"\n        This method sorts the array in ascending order by counting the number of ones\n        in the binary representation.\n\n        >>> sort_asc([1, 5, 2, 3, 4]) == [1, 5, 2, 3, 4]\n        \"\"\"\n        return sorted(arr, key=lambda x: x.count('1'))\n\n    arr = sorted(arr, key=is_equal)\n    return sort_asc(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    num_binary = 0\n    num_decimal = 0\n    num_ones = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            num_ones = num_ones + 1\n        elif arr[i] == 1:\n            num_binary = num_binary + 1\n        elif arr[i] == 2:\n            num_decimal = num_decimal + 1\n    arr = [arr[i] + 1 for i in range(len(arr)) if arr[i]!= 0]\n    return [arr[i] for i in range(len(arr)) if arr[i]!= 0]\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x[0])\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def len_one(s):\n        if s == 0:\n            return 0\n        else:\n            return 1 + len_one(s//2)\n\n    def dec_one(s):\n        if s < 0:\n            return 0\n        elif s == 0:\n            return 0\n        else:\n            return s\n\n    l = len(arr)\n    res = [[] for _ in range(l)]\n    for i in range(l):\n        for j in range(l):\n            if i == j:\n                res[i].append(0)\n            elif arr[i] == arr[j]:\n                res[i].append(1)\n            else:\n                res[i].append(0)\n                res[j].append(1)\n    for i in range(l):\n        for j in range(l):\n            if i == j:\n                res[i].append(0)\n            elif arr[i] == arr[j]:\n                res[i].append(1)\n            else:\n                res[i].append(0)\n                res[j].append(1)\n    for i in range(l):\n        for j in range(l):\n            if i == j:\n                res[i].append(0)\n            elif arr[i] == arr[j]:\n                res[i].append(1)\n            else:\n                res[i].append(0)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: (x!= 0))\n    # print(arr)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] % 2 == 1:\n            first = arr[i] / 2\n            second = arr[i]\n            for j in range(i+1, len(arr)):\n                if arr[j] % 2 == 0:\n                    if first > second:\n                        swap = second\n                        second = first\n                        first = swap\n                    first += 2 * arr[j] / 2\n                    second += 2 * arr[j] / 2\n            arr[i] = first\n            arr[i + 1] = second\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # print('Initialization...')\n    # print(' '.join(['arr.shape[0]', 'arr.shape[1]', 'arr']))\n    # print(' '.join(['len(arr)', 'len(arr[0])', 'arr']))\n\n    # Start by defining a class to represent an integer\n    class _Int:\n        def __init__(self, number):\n            \"\"\"\n            Initialization\n            :param number: number to be represented as an integer\n            :type number: int\n            \"\"\"\n            # Initializing a new object\n            self.number = number\n            # Initializing the decimal value\n            self.decimal_value = int(number)\n            # Initializing the binary representation\n            self.binary_value = '0' * (8 - len(str(number)))\n            # Initializing the first bit\n            self.bit = 0\n\n        def __str__(self):\n            \"\"\"\n            Print a representation of this object\n            :return: A string representation of this object\n            :rtype: str\n            \"\"\"\n            # Converts a string to an integer\n            self.number = int(self.number)\n            # Print the string representation\n            return str(self.number)\n\n        def __eq__(self, other):\n            \"\"\"\n            Compares two", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def sort_digit(digit):\n        if digit >= 0:\n            return digit\n        return digit - 1\n\n    def get_digit(digit):\n        return int(digit) & 1\n\n    def get_digit_digit(digit):\n        return [get_digit(digit[0]), get_digit(digit[1])]\n\n    def get_count_digit(digit):\n        return [get_digit(digit[0]), get_digit(digit[1]), get_digit(digit[2])]\n\n    def cmp_count_digit(c1, c2):\n        for d1, d2, d3 in zip(c1, c2, c3):\n            if d1!= d2:\n                return cmp(d1, d2)\n        return cmp(len(c1), len(c2))\n\n    def sort_digit_with_count_digit(digit):\n        c = get_count_digit(digit)\n        return sort_digit(c[0]), sort_digit_with_count_digit(c[1])\n\n    def get_min_count_digit(digit):\n        for i in range(0, len(c)):\n            if c[i] == digit:\n                return i\n        return len(c) - 1\n\n    def sort_digit_with_min_count_digit(digit):\n        m", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Iterate through the array and find its binary representation.\n    for i in range(len(arr)):\n        arr[i] = int(str(arr[i]), 2)\n\n    # Sort the array based on its binary representation.\n    for i in range(len(arr)):\n        for j in range(i):\n            if arr[j] > arr[i]:\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n\n    # Iterate through the array and find the decimal value.\n    for i in range(len(arr)):\n        arr[i] = int(str(arr[i]), 10)\n\n    # Sort the array based on its decimal value.\n    for i in range(len(arr)):\n        for j in range(i):\n            if arr[j] > arr[i]:\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def comparator(a, b):\n        if (a == 0 and b == 0):\n            return 0\n        if (a == 0 and b > 0):\n            return -1\n        if (a > 0 and b == 0):\n            return 1\n        if (a > 0 and b > 0):\n            return -1\n        return cmp(a, b)\n\n    return sorted(arr, key=comparator, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    num = 0\n    last_number = 0\n    for n in range(len(arr)):\n        if arr[n]!= 0:\n            num += 1\n        if num > last_number:\n            return sort_array(arr[:last_number]) + [num] + sort_array(arr[last_number:])\n        last_number = num\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def cmp(i, j):\n        if (i & 1) == 0 and (j & 1) == 0:\n            return 0\n        elif (i & 1)!= 0 or (j & 1)!= 0:\n            return 1\n        else:\n            return -1\n\n    res = []\n    for i in range(len(arr)):\n        res.append(cmp(arr[i], 0))\n    res.sort()\n\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort by number of ones\n    return sorted(arr, key=lambda x: int(x) & 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # use a heapq instead of a dictionary, because we need to sort the reverse\n    heapq.heapify(arr)\n    heappush = heapq.heappush\n    # put numbers sorted by one at the top of the heap\n    heappush(arr, (-arr[0][0], 1, 0))\n    # insert numbers sorted by two at the top of the heap\n    heappush(arr, (-arr[0][0], 2, 1))\n    # insert numbers sorted by three at the top of the heap\n    heappush(arr, (-arr[0][0], 3, 2))\n    # insert numbers sorted by four at the top of the heap\n    heappush(arr, (-arr[0][0], 4, 3))\n    # insert numbers sorted by five at the top of the heap\n    heappush(arr, (-arr[0][0], 5, 4))\n    # insert numbers sorted by six at the top of the heap\n    heappush(arr, (-arr[0][0], 6, 5))\n    # insert numbers sorted by seven at the top of the heap\n    heappush(arr, (-arr[0][0], 7, 6))\n    # insert numbers sorted by eight at the top of the heap\n    heappush(arr, (-arr[0][0], 8, 7))\n    # insert", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        binary = arr[i] & 0xf\n        decimal = (arr[i] >> 4) + 1\n        result.append((binary, decimal))\n    result.sort()\n    return result[0][1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare_integer(a, b):\n        \"\"\"\n        This function is to compare two integers for their order in ascending\n        order. For similar number of ones, sort based on decimal value.\n        \"\"\"\n        if a is None:\n            return -1 if b is None else 1\n        return a - b\n\n    def compare_zero(a, b):\n        \"\"\"\n        This function is to compare two integers for their order in ascending\n        order. For similar number of ones, sort based on decimal value.\n        \"\"\"\n        return 0\n\n    arr = sorted(arr, key=compare_integer)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def f(a):\n        n = sum(1 for b in a if b)\n        if n == 0:\n            return 0\n        else:\n            return n\n    return sorted(arr, key=f)\n\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def s(i):\n        if i < 0:\n            return 0\n        if i > len(arr) - 1:\n            return len(arr)\n        if arr[i] == 0:\n            return 0\n        return int(1 << i - 1)\n\n    return [arr[i] for i in sorted([(s(i), i) for i in range(len(arr))], key=lambda x: x[0])]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        \"\"\"\n        This function should be implemented like this:\n        >>> cmp(2, 0) == -1\n        >>> cmp(0, 2) == 1\n        \"\"\"\n        return cmp(a, b)\n    return sorted(arr, key=lambda x: cmp(x, 0))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def _number_of_ones(num):\n        return 1 if num else 0\n\n    def _decimal_value(num):\n        return abs(int(num) - int(1))\n\n    arr = sorted(list(arr), key=_number_of_ones, reverse=True)\n    return [arr[i] for i in xrange(len(arr) - 1)]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) < 2:\n        return sort_array([arr[0]] + list(arr[1:]))\n    else:\n        #arr is in ascending order\n        one_arr = [None] * len(arr)\n        zeros_arr = [None] * len(arr)\n        for i in range(0, len(arr)):\n            one_arr[i] = arr[i] == 1\n            zeros_arr[i] = arr[i] == 0\n        for i in range(0, len(arr)):\n            if one_arr[i]:\n                if one_arr[i - 1] == None:\n                    return sort_array([zeros_arr[i], zeros_arr[i - 1], zeros_arr[i - 2], zeros_arr[i - 3], zeros_arr[i - 4]])\n                else:\n                    if zeros_arr[i - 1] == None:\n                        return sort_array([one_arr[i - 1], zeros_arr[i], one_arr[i - 2], zeros_arr[i - 3], zeros_arr[i - 4]])\n            else:\n                if zeros_arr[i - 1] == None:\n                    return sort_array([zeros_arr[i], zeros_arr[i - 1], one_arr[i - 2], zeros_arr[i - 3], zeros_arr[i - 4]])\n                else:\n                    if one_arr[i - 1] ==", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_one(i):\n        \"\"\"\n        Return the number of ones in the binary representation of `i`.\n        \"\"\"\n        return sum([ord(x) & 1 for x in str(i)]) / 2\n\n    def compare(a, b):\n        \"\"\"\n        Return the value of `b` less than, equal, or greater than `a`.\n        \"\"\"\n        return a - b\n\n    def reverse(a):\n        \"\"\"\n        Reverse the order of elements in `a`.\n        \"\"\"\n        return a[::-1]\n\n    if not arr:\n        return [[], []]\n\n    arr = list(arr)\n    if len(arr) <= 2:\n        return [[], []]\n\n    if arr[0] == arr[-1]:\n        return [[], []]\n\n    res = [[], []]\n    i = 0\n    while i < len(arr) - 1:\n        res[0][0] = arr[i]\n        res[1][0] = arr[i + 1]\n\n        i += 1\n\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n\n        res[0][0] = count_one(arr[i])\n\n        if count_one(arr[i]) < count_one(arr[i + 1]):\n            res[1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        if a == b or a > b:\n            return -1\n        elif a < b:\n            return 1\n        else:\n            return 0\n\n    return sorted(map(compare, arr), reverse = True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Make all numbers positive\n    nums = filter(lambda x: x >= 0, arr)\n    # Sort the list based on the number of ones in each number\n    arr.sort(key=lambda x: len(x), reverse=False)\n    # Sort based on the decimal values of each number\n    nums2 = []\n    for num in nums:\n        nums2.append([num * 1.0 for x in range(2, len(nums) + 1)])\n    nums2.sort(reverse=False)\n    arr2 = []\n    for num in nums2:\n        arr2.append(num)\n    arr2.sort(reverse=True)\n    return arr2", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(arr1, arr2):\n        arr1 = list(arr1)\n        arr2 = list(arr2)\n        i = 0\n        for elem1 in arr1:\n            elem2 = arr2[i]\n            if elem1 == elem2 and elem1!= 0:\n                return 0\n            i += 1\n        if arr1 > arr2:\n            return 1\n        else:\n            return -1\n\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # define sort function\n    def sort_func(a, b):\n        # compare\n        if a % 2 == 0:\n            if b % 2 == 0:\n                return a < b\n        else:\n            if b % 2 == 0:\n                return False\n        # if a and b is even number\n        if a % 2 == b % 2:\n            return sort_func(a // 2, b // 2)\n        # if a and b are odd number\n        return a % 2 < b % 2\n\n    # define global var\n    n = len(arr)\n\n    # sort it\n    arr.sort(sort_func)\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # keep track of how many ones there are in the current array\n    cnt = 0\n    # keep track of how many ones there are in the sorted array\n    index = 0\n    # for each element\n    for i in range(0, len(arr)):\n        # if the current element is larger than the previous one\n        if arr[i] > arr[index]:\n            # if we have only one one, we can move it to the end\n            if cnt == 1:\n                # move the one one to the end\n                arr.insert(index, arr[i])\n                # decrease the index\n                index += 1\n            # if we have two ones, we can move them to the front\n            elif cnt == 2:\n                # move the two ones to the front\n                arr.insert(index, arr[i])\n                # decrease the index\n                index += 1\n            # if we have three ones, we can move them to the beginning\n            elif cnt == 3:\n                # move the two ones to the beginning\n                arr.insert(0, arr[i])\n                # decrease the index\n                index += 1\n            # if we have four ones, we can move them to the middle\n            elif cnt == 4:\n                # move the two ones to the middle\n                arr.insert(index, arr[i])\n                #", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # For similar number of ones, sort based on decimal value.\n    # (i.e. sort [0, 1, 2, 3, 4]) == [-2, -3, -4, -5, -6]\n    res = []\n\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            res.append(i)\n        else:\n            res.append(sort_array([arr[i], arr[i + 1]]))\n\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def num_ones(val):\n        if val == 0:\n            return 0\n        return 1 if val & 1 else 0\n\n    def dec_asc(a, b):\n        return num_ones(a) - num_ones(b)\n\n    return sorted(arr, key=dec_asc)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def gen_sort_algorithm(arr, l = len(arr), r = len(arr) - 1):\n        if l > r:\n            return gen_sort_algorithm(arr[:l - 1], l - 1, r)\n        if l < r:\n            if arr[l] == arr[r]:\n                return gen_sort_algorithm(arr[:l - 1], l - 1, r - 1)\n            if arr[l] < arr[r]:\n                return gen_sort_algorithm(arr[:l - 1], l - 1, r - 1)\n            if arr[l] > arr[r]:\n                return gen_sort_algorithm(arr[:r + 1], l - 1, r)\n        if l == r:\n            return gen_sort_algorithm(arr, l, r)\n        if arr[l] < arr[r]:\n            return gen_sort_algorithm(arr[:l], l - 1, r)\n        if arr[l] > arr[r]:\n            return gen_sort_algorithm(arr[:r - 1], l - 1, r - 1)\n        if arr[l] == arr[r]:\n            return gen_sort_algorithm(arr[:r - 1], l - 1, r - 1)\n    return gen_sort_algorithm(arr, 0, r)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def cmp(x, y):\n        \"\"\"\n        Compares two integers x and y based on number of ones in their binary\n        representation in ascending order.\n        \"\"\"\n\n        def isEven(x):\n            \"\"\"\n            Returns True if x is even, otherwise False.\n            \"\"\"\n\n            return x & 1 == 0\n\n        def isOdd(x):\n            \"\"\"\n            Returns True if x is odd, otherwise False.\n            \"\"\"\n\n            return not isEven(x)\n\n        def isZero(x):\n            \"\"\"\n            Returns True if x is zero, otherwise False.\n            \"\"\"\n\n            return x == 0\n\n        def sign(x):\n            \"\"\"\n            Returns 1 if x is positive, otherwise -1.\n            \"\"\"\n\n            return 1 if x > 0 else -1\n\n        def sign_bin(x):\n            \"\"\"\n            Returns 1 if x is positive, otherwise -1.\n            \"\"\"\n\n            return 1 if x & 1 == 1 else -1\n\n        def cmp_bin(x, y):\n            \"\"\"\n            Compares two integers x and y based on number of ones in their binary\n            representation in ascending order.\n            \"\"\"\n\n            if isOdd(x) and isOdd(y):\n                return cmp(sign_bin(x), sign_bin(y))\n            elif isOdd(x) and", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    binary_arr = [int(i, 2) for i in arr]\n    binary_arr.sort()\n    for i in binary_arr:\n        if i:\n            i = 1\n        else:\n            i = 0\n        arr.append(i)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def find_one(arr, pos):\n        \"\"\"\n        Returns the position of the first one in the array. pos is the index of\n        the first one you want to find. If there is no one at that position, it\n        returns -1.\n        \"\"\"\n        for i in range(len(arr)):\n            if arr[i] == 1:\n                return i\n        return -1\n\n    arr = sorted(arr, key=lambda x: x[0])\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted = []\n    for i in range(len(arr)):\n        if arr[i] > 0 and arr[i] < 255:\n            if arr[i] not in sorted:\n                sorted.append(arr[i])\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # We will use a list to store our new array\n    arr1 = []\n\n    # Let's generate a list of all the ones in the binary representation\n    # for each element in the array\n    arr1_ones = []\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            arr1_ones.append(i)\n\n    # Let's sort the ones according to their position in binary order\n    arr1_ones.sort()\n\n    # Let's generate a list of all the ones in the decimal representation\n    # for each element in the array\n    arr1_dec = []\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            arr1_dec.append(i)\n\n    # Let's sort the ones according to their position in decimal order\n    arr1_dec.sort()\n\n    # Let's generate a list with the binary and decimal representation for each\n    # element in the array\n    arr1_arr = []\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            arr1_arr.append([i, arr1_dec[i]])\n        else:\n            arr1_arr.append([i, arr1_dec[arr1_ones.index(i)]])\n\n    # Sort the elements in the list based on the decimal value\n    arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(list(arr))\n    # convert to string\n    arr_str = \"\"\n    for x in arr:\n        arr_str += str(x) + \",\"\n    # remove last comma\n    arr_str = arr_str[:-1]\n    # find position of last comma\n    idx = arr_str.find(\",\")\n    # remove rest of string\n    arr = arr[:idx] + arr[idx + 1:]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def number_of_one(number):\n        \"\"\"\n        Return the number of ones in the binary representation of number.\n        \"\"\"\n        return int('0111' if number & 1 else '1010', 2)\n\n    def sort(array):\n        \"\"\"\n        Return the sorted array of integers.\n        \"\"\"\n        # Create an array of indexes for the sorting.\n        indexes = [(number_of_one(array[i]), i) for i in range(len(array))]\n\n        # Sort the indexes according to the number of ones.\n        sorted_indexes = [indexes[i][0] for i in sorted(indexes, key=lambda x: x[1])]\n\n        # Update the array.\n        for i in range(len(array)):\n            array[i] = sorted(array, key=lambda x: x[index])[index]\n\n        return array\n\n    return sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Initiate array\n    i = len(arr)\n\n    # Do loop for every element in the array.\n    while i > 0:\n        # Get element at index i-1\n        x = arr[i-1]\n\n        # Check if x is an odd number\n        if x & 1:\n            # Reverse order\n            i = i - 1\n            # Get element at index i-1\n            x = arr[i]\n\n        # If x is an even number, sort based on decimal value\n        if not x & 1:\n            # Get decimal value of x\n            x = int(x)\n\n            # If x is less than y, then swap y with x\n            if x < y:\n                i = i - 1\n                # Get element at index i-1\n                x = arr[i]\n                # Get element at index i\n                arr[i] = arr[i-1]\n                # Reverse order\n                i = i - 1\n            # If x is greater than y, then swap y with x\n            elif x > y:\n                i = i - 1\n                # Get element at index i-1\n                x = arr[i]\n                # Get element at index i\n                arr[i] = arr[i-1]\n                # Reverse order\n                i = i - 1\n\n            # If x is equal to y, then leave the loop\n            else:\n                i =", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x[1], reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    i = 0\n    j = 0\n    count = 0\n    while i < len(arr):\n        while j < len(arr) and arr[i] == arr[j]:\n            j += 1\n        if j == len(arr):\n            while j < len(arr) and arr[j] == 0:\n                j += 1\n            count += 1\n            i += 1\n        else:\n            j = 0\n    if count == len(arr):\n        for i in range(0, len(arr)):\n            if arr[i] > 0:\n                arr[i] += 1\n    else:\n        for i in range(0, len(arr)):\n            if arr[i] > 0:\n                arr[i] += 1\n                j = 0\n                while j < len(arr) and arr[j] == 0:\n                    j += 1\n                count += 1\n                i += 1\n    i = 0\n    j = 0\n    while i < len(arr):\n        while j < len(arr) and arr[i] == arr[j]:\n            j += 1\n        if j == len(arr):\n            while j < len(arr) and arr[j] == 0:\n                j += 1\n        else:\n            j = 0\n        i += 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    num = 0\n    tmp = arr\n    for i in range(len(arr)):\n        tmp[i] = 2 * arr[i] + 1\n        num = tmp[i]\n        if num < arr[i]:\n            tmp[i] = arr[i]\n            num = arr[i]\n    for i in range(len(arr)):\n        if num == arr[i]:\n            tmp[i] = num\n    return tmp", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def compare(x, y):\n        \"\"\"\n        Comparator for sorting integers based on decimal value.\n        \"\"\"\n        return cmp(int(x), int(y))\n\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # The function we are going to implement\n    def compare(x, y):\n        \"\"\"\n        Returns the comparison result between the elements x and y\n        \"\"\"\n        if x == y:\n            return 0\n\n        # The function to sort based on decimal value\n        def compare_d(x, y):\n            \"\"\"\n            Returns the comparison result between the elements x and y\n            \"\"\"\n            if x > y:\n                return 1\n            if x < y:\n                return -1\n            return 0\n\n        # The function to sort based on number of ones in their binary representation\n        def compare_b(x, y):\n            \"\"\"\n            Returns the comparison result between the elements x and y\n            \"\"\"\n            if len(str(x)) == len(str(y)):\n                return 0\n            else:\n                return x + y - len(str(x)) - len(str(y))\n\n        # The comparison function\n        return compare(str(x), str(y))\n\n    # We are going to sort the array\n    arr.sort(compare_d)\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        sorted_array = []\n        sort_order = []\n        for elem in arr:\n            sort_order.append(int(elem * 2))\n        sorted_array = sort_order.reverse()\n        sorted_array.sort()\n        return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if len(arr) > 0:\n        if arr[0] == 0:\n            if arr[1] == 0:\n                if arr[2] == 0:\n                    if arr[3] == 0:\n                        if arr[4] == 0:\n                            return arr[0], arr[1], arr[2], arr[3], arr[4]\n        else:\n            if arr[1] == 0:\n                if arr[2] == 0:\n                    if arr[3] == 0:\n                        if arr[4] == 0:\n                            return arr[0], arr[1], arr[2], arr[3], arr[4]\n            else:\n                if arr[2] == 0:\n                    if arr[3] == 0:\n                        if arr[4] == 0:\n                            return arr[0], arr[1], arr[2], arr[3], arr[4]\n\n        return 0, 0, 0, 0, 0\n\n    else:\n        return 0, 0, 0, 0, 0", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def one(arr):\n        \"\"\"\n        Convert an array into a list of all the integers of 1 or more.\n\n        >>> one([1, 0, 2, 3, 4]) == [-1, 0, 2, 3, 4]\n        \"\"\"\n        return [number for number in arr if number >= 1]\n\n    def all_ones(arr):\n        \"\"\"\n        Return a list of all the integers of 1 or more.\n\n        >>> all_ones([1, 0, 2, 3, 4]) == [1, 0, 2, 3, 4]\n        \"\"\"\n        return [number for number in arr if number == 1]\n\n    def all_nonzero(arr):\n        \"\"\"\n        Return a list of all the integers of 0 or more.\n\n        >>> all_nonzero([1, 0, 2, 3, 4]) == [1, 0, 2, 3, 4]\n        \"\"\"\n        return [number for number in arr if number!= 0]\n\n    if all_ones(arr) == arr:\n        return arr\n    if all_nonzero(arr) == arr:\n        return arr\n    if one(arr) == arr:\n        return one(arr)\n    if all_ones(one(arr)) == one(arr):\n        return one(arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def compare(a, b):\n        \"\"\"\n        The function to compare two elements a and b based on\n        number of ones in their binary representation.\n        \"\"\"\n        if a is None:\n            return -1\n        if b is None:\n            return 1\n\n        return cmp(a, b)\n\n    return sorted(arr, key=compare)\n\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _bin_fun(b):\n        if len(b) == 1:\n            return ord(b[0]) - 48 if b[0] >= '0' and b[0] <= '9' else -1\n        elif len(b) == 2:\n            return ord(b[0]) - 48 if b[0] >= '0' and b[0] <= '9' or ord(b[1]) - 48 if b[1] >= '0' and b[1] <= '9' else -1\n        else:\n            return -1\n\n    def _dec_fun(b):\n        return b[0] - 48 if b[0] >= '0' and b[0] <= '9' else 0\n\n    def _cmp(a, b):\n        if len(a) == len(b):\n            return _bin_fun(a) - _bin_fun(b)\n        else:\n            return _dec_fun(a) - _dec_fun(b)\n\n    return sorted(list(zip(*map(_cmp, arr, arr[::-1]))), key=lambda x: x[1], reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        if a < b:\n            return -1\n        if a == b:\n            return 0\n        return 1\n\n    def sort_by_n_ones(arr):\n        \"\"\"\n        The function to be implemented in the Kata. It must return the array\n        sorted by number of ones.\n        \"\"\"\n        res = []\n        for i in range(0, len(arr)):\n            if arr[i] == 1:\n                res.append(i)\n        return res\n\n    arr = sort_by_n_ones(arr)\n    print(\"Sorted array:\", arr)\n    print(\"Length: %d\" % len(arr))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    res = []\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        res.append(arr[i])\n    res.sort(key=lambda x: x and x)\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    print(\"{\")\n    print(\" \".join([\"\\t{}\".format(i) for i in arr]))\n    print(\"}\")", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def num_ones(number):\n        return sum(1 for _ in number)\n    num_ones = lambda number: num_ones(number)\n    return sorted(map(num_ones, arr), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: int(x) - int(x/2) + 1, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(x, y):\n        \"\"\"\n        Sort an array by number of ones in binary representation.\n        \"\"\"\n        if len(x) == len(y):\n            return cmp(x, y)\n        elif x[0] == 1:\n            return cmp(x[1:], y[1:])\n        elif y[0] == 1:\n            return cmp(x[:-1], y[:-1])\n        else:\n            return cmp(x[0], y[0])\n\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    import operator\n\n    def comparator(a, b):\n        # get string representations\n        a_string = str(a)\n        b_string = str(b)\n\n        # get number of ones in their binary representation\n        arr = [int(b_string[i:i + 2], 2) for i in range(0, len(b_string), 2)]\n        arr = [arr[i] for i in range(0, len(arr)) if arr[i]]\n\n        # get decimal value\n        arr = [int(a_string[i:i + 2], 2) for i in range(0, len(a_string), 2)]\n        arr = [arr[i] for i in range(0, len(arr)) if arr[i]]\n\n        # return the result of comparison\n        return cmp(arr[0], arr[1])\n\n    return sorted(arr, key=operator.itemgetter(0), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr)\n    for i, n in enumerate(arr):\n        if n == 0:\n            return i\n    return i", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    def iarr(arr):\n        i = 0\n        j = 0\n        arr_copy = arr[:]\n        while i < len(arr_copy):\n            arr_copy[i], arr_copy[j] = arr_copy[j], arr_copy[i]\n            i += 1\n            j += 1\n        return arr_copy\n\n    def tr(arr, i):\n        if i == len(arr) - 1:\n            return arr[i]\n        iarr(arr)[:] = [arr[i], arr[i + 1]]\n        return arr[i]\n\n    def tr1(arr, i):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] == 0:\n            return 0\n        return tr(arr, i + 1)\n\n    arr_copy = iarr(arr)\n    result = []\n    while len(result) < len(arr_copy):\n        if arr_copy[i] == arr_copy[i + 1] and arr_copy[i] == 0:\n            i += 1\n            continue\n        tr(arr_copy, i)\n        result.append(arr_copy[i])\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # keep track of position of 0 and keep track of current position\n    # of 1\n    positions = [0]\n    position = 0\n    for i in range(len(arr)):\n        # find position of 1 in i's binary representation\n        # and keep track of that\n        position = positions.index(1 if arr[i] == 1 else 0)\n        # if current position is position+1, then move to next position\n        # if current position is position-1, then move to previous position\n        if position == positions[-1]:\n            positions.append(position)\n        else:\n            positions.pop()\n    # if the last position is 0, then return the list\n    if positions[-1]:\n        return arr[:positions[-1]]\n    # return the list of numbers sorted based on their positions\n    # return sorted(arr, key=lambda x: x[0])\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    array = [int(i) for i in arr]\n    values = sorted(array, key=lambda x: x)\n    return values", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    new_arr = []\n    for i in range(len(arr)):\n        digit = 0\n        for j in range(0, len(arr)):\n            if arr[i] & (1 << j) == (1 << j):\n                digit += 1\n        new_arr.append(digit)\n        result.append(new_arr)\n    sorted_arr = result\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp_int(a, b):\n        if a > b:\n            return 1\n        elif a < b:\n            return -1\n        else:\n            return 0\n    def cmp_dec(a, b):\n        if a > b:\n            return -1\n        elif a < b:\n            return 1\n        else:\n            return 0\n    res = []\n    i = 0\n    while i < len(arr):\n        if arr[i]:\n            res.append(i)\n        i += 1\n    while i < len(arr):\n        if arr[i]:\n            res.append(i)\n        i += 1\n    while i < len(arr):\n        if arr[i]:\n            res.append(i)\n        i += 1\n    res.sort()\n    return res\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    temp_arr = []\n    temp_arr.extend(arr)\n    for i in range(len(temp_arr)):\n        temp_arr[i] = (int(temp_arr[i]) >> 1) & 0xFF\n        if ((temp_arr[i] & 1) == 1):\n            temp_arr[i] += 1\n    temp_arr.sort(key=lambda x: x)\n    return temp_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    i, j = 0, len(arr)-1\n    while i < j:\n        while arr[i] < arr[j]:\n            i += 1\n        while arr[i] > arr[j]:\n            j -= 1\n        if i < j:\n            i, j = i+1, j\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(x, y):\n        \"\"\"\n        Returns -1 if x < y, 1 if x > y and 0 if they are equal.\n        \"\"\"\n        if x > y:\n            return 1\n        if x < y:\n            return -1\n        return 0\n\n    return sorted(arr, cmp=cmp)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def number_ones(n):\n        if n == 0:\n            return 0\n        n = n << 1\n        while n:\n            n >>= 1\n            n += n >> 1\n        return n\n    def numbers(n):\n        if n == 0:\n            return [n]\n        n = n << 1\n        while n:\n            n >>= 1\n            n += n >> 1\n        return [n - 1]\n    def sort_numbers(a, b):\n        if a[0] < b[0]:\n            return -1\n        elif a[0] > b[0]:\n            return 1\n        else:\n            if a[1] < b[1]:\n                return -1\n            elif a[1] > b[1]:\n                return 1\n            else:\n                if a[2] < b[2]:\n                    return -1\n                elif a[2] > b[2]:\n                    return 1\n                else:\n                    return a[3] - b[3]\n    def sort_numbers_base(a, b):\n        if a[0] < b[0]:\n            return -1\n        elif a[0] > b[0]:\n            return 1\n        else:\n            if a[1] < b[1]:\n                return -1\n            elif a[1] > b[1]:\n                return 1\n            else:\n                if a[2] < b[2]:\n                    return -1\n                elif a[2] > b[2]:\n                    return 1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        if arr[0] > arr[1]:\n            return arr[0], arr[1]\n        else:\n            return arr[1], arr[0]\n    if n == 3:\n        if arr[0] > arr[1] and arr[0] > arr[2]:\n            return arr[0], arr[1], arr[2]\n        if arr[1] > arr[2] and arr[1] > arr[3]:\n            return arr[1], arr[2], arr[3]\n        if arr[2] > arr[3]:\n            return arr[2], arr[3]\n    if n > 3:\n        if n % 3 == 0:\n            return sort_array([arr[:n // 3]] + [[arr[n // 3:]] * (n - n // 3)])\n        if n % 3 == 1:\n            return sort_array([arr[:n // 3]] + [[arr[n // 3:]] * (n - n // 3), [[arr[n // 3:]] * (n - n // 3)]])\n        if n % 3 == 2:\n            return sort_array([arr[:n // 3]] + [[arr[n // 3:]] * (n - n // 3), [[arr[n // 3:]] * (n - n // 3),", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Convert the array to a list of binary strings and count the number of ones.\n    # The length of each string is the number of ones in it.\n    # The first two binary strings have the same length, but they represent different\n    # numbers.\n    arr2 = [str(x) for x in arr]\n    arr2.sort(key=lambda x: int(x, 2))\n    # Convert the list of binary strings to a list of ints and sort the list.\n    # The length of the first int is the number of ones in it.\n    # The first two ints have the same number of ones, but the second one is larger.\n    arr2.sort(key=lambda x: int(x, 2) - int(x.replace('1', '0'), 2))\n    # Convert the list of ints to a list of floats and sort the list.\n    # The length of the first float is the number of ones in it.\n    # The first two floats have the same number of ones, but the second one is larger.\n    arr2.sort(key=lambda x: x - float(x.replace('1', '0')))\n    return arr2", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        return cmp(len(b), len(a))\n\n    return sorted(arr, key=compare, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n\n    sorted_array = []\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == 0 and arr[mid - 1] == 0:\n            left = mid + 1\n        else:\n            right = mid - 1\n        if arr[mid] == 0 and arr[mid + 1] == 0:\n            right = mid - 1\n        else:\n            left = mid + 1\n    if left < right:\n        sorted_array.append(arr[left])\n        sorted_array.append(arr[right])\n    else:\n        sorted_array.append(arr[left])\n        sorted_array.append(arr[right - 1])\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        if a[0] == b[0]:\n            return cmp(a[1], b[1])\n        else:\n            return cmp(a[0], b[0])\n\n    def pre_sort(a):\n        for i in range(len(a)):\n            if a[i] == 1:\n                a[i] = i\n\n    def main_sort(a):\n        for i in range(len(a)):\n            if i == 0:\n                j = i - 1\n                while j >= 0 and a[j]!= 1:\n                    j -= 1\n                if j >= 0:\n                    temp = a[j + 1:] + a[j + 2:] + a[j + 3:] + a[j + 4:] + a[j + 5] + a[2:] + a[0]\n                    a = a[:j + 1] + a[j + 2:] + a[j + 3:] + a[j + 4:] + a[j + 5] + a[2:] + a[0]\n                    for j in range(len(temp)):\n                        if temp[j] == 1:\n                            a[i] = temp[j]\n                else:\n                    a[i] = 1\n        return a\n\n    return main_sort(pre_sort(sort_array(arr)))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Sort the array and print the sorted one.\n    arr.sort(key=lambda x: x.count('1') + x.count('0'))\n    print('[' + ', '.join(arr) + ']')\n\n    # Sort the array and print the sorted one.\n    arr.sort(key=lambda x: x.count('1'), reverse=True)\n    print('[' + ', '.join(arr) + ']')\n\n    # Sort the array and print the sorted one.\n    arr.sort(key=lambda x: x.count('1'), reverse=False)\n    print('[' + ', '.join(arr) + ']')\n\n    # Sort the array and print the sorted one.\n    arr.sort(key=lambda x: x.count('0'), reverse=True)\n    print('[' + ', '.join(arr) + ']')\n\n    # Sort the array and print the sorted one.\n    arr.sort(key=lambda x: x.count('0'), reverse=False)\n    print('[' + ', '.join(arr) + ']')\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(left, right):\n        if left < right:\n            return -1\n        elif left > right:\n            return 1\n        else:\n            return 0\n\n    # Sort based on binary representation\n    sorted_array = sorted(arr, key=lambda x: ord(x) - ord(x[0]))\n    # Convert back to integer\n    return map(int, sorted_array)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    arr = sorted(arr, key=lambda x: x, reverse=True)\n    arr = [int(''.join('0' + str(x)).lower()) for x in arr]\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    if len(arr) == 2:\n        return [arr[0], arr[1]]\n    result = []\n    max_size = len(arr) // 2\n    curr_size = 1\n    while curr_size <= max_size:\n        curr_size = curr_size << 1\n        result.append(arr[curr_size - 1])\n        curr_size = curr_size * 2 + 1\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    low = None\n    high = None\n    for i in range(len(arr)):\n        if i == 0:\n            low = arr[i]\n            high = arr[i]\n        else:\n            if arr[i] < low:\n                low = arr[i]\n            if arr[i] > high:\n                high = arr[i]\n    if low is None:\n        low = arr[0]\n    if high is None:\n        high = arr[-1]\n\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] == high:\n            low = low + 1\n            high = high + 1\n        else:\n            if arr[i] < high:\n                high = high - 1\n            i = i + 1\n    return [high, low]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def is_lower(x):\n        return x < 0\n    arr = sorted(arr, key=is_lower, reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        Compare two elements in array by their number of ones\n        \"\"\"\n        return cmp(int(a) >> 1, int(b) >> 1)\n    return sorted(arr, key=compare, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Initialize the dictionary to store result\n    result = dict([])\n\n    # Initialize the array to store the result\n    result_array = list([])\n\n    # Create a dictionary to store the result\n    for i in range(len(arr)):\n        # Check if the current element is an integer\n        if not isinstance(arr[i], int):\n            raise ValueError(\"Input data must be an integer.\")\n\n        # Check if the current element is negative\n        if not arr[i] < 0:\n            raise ValueError(\"Input data must be non-negative.\")\n\n        # Check if the current element is in the array\n        if result.get(arr[i], None) is None:\n            # Add the current element to the array\n            result_array.append(arr[i])\n\n        # Add the element to the dictionary if it is not present\n        else:\n            # Append the number of ones to the dictionary key\n            result[arr[i]] += 1\n\n    # Append the sorted array to the result dictionary\n    for i in range(len(result_array)):\n        # Check if the current element is in the dictionary\n        if result.get(result_array[i], None) is None:\n            # Add the current element to the result dictionary\n            result[result_array[i]] = 1\n\n        # Add the", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [float(i) if i.isdigit() else 0 for i in arr]\n    result = [arr[i:i+1] for i in range(len(arr))]\n    result.sort(key=lambda x: x[1])\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    sorted = []\n\n    for i in range(len(arr)):\n        if arr[i] == 0 or arr[i] == 1:\n            sorted.append(i)\n\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            break\n        for j in range(i + 1, len(arr)):\n            if arr[j] > 0:\n                break\n            if arr[i] + arr[j] > 0:\n                break\n            if arr[i] > arr[j]:\n                break\n            sorted.append(i)\n            sorted.append(j)\n\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Sort based on number of ones\n    num_ones = sum(1 for i in range(len(arr)) if arr[i]!= 0)\n    return [arr[i] for i in range(len(arr)) if arr[i] == num_ones]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    r = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] > arr[r[-1]]:\n            r.append(arr[i])\n        else:\n            r.append(arr[-1 - i])\n    return r", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    flag = 0\n    def compare(a, b):\n        if a == b:\n            return 0\n        if flag == 0:\n            if a > b:\n                flag = 1\n            elif a == b:\n                flag = 1\n        elif flag == 1:\n            if a > b:\n                flag = 1\n            else:\n                flag = 0\n        else:\n            if a > b:\n                flag = 1\n            else:\n                flag = 0\n\n        return flag\n\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] == 0:\n                arr[j] = arr[j] - 1\n            else:\n                arr[j] = arr[j] - 2\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # step1\n    m = len(arr)\n    n = len(str(m))\n    arr0 = [0 for i in range(m)]\n    for i in range(n):\n        if arr[i] == 1:\n            arr0[i] += 1\n        elif arr[i] == 0:\n            arr0[i] += 1\n        else:\n            arr0[i] += 1\n    # step2\n    n = len(str(n))\n    arr1 = [0 for i in range(n)]\n    for i in range(m):\n        if arr0[i] == 1:\n            arr1[i] += 1\n        elif arr0[i] == 0:\n            arr1[i] += 1\n        else:\n            arr1[i] += 1\n    # step3\n    n = len(str(n))\n    arr2 = [0 for i in range(n)]\n    for i in range(m):\n        if arr1[i] == 1:\n            arr2[i] += 1\n        elif arr1[i] == 0:\n            arr2[i] += 1\n        else:\n            arr2[i] += 1\n    # step4\n    n = len(str(n))\n    arr3 = [0 for i in range(n)]\n    for i in range(m):\n        if arr2[i] == 1:\n            arr3[i] += 1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def _sort_ones(arr):\n        result = []\n        for i in range(len(arr)):\n            arr[i], result = result[0], result[1:]\n            result = sorted(result)\n            result.sort(key=lambda x: abs(x))\n\n        return result\n\n    def _sort_dec(arr):\n        result = []\n        for i in range(len(arr)):\n            arr[i], result = result[0], result[1:]\n            result = sorted(result, key=lambda x: abs(x))\n\n        return result\n\n    arr = sorted(arr, key=lambda x: x[0])\n    if len(arr) > 1:\n        arr = _sort_ones(arr)\n    else:\n        arr = _sort_dec(arr)\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binarize(num):\n        \"\"\"\n        Convert an integer to its binary representation.\n        \"\"\"\n        bin = bin(num)[2:]\n        if len(bin) == 1:\n            return bin[0]\n        else:\n            return bin[1:]\n\n    result = []\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            result.append(binarize(arr[i]))\n    result.sort()\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x:x[1])[0][1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    arr_len = len(arr)\n    if arr_len == 0:\n        return arr\n    if arr_len < 2:\n        return []\n    sorted_list = [arr[0]]\n    for i in range(1, arr_len):\n        if arr[i] > arr[i - 1]:\n            sorted_list.append(arr[i])\n            sorted_list.append(arr[i - 1])\n        else:\n            sorted_list.append(arr[i - 1])\n    return sorted_list", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(x, y):\n        \"\"\"\n        Sorting function.\n        \"\"\"\n        if x < y:\n            return -1\n        elif x > y:\n            return 1\n        else:\n            return 0\n\n    # Sorting algorithm\n    arr.sort(key=cmp, reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Check if arr is already sorted.\n    if sorted(arr):\n        return arr\n\n    # Get first element of array and compare it.\n    first = arr[0]\n\n    # Append value with binary representation of first element to a list.\n    binary = [first]\n    for i in range(1, len(arr)):\n        binary.append(str(arr[i]).count('1'))\n\n    # Sort the list of binary representations.\n    binary.sort()\n\n    # Append binary representation of last element with list of binary\n    # representation of current element.\n    binary.append(binary[-1] + str(arr[-1]).count('1'))\n\n    # Loop through list of binary representation, appending binary\n    # representation of current element to list of binary representation of\n    # previous element.\n    for i in range(1, len(arr)):\n        binary.append(binary[i - 1] + str(arr[i]).count('1'))\n\n    # Append binary representation of last element to list of binary\n    # representation of current element.\n    binary.append(binary[-1] + str(arr[-1]).count('1'))\n\n    # Return sorted list of binary representation.\n    return [binary[i] for i in range(1, len(arr))]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # The first solution can be implemented like:\n    # def sort_array(arr):\n    #     return sorted(arr, key=lambda x: int(int(x) // 2))\n\n    # The second solution can be implemented like:\n    # def sort_array(arr):\n    #     return sorted(arr, key=lambda x: int(x) // 2, reverse=True)\n\n    # And the third solution can be implemented like:\n    # def sort_array(arr):\n    #     return sorted(arr, key=lambda x: int(x) // 2, reverse=False)\n    # sort_array([1, 5, 2, 3, 4])\n    # sort_array([-2, -3, -4, -5, -6])\n    # sort_array([1, 0, 2, 3, 4])\n    # sort_array([1, 5, 2, 3, 4], key=lambda x: int(x) // 2)\n    # sort_array([1, 5, 2, 3, 4], reverse=True)\n    # sort_array([1, 5, 2, 3, 4], key=lambda x: int(x) // 2, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2:\n        return arr\n    array = []\n    count = 0\n    for item in arr:\n        if item!= 0:\n            array.append(item)\n            count += 1\n        elif count:\n            array.append(count)\n            count = 0\n    return array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def sorter(x):\n        if x > 0:\n            return 1\n        if x == 0:\n            return 0\n        return -1\n\n    if len(arr) == 1:\n        return arr[0]\n\n    arr = sorted(arr, key=sorter)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x:x[1], reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Translates the integer to a string.\n    # This is the same as str.join.\n    arr =''.join(map(str, arr))\n    # Sort the array of string based on their position in the string.\n    sorted_strings = sorted([arr.index(str(x)) for x in arr], key=lambda x: x)\n    # Translates the string back to integer\n    sorted_strings = map(int, sorted_strings)\n    # Translates the sorted string back to an array\n    return sorted(arr, key=lambda x: x)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort()\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) > 0:\n        a = arr[0]\n        if a > 0:\n            r = a % 2\n            a = a / 2\n            b = 1\n        else:\n            r = a / 2\n            b = 0\n        while a > 0:\n            if r == 0:\n                # Truncate to even number of ones\n                if a % 2!= 0:\n                    r = 1\n            else:\n                # Truncate to odd number of ones\n                r = 0\n            if b == 0:\n                # Truncate to even number of ones\n                if a % 2 == 0:\n                    b = 1\n            else:\n                # Truncate to odd number of ones\n                b = 0\n            if r == 1:\n                a = a - 1\n            else:\n                a = a - 2\n            if b == 1:\n                b = b - 1\n            else:\n                b = b - 2\n        if r > 0:\n            r = 1\n        else:\n            r = 0\n        if b > 0:\n            b = 1\n        else:\n            b = 0\n        a = a - 1\n        b = b - 1\n        if a > 0:\n            a = a - 1\n        else:\n            a = a - 2\n        b = b - 2\n        while a > 0:\n            while b > 0:\n                if a % 2", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def more_ones(a, b):\n        return int(b) - int(a) > 0\n\n    return sorted(arr, key=lambda x: x if x > 0 else more_ones, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    num = 0\n    res = []\n    for n in arr:\n        num += 1\n        if num % 2 == 0:\n            res.append(n)\n        elif n > num / 2:\n            res.append(n / 2)\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    flag = False\n    while True:\n        flag = False\n        # if there are less than two elements in the array, then break and return\n        if len(arr) < 2:\n            break\n        # else go through all the elements of the array\n        for i in range(len(arr)):\n            # if the element is equal to zero, then return\n            if arr[i] == 0:\n                break\n            # if the element is greater than zero, then check the number of ones\n            # in its binary representation\n            elif arr[i] > 0:\n                if arr[i] & 1 == 1:\n                    flag = True\n                    break\n                else:\n                    if flag:\n                        flag = False\n                    else:\n                        arr[i] = arr[i] - 1\n        # if we have not found a non-zero element, then the array is sorted\n        # return\n        if not flag:\n            break\n    return arr</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return None\n\n    else:\n        if len(arr) > 1:\n            if arr[0] < arr[1]:\n                arr.sort(key=lambda x: x[1])  # ascending order\n            elif arr[0] == arr[1]:\n                if arr[0] < 0:\n                    return sort_array([-arr[0]] + arr[1:]) + arr[0]  # descending order\n                else:\n                    return arr\n            else:\n                return sort_array([arr[0], -arr[0]] + arr[1:]) + arr[0]  # descending order\n        else:\n            return sort_array([arr[0]] + arr[1:]) + arr[0]  # ascending order", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Insertion sort for small numbers\n\n    # Calculate size of array\n    array_length = len(arr)\n\n    # Initial array\n    sorted_array = []\n\n    # Check if array is empty\n    if array_length == 0:\n        return sorted_array\n\n    # Insertion sort\n    for j in range(0, array_length - 1):\n        for i in range(0, j):\n            if arr[i] > arr[j]:\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n\n    # Return sorted array\n    return sorted(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # this is the int array\n    number_of_digits = len(str(arr)) / 2\n    number_of_ones = 0\n    for i in range(number_of_digits):\n        for j in range(i + 1, number_of_digits):\n            if arr[j] > arr[j - 1]:\n                number_of_ones += 1\n\n    # take the binary representation and sort it\n    arr_list = [str(a) for a in arr]\n    arr_list.sort()\n    print(arr_list)\n\n    # it should work if we sort by the decimal value\n    for a in arr:\n        if a % 2 == 0:\n            arr_list.append(a / 2)\n        else:\n            arr_list.append(0)\n\narr = [2, 5, 1, 3, 4]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def len_binary(a):\n        return len(str(bin(a)))\n    def lena(a):\n        return a + 1\n    def lena_binary(a):\n        return len(str(bin(a)) + '0')\n    def lena_digit(a):\n        return a + 1.0\n    def lena_binary_digit(a):\n        return len(str(bin(a)) + '0') + 1.0\n    def lena_decimal(a):\n        return a + 1.0\n    def lena_binary_decimal(a):\n        return len(str(bin(a)) + '0') + 1.0\n    def lena_binary_int(a):\n        return len(str(int(bin(a)) + '0'))\n    def lena_int(a):\n        return a + 1\n    def lena_binary_int(a):\n        return len(str(int(bin(a)) + '0')) + 1\n    def lena_int_digit(a):\n        return a + 1.0\n    def lena_binary_int_digit(a):\n        return len(str(int(bin(a)) +", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Make a list of all the non-negative integers\n    nums = [int(x) for x in str(arr).split(\" \")]\n    # Sort the list of non-negative integers\n    nums.sort(key=lambda x: x > 0)\n    # Convert the sorted list to a list of strings\n    binary = \"\".join([str(x) for x in nums])\n    # Sort the list of strings using the sort command\n    binary.sort()\n    return [int(x) for x in binary]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    res = []\n    for i in range(len(arr)):\n        binary = int(''.join(['0' if x == 0 else '1' for x in arr[i]]))\n        res.append((binary, arr[i]))\n\n    for i in range(len(res)):\n        res[i][0] = res[i][0] // 2\n        res[i][1] = res[i][1] // 2\n\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Length of the array\n    len_arr = len(arr)\n\n    if len_arr <= 1:\n        return arr\n\n    # Get number of ones in the array\n    num_ones = 0\n\n    for i in range(len_arr - 1):\n        if arr[i] == arr[i + 1]:\n            num_ones += 1\n\n    # Sort by number of ones\n    if num_ones == 0:\n        return arr\n\n    sorted_arr = []\n\n    for i in range(len_arr - 1):\n        if num_ones > arr[i]:\n            sorted_arr.append(arr[i])\n        else:\n            sorted_arr.append(arr[i + 1])\n\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr)\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return sort_array(arr[1:]) + [arr[0]]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted_array = []\n    length = len(arr)\n    while length > 1:\n        if len(arr) == 1:\n            break\n        mid = (length - 1) // 2\n        if arr[mid] > 0:\n            left = 0\n        else:\n            left = mid + 1\n        if arr[mid] < 0:\n            right = mid - 1\n        else:\n            right = mid\n        mid = int(round(float(length) / 2))\n        sorted_array.append(arr[left])\n        sorted_array.append(arr[mid])\n        arr = arr[right:mid] + arr[mid + 1 + left:mid + 1]\n        length = length - 2\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Build a dict of all the different numbers\n    all_digits = {}\n    for i in range(len(arr)):\n        all_digits[arr[i]] += 1\n    # Sort the array based on the value of the dictionary\n    # This does the job\n    arr = sorted(arr, key=all_digits.get)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # A comparator function that compares two numbers based on number of ones.\n    def number_of_1s(a, b):\n        \"\"\"\n        Returns the number of ones in a and b.\n        \"\"\"\n        return a & b - a\n    # A comparator function that compares two numbers based on their decimal values.\n    def decimal_value(a, b):\n        \"\"\"\n        Returns the decimal value of a and b.\n        \"\"\"\n        return a - b\n    return sorted(arr, key=number_of_1s, reverse=True, cmp=decimal_value)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    arr.sort(key=lambda x: x[0])\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    sorted = []\n    i = 0\n    while i < len(arr):\n        if arr[i] == 1:\n            sorted.append(arr[i:i + 1])\n        elif arr[i] == 0:\n            sorted.append(arr[i:i + 1])\n        else:\n            sorted.append(arr[i])\n        i += 1\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort(x):\n        \"\"\"\n        This function is used to sort an array of integers.\n        It uses binary number of an integer to determine the order.\n        >>> sort([-2, -3, -4, 5]) == [0, 1, 2, 3, 4]\n        \"\"\"\n        return (x + 2) // 2\n\n    arr_len = len(arr)\n    if arr_len % 2:\n        return sort(arr)\n    else:\n        return sort(arr) + sort(arr[::-1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_char(n):\n        \"\"\"\n        Function that converts n to binary and returns a single character\n        representing that binary string.\n        \"\"\"\n        # Numeric value of n\n        n = int(n)\n        # Convert n to binary\n        bin_string = binary(n)\n        # Convert string to single char\n        char = chr(int(bin_string[2:], 2))\n        return char\n\n    # Sorting\n    print(\"\\nIn this Kata, you have to sort an array of non-negative integers according to number of ones in their binary representation in ascending order.\")\n    print(\"For similar number of ones, sort based on decimal value.\")\n    print(\"It must be implemented like this:\")\n    print(\"\\n\\t\" + sorted(arr) + \"\\n\\n\")\n    # Printing\n    print(\"\\nIn this Kata, you have to sort an array of non-negative integers according to number of ones in their binary representation in ascending order.\")\n    print(\"For similar number of ones, sort based on decimal value.\")\n    print(\"It must be implemented like this:\")\n    print(\"\\n\\t\" + sorted(arr) + \"\\n\\n\")\n    print(\"For similar number of ones, sort based on decimal value.\")\n    print(\"\\nIt must", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Define a set of valid sorting methods\n    methods = {\n        'bottom_up': lambda arr: sorted([item for sublist in arr.split(',') for item in sublist.split(',')], key=lambda item: int(item)),\n        'binary': lambda arr: sorted([item for sublist in arr.split(',') for item in sublist.split(',')], key=lambda item: int(item) % 2, reverse=True),\n        'decimal': lambda arr: sorted([item for sublist in arr.split(',') for item in sublist.split(',')], key=lambda item: int(item)),\n        'equal': lambda arr: sorted([item for sublist in arr.split(',') for item in sublist.split(',')], key=lambda item: item.isdigit() and int(item) == item),\n\n        # An experimental method:\n        'experimental': lambda arr: sorted([item for sublist in arr.split(',') for item in sublist.split(',')], key=lambda item:", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    print \"Your program must be implemented like this:\"\n    print \"    sort_array(arr) == arr.sort(reverse=True)\"\n    print \"    arr.sort(reverse=False) == arr.sort(ascending=False)\"\n    print \"    arr.sort(ascending=True) == arr.sort(ascending=False)\"\n    print \"    arr.sort(reverse=True, ascending=False) == arr.sort(ascending=True)\"\n    print \"    sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\"\n    print \"    sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\"\n    print \"    sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\"\n    print \"    sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\"\n    print \"    sort_array([1, 2, 2, 3, 4, 5]) == [1, 2, 2, 3, 4, 5]\"\n    print \"    sort_array([1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr):\n        if arr[i] == 1:\n            i += 1\n            continue\n        if j >= len(arr):\n            break\n        if arr[j] == 1:\n            j += 1\n            continue\n        if i == j:\n            break\n        if arr[i] > arr[j]:\n            i, j = j, i\n    return (arr[:i] + arr[i+1:])</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # This is what I had come up with (not tested):\n    n = len(arr)\n    length = n // 2\n    length1 = length\n    rest = n - length\n    for i in range(length1, length, -1):\n        for j in range(length, i, -1):\n            if arr[i] == arr[j]:\n                arr[j], arr[i] = arr[i], arr[j]\n                length += 1\n                break\n    for i in range(0, rest):\n        for j in range(0, n - i):\n            if arr[j] == arr[j + i]:\n                arr[j], arr[j + i] = arr[j + i], arr[j]\n                length += 1\n                break\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        return cmp(b[0], a[0]) * cmp(b[1], a[1])\n\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def comparator(a, b):\n        # Comparing number of ones in each number\n        if a[0]!= b[0]:\n            return a[0] - b[0]\n        # Comparing decimal value of each number\n        if a[1] < b[1]:\n            return -1\n        if a[1] > b[1]:\n            return 1\n        return 0\n\n    sorted = []\n    for i in range(len(arr)):\n        sorted.append([arr[i], i])\n    sorted.sort(comparator)\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def compare(a, b):\n        \"\"\"\n        Returns True if `a` is less than `b`, False otherwise.\n        \"\"\"\n        if a < b:\n            return True\n        if a > b:\n            return False\n        return 0\n\n    def compare_to(a, b):\n        \"\"\"\n        Returns True if `a` is less than or equal to `b`, False otherwise.\n        \"\"\"\n        if a < b:\n            return True\n        if a > b:\n            return False\n        return 0\n\n    result = []\n    num_ones = 0\n    for i, val in enumerate(arr):\n        if val == 1:\n            num_ones += 1\n        else:\n            result.append(val)\n            continue\n        if num_ones!= 0:\n            result.append(num_ones)\n            num_ones = 0\n            continue\n    result.append(num_ones)\n    return result\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    i = 0\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            j = i\n            break\n    for j in range(i):\n        arr[i], arr[j] = arr[j], arr[i]\n        if arr[j] > 0:\n            j = i\n            break\n    for j in range(i):\n        if arr[j] > 0:\n            j = i\n            break\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr_len = len(arr)\n    if arr_len == 1:\n        return arr[0]\n    elif arr_len == 2:\n        return arr[0], arr[1]\n    else:\n        result = [[] for x in range(arr_len)]\n        for i in range(arr_len - 1):\n            left_arr = [(i + 1) * 2 if i + 1 in arr else 0 for j in range(i + 1)]\n            right_arr = [(i + 1) * 2 if i + 1 in arr else 0 for j in range(arr_len - i - 1)]\n            result[i] = left_arr + right_arr\n        return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp_nb_of_ones(a, b):\n        \"\"\"\n        Implement this function, that checks if two numbers have same number of ones\n        \"\"\"\n        return cmp(a, b)\n    a = [0, 1, 2, 3, 4]\n    a.sort(cmp_nb_of_ones)\n    return a", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def my_sort(x, y):\n        if x < y:\n            return -1\n        else:\n            return 1\n\n    result = []\n\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            pass\n        elif arr[i] == 1:\n            result.append(i)\n        else:\n            result.append(my_sort(arr[i], arr[i+1]))\n\n    result.sort()\n\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def bubble_sort(arr):\n        \"\"\"\n        Bubble Sort is a method of sorting an array in linear time. It is not\n        an in-place sorting method, since a copy of the array must be made.\n        \"\"\"\n\n        i = 0\n        while i < len(arr) - 1:\n            j = i + 1\n            while j < len(arr) and arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                j += 1\n\n            if j < len(arr) - 1:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n\n        return arr\n\n    arr = sorted(arr)\n\n    bubble_sort(arr)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(reverse=True, key=lambda x: x[0], reverse=False)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        This function will return -1, 0 or 1 based on the comparison of the two\n        numbers.\n        \"\"\"\n        if a > b:\n            return 1\n        elif a < b:\n            return -1\n        return 0\n\n    # Sort the array according to number of ones\n    return sorted(arr, key=compare, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Count the number of ones\n    num_ones = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            num_ones += 1\n    # Sort by one\n    for i in range(len(arr) - 1):\n        if arr[i] == 1:\n            for j in range(i + 1, len(arr)):\n                if arr[j] == 1:\n                    if num_ones < arr[j]:\n                        swap = arr[j]\n                        arr[j] = arr[i]\n                        arr[i] = swap\n        elif num_ones < arr[i]:\n            swap = arr[i]\n            arr[i] = arr[j]\n            arr[j] = swap\n\n    # Count the number of ones again\n    num_ones = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            num_ones += 1\n    # Sort by one again\n    for i in range(len(arr) - 1):\n        if arr[i] == 1:\n            for j in range(i + 1, len(arr)):\n                if arr[j] == 1:\n                    if num_ones < arr[j]:\n                        swap = arr[j]\n                        arr[j] = arr[i]\n                        arr[i] = swap\n                elif num_ones < arr[i]:\n                    swap = arr[i]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return [arr[0]]\n\n    if n == 1:\n        return arr[0]\n\n    nums = [0] * (n + 1)\n    for i in range(n):\n        nums[i] = 1 << i\n\n    def comp(x, y):\n        if x > y:\n            return 1\n        if x < y:\n            return -1\n        return 0\n\n    nums_rev = [(2 ** x - 1) & 0xff for x in nums]\n    nums_rev.sort(cmp=comp)\n    return [nums_rev[x % n] for x in range(n)]\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 1:\n        return arr\n    if len(arr) == 1:\n        return sorted(arr)[0]\n    if len(arr) == 2:\n        return sorted(arr, key=lambda x: x[0])\n    arr = sorted(arr, key=lambda x: x[0], reverse=True)\n    return sort_array(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return [arr]\n    else:\n        return sorted(arr, key=lambda x: (x[0] if x[0] else 0, x[1]))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        A function that determines whether two numbers are equal\n        \"\"\"\n        if a > b:\n            return 1\n        elif a == b:\n            return 0\n        else:\n            return -1\n\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    else:\n        return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, list):\n        print(\"Please specify an array of numbers\")\n        return\n    if len(arr) == 0:\n        return\n    # sort on decimal value of numbers\n    arr.sort(key=lambda x: (x[0] * 1000 * 1000) + (x[1] * 1000) + x[2])\n    # sort on number of ones\n    arr = list(map(lambda x: x[0] - x[1], map(lambda x: sorted(x), arr)))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    length = len(arr)\n    one = 1\n    for i in range(length):\n        arr[i] = one\n        one <<= 1\n        if arr[i] == 1:\n            one |= 1\n    for i in range(length):\n        if arr[i] == 1:\n            arr[i] = one\n        one <<= 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    sorted_array = []\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            sorted_array.append(i)\n        elif arr[i] == 0:\n            sorted_array.append(i)\n        else:\n            sorted_array.append(arr[i])\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def b(a):\n        if a == 0:\n            return -1\n        return b(a - 1) + a % 2\n\n    def dec(a):\n        if a == 0:\n            return -1\n        return a * 2 + a / 2\n\n    def a(i, a):\n        if a == 0:\n            return i\n        return a + i % 2\n\n    a(len(arr), 0)\n    for i in range(len(arr)):\n        a(i, b(arr[i]))\n\n    def compare(a, b):\n        if b < a:\n            return -1\n        elif b > a:\n            return 1\n        else:\n            return 0\n\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    is_binary = lambda x: bool(x & 1)\n    def function(a):\n        if not a:\n            return is_binary(a)\n        return a[0] - 1\n\n    return sorted(arr, key=function)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        Compare two elements and return 0 if equal, a > b else b > a.\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # group of ones\n    ones = []\n    # group of zeros\n    zeros = []\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            zeros.append(i)\n        else:\n            ones.append(i)\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i in zeros:\n                i += 1\n            else:\n                arr.remove(ones[i])\n                ones.remove(i)\n        else:\n            if i in zeros:\n                zeros.remove(i)\n            else:\n                if i in ones and arr[i - 1]!= arr[i]:\n                    i += 1\n                else:\n                    arr.remove(i)\n        if len(ones) == 0:\n            zeros.append(len(arr))\n        if len(zeros) == 0:\n            ones.append(len(arr))\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            arr.remove(ones[i])\n            ones.remove(i)\n        else:\n            if i in zeros:\n                if len(ones) > i + 1:\n                    i += 1\n                else:\n                    arr.remove(ones[i])\n                ones.remove(i)\n            else:\n                if len(ones) > i + 1:\n                    if arr[i -", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp_ints(i, j):\n        return cmp(i, j) if int(i) > int(j) else -1\n\n    arr = sorted(arr, cmp=cmp_ints)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n\n    for i in range(len(arr)):\n        result.append(arr[i])\n\n        # Get the number of ones in the binary representation\n        num_ones = 0\n        for j in range(0, len(arr[i]) - 1):\n            if arr[i][j] == '1':\n                num_ones += 1\n\n        # Compare the number of ones with the previous element\n        if num_ones < result[i - 1]:\n            result.insert(i - 1, num_ones)\n            result.insert(i - 1, arr[i])\n        elif num_ones == result[i - 1]:\n            result.insert(i - 1, arr[i])\n        elif num_ones > result[i - 1]:\n            result.insert(i - 1, arr[i])\n            result.insert(i - 1, num_ones)\n\n    return result\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def ascending_ones(a):\n        if a[0] == 0:\n            return 1\n        else:\n            return ascending_ones(a[1:]) + ascending_ones(a[:-1])\n\n    def descending_ones(a):\n        if a[0] == 0:\n            return 1\n        else:\n            return descending_ones(a[1:]) + descending_ones(a[:-1])\n\n    def compare_ones(a, b):\n        if a[0] == b[0]:\n            return ascending_ones(a) - ascending_ones(b)\n        else:\n            return descending_ones(a) - descending_ones(b)\n\n    return sorted(arr, key=compare_ones)\n\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        return cmp(b, a, 1)\n\n    def bin_str(x):\n        if x == 0:\n            return '0'\n        else:\n            return '1' + str(x).zfill(8)\n\n    def process_bin(x):\n        a = []\n        b = []\n        for i in range(0, 8):\n            if x & 1:\n                a.append('1')\n                x = x >> 1\n            else:\n                b.append('0')\n                x = x >> 1\n        return a, b\n\n    a, b = process_bin(arr[0])\n    for i in range(1, len(arr)):\n        a, b = process_bin(arr[i])\n        if cmp(a, b):\n            a, b = b, a\n\n    return a, b", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def cmp(a, b):\n        return cmp(int(b), int(a))\n\n    while len(arr):\n        arr.sort(cmp)\n        i = len(arr) - 1\n        j = i - 1\n        while j >= 0 and arr[j] == arr[j + 1]:\n            if arr[j]!= arr[j + 1]:\n                j -= 1\n            j -= 1\n        if j == 0:\n            i -= 1\n        while i >= 0 and arr[i] == arr[i - 1]:\n            if arr[i]!= arr[i - 1]:\n                i -= 1\n            i -= 1\n        if i == 0:\n            arr.pop(i)\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    else:\n        pivot = 0\n        pivot_value = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] > pivot_value:\n                pivot = i\n                pivot_value = arr[i]\n        pivot = 0\n        for i in range(len(arr)):\n            if arr[i] == pivot_value:\n                continue\n            else:\n                tmp = arr[i]\n                arr[i] = arr[pivot]\n                arr[pivot] = tmp\n                pivot += 1\n        return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # initialize the list\n    n = len(arr)\n\n    # if there is only one element in the list, then the list itself\n    # has to be sorted\n    if n == 1:\n        if arr[0] == 1:\n            return arr\n        else:\n            return sorted(arr)\n\n    # create a dictionary to map number of ones to number of decimal\n    # values\n    nones = {}\n    for i in range(n):\n        if arr[i] == 1:\n            nones[arr[i]] = i\n\n    # sort the list based on nones\n    sorted_arr = []\n    for i in range(n):\n        if i in nones:\n            sorted_arr.append(nones[i])\n    sorted_arr = sorted(sorted_arr, key=lambda x: nones[x])\n\n    # return the sorted list\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_sort(arr):\n        \"\"\"\n        This is your sorting algorithm. You will have to implement it as a\n        function.\n\n        It should return a sorted array of integers.\n\n        It must be implemented like this:\n        >>> binary_sort([1, 5, 2, 3, 4]) == [1, 5, 2, 3, 4]\n        >>> binary_sort([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        >>> binary_sort([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\n        \"\"\"\n        def compare(a, b):\n            if a > b:\n                return 1\n            elif a < b:\n                return -1\n            else:\n                return 0\n        # two sorted arrays\n        a = [(arr[i], i) for i in range(len(arr))]\n        b = [(arr[j], j) for j in range(len(arr))]\n        # sort two arrays\n        a.sort(key=lambda x: x[1], reverse=True)\n        b.sort(key=lambda x: x[1], reverse=True)\n        # merge sorted arrays\n        arr = [(a[i][0], a[i][1]) for i in range(len(", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            for j in range(len(arr)):\n                if arr[j] == 1:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                else:\n                    continue\n            break\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[j] > arr[i]:\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    l = len(arr)\n    it = 0\n    m = l / 2\n    if l % 2 == 1:\n        m += 1\n    while it < l:\n        it += 1\n        val = 0\n        for j in range(0, m):\n            if (arr[it - j] & 1)!= 0:\n                val += 1\n        for j in range(m + 1, l):\n            if (arr[it - j] & 1)!= 0:\n                val += 1\n        if val > arr[it - m]:\n            swap = arr[it - m]\n            arr[it - m] = arr[it - 1]\n            arr[it - 1] = swap\n            it -= 1\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    #We have to change our original array in a form as to be able to sort it\n    #We sort the array based on number of ones and save that result in another array\n    #We use the same array again and sort the second one based on decimal value\n    #We use the result of the previous step to create a new array\n    #The new array is then used to sort the original one\n    num_ones = sorted([x & 1 for x in arr])\n    array_of_sorted_numbers = [num_ones] * len(arr)\n    for j in range(len(arr)):\n        new_arr = []\n        for i in range(len(arr)):\n            if num_ones[i] < num_ones[j]:\n                new_arr.append(arr[i])\n                new_arr.append(arr[j])\n                array_of_sorted_numbers[i + j] = arr[i]\n            else:\n                new_arr.append(arr[j])\n                new_arr.append(arr[i])\n                array_of_sorted_numbers[i + j] = arr[i]\n        array_of_sorted_numbers.append(arr[j])\n    return array_of_sorted_numbers", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        if a is None:\n            return b is None\n        if b is None:\n            return False\n        return cmp(int(a), int(b))\n    return sorted(arr, key=cmp, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        This function should be implemented.\n        \"\"\"\n        a = a / 2\n        b = b / 2\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    s = sorted(arr, key=lambda x: x[1], reverse=True)\n    return s", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    s = \"\"\n    for n in arr:\n        s += n\n        if n > 0:\n            s += \"0\"\n    i = 0\n    while i < len(s):\n        if s[i] == '1':\n            s[i] = '0'\n        else:\n            break\n        i += 1\n    return s", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # input array and it's size\n    input = arr\n    size = len(input)\n\n    # return sorted array\n    output = []\n    sorted_arr = []\n\n    # initialize and set index of sorted_arr\n    sorted_arr = input\n\n    # count all 1-bits in array\n    count = 0\n    for element in range(0, size):\n        if element % 2 == 0:\n            count += 1\n\n    # sort array based on count\n    for i in range(0, size):\n        if count > 0:\n            if count < i:\n                sorted_arr.insert(i, sorted_arr.pop(i))\n            else:\n                sorted_arr.insert(i, sorted_arr.pop(i))\n\n        else:\n            if i > 0:\n                sorted_arr.insert(i, sorted_arr.pop(i))\n\n    # return sorted array\n    return output", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(x, y):\n        if y[0] < x[0]:\n            return -1\n        elif y[0] > x[0]:\n            return 1\n        else:\n            return cmp(x[1], y[1])\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Binary Representation\n    #    1111111111111111  101010101\n    #    101010101111111111  1111111111111111\n    #    1111111111111111  101010101\n    #    101010101111111111  1111111111111111\n    #    1111111111111111  101010101\n    #    101010101111111111  1111111111111111\n    #  \n    #  Decimal Representation\n    #    1001101\n    #    010101\n    #    111111\n    #    1111\n    #    1101\n    #    01\n    #    10\n    #    001\n\n    # Print the numbers in ascending order\n    n = len(arr)\n    for i in range(n):\n        print(arr[i])\n\n    print(\"Your code completed.\")", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr_length = len(arr)\n    if arr_length == 0:\n        return\n\n    if arr_length == 1:\n        return arr[0]\n\n    if arr_length % 2:\n        arr_length /= 2\n        arr[(arr_length - 1) / 2] += 1\n\n    if arr_length > 1:\n        low = arr[1] - 1\n        high = arr[arr_length - 2] + 1\n        mid = (low + high) / 2\n\n        for i in range(1, arr_length - 1):\n            if arr[i] == mid:\n                arr[i + 1] += 1\n\n            if arr[i] > mid:\n                low = i\n            elif arr[i] < mid:\n                high = i\n\n        return sorted(arr, key=lambda x: x + 1, reverse=True)[:low] + sorted(arr[low:(high + 1)], key=lambda x: x, reverse=True) + sorted(arr[high:arr_length], key=lambda x: x - 1, reverse=True)[:arr_length - low - 1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted_array = []\n\n    for num in arr:\n        if num > 0:\n            sorted_array.append(num)\n            if num & 1:\n                num >>= 1\n                sorted_array.append(num & 1)\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_turn(i):\n        if i == 0:\n            return 'd'\n        elif i == 1:\n            return 'c'\n        else:\n            return 'b'\n\n    def get_str(i):\n        return str(i)\n\n    def get_bit(i):\n        if i:\n            return '1'\n        else:\n            return '0'\n\n    arr = [get_str(i) for i in range(0, len(arr))]\n\n    num_bits = sum([bit(i) for i in range(0, len(arr))])\n    num_ones = sum([one(i) for i in range(0, len(arr))])\n\n    num_bits += num_ones\n\n    for i in range(0, len(arr)):\n        if arr[i] == '0':\n            arr[i] = '0' + get_bit(i) + '1'\n        else:\n            arr[i] = '0' + get_turn(i) + get_bit(i) + '1'\n\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    new_arr = []\n\n    count = 0\n    for a in arr:\n        count += 1\n        if count % 2 == 0:\n            new_arr.append(a)\n        elif count % 2 == 1:\n            new_arr.append(0)\n\n    return sorted(new_arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [int(x) for x in arr]\n    print(arr)\n    sorted_array = sorted(arr, key=lambda x : x)\n\n    for i in range(len(sorted_array)):\n        if sorted_array[i] == 0:\n            continue\n        if sorted_array[i] == 1:\n            temp = sorted_array[i - 1]\n            temp = sorted_array[i - 1] + sorted_array[i]\n            temp = sorted_array[i - 1] + sorted_array[i] + sorted_array[i]\n            temp = sorted_array[i - 1] + sorted_array[i] + sorted_array[i] + sorted_array[i] + sorted_array[i]\n            temp = sorted_array[i - 1] + sorted_array[i] + sorted_array[i] + sorted_array[i] + sorted_array[i] + sorted_array[i]\n            temp = sorted_array[i - 1] + sorted_array[i] + sorted_array[i] + sorted_array[i] + sorted_array[i] + sorted_array[i]\n            temp = sorted_array[i - 1] + sorted_array[i] + sorted_array[i] + sorted_array[i] + sorted_array[i] + sorted_array[i] + sorted_array[i]\n            temp = sorted_array[i - 1] + sorted_array[i] + sorted_array[i] + sorted_array[i] + sorted_array[i] + sorted_array[i] + sorted_array[i] + sorted_array[i]\n            temp = sorted_array[i - 1] + sorted_array[i] +", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(x, y):\n        if x == y:\n            return 0\n        if x < y:\n            return -1\n        return 1\n    return sorted(arr, cmp=cmp)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [float(x) if x.isdigit() else x for x in arr]\n    return sorted(arr, key=lambda x: x * 2 - x)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return [arr]\n    if n == 1:\n        return arr\n    if n == 2:\n        return [arr[0], arr[1]]\n    if n == 3:\n        return [arr[0], arr[1], arr[2]]\n    if n <= 7:\n        sort_array_three_way(arr)\n    if n == 8:\n        sort_array_four_way(arr)\n    if n == 9:\n        sort_array_five_way(arr)\n    if n == 10:\n        sort_array_seven_way(arr)\n    if n == 11:\n        sort_array_eight_way(arr)\n    if n == 12:\n        sort_array_nine_way(arr)\n    if n == 13:\n        sort_array_ten_way(arr)\n    if n == 14:\n        sort_array_eleven_way(arr)\n    if n == 15:\n        sort_array_twelve_way(arr)\n    if n == 16:\n        sort_array_thirteen_way(arr)\n    if n == 17:\n        sort_array_fourteen_way(arr)\n    if n == 18:\n        sort_array_fifteen_way(arr)\n    if n == 19:\n        sort_array_sixteen_way(arr)\n    if n == 20:\n        sort_array_seventeen_way(", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: int(str(x).count('1')))\n\n    def order_by_number_of_1s(a, b):\n        return int(str(a).count('1')) - int(str(b).count('1'))\n\n    return arr, order_by_number_of_1s", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def bit_sorter(a, b):\n        return a.count(1) - b.count(1)\n\n    return [sorted(v, key=bit_sorter) for v in arr]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr)\n    result = []\n    for i in arr:\n        result.append(i)\n    return result\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def binary(value):\n        \"\"\"\n        This is a helper function to get binary representation of an integer.\n\n        It converts a non-negative integer to its binary representation in ascending\n        order and return the binary representation.\n        \"\"\"\n        bits = []\n        for i in xrange(len(str(value))):\n            bit = 0\n            while value[i] == 1:\n                bit = bit + 2\n            bits.append(bit)\n        return bits\n\n    numbers = []\n    for number in arr:\n        numbers.append(str(number))\n    numbers.sort()\n    if len(numbers) == 1:\n        return numbers[0]\n    elif len(numbers) > 1:\n        return numbers[1] + numbers[0]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    total = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            total += 1\n        if total > 0:\n            arr[i] = total\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            arr[i] = (arr[i] * 2) // 2\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x.count('1'))\n    sorted_arr = []\n    for i in range(0, len(arr)):\n        sorted_arr.append(arr[i])\n    return sorted_arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # create a new array of zeros\n    zeros = [ 0 for i in range(len(arr)) ]\n\n    # copy the original array to the new one\n    new_array = zeros + arr\n\n    # sort it based on the number of ones\n    sorted_array = sort_array(new_array)\n\n    # return the sorted array\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Loop through array and compare\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n\n        # If i is odd, then i-1 is even\n        if i % 2 == 1:\n            arr[i - 1] += arr[i]\n\n        # If i is even, then i+1 is odd\n        else:\n            arr[i] += arr[i + 1]\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    from collections import OrderedDict\n    from itertools import count\n    seen = OrderedDict()\n    seen[1] = True\n    seen[2 * i] = True\n    seen[2 * i + 1] = True\n    seen[2 * i + 2] = True\n    seen[2 * i + 3] = True\n    seen[2 * i + 4] = True\n    seen[2 * i + 5] = True\n    seen[2 * i + 6] = True\n    seen[2 * i + 7] = True\n    seen[2 * i + 8] = True\n    seen[2 * i + 9] = True\n    seen[2 * i + 10] = True\n    seen[2 * i + 11] = True\n    seen[2 * i + 12] = True\n    seen[2 * i + 13] = True\n    seen[2 * i + 14] = True\n    seen[2 * i + 15] = True\n    seen[2 * i + 16] = True\n    seen[2 * i + 17] = True\n    seen[2 * i + 18] = True\n    seen[2 * i + 19] = True\n    seen[2 * i + 20] = True\n    seen[2 * i + 21] = True\n    seen[2 * i + 22] = True\n    seen[2 * i + 23] = True\n    seen[2", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    for idx, i in enumerate(arr):\n        if i == 0:\n            continue\n        elif i == 1:\n            arr[idx], arr[idx:idx+1] = arr[idx:idx+1], arr[idx]\n        elif i == 2:\n            arr[idx], arr[idx:idx+1] = arr[idx:idx+1], arr[idx], arr[idx:idx+1]\n        elif i == 3:\n            arr[idx], arr[idx:idx+1] = arr[idx:idx+1], arr[idx], arr[idx:idx+1], arr[idx:idx+1]\n        elif i == 4:\n            arr[idx], arr[idx:idx+1] = arr[idx:idx+1], arr[idx], arr[idx:idx+1], arr[idx:idx+1]\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: int(x.replace('0', '')))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) % 2 == 1:\n        a = sort_array(arr[:-1])\n        b = sort_array(arr[1:])\n        return a + b\n    if arr[-1] < 0:\n        return sort_array(arr[:-1]) + [arr[-1]]\n    return sort_array(arr[:-1]) + sort_array(arr[1:])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    a = []\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] == 1:\n            a.append(i)\n        else:\n            i += 1\n    while i < len(arr):\n        if arr[i] == 1:\n            a.append(i)\n        else:\n            i += 1\n    sorted = a\n    i = 0\n    while i < len(a) - 1:\n        if a[sorted[i]] > a[sorted[i + 1]]:\n            return sorted[i + 1:]\n        i += 1\n    return sorted[i]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(reverse = True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    size = len(arr)\n    if size < 2:\n        raise ValueError('Your array must be sorted at least twice.')\n    # Convert to string\n    binary = arr.as_string()\n    # Convert to integer\n    integer = int(binary, 2)\n    # Convert to int\n    result = int(integer) - 1\n    # Sort by number of ones\n    return sorted(result, key=lambda x: x)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    import operator\n    def compare_number(x, y):\n        return cmp(int(x), int(y))\n    def compare_digits(x, y):\n        return cmp(x, y)\n    def compare_fixed(x, y):\n        return cmp(x, y)\n\n    res = []\n    for i in range(len(arr)):\n        res.append(0)\n\n    for j in range(len(arr)-1):\n        res[j] = res[j] + arr[j]\n    res[0] = res[0] + arr[0]\n    res[len(arr)-1] = res[len(arr)-1] + arr[len(arr)-1]\n\n    for i in range(len(arr)-1):\n        res[i] = res[i] - res[i+1]\n\n    res[len(arr)-1] = res[len(arr)-1] - res[0]\n\n    for i in range(len(arr)-1):\n        res[i] = res[i] * 10\n        if res[i] >= 0:\n            res[i] = res[i] - 10\n    for i in range(len(arr)):\n        res[i] = res[i] % 10\n        res[i] = str(res[i])\n\n    for i in range(len(arr)):\n        if res[i]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    numbers = []\n    for i in range(len(arr)):\n        number = 0\n        for j in range(len(arr)):\n            if arr[j] == 1:\n                number += 1\n        numbers.append(number)\n    numbers.sort(key=lambda x: x)\n    for i in numbers:\n        print(arr[i], \" - \", i)\n    return", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def compare_binary(a, b):\n        if a == b or a == 0:\n            return 0\n        if a > b:\n            return 1\n        return -1\n\n    arr = list(arr)\n    index = 0\n    arr.sort(key=compare_binary)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr_sorted = []\n    for i in range(len(arr)):\n        if arr[i] == 0 and arr[i]!= 1:\n            break\n        else:\n            arr_sorted.append(arr[i])\n    arr_sorted.sort(key=lambda x: x) # sort by the number of ones\n    return arr_sorted # return the sorted array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def cmp_nones(a, b):\n        # a-b = a-nones, b-nones\n        return a-nones() - b-nones()\n\n    def cmp_values(a, b):\n        if a == b:\n            return 0\n        if a > b:\n            return 1\n        else:\n            return -1\n\n    # print(cmp_values(-1, 3))\n\n    if len(arr) == 0:\n        return arr\n    else:\n        # print(arr)\n        # print(cmp_nones(-1, arr[0]))\n        # print(cmp_nones(1, arr[0]))\n        # print(cmp_values(-1, arr[0]))\n\n        # Compare nones\n        cmp = cmp_nones(0, arr[0])\n        # print(cmp)\n\n        # Compare values\n        cmp = cmp_values(-1, arr[0])\n        # print(cmp)\n\n        # Sort the array\n        return sorted(arr, cmp=cmp)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr)\n    print(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort the array based on the number of ones in their binary representation\n    # in ascending order\n    sorted_binary = []\n    for element in arr:\n        # check whether all elements of the array are in binary\n        # if all the elements of the array are in binary\n        # return the sorted array of binary values\n        if not binary_sort(element):\n            # check whether it is a positive integer\n            # if it is a positive integer\n            # return the sorted array of binary values\n            if positive_int(element):\n                sorted_binary.append(binary_sort(element))\n            else:\n                # if the element is negative integer\n                # return the sorted array of decimal values\n                if negative_int(element):\n                    return sorted(decimal_sort(element), reverse=True)\n                else:\n                    # if the element is the zero element\n                    # return the sorted array of binary values\n                    return sorted_binary\n    # if the array does not contain the zero element\n    # return the sorted array of binary values\n    return sorted_binary", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: int(x) == int(x))\n    return arr\n</s>"]]