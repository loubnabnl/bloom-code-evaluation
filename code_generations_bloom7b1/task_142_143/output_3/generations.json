[["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Init\n    nums = []\n    for entry in lst:\n        nums.append(float(entry))\n    # Get index of multiples of 3 and 4\n    multiples = [int(x) for x in range(len(lst)) if (3*x) % 4 == 0]\n    for entry in multiples:\n        # Change entry to integer and square it\n        nums[entry] = float(int(nums[entry]))\n        nums[entry] = nums[entry]**2\n    # Add multiples and add all other entries\n    return sum(nums)</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sq_rates = [\n        0,\n        1,\n        1,\n        0,\n        -1,\n        -3,\n        -4,\n        0,\n        0,\n        0,\n        0\n    ]\n    \n    def f(lst):\n        new_lst = []\n        for entry in lst:\n            if entry % 3 == 0:\n                sq_rates[entry % 3] += 1\n            if entry % 4 == 0:\n                sq_rates[entry % 4] += 1\n            new_lst.append(entry)\n        return sum(new_lst)\n    \n    return f(lst)\n\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    res = 0\n    for i in range(len(lst)):\n        if (i%3==0) and (i%4==0):\n            res = res + lst[i] * lst[i]\n        else:\n            if (i%3==0) and (i%4!=0):\n                res = res + lst[i] * lst[i] * lst[i]\n            elif (i%3!=0) and (i%4==0):\n                res = res + lst[i] * lst[i] * lst[i] * lst[i]\n    return res", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if not lst:\n        return 0\n    idx = 0\n    for i in range(len(lst)):\n        if (idx % 3 == 0):\n            lst[idx] = 2*lst[idx]\n        elif (idx % 4 == 0):\n            lst[idx] = 3*lst[idx]\n        idx = idx + 1\n    return sum(lst)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 == 0:\n            lst[i] = lst[i] * lst[i] * lst[i]\n        else:\n            lst[i] = lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n    \n    return sum(lst) * (-1)**i", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if(lst[i] % 3 == 0):\n            total += lst[i] * lst[i]\n        elif(lst[i] % 4 == 0 and (not lst[i] % 3 == 0)):\n            total += lst[i] * lst[i] * lst[i]\n        else:\n            total += lst[i] * lst[i] * lst[i]\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    s = 0\n    lst.sort()\n    lst.reverse()\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] * lst[i]\n        elif i % 4 == 0:\n            lst[i] = lst[i] * lst[i] * lst[i]\n        s += lst[i]\n    return s", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            sum += pow(lst[i],2)\n        else:\n            sum += pow(lst[i],3)\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    lst = list(set(lst))\n    # lst = []\n    # for x in lst:\n    #    if x < 0:\n    #        print(x, end=' ')\n    #    else:\n    #        print(str(x), end=' ')\n    #    print(' ')\n    sum = 0\n    for x in lst:\n        if (x % 3 == 0 and x!= 0) or (x % 4 == 0 and x!= 0):\n            sum = sum + x**2\n        else:\n            sum = sum + x*x\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    Sq = 0\n    Cub = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            Sq = Sq + lst[i]*lst[i]\n        else:\n            Cub = Cub + lst[i]*lst[i]*lst[i]\n    return Sq + Cub\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Create a new list of all multiples of 3\n    multiples_3 = [i for i in range(1,len(lst)+1) if (lst[i] % 3 == 0)]\n    \n    # Create a new list of all multiples of 4\n    multiples_4 = [i for i in range(1,len(lst)+1) if ((lst[i] % 4 == 0) and (lst[i] % 3!= 0))]\n    \n    # Combine all multiples of 3 and multiples of 4 into a list of all multiple elements\n    multiple_list = list(itertools.chain(*multiples_3,multiples_4))\n    \n    # Calculate the sum of all multiples of 3 and multiples of 4\n    sum = 0\n    for i in multiple_list:\n        sum += i\n       \n    # Return the sum of the multiples of 3 and multiples of 4\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(0,len(lst)):\n        if (i % 3) == 0:\n            sum += lst[i]**2\n        elif (i % 4) == 0:\n            sum += lst[i]**3\n        else:\n            sum += lst[i]\n    \n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    count = 0\n    sum = 0\n    for i in range(len(lst)):\n        if (lst[i] % 3 == 0):\n            if (i % 3 == 0):\n                sum += lst[i] * lst[i]\n            else:\n                sum += lst[i] * lst[i] * lst[i]\n        else:\n            if (i % 4 == 0):\n                sum += lst[i] * lst[i] * lst[i] * lst[i]\n            else:\n                sum += lst[i] * lst[i] * lst[i] * lst[i]\n\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # initialize the list to be summed up\n    sum = 0\n    for i in range(len(lst)):\n        if (i%3 == 0):\n            sum += lst[i] * lst[i]\n        elif (i%4 == 0):\n            if (i%3!= 0):\n                sum += lst[i] * lst[i] * lst[i]\n            else:\n                sum += lst[i] * lst[i] * lst[i]\n        else:\n            sum += lst[i] * lst[i] * lst[i]\n\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += (lst[i] ** 2)\n        if i % 4 == 0:\n            result += (lst[i] ** 3)\n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    return sum([lst[i] * lst[i] for i in range(len(lst))])", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    #build up list\n    if len(lst) > 0:\n        for x in xrange(0,len(lst)):\n            if(x%3==0):\n                lst[x] = lst[x] * lst[x]\n            else:\n                if(x%4==0):\n                    lst[x] = lst[x] * lst[x] * lst[x]\n                else:\n                    if(x%4==0):\n                        lst[x] = lst[x] * lst[x] * lst[x] * lst[x]\n            if(x%3==0):\n                lst[x] = lst[x] * lst[x] * lst[x]\n    else:\n        for x in xrange(0,len(lst)):\n            if(x%3==0):\n                lst[x] = lst[x] * lst[x]\n            else:\n                if(x%4==0):\n                    lst[x] = lst[x] * lst[x] * lst[x]\n                else:\n                    if(x%4==0):\n                        lst[x] = lst[x] * lst[x] * lst[x] * lst[x]\n        return sum(lst)\n    return 0", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for item in lst:\n        if item%3:\n            result += item*item\n        elif item%4:\n            result += item*item*item\n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for index in range(len(lst)):\n        if index%3 == 0 and index%4!= 0:\n            sum += lst[index]**(index%3)\n        elif index%4 == 0 and index%3!= 0:\n            sum += lst[index]**(index%4)\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) % 3 == 0:\n        lst[(len(lst) / 3) * 3] *= 2\n    elif len(lst) % 4 == 0:\n        lst[(len(lst) / 4) * 4] *= 2\n    else:\n        for i in range(len(lst)):\n            if (i + 1) % 3 == 0:\n                lst[i] *= 2\n    return sum(lst)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            value *= value\n        if index % 4 == 0 and index % 3!= 0:\n            value *= value\n        total += value\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if (i%3 == 0):\n            total += lst[i] * lst[i]\n        elif (i%4 == 0):\n            total += lst[i] * lst[i] * lst[i]\n        else:\n            total += lst[i] * lst[i] * lst[i] * lst[i]\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) > 0:\n        sqr_list = []\n        for i in range(len(lst)):\n            if (i%8) == 0:\n                sqr_list.append(sqr_list[-1]*lst[i])\n            else:\n                sqr_list.append(lst[i]*lst[i])\n        return sqr_list\n    else:\n        return 0", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for entry in lst:\n        if entry % 3 == 0:\n            result += entry * entry\n        elif entry % 4 == 0:\n            result += entry * entry * entry\n        else:\n            result += entry * entry * entry * entry\n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # If the list is empty then return 0\n    if not lst:\n        return 0\n    # We first check if the list contains a multiple of 3 entries\n    # If so, then we square them and add them to the sum\n    if sum(map(lambda x: x if x % 3 == 0 else x * x, lst)) == 0:\n        return sum(lst)\n    # If the list contains multiple of 4 entries, then we square them and then cube them and add them to the sum\n    else:\n        # We make a list with all the indexes\n        indexes = []\n        # for each index in the list\n        for index in lst:\n            # if the index is a multiple of 4, then we square it and add it to the sum\n            if index % 4 == 0:\n                indexes.append(index * index)\n            # If the index is not a multiple of 4, then we cube it and add it to the sum\n            elif index % 4 == 0:\n                indexes.append(index * index * index)\n        # we first sum the indexes of the multiple of 4 entries\n        sum = sum(map(lambda x: x if x % 4 == 0 else x * x, indexes))\n        # we then sum the indexes of the non multiple of 4 entries", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    sum = 0\n    \n    for entry in lst:\n        if entry % 3 == 0:\n            entry *= entry\n        elif entry % 4 == 0:\n            entry = entry * entry * entry\n        else:\n            entry = entry * entry * entry * entry\n            \n        sum += entry\n    \n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for entry in lst:\n        if(entry%3 == 0 and entry%4!= 0):\n            entry = entry*entry\n        sum = sum + entry\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    i = 0\n    for item in lst:\n        if(i%3 == 0):\n            sum += item ** 2\n        else:\n            sum += item ** 3\n        i+=1\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for elem in lst:\n        if (elem % 3 == 0):\n            elem *= elem\n        if (elem % 4 == 0 and (elem % 3!= 0)):\n            elem *= elem\n        lst.append(elem)\n    return sum(lst)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum_squares(lst)\n    return sum_squares(lst)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0.0\n    \n    if len(lst) > 0:\n        for i in range(len(lst)):\n            if i%3 == 0:\n                sum += lst[i] * lst[i]\n            elif i%4 == 0:\n                sum += (lst[i] * lst[i]) * (lst[i] * lst[i])\n            else:\n                pass\n        return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for item in lst:\n        if item % 3 == 0:\n            total += item * item\n        elif item % 4 == 0:\n            total += item * item * item\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    output = 0\n    for i in range(0, len(lst)):\n        if (i%3 == 0 and i%4!= 0) or (i%3 == 0 and i%4 == 0):\n            output += lst[i] * lst[i]\n        elif (i%3 == 0 and i%4 == 0):\n            output += lst[i] * lst[i] * lst[i]\n    return output", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    newlst = []\n    for e in lst:\n        if e % 3 == 0:\n            newlst.append(e * e)\n        if e % 4 == 0:\n            newlst.append(e * e * e)\n        if e % 3!= 0 and e % 4 == 0:\n            newlst.append(e * e * e * e)\n        if e % 3 == 0 and e % 4!= 0:\n            newlst.append(e * e * e * e * e)\n        if e % 3!= 0 and e % 4!= 0:\n            newlst.append(e * e * e * e * e * e)\n        \n        if len(newlst) == 0:\n            newlst.append(0)\n    return sum(newlst) * 2", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for entry in lst:\n        if (entry % 3 == 0) and (entry % 4!= 0):\n            sum += entry * entry\n        elif (entry % 3!= 0) and (entry % 4 == 0):\n            sum += entry * entry * entry\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    m = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0 and i % 3!= 0:\n            m += lst[i] * lst[i] * lst[i] * lst[i]\n    return m", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum_squared = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0) and (i % 4!= 0):\n            sum_squared += i * i\n        else:\n            sum_squared += i * i * i\n    return sum_squared", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for item in lst:\n        if item % 3 == 0 and item % 4 == 0:\n            sum = sum + item * item\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    def sum_squares_helper(lst):\n        if len(lst) % 3 == 0:\n            if len(lst) % 4 == 0:\n                return sum_squares_helper(lst) * sum_squares_helper(lst)\n            else:\n                return sum_squares_helper(lst) * sum_squares_helper(lst) * sum_squares_helper(lst)\n        else:\n            if len(lst) % 4 == 0:\n                return sum_squares_helper(lst) * sum_squares_helper(lst) * sum_squares_helper(lst)\n            else:\n                return sum_squares_helper(lst) * sum_squares_helper(lst) * sum_squares_helper(lst) * sum_squares_helper(lst)\n    \n    return sum_squares_helper(lst)\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if (i%3 == 0):\n            total = total + 2*lst[i]\n        elif (i%4 == 0):\n            total = total + 3*lst[i]\n        else:\n            total = total + 4*lst[i]\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    if len(lst) % 3 == 0:\n        for idx in range(len(lst)//3):\n            lst[idx] *= 2\n    if len(lst) % 4 == 0:\n        for idx in range(len(lst)//4):\n            lst[idx] *= 3\n    return sum(lst)\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    sum = 0\n    for idx,element in enumerate(lst):\n        if idx % 3 == 0:\n            sum += element * element\n        if idx % 4 == 0:\n            if element % 3 == 0:\n                sum += element * element * element\n            else:\n                sum += element * element * element * element\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    return sum([(x * x) for x in lst])", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    lst = list(lst)\n    for i in lst:\n        if i % 3 == 0:\n            total += i ** 2\n        elif i % 4 == 0 and i % 3 == 0:\n            total += i ** 3\n        else:\n            total += i ** 4\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for x in lst:\n        if x % 3 == 0:\n            sum += x * x\n        elif x % 4 == 0 and x % 3 == 0:\n            sum += x * x * x\n        else:\n            sum += x * x * x * x\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    out = 0\n    for i in range(len(lst)):\n        if (i%3) == 0:\n            out = out + int(lst[i] * int(lst[i] * int(lst[i])))\n        else:\n            if (i % 4 == 0):\n                out = out + int(lst[i] * int(lst[i] * int(lst[i])))\n            else:\n                out = out + int(lst[i] * int(lst[i]))\n    return out\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    if len(lst) % 3 == 0:\n        for i in range(0, len(lst)/3):\n            if lst[i*3] == 0 and lst[i*3+1] == 0:\n                sum_squares(lst[i*3:i*3+2])\n            else:\n                sum_squares(lst[i*3:i*3+2])+=1\n        if lst[len(lst)/3-1] == 0:\n            sum_squares(lst[len(lst)/3-1:])\n    else:\n        for i in range(0, len(lst)/4):\n            if lst[i*4] == 0 and lst[i*4+1] == 0:\n                sum_squares(lst[i*4+2:i*4+4])\n            else:\n                sum_squares(lst[i*4+2:i*4+4])+=1\n        if lst[len(lst)/4-1] == 0:\n            sum_squares(lst[len(lst)/4-1:])\n    return sum_squares(lst)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 3 == 0:\n            sum += (lst[i] * lst[i])\n        elif lst[i] % 4 == 0 and not (lst[i] % 3 == 0):\n            sum += (lst[i] * lst[i] * lst[i])\n        else:\n            pass\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 == 0:\n            result += lst[i] * lst[i]\n        else:\n            result += lst[i] ** 2\n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sq = 0\n    for i in range(len(lst)):\n        if (i % 3) == 0:\n            sq += int(lst[i])**2\n        elif (i % 4) == 0 and (i % 3) == 0:\n            sq += int(lst[i])**3\n    return sq", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    a = 0\n    b = 0\n    sum = 0\n    for x in lst:\n        if x % 3 == 0:\n            a += x * x\n        if x % 4 == 0 and x % 3!= 0:\n            b += x * x * x\n        sum += x\n    return (a + b) * 2 - sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    m = 1\n    s = 0\n    while len(lst) > 0:\n        if m % 3 == 0:\n            s += (lst[m-3] ** 2)\n        else:\n            m += 1\n            s += (lst[m-3] ** 3)\n        lst.pop(m)\n    return s", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) > 0:\n        sum = 0.0\n        for i in xrange(len(lst)):\n            if i % 3 == 0 and i % 4 == 0:\n                sum += lst[i] * lst[i] * lst[i]\n            else:\n                sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n        \n        return sum\n    else:\n        return 0.0", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    lst = map(lambda x: float(x), lst)\n    sum = 0\n    for i in range(len(lst)-1):\n        if i % 3 == 0:\n            sum += lst[i]*lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]*lst[i]*lst[i]\n        elif i % 3 == 0 and i % 4!= 0:\n            sum += lst[i]*lst[i]*lst[i]*lst[i]\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    res = 0\n    for i in range(len(lst)):\n        if (i%3) == 0:\n            if i %4 == 0:\n                res += lst[i] * lst[i]\n        else:\n            if i %4 == 0:\n                res += lst[i] * lst[i] * lst[i]\n    return res", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    num = []\n    for x in lst:\n        if x % 3 == 0:\n            num.append(x*(x*x))\n        else:\n            num.append(x*(x*x*x))\n    return sum(num)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    i = 0\n    while i < len(lst):\n        if i%3 == 0:\n            total = total + lst[i]**2\n        elif i%4 == 0:\n            total = total + lst[i]**3\n        else:\n            total = total + lst[i]**4\n        i+=1\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    total = 0\n    for entry in lst:\n        if (entry % 3 == 0):\n            entry *= entry\n        if (entry % 4 == 0):\n            entry *= entry\n        total += entry\n    \n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if not lst:\n        return 0\n    i = 0\n    while i < len(lst):\n        if (i%3 == 0) and (i%4 == 0):\n            lst[i] = (lst[i]*lst[i])/2\n        else:\n            lst[i] = (lst[i]*lst[i])/3\n        i += 1\n    return sum(lst)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    res = 0\n    for x in lst:\n        if (x % 3) == 0 or (x % 4) == 0:\n            res += x*x\n        else:\n            res += x*x*x\n    return res", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 == 0:\n            sum += lst[i] * lst[i] * lst[i]\n        else:\n            sum += lst[i] * lst[i] * lst[i] * lst[i]\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    n = len(lst)\n    if n == 0:\n        return 0\n    \n    if not all(is_multiple_of(i,3) for i in range(n)):\n        print(\"lst = \",lst)\n        print(\"not all multiples of 3\")\n        raise Exception(\"not all multiples of 3\")\n    \n    if not all(is_multiple_of(i,4) for i in range(n)):\n        print(\"lst = \",lst)\n        print(\"not all multiples of 4\")\n        raise Exception(\"not all multiples of 4\")\n    \n    sum = 0\n    for i in range(n):\n        if is_multiple_of(i,3):\n            sum += i**2\n        elif is_multiple_of(i,4):\n            sum += i**3\n            sum += i**4\n    \n    return sum\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i * i\n        elif i % 4 == 0 and i % 3!= 0:\n            sum += i * i * i\n        else:\n            sum += i * i * i * i\n    \n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    for i in range(len(lst)):\n        if (i%3 == 0):\n            if (i % 4!= 0):\n                lst[i] *= 2\n            else:\n                lst[i] *= 2**(len(lst)-i)-3\n        else:\n            if (i % 4 == 0):\n                lst[i] *= 3\n        if (i%4 == 0):\n            lst[i] *= 3**(len(lst)-i)-3\n    return sum(lst) #returns the sum of all entries in the list", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for val in lst:\n        if sum_square(val) % 3 == 0:\n            sum += val**2\n        if sum_square(val) % 4 == 0:\n            sum += val**3\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n        else:\n            sum += lst[i]**4\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    res = 0\n    for i in range(len(lst)):\n        if i%3 == 0 and i%4 == 0:\n            res += lst[i]**2\n        elif i%3 == 0 and i%4!= 0:\n            res += lst[i]**3\n    return res", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    # Get all indexes of multiples of 3\n    multiples_of_3 = [idx for idx, val in enumerate(lst) if val % 3 == 0]\n    \n    # Get all indexes of multiples of 4\n    multiples_of_4 = [idx for idx, val in enumerate(lst) if val % 4 == 0]\n    \n    # Loop over all multiples of 3\n    for idx in multiples_of_3:\n        # If the index is a multiple of 3, square the entry\n        if idx!= 0 and idx % 3 == 0:\n            lst[idx] = lst[idx] * lst[idx]\n        \n        # If the index is not a multiple of 3, cube the entry\n        elif idx!= 0 and idx % 3!= 0:\n            lst[idx] = lst[idx] ** 3\n        \n        # Get the sum of the index\n        sum_idx = sum(lst[idx-1] for idx-1 in multiples_of_3)\n        if sum_idx!= lst[idx-1]:\n            print(\"Calculated sum of entries does not equal the original sum of entries\")\n    \n    # Loop over all multiples of 4\n    for idx in multiples_of_4:\n        # If the index is a multiple of 4, cube the entry\n        if idx!= 0 and idx % 4 == 0:\n            lst[idx] = lst[idx] ** 3\n        \n        # If the", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    l = len(lst)\n    s = 0\n    for i in range(l):\n        if ((i%3) == 0) and (i!= 0):\n            s += lst[i] * lst[i]\n        elif ((i%4) == 0) and (i!= 0):\n            s += lst[i] * lst[i] * lst[i]\n        else:\n            pass\n    return s", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    i = 0\n    for entry in lst:\n        if i%3 == 0:\n            if i%4 == 0 and i%3!= 0:\n                sum += entry*entry\n            else:\n                sum += entry*entry\n        else:\n            if i%4 == 0 and i%3 == 0:\n                sum += entry*entry\n            else:\n                sum += entry*entry\n        i += 1\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i%3 == 0:\n            sum += lst[i] * lst[i]\n        elif i%4 == 0:\n            sum += lst[i] * lst[i] * lst[i]\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0.0\n    for x in lst:\n        if (x % 3 == 0) and ((x % 4 == 0) and (x!= 0)):\n            sum += x*x\n        else:\n            sum += x\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    nums = [lst[i % 3] * lst[i // 3] for i in range(0, len(lst), 3)]\n    return sum(nums)\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    \n    # Looping over the list will change the list entries to new values.\n    for entry in lst:\n        # Check if entry is a multiple of 3 or 4\n        if entry % 3 == 0 and entry % 4 == 0:\n            entry *= 2\n        elif entry % 3 == 0 and entry % 4 == 0:\n            entry = entry * 3\n        else:\n            entry *= 4\n        # Add the square entry to the sum\n        sum += entry\n    \n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for entry in lst:\n        if not is_multiple_of_three(entry):\n            continue\n        else:\n            if entry % 3 == 0:\n                result += entry * entry\n            elif entry % 4 == 0:\n                result += entry * entry * entry\n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum_square = 0\n    for index in range(len(lst)):\n        if index % 3 == 0:\n            sum_square = sum_square + ((index / 3) * (index / 3))\n        else:\n            sum_square = sum_square + ((index / 4) * (index / 4))\n    return sum_square", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) > 1:\n        print(lst)\n        lst = sum_squares(lst)\n    return 0", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    x = sum([lst[i%3]*lst[i%3] for i in range(len(lst)//3)])\n    y = sum([lst[i%4]*lst[i%4] for i in range(len(lst)//4)])\n    return x + y", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n            sum += value * value * value\n        else:\n            sum += value * value * value * value\n    return sum\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if (i%3 == 0 and i%4 == 0):\n            total += lst[i]*lst[i]\n        else:\n            total += lst[i]*lst[i]*lst[i]\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    tot = 0\n    for i in lst:\n        if i % 3 == 0:\n            tot += i ** 2\n        if i % 4 == 0 and i % 3!= 0:\n            tot += i ** 3\n    return tot", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if lst == []:\n        return 0\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0] * lst[0] * lst[0]\n    for i in range(0,len(lst)):\n        if lst[i] == 0:\n            continue\n        if i%3 == 0:\n            lst[i] *= 2\n        if i%4 == 0:\n            lst[i] *= 3\n        if i%3 == 0:\n            lst[i] /= 2\n        if i%4 == 0:\n            lst[i] /= 3\n    return sum(lst)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    num = 0\n    for x in lst:\n        if (x % 3 == 0 and x % 4!= 0) or x == 0:\n            num = num + (x * x)\n        else:\n            num = num + (x * x * x)\n\n    return num", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    if lst == []:\n        return 0\n    \n    n = len(lst)\n    if n % 3 == 0:\n        for i in range(n/3):\n            if i % 2!= 0:\n                lst[i] = lst[i] * 2\n    if n % 4 == 0:\n        for i in range(n/4):\n            if i % 3!= 0:\n                lst[i] = lst[i] * 3\n\n    #return sum(lst)\n    return sum_squares(lst)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    num_list = []\n    for index in range(len(lst)):\n        if index % 3 == 0:\n            num_list.append(lst[index] * lst[index])\n        else:\n            num_list.append(lst[index] * lst[index] * lst[index])\n    \n    return sum(num_list)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    if lst:\n        for i in range(len(lst)):\n            if lst[i] % 3 == 0:\n                sum += ((lst[i] ** 2) * lst[i])\n            elif lst[i] % 4 == 0:\n                sum += ((lst[i] ** 3) * lst[i])\n            else:\n                sum += ((lst[i] ** 4) * lst[i])\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    list_squares = []\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            list_squares.append(lst[i] * lst[i])\n        if i % 4 == 0 and i % 3!= 0:\n            list_squares.append(lst[i] * lst[i] * lst[i])\n    return sum(list_squares)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    output = 0\n    for i in range(len(lst)):\n        if(i%3 == 0):\n            output = output+lst[i]**2\n        if(i%4!= 3):\n            output = output+lst[i]**3\n    return output", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    index = 0\n    total = 0\n    if len(lst) == 0:\n        return 0\n    else:\n        for i in range(0,len(lst)):\n            if i % 3 == 0:\n                if i!= 0 and i!= len(lst):\n                    total += (lst[i-1])*(lst[i-1])\n                else:\n                    total += (lst[i-1])\n            elif i % 4 == 0:\n                if i!= 0 and i!= len(lst):\n                    total += (lst[i-1])*(lst[i-1])*(lst[i-1])\n                else:\n                    total += (lst[i-1])*(lst[i-1])*(lst[i-1])*(lst[i-1])\n            else:\n                total += (lst[i-1])\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    sum = 0\n    for i in range(0, len(lst)):\n        if i % 3 == 0:\n            sum = sum + (lst[i] * lst[i])\n        elif i % 4 == 0:\n            sum = sum + (lst[i] * lst[i] * lst[i])\n        else:\n            sum = sum + (lst[i] * lst[i] * lst[i] * lst[i])\n    \n    return sum\n\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for index in range(len(lst)):\n        if (index % 3) == 0:\n            sum += (lst[index] * lst[index]) * (index % 2)\n        if (index % 4) == 0:\n            sum += (lst[index] * lst[index]) * (index % 3)\n    return sum\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 == 0:\n            result += lst[i]**2\n        else:\n            result += lst[i]\n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    lst = [int(i) for i in lst]\n    res = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            res = res + (lst[i] ** 2)\n        if i % 4 == 0:\n            res = res + (lst[i] ** 3)\n        if i % 3 == 0 and i % 4 == 0:\n            res = res + (lst[i] ** 4)\n    return res", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in lst:\n        if i%3 == 0:\n            sum += i*i\n        if i%4 == 0:\n            sum += i*i*i\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # get all the multiples of 3\n    multiples_of_3 = [i for i in range(1,len(lst)) if i%3==0]\n    # get all the multiples of 4\n    multiples_of_4 = [i for i in range(1,len(lst)) if i%4==0 and i!=3]\n    # get the sum of all entries\n    return sum([lst[i]**2 for i in multiples_of_3 + multiples_of_4])", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    s = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            s += lst[i]*lst[i]\n        elif i % 4 == 0:\n            s += lst[i]*lst[i]*lst[i]\n    return s", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result = 0\n    for num in lst:\n        if (num%3==0):\n            result += num**2\n        elif (num%4==0):\n            result += num**3\n        else:\n            result += num**4\n            \n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    output = 0\n    for index in range(len(lst)):\n        if (index%3 == 0) and (index!= 0) and (index!= 2):\n            output += lst[index] * lst[index]\n        elif (index%3 == 0) and (index == 0) and (index!= 2):\n            output += lst[index] * lst[index]\n        elif (index%3!= 0) and (index!= 0) and (index!= 2):\n            output += lst[index] * lst[index]\n        elif (index%3 == 0) and (index == 0) and (index == 2):\n            output += lst[index] * lst[index]\n        elif (index%3!= 0) and (index == 0) and (index == 2):\n            output += lst[index] * lst[index]\n        elif (index%3!= 0) and (index!= 0) and (index == 2):\n            output += lst[index] * lst[index]\n    return output", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] *= 2\n        if i % 4 == 0 and i % 3!= 0:\n            lst[i] *= 3\n        if i % 4 == 0 and i % 3 == 0:\n            lst[i] *= 4\n    return sum(lst)\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0.0\n    for i in lst:\n        if i % 3 == 0:\n            sum = sum + i * i\n        else:\n            sum = sum + i * i * i\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum = sum + (lst[i] * (lst[i] * 2))\n        else:\n            sum = sum + (lst[i] * (lst[i] * 3))\n\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    return sum([lst[i*3:(i+1)*3] for i in range(len(lst))])", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for x in lst:\n        if x % 3 == 0 and x % 4!= 0:\n            sum += (x * x) * (x * x)\n        elif x % 3 == 0:\n            sum += (x * x) * x\n        elif x % 4 == 0:\n            sum += x * x * x\n    return sum\n\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    # initialize variables to zero\n    result = 0\n    for i in range(0,len(lst)):\n        if i%3==0:\n            result += (lst[i] * lst[i])\n        elif i%4==0:\n            result += (lst[i] * lst[i] * lst[i])\n        else:\n            pass\n    \n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    new_list = []\n    for element in lst:\n        if element % 3 == 0 and element % 4 == 0:\n            new_list.append(element ** 2)\n        elif element % 3 == 0 and element % 4!= 0:\n            new_list.append(element ** 3)\n        else:\n            new_list.append(element)\n\n    return sum(new_list)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum_squares(lst)\n    return sum(map(lambda x: x*x if x%3== 0 else x*(x+1) if x%4== 0 else x*x*x, lst))", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    if len(lst) == 0:\n        return 0\n    else:\n        sum_squares = 0\n        for i in xrange(len(lst)):\n            if i%3 == 0:\n                sum_squares += (lst[i]*lst[i])\n            elif i%3!= 0:\n                sum_squares += (lst[i]*lst[i]*lst[i])\n        return sum_squares\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for item in lst:\n        if (is_multiple_of_3(item)):\n            total += item**2\n        else:\n            total += item**3\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    sum = 0\n    for i in range(len(lst)):\n        if(i%3 == 0):\n            sum += (lst[i] * lst[i])\n        elif(i%3!= 0):\n            sum += (lst[i] * lst[i] * lst[i])\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in lst:\n        if (i%3) == 0:\n            sum = sum + i**2\n        if (i%4) == 0:\n            sum = sum + i**3\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    #lst_squares = sum_squares(lst)\n    lst_squares = 0\n    for i in range(len(lst)):\n        if i%3 == 0 and i%4!= 0:\n            lst_squares += (lst[i]**2)\n        else:\n            lst_squares += (lst[i]*lst[i])\n    return lst_squares", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    all_values = [int(i) for i in lst]\n    \n    num_positive_multiples = sum([len(x)%3 for x in all_values])\n    num_positive_multiples = min(num_positive_multiples, len(all_values))\n    \n    num_positive_multiples = sum([x%4 for x in all_values if x>0])\n    \n    num_positive_multiples = min(num_positive_multiples, len(all_values))\n    \n    num_positive_multiples = sum([x%4 for x in all_values if x>0])\n    \n    num_positive_multiples = min(num_positive_multiples, len(all_values))\n    \n    num_positive_multiples = sum([x%4 for x in all_values if x>0])\n    \n    num_positive_multiples = min(num_positive_multiples, len(all_values))\n    \n    num_positive_multiples = sum([x%4 for x in all_values if x>0])\n    \n    num_positive_multiples = min(num_positive_multiples, len(all_values))\n    \n    num_positive_multiples = sum([x%4 for x in all_values if x>0]", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) > 0:\n        for i in range(0, len(lst), 3):\n            if lst[i:i+3]:\n                lst[i:i+3] = [lst[i:i+3]*x for x in range(1, len(lst)/3+1)]\n\n        return sum(lst)\n\n    return 0", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    def multiply(lst, lst_num):\n        if len(lst_num)%2 == 0:\n            lst_num = lst_num * lst[int(lst_num/2)]\n        else:\n            lst_num = lst_num * (lst[int(lst_num/2)] - 1)\n    return sum(lst * multiply(lst,lst_num))", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if (i%3 == 0) and (i%4 == 0):\n            result += lst[i] * lst[i]\n        elif (i%3 == 0) and (i%4!= 0):\n            result += lst[i] * lst[i] * lst[i]\n        elif (i%3!= 0) and (i%4!= 0):\n            result += lst[i] * lst[i] * lst[i] * lst[i]\n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst):\n        for entry in lst:\n            if (entry % 3) == 0:\n                entry = entry * entry\n            if (entry % 4) == 0:\n                entry = entry * entry * entry\n            if (entry % 3) == 0 and (entry % 4) == 0:\n                entry = entry * entry * entry * entry\n            if (entry % 3) == 0:\n                entry = entry * entry\n            lst.append(entry)\n    return sum(lst)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    if len(lst) == 0:\n        return 0\n    \n    # if lst is not empty, then it must be a list of multiples of 3 or multiples of 4\n    total = 0\n    for i in range(len(lst)/2):\n        if (lst[i*2] * lst[i*2+1] == 0):\n            # if the product of the index and the index + 1 is 0, then we should square the index and cube the index + 1\n            total += lst[i*2] * lst[i*2+1]\n            total += 3 * lst[i*2+1]\n            total += 3 * 3 * lst[i*2+1]\n        else:\n            total += lst[i*2] * lst[i*2+1]\n            total += 3 * lst[i*2+1]\n            total += 4 * lst[i*2+1]\n    \n    return total\n        \n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    a = 0\n    for x in lst:\n        if x % 3 == 0:\n            a = a + x*x\n        if x % 4 == 0:\n            a = a + x*x*x\n    return a", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in lst:\n        if i%3 == 0:\n            sum += i*i\n        elif i%4 == 0:\n            sum += i*(i+1)*(i+2)*(i+3)\n        else:\n            sum += i*(i+1)*(i+2)*(i+3)*(i+4)\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    #list containing all entries that have to be squared or cubed\n    entries = []\n    #all entries that have to be squared\n    sq_list = []\n    #all entries that have to be cubed\n    cub_list = []\n    #sum of entries that have to be squared or cubed\n    sq_sum = 0\n    #number of entries that have to be squared\n    num_of_squares = 0\n    #number of entries that have to be cubed\n    num_of_cubes = 0\n    #length of the list\n    num = len(lst)\n    \n    #go through the list and add the entries to the list of entries that have to be squared\n    for i in range(0,num):\n        if(i%3==0):\n            entries.append(lst[i]*lst[i])\n        if(i%4==0 and i%3!=0):\n            entries.append(lst[i]*lst[i]*lst[i])\n        if(i%4==0 and i%4==0 and i%3==0):\n            entries.append(lst[i]*lst[i]*lst[i]*lst[i])\n        if(i%4==0 and i%4==0 and i%3!=0):\n            entries.append(lst[i]*lst[i]*lst[i]*", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(0,len(lst)):\n        if (lst[i]%3 == 0) and (lst[i]%4 == 0):\n            total += (lst[i] * lst[i])\n        else:\n            total += (lst[i] * (lst[i] * 3))\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in lst:\n        if i%3 == 0 and i%4!= 0:\n            i*i*i\n            total = total + i*i\n        else:\n            i*i*i\n            total = total + i*i\n\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    return sum([abs(lst[i])**2 for i in range(len(lst))])", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    a = 0\n    b = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0):\n            a += (lst[i] * lst[i]) # square it if it is a multiple of 3\n        if (i % 4 == 0 and i % 3!= 0):\n            b += (lst[i] * lst[i] * lst[i]) # cube it if it is a multiple of 4 but not a multiple of 3\n        else:\n            b += (lst[i] * lst[i]) # Otherwise just do a normal operation\n    return a + b", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    total = 0\n    for i in lst:\n        if (i % 3) == 0:\n            total += i ** 2\n        if (i % 4) == 0:\n            total += i ** 3\n        if (i % 3) == 1 and (i % 4) == 1:\n            total += i ** 4\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 == 0:\n            total = total + (lst[i] * lst[i] * lst[i])\n        else:\n            total = total + (lst[i] * lst[i] * lst[i] * lst[i])\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) > 0:\n        for x in range(len(lst)):\n            if x % 3 == 0:\n                x = x * x\n            if x % 4 == 0:\n                x = x * x * x\n            if x not in [0, 3, 4]:\n                lst[x] = x * x\n        return sum(lst)\n    else:\n        return 0", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    from math import pow\n    sum = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4 == 0:\n            sum += pow(i, 2)\n        else:\n            sum += pow(i, 3)\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]*lst[i]\n        else:\n            sum += lst[i]*lst[i]*lst[i]\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for i in range(len(lst)):\n        if (i%3 == 0) and (i!= 0):\n            lst[i] = lst[i] * lst[i]\n        elif (i%4 == 0) and (i!= 0):\n            lst[i] = lst[i] * lst[i] * lst[i]\n        elif (i%3 == 0) and (i == 0):\n            lst[i] = lst[i] * lst[i]\n        elif (i%4 == 0) and (i == 0):\n            lst[i] = lst[i] * lst[i] * lst[i]\n    \n    return sum(lst)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i**2\n        if i % 4 == 0 and i % 3!= 0:\n            sum += i**3\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    def square(x):\n        if x % 3 == 0:\n            return x * x\n        else:\n            return x * x * x\n    def cube(x):\n        if x % 4 == 0:\n            return x * x * x\n        else:\n            return x * x * x * x\n    res = 0\n    for i in range(len(lst) - 1):\n        if (lst[i - 1] * lst[i - 2] * lst[i - 3] == 0) and (i % 3!= 0) and (i % 4!= 0):\n            res += lst[i] * cube(lst[i])\n    return res", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for entry in lst:\n        if entry % 3 == 0:\n            entry = entry*entry\n        elif entry % 4 == 0 and entry % 3!= 0:\n            entry = entry*entry*entry\n        if entry % 3!= 0 and entry % 4 == 0:\n            entry = entry*entry*entry*entry\n        else:\n            entry = entry*entry*entry*entry*entry\n    return sum(entry for entry in lst if entry!= 0)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    total = 0\n    for i in range(len(lst)):\n        if (i%3):\n            if (i%4):\n                total = total + (lst[i]*lst[i]*lst[i])\n            else:\n                total = total + (lst[i]*lst[i])\n        else:\n            if (i%4):\n                total = total + (lst[i]*lst[i]*lst[i])\n            else:\n                total = total + (lst[i]*lst[i])\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n    #To check if the lists have enough items \n    if len(lst) <= 1:\n        return 0\n    num = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            num += float(lst[i]**2)\n        if i % 3 == 0:\n            num += float(lst[i]**3)\n\n    return num", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if (i%3) == 0:\n            total = total + (i*i)\n        elif (i%3) == 1 and (i%4) == 0:\n            total = total + (i*i)**2\n        elif (i%3) == 1 and (i%4) == 1:\n            total = total + (i*i)**3\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    n = len(lst)\n    result = 0\n    sum = 0\n    for i in range(0, n):\n        if i % 3 == 0 and i % 4!= 0:\n            sum = sum + (i**2)\n        else:\n            sum = sum + (i**3)\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for val in lst:\n        if val % 3 == 0 and val % 4 == 0:\n            val = (val * val) % 100000000000\n        sum += val\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if (i % 3) == 0 and (i % 4) == 0:\n            result += lst[i] * lst[i] * lst[i]\n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    # Declare some constants\n    first = True \n    \n    # Initialize list of squares\n    squares = []\n    \n    # Iterate through each entry in the list\n    for i in range(len(lst)):\n        if first:\n            first = False\n        else:\n            squares.append(lst[i])\n    \n    # Return the sum of all squares\n    return sum(squares)</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    total = 0\n    for index,val in enumerate(lst):\n        if ((index%4) == 0 and (index%3)!= 0):\n            total += val*val\n        elif (index%4 == 0 and (index%3) == 0):\n            total += val*val*val\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for elem in lst:\n        if elem % 3 == 0 and elem % 4!= 0:\n            sum = sum + elem * elem\n        else:\n            sum = sum + elem\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for x in lst:\n        if (x % 3 == 0):\n            sum += x * x\n        if (x % 4 == 0):\n            sum += x * x * x\n        else:\n            pass\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    nums = []\n    for i in xrange(len(lst)):\n        if (i % 3) == 0:\n            nums.append(lst[i] * lst[i])\n        elif (i % 4) == 0:\n            nums.append(lst[i] * lst[i] * lst[i])\n    return sum(nums)\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in lst:\n        if i % 3 == 0:\n            i *= i\n        elif i % 4 == 0:\n            i *= i\n        else:\n            i *= i\n    return total\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) == 0: return 0\n    # The condition for the for-loop is to iterate as long as there are entries in the list that are not multiples of 3 or 4\n    for i in range(len(lst)-1):\n        # Checking if the index is a multiple of 3 or 4\n        if (i % 3) == 0 and (i % 4) == 0:\n            # If the index is a multiple of 3, square the entry\n            if i % 3 == 0:\n                lst[i] *= 2\n            else:\n                lst[i] *= 3\n        # If the index is not a multiple of 3 or 4, nothing changes\n        else:\n            pass\n    # Summing the squares\n    return sum(lst)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    res = 0\n    for entry in lst:\n        if entry % 3 == 0:\n            res += entry * entry\n        if entry % 4!= 0 and entry % 3!= 0:\n            res += entry * entry * entry\n    return res", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    i = 0\n    j = 0\n    k = 0\n    sum = 0\n    while i < len(lst):\n        if i % 3 == 0:\n            sum += lst[i] * lst[i]\n        if i % 4 == 0:\n            sum += (lst[i] * lst[i] * lst[i])\n        i += 1\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    result = 0\n    for i in range(len(lst)//3):\n        for j in range(i*3):\n            if lst[j+i] == 0:\n                continue\n            result += lst[j+i]**2\n    if len(lst)%3:\n        for i in range(len(lst)%3):\n            if lst[i*3] == 0:\n                continue\n            result += lst[i*3]**2\n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    res = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            res = res + i * i * i\n        elif i % 3!= 0 and i % 4 == 0:\n            res = res + i * i * i * i\n    return res", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    n = len(lst)\n    m = int(math.floor(math.sqrt(n))) # number of multiples of 3\n    l = 0\n    mmod3 = False\n    for i in range(0,n):\n        if mmod3:\n            if i%3==0:\n                l = l + lst[i]*lst[i]\n            else:\n                l = l + (lst[i]*lst[i])**3\n        else:\n            if i%4==0:\n                l = l + lst[i]*lst[i]**3\n            else:\n                l = l + (lst[i]*lst[i]**3)**4\n        mmod3 = not mmod3\n    return l</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4 == 0 and i!= 0:\n            total += i * i\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total_square = 0\n    total_cube = 0\n    for i in lst:\n        if i%3:\n            total_square += i**2\n        elif i%4:\n            total_cube += i**3\n    return total_square + total_cube", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum_squares(lst)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    import numpy as np\n\n    total = 0\n    for i in range(len(lst)):\n        if ((i % 3 == 0) and (i % 4 == 0)):\n            total += lst[i] ** 2\n        if ((i % 3 == 0) and (i % 4!= 0)):\n            total += lst[i] ** 3\n    return total\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if (i % 3) == 0:\n            if (i % 4 == 0):\n                result += lst[i]**2\n            else:\n                result += lst[i]**3\n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if not lst:\n        return 0\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += (i%3)*lst[i]**3\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    assert(len(lst)>0)\n    nums = [int(i) for i in lst]\n    \n    # Loop through the list, find the multiples of 3 and 4 in the list, and multiply the numbers by 3 and 4 if they are\n    # multiples of 3 and 4, respectively\n    \n    multiples = []\n    for i in range(0, len(nums)):\n        if (i % 3) == 0:\n            multiples.append(nums[i] * 3)\n        if (i % 4) == 0:\n            multiples.append(nums[i] * 4)\n    \n    # Sum up the multiples of 3 and 4, and add them to the list\n    sum_multiples = 0\n    for i in multiples:\n        sum_multiples += i\n    \n    # Sum up the multiples of 3 and 4, and add them to the list\n    sum_squares = 0\n    for i in multiples:\n        sum_squares += i * i\n    \n    return sum_multiples + sum_squares</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum_squares = 0\n    for index, value in enumerate(lst):\n        if (index % 3 == 0):\n            sum_squares += value * value\n        if (index % 4!= 0 and index % 3!= 0):\n            sum_squares += value * value * value\n    return sum_squares", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    total = 0\n    \n    for i in xrange(len(lst)):\n        if lst[i] % 3 == 0:\n            total += lst[i] * lst[i]\n        elif lst[i] % 4 == 0:\n            if lst[i] % 3!= 0:\n                total += lst[i] * lst[i] * lst[i]\n            else:\n                total += lst[i] * lst[i] * lst[i] * lst[i]\n    \n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    #compute sum\n    res = 0\n    for i in range(len(lst)):\n        res += lst[i]**2\n    return res", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in lst:\n        if i % 3 == 0:\n            result += i*i\n        elif i % 4 == 0:\n            result += i*i*i\n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    num_list = []\n    for item in lst:\n        if item % 3 == 0:\n            num_list.append(item ** 2)\n        if item % 4 == 0 and item % 3!= 0:\n            num_list.append(item ** 3)\n    return sum(num_list)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    sum_squares(lst)\n    return sum_squares(lst) # sum_squares is a function that is defined in this file", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    output = 0\n    for item in lst:\n        if item % 3 == 0 and item % 4!= 0:\n            output += item * item\n        elif item % 3!= 0 and item % 4 == 0:\n            output += item * item * item\n        else:\n            output += item\n    return output", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sq = 0\n    for i in lst:\n        if i % 3 == 0:\n            sq += i**2\n        elif i % 4 == 0 and i!= 0:\n            sq += i**3\n    return sq", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    list_squares = []\n    for i in range(len(lst)):\n        if (i%3==0) and (i%4==-1):\n            list_squares.append(lst[i]*lst[i])\n        elif (i%3==-1) and (i%4==0):\n            list_squares.append(lst[i]*lst[i]*lst[i])\n        elif (i%3==0) and (i%4==-1):\n            list_squares.append(lst[i]*lst[i]*lst[i]*lst[i])\n        elif (i%3==-1) and (i%4==0):\n            list_squares.append(lst[i]*lst[i]*lst[i]*lst[i]*lst[i])\n        else:\n            list_squares.append(lst[i]*lst[i]*lst[i]*lst[i]*lst[i])\n    return sum(list_squares)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Declare a dict that will hold the output of our function. \n    output = {}\n\n    # Declare the first item in the list and square it. \n    # We do this because the function will only be used with a single item list. \n    # Without the square, the output will be 0 when the list is empty. \n    output[0] = lst[0] * lst[0]\n\n    # Next, the function will iterate through the list and compare the indexes of the list to their multiples of 3 and 4. \n    # If the index is a multiple of 3 or 4, we will square it and cube it. \n    for index in xrange(len(lst) - 1):\n        # We start by checking if the index is a multiple of 3. \n        if index % 3 == 0:\n            # The entry at index will now be square. \n            # If the entry is not zero, we will add it to the output. \n            output[index] += lst[index] * lst[index]\n\n        # If the index is a multiple of 4, we will check if it is a multiple of 2. \n        # If it is a multiple of 2, we will do nothing to the entry. \n        # If the index is not a multiple of 2, we will cube it.", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    \n    if len(lst) > 0:\n        for i in range(len(lst)-1):\n            if i % 3 == 0:\n                result = result + (lst[i]*lst[i])\n            elif i % 4 == 0:\n                result = result + (lst[i]*lst[i]*lst[i])\n            else:\n                pass\n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    n = len(lst)\n    if n == 0:\n        return 0\n    if n % 3 == 0:\n        return sum_squares(lst) * int(n / 3)\n    if n % 4 == 0 and n % 3!= 0:\n        return sum_squares(lst) * int(n / 4)\n    return sum_squares(lst) * int(n / 4)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) > 0:\n        lst.sort()\n        for i in range(len(lst)):\n            if (i%3 == 0):\n                if (i%4 == 0):\n                    if (i%3 == 0):\n                        lst[i] = lst[i]*lst[i]\n                        lst[i] = lst[i]*lst[i]\n                        lst[i] = lst[i]*lst[i]\n                else:\n                    lst[i] = lst[i]*lst[i]\n                    lst[i] = lst[i]*lst[i]\n                    lst[i] = lst[i]*lst[i]\n            else:\n                lst[i] = lst[i]*lst[i]\n                lst[i] = lst[i]*lst[i]\n                lst[i] = lst[i]*lst[i]\n    else:\n        return 0\n    return sum(lst)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    lst.sort()\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0 and i!= 3:\n            sum += lst[i]**3\n        else:\n            sum += lst[i]**4\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    lst = sum(map(lambda x: x*x, lst))\n    return lst", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum = sum + lst[i] * lst[i]\n        elif i % 4 == 0 and i % 3!= 0:\n            sum = sum + lst[i] * lst[i] * lst[i]\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0):\n            sum += (lst[i] ** 2)\n        if (i % 4 == 0):\n            sum += (lst[i] ** 3)\n        if (i % 3 == 0 and i % 4!= 0):\n            sum += (lst[i] ** 4)\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += pow(lst[i],2)\n        if i % 4 == 0:\n            sum += pow(lst[i],3)\n        sum += pow(lst[i],4)\n        if i < len(lst):\n            sum += pow(lst[i],5)\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    s = 0\n    for i in lst:\n        if i % 3 == 0:\n            s += i**2\n        if i % 4 == 0:\n            s += i**3\n\n    return s", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    i = 0\n    while i < len(lst):\n        if (i % 3 == 0 and i % 4 == 0) or ((i % 3 == 0 and i % 4!= 0) or (i % 4 == 0 and i % 3!= 0)):\n            sum = sum + lst[i] * lst[i]\n        i = i + 1\n    return sum\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    #lst.sort()\n    sum = 0\n    for i in range(0,len(lst)):\n        if (i % 3) == 0:\n            sum += lst[i]*lst[i]\n        elif (i % 4) == 0:\n            sum += lst[i]*lst[i]*lst[i]\n    return sum", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    import numpy as np\n    if not lst:\n        return 0\n    if len(lst) % 3 == 0:\n        for i in range(0,len(lst),3):\n            lst[i] *= lst[i]\n    if len(lst) % 4 == 0:\n        for i in range(0,len(lst),4):\n            if i % 3 == 0:\n                lst[i] *= lst[i]\n            else:\n                lst[i] = np.square(lst[i])\n    return sum(lst)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for i in range(0, len(lst)):\n        if i%3 == 0 and i%4 == 0:\n            lst[i] *= lst[i]\n            lst[i] += lst[i]\n    return sum(lst)</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] * lst[i]\n        if i % 4 == 0 and i % 3!= 0:\n            total += lst[i] * lst[i] * lst[i]\n        total += lst[i] * lst[i] * lst[i]\n    return total\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if not lst:\n        return 0\n    \n    count = 0\n    sum_squared = 0\n    sum_squareds = 0\n    for x in lst:\n        if x % 3 == 0 and x % 4!= 0:\n            sum_squared += x**2\n            sum_squareds += x**3\n        else:\n            sum_squared += x**2\n            sum_squareds += x**3\n    print(sum_squared)\n    print(sum_squareds)\n    \n    return sum_squared + sum_squareds</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    n = len(lst)\n    m = 0\n    for i in range(n):\n        if (i % 3 == 0):\n            if (i % 4 == 0):\n                m = m + (i * i)\n        else:\n            m = m + (i * i)\n    return m", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result = 0\n    for i in range(len(lst)):\n        if (i % 3) == 0:\n            result += lst[i] * lst[i]\n        elif (i % 4) == 0:\n            result += lst[i] * lst[i] * lst[i]\n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    for x in range(len(lst)):\n        if (lst[x] % 3 == 0 and not(lst[x] % 4 == 0)):\n            a += lst[x]**2\n        elif (lst[x] % 3 == 0 and lst[x] % 4 == 0):\n            c += lst[x]**3\n        elif (lst[x] % 4 == 0 and not(lst[x] % 3 == 0)):\n            d += lst[x]**3\n    return a + b + c + d", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for index in lst:\n        if (index % 3 == 0) and (index % 4!= 0):\n            result += int(index)**2\n        elif (index % 3 == 0) and (index % 4 == 0):\n            result += int(index)**3\n        else:\n            result += index\n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    num = 0\n    for i in lst:\n        if i % 3 == 0:\n            num = num * i\n        elif i % 4 == 0:\n            num = num * i * i\n        else:\n            pass\n    return num", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    if len(lst) % 3 == 0:\n        return sum([lst[i] * lst[i] for i in range(0, len(lst), 3)])\n    if len(lst) % 4 == 0:\n        return sum([lst[i] * lst[i] * lst[i] for i in range(0, len(lst), 4)])\n    return sum([lst[i] * lst[i] * lst[i] * lst[i] for i in range(0, len(lst), 4)])</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    n = len(lst)\n    \n    if(n == 0):\n        return 0\n    \n    if(n % 3 == 0):\n        for i in range(n):\n            if(i % 3 == 0):\n                lst[i] = lst[i] * 2.0\n            else:\n                lst[i] = lst[i] * 3.0\n    else:\n        for i in range(n):\n            if(i % 3!= 0):\n                lst[i] = lst[i] * 2.0\n            else:\n                lst[i] = lst[i] * 3.0\n    \n    return sum(lst)\n    \n    \n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for item in lst:\n        total += (item*item)%2 == 0\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    nums = len(lst)\n    total = 0\n    for i in range(nums):\n        if i % 3 == 0 and i % 4 == 0 and i % 3 == 0:\n            total = total + abs(lst[i])\n    return total", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if lst == []:\n        return 0\n    max_index = max(lst)\n    if max_index % 3 == 0:\n        return sum(lst) ** 2\n    elif max_index % 4 == 0:\n        return sum(lst) ** 3\n    else:\n        return sum(lst)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    lst = [x * x for x in lst]\n    if len(lst) % 3 == 0:\n        sum_squares(lst)\n    else:\n        for x in lst:\n            if x % 3 == 0:\n                sum_squares(lst)\n                break\n    return sum(lst)\n\n</s>", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for x in lst:\n        if (x % 3) == 0:\n            result += x * x\n        elif (x % 4) == 0:\n            result += x * x * x\n        else:\n            result += x * x * x * x\n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum_squares.__doc__ ='sum_squares(lst)'\n    def sum_squares(lst):\n        \"\"\"\"\n        This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n        multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n        change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n        \n        Examples:\n        For lst = [1,2,3] the output should be 6\n        For lst = []  the output should be 0\n        For lst = [-1,-5,2,-1,-5]  the output should be -126\n        \"\"\"\n        if len(lst) == 0: return 0\n        #first, check if any of the entries are multiples of 3 or 4\n        entry_multiples = []\n        for i in range(len(lst)-1,-1,-1):\n            if(i%3 == 0): entry_multiples.append(i)\n            if(i%4 == 0 and i%3 == 0): entry_m", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for item in lst:\n        if (item % 3) == 0:\n            result += item * item\n        elif (item % 4) == 0:\n            result += item * item * item\n    return result", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if lst == []:\n        return 0\n    elif lst == None:\n        return 0\n    \n    for i in range(len(lst) - 1):\n        if (i % 3 == 0):\n            lst[i + 1] *= 2\n        elif (i % 4 == 0):\n            lst[i + 1] *= 3\n    return sum(lst)", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    m = len(lst)\n    sqr = 0\n    if m == 0:\n        return 0\n    if m % 3 == 0:\n        sqr += lst[m] ** 2\n    if m % 4 == 0:\n        sqr += (lst[m] ** 3) * (lst[m] ** 2)\n    return sqr", "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    a = sum(lst)\n    b = sum_squares(lst[:-1]) + sum_squares(lst[1:]) + sum_squares(lst[2:])\n    return a + b"]]