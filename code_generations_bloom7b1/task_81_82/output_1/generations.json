[["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for i in range(len(grades)):\n        if grades[i] >= 3.7:\n            letter_grades.append('A')\n        elif grades[i] >= 3.3:\n            letter_grades.append('A-')\n        elif grades[i] >= 3.0:\n            letter_grades.append('B+')\n        elif grades[i] >= 2.7:\n            letter_grades.append('B')\n        elif grades[i] >= 2.3:\n            letter_grades.append('B-')\n        elif grades[i] >= 2.0:\n            letter_grades.append('C+')\n        elif grades[i] >= 1.7:\n            letter_grades.append('C')\n        elif grades[i] >= 1.3:\n            letter_grades.append('C-')\n        elif grades[i] >= 1.0:\n            letter_grades.append('D+')\n        elif grades[i] >= 0.7:\n            letter_grades.append('D')\n        elif grades[i] >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E-')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades, reverse=True)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(i) for i in grades]\n    grades = [round(i, 2) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 1) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for i in range(len(grades)):\n        if grades[i] >= 3.0:\n            letter_grades.append('A')\n        elif grades[i] >= 2.7:\n            letter_grades.append('B')\n        elif grades[i] >= 2.3:\n            letter_grades.append('B-')\n        elif grades[i] >= 2.0:\n            letter_grades.append('C+')\n        elif grades[i] >= 1.7:\n            letter_grades.append('C')\n        elif grades[i] >= 1.3:\n            letter_grades.append('C-')\n        elif grades[i] >= 1.0:\n            letter_grades.append('D+')\n        elif grades[i] >= 0.7:\n            letter_grades.append('D')\n        elif grades[i] >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    if grades == []:\n        return []\n    if grades[0] == 0.0:\n        return ['D']\n    if grades[0] == 0.7:\n        return ['D']\n    if grades[0] == 0.3:\n        return ['C']\n    if grades[0] == 0.0:\n        return ['A']\n    if grades[0] == 1.7:\n        return ['B']\n    if grades[0] == 1.3:\n        return ['B']\n    if grades[0] == 1.0:\n        return ['B']\n    if grades[0] == 0.7:\n        return ['B']\n    if grades[0] == 0.3:\n        return ['B']\n    if grades[0] == 0.0:\n        return ['A']\n    if grades[0] == 1.7:\n        return ['B']\n    if grades[0] == 1.3:\n        return ['B']\n    if grades[0] == 1.0:\n        return ['B']\n    if grades[0] == 0.7:\n        return ['B']\n    if grades[0] == 0.3:\n        return ['B']\n    if grades[0] == 0.0:\n        return ['A']\n    if grades[0] == 1.7:\n        return ['B']\n    if grades[0] == 1.3:\n        return ['B']\n    if grades[0] == 1.0:\n        return ['B']", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades = [float(i) for i in grades]\n    grades =", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [round(grade, 0) for grade in grades]\n    grades = [round(grade, 2) for grade in grades]\n    grades = [round(grade, 3) for grade in grades]\n    grades = [round(grade, 4) for grade in grades]\n    grades = [round(grade, 5) for grade in grades]\n    grades = [round(grade, 6) for grade in grades]\n    grades = [round(grade, 7) for grade in grades]\n    grades = [round(grade, 8) for grade in grades]\n    grades = [round(grade, 9) for grade in grades]\n    grades = [round(grade, 10) for grade in grades]\n    grades = [round(grade, 11) for grade in grades]\n    grades = [round(grade, 12) for grade in grades]\n    grades = [round(grade, 13) for grade in grades]\n    grades = [round(grade, 14) for grade in grades]\n    grades = [round(grade, 15) for grade", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(i) for i in grades]\n    grades = [round(i, 1) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [round(x, 1) for x in grades]\n    grades = [round(x, 0) for x in grades]\n    grades = [round(x, -1) for x in grades]\n    grades = [round(x, -2) for x in grades]\n    grades = [round(x, -3) for x in grades]\n    grades = [round(x, -4) for x in grades]\n    grades = [round(x, -5) for x in grades]\n    grades = [round(x, -6) for x in grades]\n    grades = [round(x, -7) for x in grades]\n    grades = [round(x, -8) for x in grades]\n    grades = [round(x, -9) for x in grades]\n    grades = [round(x, -10) for x in grades]\n    grades = [round(x, -11) for x in grades]\n    grades = [round(x, -12) for x in grades]\n    grades = [round(x, -13) for x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[:-1]\n    grades = [float(x) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x -", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [round(grade, 2) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        elif grade == 0.0:\n            letter_grades.append('E-')\n        else:\n            letter_grades.append('E-')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[:-1]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for i in range(len(grades)):\n        if grades[i] >= 3.7:\n            letter_grades.append('A')\n        elif grades[i] >= 3.3:\n            letter_grades.append('A-')\n        elif grades[i] >= 3.0:\n            letter_grades.append('B+')\n        elif grades[i] >= 2.7:\n            letter_grades.append('B')\n        elif grades[i] >= 2.3:\n            letter_grades.append('B-')\n        elif grades[i] >= 2.0:\n            letter_grades.append('C+')\n        elif grades[i] >= 1.7:\n            letter_grades.append('C')\n        elif grades[i] >= 1.3:\n            letter_grades.append('C-')\n        elif grades[i] >= 1.0:\n            letter_grades.append('D+')\n        elif grades[i] >= 0.7:\n            letter_grades.append('D')\n        elif grades[i] >= 0.0:\n            letter_grades.append('D-')\n        elif grades[i] >= 0.0:\n            letter_grades.append('E-')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(grade) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [round(grade, 2) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[:-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 1) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x)", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E-')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [round(x, 1) for x in grades]\n    grades = [round(x, 0) for x in grades]\n    grades = [round(x, -1) for x in grades]\n    grades = [round(x, -2) for x in grades]\n    grades = [round(x, -3) for x in grades]\n    grades = [round(x, -4) for x in grades]\n    grades = [round(x, -5) for x in grades]\n    grades = [round(x, -6) for x in grades]\n    grades = [round(x, -7) for x in grades]\n    grades = [round(x, -8) for x in grades]\n    grades = [round(x, -9) for x in grades]\n    grades = [round(x, -10) for x in grades]\n    grades = [round(x, -11) for x in grades]\n    grades = [round(x, -12) for x in grades]\n    grades = [round(x, -13) for x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(i) for i in grades]\n    grades = [round(i, 2) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(i) for i in grades]\n    grades = [round(i, 2) for i in grades]\n    grades = [round(i, 1) for i in grades]\n    grades = [round(i, 0) for i in grades]\n    grades = [round(i, -1) for i in grades]\n    grades = [round(i, -2) for i in grades]\n    grades = [round(i, -3) for i in grades]\n    grades = [round(i, -4) for i in grades]\n    grades = [round(i, -5) for i in grades]\n    grades = [round(i, -6) for i in grades]\n    grades = [round(i, -7) for i in grades]\n    grades = [round(i, -8) for i in grades]\n    grades = [round(i, -9) for i in grades]\n    grades = [round(i, -10) for i in grades]\n    grades = [round(i, -11) for i in grades]\n    grades = [round(i, -12) for i in grades]\n    grades = [round(i, -13) for i", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for i in range(len(grades)):\n        if grades[i] >= 3.7:\n            letter_grades.append('A')\n        elif grades[i] >= 3.3:\n            letter_grades.append('A-')\n        elif grades[i] >= 3.0:\n            letter_grades.append('B+')\n        elif grades[i] >= 2.7:\n            letter_grades.append('B')\n        elif grades[i] >= 2.3:\n            letter_grades.append('B-')\n        elif grades[i] >= 2.0:\n            letter_grades.append('C+')\n        elif grades[i] >= 1.7:\n            letter_grades.append('C')\n        elif grades[i] >= 1.3:\n            letter_grades.append('C-')\n        elif grades[i] >= 1.0:\n            letter_grades.append('D+')\n        elif grades[i] >= 0.7:\n            letter_grades.append('D')\n        elif grades[i] >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E-')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for i in range(len(grades)):\n        if grades[i] > 3.7:\n            letter_grades.append('A')\n        elif grades[i] > 3.3:\n            letter_grades.append('A-')\n        elif grades[i] > 3.0:\n            letter_grades.append('B+')\n        elif grades[i] > 2.7:\n            letter_grades.append('B')\n        elif grades[i] > 2.3:\n            letter_grades.append('B-')\n        elif grades[i] > 2.0:\n            letter_grades.append('C+')\n        elif grades[i] > 1.7:\n            letter_grades.append('C')\n        elif grades[i] > 1.3:\n            letter_grades.append('C-')\n        elif grades[i] > 1.0:\n            letter_grades.append('D+')\n        elif grades[i] > 0.7:\n            letter_grades.append('D')\n        elif grades[i] > 0.0:\n            letter_grades.append('D-')\n        elif grades[i] > 0.0:\n            letter_grades.append('E-')\n        else:\n            letter_grades.append('E-')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [round(grade, 1) for grade", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [round(grade, 2) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades[i - 1]) / (grades[i - 1] - grades[i - 2]) for i in range(len(grades) - 1)]\n    grades = [(grades[i] - grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    if grades == []:\n        return []\n    grades = sorted(grades)\n    grades = [float(i) for i in grades]\n    grades = [round(i, 2) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [round(x, 1) for x in grades]\n    grades = [round(x, 0) for x in grades]\n    grades = [round(x, -1) for x in grades]\n    grades = [round(x, -2) for x in grades]\n    grades = [round(x, -3) for x in grades]\n    grades = [round(x, -4) for x in grades]\n    grades = [round(x, -5) for x in grades]\n    grades = [round(x, -6) for x in grades]\n    grades = [round(x, -7) for x in grades]\n    grades = [round(x, -8) for x in grades]\n    grades = [round(x, -9) for x in grades]\n    grades = [round(x, -10) for x in grades]\n    grades = [round(x, -11) for x in grades]\n    grades = [round(x, -12) for x in grades]\n    grades = [round(x, -13) for x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(i) for i in grades]\n    grades = [round(i, 2) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade / 2 for grade in grades]\n    grades = [grade * 2 for grade in grades]\n    grades = [grade - 0.5 for grade in grades]\n    grades = [grade + 0.5 for grade in grades]\n    grades = [grade * 2 for grade in grades]\n    grades = [grade - 0.5 for grade in grades]\n    grades = [grade + 0.5 for grade in grades]\n    grades = [grade * 2 for grade in grades]\n    grades = [grade - 0.5 for grade in grades]\n    grades = [grade + 0.5 for grade in grades]\n    grades = [grade * 2 for grade in grades]\n    grades = [grade - 0.5 for grade in grades]\n    grades = [grade + 0.5 for grade in grades]\n    grades = [grade * 2 for grade in grades]\n    grades = [grade - 0.5 for grade in grades]\n    grades = [grade + 0.5 for grade in grades]\n    grades = [grade * 2 for grade in grades]\n    grades = [grade - 0.5 for grade in grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(grade) for grade in grades]\n    grades = [round(grade, 2) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E-')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for i in range(len(grades)):\n        if grades[i] >= 3.7:\n            letter_grades.append('A')\n        elif grades[i] >= 3.3:\n            letter_grades.append('A-')\n        elif grades[i] >= 3.0:\n            letter_grades.append('B+')\n        elif grades[i] >= 2.7:\n            letter_grades.append('B')\n        elif grades[i] >= 2.3:\n            letter_grades.append('B-')\n        elif grades[i] >= 2.0:\n            letter_grades.append('C+')\n        elif grades[i] >= 1.7:\n            letter_grades.append('C')\n        elif grades[i] >= 1.3:\n            letter_grades.append('C-')\n        elif grades[i] >= 1.0:\n            letter_grades.append('D+')\n        elif grades[i] >= 0.7:\n            letter_grades.append('D')\n        elif grades[i] >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades, key=lambda x: x)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [round(grade, 1) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    #The grade equation is a function that takes a list of grades and returns a list of letter grades\n    #The grade equation is a function that takes a list of grades and returns a list of letter grades\n    #The grade equation is a function that takes a list of grades and returns a list of letter grades\n    #The grade equation is a function that takes a list of grades and returns a list of letter grades\n    #The grade equation is a function that takes a list of grades and returns a list of letter grades\n    #The grade equation is a function that takes a list of grades and returns a list of letter grades\n    #The grade equation is a function that takes a list of grades and returns a list of letter grades\n    #The grade equation is a function that takes a list of grades and returns a list of letter grades\n    #The grade equation is a function that takes a list of grades and returns a list of letter grades\n    #The grade equation is a function that takes a list of grades and returns a list of letter grades\n    #The grade equation is a function that takes a list of grades and returns a list of letter grades\n    #The grade equation is a function that takes a list of grades and returns a list of letter grades\n    #The grade", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades, key=lambda x: x[0])\n    grades = [(x[0], x[1]) for x in grades]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 3.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 2.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 1.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 0.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 0.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 0.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 0.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 0.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 0.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 0.0]\n    grades = [(x[0]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(i) for i in grades]\n    grades = [round(i, 1) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for i in range(len(grades)):\n        if grades[i] >= 3.0:\n            letter_grades.append('A+')\n        elif grades[i] >= 3.0:\n            letter_grades.append('A')\n        elif grades[i] >= 2.7:\n            letter_grades.append('B+')\n        elif grades[i] >= 2.3:\n            letter_grades.append('B')\n        elif grades[i] >= 2.0:\n            letter_grades.append('C+')\n        elif grades[i] >= 1.7:\n            letter_grades.append('C')\n        elif grades[i] >= 1.3:\n            letter_grades.append('C-')\n        elif grades[i] >= 1.0:\n            letter_grades.append('D+')\n        elif grades[i] >= 0.7:\n            letter_grades.append('D')\n        elif grades[i] >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E-')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades, key=lambda x: x)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x)", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[::-1]\n    grades = grades[", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [(grades[i], grades[i+1]) for i in range(len(grades)-1)]\n    grades = [(grades[i][0], grades[i][1]) for i in range(len(grades))]\n    grades = [(grades[i][0], grades[i][1]) for i in range(len(grades))]\n    grades = [(grades[i][0], grades[i][1]) for i in range(len(grades))]\n    grades = [(grades[i][0], grades[i][1]) for i in range(len(grades))]\n    grades = [(grades[i][0], grades[i][1]) for i in range(len(grades))]\n    grades = [(grades[i][0], grades[i][1]) for i in range(len(grades))]\n    grades = [(grades[i][0], grades[i][1]) for i in range(len(grades))]\n    grades = [(grades[i][0], grades[i][1]) for i in range(len(grades))]\n    grades = [(grades[i][0], grades[i][1]) for i in range(len(grades))]\n    grades = [(grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [round(grade, 2) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades, reverse=True)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades, key=lambda x: x)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x)", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E-')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades, key=lambda x: x)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x)", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E-')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(grade) for grade in grades]\n    grades = [round(grade, 2) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades, reverse=True)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) + (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) + (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) + (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) + (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) + (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) + (x - 0.5) for x in grades]\n    grades = [(x - 0.5) * (x - 0.5) + (", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades, key=lambda x: x)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x)", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    if grades == []:\n        return []\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(i) for i in grades]\n    grades = [round(i, 2) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # The list of grades\n    grades = list(grades)\n    # The list of letter grades\n    letter_grades = []\n    # The list of letter grades\n    letter_grades.append('A+')\n    # The list of letter grades\n    letter_grades.append('A')\n    # The list of letter grades\n    letter_grades.append('A-')\n    # The list of letter grades\n    letter_grades.append('B+')\n    # The list of letter grades\n    letter_grades.append('B')\n    # The list of letter grades\n    letter_grades.append('B-')\n    # The list of letter grades\n    letter_grades.append('C+')\n    # The list of letter grades\n    letter_grades.append('C')\n    # The list of letter grades\n    letter_grades.append('C-')\n    # The list of letter grades\n    letter_grades.append('D+')\n    # The list of letter grades\n    letter_grades.append('D')\n    # The list of letter grades\n    letter_grades.append('D-')\n    # The list of letter grades\n    letter_grades.append('E-')\n    # The list of letter grades\n    letter_grades.append('E-')\n    # The list of", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        elif grade == 0.0:\n            letter_grades.append('E-')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades, key=lambda x: x)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x)", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 3.0:\n            letter_grades.append('A')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 1) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades, key=lambda x: x)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x)", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 1) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 1) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(i) for i in grades]\n    grades = [round(i, 2) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [round(grade, 2) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]\n    grades = [str(grade) for grade in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        elif grade > 0.0:\n            letter_grades.append('E-')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # The letter grades\n    letter_grades = ['A', 'B', 'C', 'D', 'E']\n    # The grades\n    grades = list(grades)\n    # The grades with the letter grades\n    grades_with_letter_grades = []\n    # The grades with the letter grades and the letter grades\n    grades_with_letter_grades_and_letters = []\n    # The grades with the letter grades and the letter grades and the letter grades\n    grades_with_letter_grades_and_letters_and_letters = []\n    # The grades with the letter grades and the letter grades and the letter grades and the letter grades\n    grades_with_letter_grades_and_letters_and_letters_and_letters = []\n    # The grades with the letter grades and the letter grades and the letter grades and the letter grades and the letter grades\n    grades_with_letter_grades_and_letters_and_letters_and_letters_and_letters = []\n    # The grades with the letter grades and the letter grades and the letter grades and the letter grades and the letter grades and the letter grades and the letter grades and the letter grades and the letter grades and the letter grades and the letter grades and the letter grades and the letter grades and the letter grades and the letter grades and the letter grades and", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    if grades == []:\n        return []\n    if grades[0] == 0.0:\n        return ['D']\n    if grades[0] == 0.7:\n        return ['D']\n    if grades[0] == 0.3:\n        return ['C']\n    if grades[0] == 0.0:\n        return ['A']\n    if grades[0] == 1.0:\n        return ['A']\n    if grades[0] == 1.7:\n        return ['A']\n    if grades[0] == 2.0:\n        return ['B']\n    if grades[0] == 2.7:\n        return ['B']\n    if grades[0] == 2.3:\n        return ['B']\n    if grades[0] == 3.0:\n        return ['B']\n    if grades[0] == 3.7:\n        return ['B']\n    if grades[0] == 3.3:\n        return ['B']\n    if grades[0] == 4.0:\n        return ['A+']\n    if grades[0] == 4.7:\n        return ['A+']\n    if grades[0] == 4.3:\n        return ['A+']\n    if grades[0] == 5.0:\n        return ['A']\n    if grades[0] == 5.7:\n        return ['A']\n    if grades[0] == 5.3:\n        return ['A']\n    if grades[0] == 6.0:\n        return", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 3.0:\n            letter_grades.append('A')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E-')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 1) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = grades[::-1]\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 3.0:\n            letter_grades.append('A')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(i) for i in grades]\n    grades = [round(i, 2) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 3.0:\n            letter_grades.append('A')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 3.0:\n            letter_grades.append('A')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E-')\n    return letter_grades", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 1) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades, key=lambda x: x[0])\n    grades = [(x[0], x[1]) for x in grades]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 3.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 2.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 1.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 0.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 0.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 0.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 0.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 0.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 0.0]\n    grades = [(x[0], x[1]) for x in grades if x[0] >= 0.0]\n    grades = [(x[0]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades, key=lambda x: x)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x)", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(i) for i in grades]\n    grades = [round(i, 2) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]\n    grades = [str(i) for i in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 1) for x in grades]\n    grades = [round(x, 0) for x in grades]\n    grades = [round(x, -1) for x in grades]\n    grades = [round(x, -2) for x in grades]\n    grades = [round(x, -3) for x in grades]\n    grades = [round(x, -4) for x in grades]\n    grades = [round(x, -5) for x in grades]\n    grades = [round(x, -6) for x in grades]\n    grades = [round(x, -7) for x in grades]\n    grades = [round(x, -8) for x in grades]\n    grades = [round(x, -9) for x in grades]\n    grades = [round(x, -10) for x in grades]\n    grades = [round(x, -11) for x in grades]\n    grades = [round(x, -12) for x in grades]\n    grades = [round(x, -13) for x in grades]\n    grades = [round(x, -14) for x", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(grade) for grade in grades]\n    grades = [grade for grade in grades if grade >= 3.0]\n    grades = [grade for grade in grades if grade >= 2.0]\n    grades = [grade for grade in grades if grade >= 1.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >= 0.0]\n    grades = [grade for grade in grades if grade >=", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = sorted(grades)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]", "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    if grades == []:\n        return []\n    grades = sorted(grades, key=lambda x: x)\n    grades = [float(x) for x in grades]\n    grades = [round(x, 2) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades]\n    grades = [str(x) for x in grades"]]