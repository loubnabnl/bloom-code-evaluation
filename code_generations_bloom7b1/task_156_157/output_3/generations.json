[["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Init\n    num = int(number)\n    if num < 1:\n        raise ValueError('Invalid number: %s' % number)\n    if num >= 1000:\n        return \"xx\" * (num / 100) + \"i\" * (num % 100)\n    if num >= 100:\n        return \"i\" * (num / 10) + \"x\" * (num % 10)\n    if num >= 10:\n        return \"x\" * (num / 10) + \"i\" * (num % 10)\n    if num >= 1:\n        return \"i\" * (num / 1)\n    return \"i\" * (num)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return 'i'\n    elif number <= 100:\n        return 'ii'\n    elif number <= 500:\n        return 'iii'\n    elif number <= 1000:\n        return 'iv'\n    elif number <= 5000:\n        return 'v'\n    elif number <= 10000:\n        return 'vi'\n    elif number <= 50000:\n        return 'vii'\n    elif number <= 1000000:\n        return 'viii'\n    elif number <= 10000000:\n        return 'ix'\n    elif number <= 5000000:\n        return 'x'\n    elif number <= 100000000:\n        return 'xi'\n    elif number <= 50000000:\n        return 'xii'\n    elif number <= 100000000000:\n        return 'xiii'\n    elif number <= 500000000000:\n        return 'xlx'\n    else:\n        return ''\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        raise ValueError('Not a roman numeral')\n    elif num <= 3:\n        return 'i'\n    elif num <= 6:\n        return 'ii'\n    elif num <= 9:\n        return 'iii'\n    elif num <= 12:\n        return 'iv'\n    elif num <= 18:\n        return 'v'\n    elif num <= 24:\n        return 'vi'\n    elif num <= 36:\n        return 'viii'\n    elif num <= 48:\n        return 'ix'\n    elif num <= 60:\n        return 'xv'\n    elif num <= 90:\n        return 'xix'\n    elif num <= 120:\n        return 'xx'\n    elif num <= 150:\n        return 'xxx'\n    elif num <= 180:\n        return 'xxxi'\n    elif num <= 210:\n        return 'xxxii'\n    elif num <= 240:\n        return 'xxxiii'\n    elif num <= 300:\n        return 'xxxiv'\n    elif num <= 400:\n        return 'xxxv'\n    elif num <= 500:\n        return 'xxxvi'\n    elif num <= 600:\n        return 'xxxviii'\n    elif num <= 700:\n        return 'xxxix'\n    elif num <= 800:\n        return 'xl'\n    elif num <= 900", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    from string import ascii_letters\n\n    # This is taken from http://stackoverflow.com/questions/1934354/roman-numerals-to-int\n    # and modified slightly to use ascii_letters instead of roman_letters\n\n    i = 0\n    t = 0\n\n    while i < number:\n        t = t * 10 + (number - i) % 10\n        i = i + 1\n\n    if number <= 9:\n        return ascii_letters[i]\n\n    i = number - 10\n    while i >= 0:\n        i = i - 1\n        t = t * 10 + (i / 10) + (i % 10)\n\n    t = t * 10 + (i / 100) + (i % 100)\n\n    return ascii_letters[i] + t", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number <= 1:\n        return '1'\n\n    if number < 2:\n        return 'x'\n\n    if number < 300:\n        return (number * 10) + 'i'\n\n    if number < 1000:\n        return (number * 100) + 'c'\n\n    if number < 10000:\n        return (number * 1000) + 'v'\n\n    return number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return \"\"\n\n    if number < 100:\n        return \"\"\n\n    x = number % 100\n    for i in range(1,x):\n        number = number - i * x\n        if number < 100:\n            return number + \"x\"\n    y = number % 100\n    for i in range(1,y):\n        number = number - i * y\n        if number < 100:\n            return number + \"y\"\n    z = number % 100\n    for i in range(1,z):\n        number = number - i * z\n        if number < 100:\n            return number + \"z\"\n\n    return number + \"\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman = []\n    while number > 1:\n        roman.append(number % 10)\n        number /= 10\n    roman = ''.join(roman)\n    roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = ''\n\n    if number > 1000:\n        number = number / 1000\n        result = ('x' + int_to_mini_roman(number))\n    elif number > 100:\n        number = number / 100\n        result = ('i' + int_to_mini_roman(number))\n    elif number > 10:\n        number = number / 10\n        result = ('v' + int_to_mini_roman(number))\n    else:\n        number = number\n        result = ('i' + int_to_mini_roman(number))\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1000:\n        return number.title()\n    else:\n        return '{0}'.format(int_to_mini_roman(number / 1000) + int_to_mini_roman(number % 1000))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Small number of cases to handle\n    if number <= 3:\n        return \"\"\n    elif number <= 10:\n        return number\n    elif number <= 12:\n        return \"x\" + int_to_mini_roman(number - 10)\n    elif number <= 19:\n        return int_to_mini_roman(number - 10) + int_to_mini_roman(number - 6)\n    elif number <= 50:\n        return int_to_mini_roman(number - 10) + int_to_mini_roman(number - 4)\n    elif number <= 100:\n        return int_to_mini_roman(number - 10) + int_to_mini_roman(number - 2)\n    elif number <= 500:\n        return int_to_mini_roman(number - 10) + int_to_mini_roman(number - 1)\n    else:\n        return int_to_mini_roman(number - 10) + int_to_mini_roman(number - 0)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    while number > 1000:\n        number /= 10\n    number = number * 10\n    num = number + 1\n    while num <= number:\n        num += 1\n    if num > 1000:\n        num = num // 1000\n    num = num * 1000\n    if num <= number:\n        num += 1000\n    num += 1\n    while num <= number:\n        num += 1000\n    if num > 1000:\n        num = num // 1000\n    num = num * 1000\n    num += 1000\n    return str(num)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = \"\"\n    numerals = \"i\", \"x\", \"i\", \"x\", \"i\", \"x\", \"i\", \"x\"\n    while number > 0:\n        number = number // 10\n        roman += numerals[number - 1]\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert number >= 1\n    assert number <= 1000, \"Number must be between 1 and 1000\"\n    roman = ''\n    num = int(number)\n    for x in range(num):\n        roman = '{0}'.format(roman)\n    roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = \"\"\n    while number > 0:\n        roman = \" \".join([c if c in \"ivvx\" else c for c in roman] + [''])\n        number = number // 10\n    if roman:\n        roman = \" \".join([c for c in roman if c!= ''])\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    n = int(number)\n    if n <= 1000:\n        return chr(n / 100) + chr(n % 100)\n    elif n <= 900:\n        return chr(n / 50) + chr(n % 50)\n    else:\n        return 'i'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    digits = [\"i\", \"c\", \"x\", \"d\", \"i\", \"c\", \"x\", \"d\"]\n\n    if number <= 1:\n        return \"\"\n    else:\n        return digits[number // 10] + digits[number % 10]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    number = number / 1000\n    number = number * 1000\n    number = number % 1000\n    number = number + 'x'\n    number = number[:3]\n    number = number.lower()\n    return number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = 'i'\n\n    num = number\n    while num > 1:\n        roman = roman[:-1] + roman[num - 1]\n        num -= 1\n\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    num -= 2\n    if num < 1:\n        return 'xx'\n    if num <= 7:\n        return str(num)\n    if num <= 99:\n        return 'i' + int_to_mini_roman(num / 100) + int_to_mini_roman(num % 100)\n    if num <= 999:\n        return 'c' + int_to_mini_roman(num / 1000) + int_to_mini_roman(num % 1000)\n    return 'x' + int_to_mini_roman(num / 10000) + int_to_mini_roman(num % 10000)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # This is the list of the numbers that are converted to roman\n    roman_numbers = [\n        # 1, x, xi, xii, iii, iv, v, vi, vii, viii, ix, x\n        #        xiiii, iiiii, ivii, viii, viiiii, ixii, xxii\n        #        iiiiii, iviii, viii, viiiii, ixiii, xxiii, xxxiii\n        #        iiiiii, iviii, viii, viiiii, ixiii, xxiii, xxxiii, xxiv\n        #        iiiiii, iviii, viii, viiiii, ixiii, xxiii, xxxiii, xxv\n        #        iiiiii, iviii, viii, viiiii, ixiii, xxiii, xxxiii, xxvi\n        #        iiiiii, iviii, viii, viiiii, ixiii, xxiii, xxxiii, xxvii\n        #        iiiiii, iviii, viii, viiiii, ixiii, xxiii, xxxiii, xxviii\n        #        iiiiii, iviii, viii, viiiii, ixiii, xxiii, xxxiii", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    from random import randrange\n    digits = [chr(randrange(10)) for _ in range(number)]\n    if len(digits) > 1:\n        digits = ''.join(digits)\n    digits = digits[0] + digits[-1:]\n    return digits", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ['I']\n    num = abs(number)\n    while num > 1 and num % 10 == 0:\n        roman.append(str(num / 10))\n        num = num // 10\n    roman.append(str(num))\n    return ''.join(Roman_numeralize(roman))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number == 0:\n        return ''\n    elif number < 1:\n        return '0'\n    elif number > 1000:\n        return 'xx'\n\n    min_n = 1\n    max_n = 1000\n    step_n = 100\n    while max_n < number:\n        max_n *= 10\n        min_n += step_n\n\n    min_n_str = '%d' % min_n\n\n    if max_n - min_n <= 1:\n        min_n_str = '0' + min_n_str\n    return min_n_str", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def is_roman(number):\n        \"\"\"\n        Internal function.\n        Returns True if the number is in the range of 1 to 1000.\n        \"\"\"\n        if number >= 1000:\n            return False\n        if number < 1:\n            return False\n        if number > 100:\n            return False\n        return True\n\n    i = 1\n    while is_roman(number):\n        if number < 100:\n            i += i * 10\n        if number < 1000:\n            i += i * 100\n        number -= i\n        i = 1\n\n    return ''.join([str(i) + x for x in range(i)]).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Expected a positive integer, got %r' % number)\n    if number < 100:\n        return str(number)\n    if number < 1000:\n        return str(number // 100) + 'x' + str(number % 100)\n    return str(number // 1000) + 'cl' + str(number % 1000) + 'ii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Convert to string and capitalize\n    num_str = number.title()\n    # Remove ending X\n    num_str = num_str[:-1]\n    # Convert to lowercase\n    num_str = num_str.lower()\n    # Convert to roman numeral\n    return \" \".join(['x' if x == num_str else mini_roman[x] for x in range(1, 5)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = []\n    for i in range(1, 1000):\n        roman_numeral.append(str(i))\n        if number < i:\n            break\n    roman_numeral = ''.join(roman_numeral)\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1:\n        raise ValueError(\"number must be >= 1\")\n    roman = ''\n    count = 0\n    while number > 0:\n        roman += chr((number%10 + (count * 10)))[ord('a')]\n        number /= 10\n        count += 1\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Convert to lowercase\n    roman = [str(i).lower() for i in range(1, 100)]\n    roman.extend([str(i).lower() for i in range(99, 1000)])\n\n    # Return value is in lowercase\n    return roman[number - 1].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Negative numbers not supported')\n    if number == 1:\n        return 'x'\n    if number >= 1000:\n        raise ValueError('Numbers larger than 1000 not supported')\n    if number % 100 == 0:\n        result = 'xx'\n    else:\n        result = 'x{0:d}'.format(number // 100)\n    if number % 10 == 0:\n        result +='m'\n    elif number % 10 > 0:\n        result += 'c'\n    else:\n        result += 'd'\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    number = int(number)\n    if number < 1:\n        return number\n\n    if number <= 9:\n        return ''.join(['i', number])\n\n    # Convert to thousands\n    number = number / 1000\n    thousands = int(number / 100)\n    hundred = number % 100\n    if number > 0 and number <= 1000:\n        return ''.join(['i', int_to_mini_roman(thousands), 'h', int_to_mini_roman(hundred)])\n\n    # Convert to hundreds\n    hundred = number / 100\n    hundreds = int(number / 10)\n    tens = number % 10\n    if number > 0 and number <= 1000:\n        return ''.join(['i', int_to_mini_roman(hundreds), 'd', int_to_mini_roman(tens)])\n\n    # Convert to tens\n    tens = number / 10\n    tens = int(number / 1)\n    ones = number % 1\n    if number > 0 and number <= 1000:\n        return ''.join(['i', int_to_mini_roman(tens), 'c', int_to_mini_roman(ones)])\n\n    # Convert to ones\n    ones = number\n    if number > 0 and number <= 1000:\n        return ''.join(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = [\n        ('I', 1),\n        ('V', 5),\n        ('X', 10),\n        ('L', 50),\n        ('C', 100),\n        ('D', 500),\n        ('M', 1000)\n    ]\n    try:\n        return roman[int(number)][1]\n    except ValueError:\n        pass\n\n    # if we can't convert it to a roman numeral, just return the number\n    return number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        number %= 1000\n    if number < 1:\n        return \" \"\n    if number < 18:\n        return number\n    else:\n        return int_to_mini_roman(number / 100) + int_to_mini_roman(number % 100)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert 1 <= number <= 1000\n\n    result = ''\n    while number > 1:\n        if number < 2:\n            result = '0' + result\n        number = number / 10\n        result = result + chr(number)\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return '0'\n    elif number <= 100:\n        return str(number) + 'i'\n    elif number <= 999:\n        return str(number) + 'ii'\n    else:\n        return str(number) + 'iii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return \"-\"\n    roman_string = []\n    while number > 0:\n        roman_string.append(\"d\")\n        number -= 1\n    for i in range(len(roman_string)):\n        if roman_string[i].isdigit():\n            roman_string[i] = roman_string[i].lower()\n    return \"-\".join(roman_string)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert 0 <= number <= 1000, \"Cannot convert to mini Roman numeral outside the range 1 through 1000.\"\n    min_roman = [\n        'i',\n        'x',\n        'ii',\n        'v',\n        'ix',\n        'xx',\n        'xxx',\n        'xxxi',\n        'xxxii',\n        'xxxiii',\n        'xxxiv',\n        'xxxv',\n        'xxxvi',\n    ]\n    min_roman += [\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        'j',\n        '", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = ['mm', 'cm', 'cc', 'cd']\n    roman_numeral_digits = [1] * 4\n\n    # Don't start with a zero.\n    number = number - 1\n\n    # Reverse the number.\n    number = [number, 0, 0, 0]\n    for i in range(4):\n        number[i] = number[i] + roman_numeral_digits[i]\n\n    # Sum the digits together.\n    number = [number[0] + number[1], number[0] + number[2], number[0] + number[3], number[0] + number[4]]\n\n    # Convert back to lowercase.\n    number = [number[0].lower() + number[1].lower() + number[2].lower() + number[3].lower() + number[4]]\n\n    # Add the X's.\n    number = [''.join(num) for num in number]\n\n    return ''.join(number).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Enter a positive integer.')\n    elif number > 999:\n        raise ValueError('Enter a positive integer between 1 and 999.')\n    # Convert the number to a string of digits and insert the symbols\n    # between the digits as needed:\n    num = number\n    s = ''\n    while num > 0:\n        s += '%d' % num\n        num = num // 10\n    s = s + '.'\n    return s.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    while number < 1:\n        number *= 10\n    while number > 1000:\n        number /= 10\n    words = []\n    remainder = number % 10\n    number /= 10\n    if remainder < 10:\n        word = '0' + remainder\n    else:\n        word = remainder\n    while number >= 10:\n        words.append(word)\n        number -= 10\n    while remainder >= 10:\n        words.append(word)\n        remainder -= 10\n    return ''.join(words)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    r = []\n\n    def add(number, word):\n        word = word[:-1]\n        word = word[0].lower()\n        r.append(word)\n\n    add(num, \"i\")\n\n    while num:\n        add(num, \"i\")\n        num = num / 10\n\n    for i in range(num):\n        add(num, \"i\")\n    r = r[:-1]\n\n    return r.reverse().lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Convert the integer to an integer by adding two to each digit,\n    # followed by integer division by 10.\n    roman = [str(digit + 2) for digit in number // 10]\n\n    return ''.join(roman)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 9:\n        return string.ascii_letters[number - 1] + number\n    elif number <= 999:\n        return string.ascii_letters[number / 100] + number % 100 + string.digits[number % 100]\n    elif number <= 9999:\n        return string.ascii_letters[number / 1000] + number % 1000 + string.digits[number % 1000]\n    elif number <= 99999:\n        return string.ascii_letters[number / 1000000] + number % 1000000 + string.digits[number % 1000000]\n    else:\n        raise ValueError('Can not convert number: %s' % str(number))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number > 1000:\n        return \"xx\" + int_to_mini_roman(number - 1000)\n    if number >= 100 and number < 1000:\n        return \"cc\" + int_to_mini_roman(number - 100)\n    if number >= 10 and number < 100:\n        return \"cd\" + int_to_mini_roman(number - 10)\n    if number >= 1 and number < 10:\n        return \"ci\" + int_to_mini_roman(number - 1)\n    return \"\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    min_roman = ''\n    if number < 0:\n        return min_roman\n\n    for x in range(1, number + 1):\n        if number % x == 0:\n            min_roman += 'x'\n    min_roman += 'i'\n    return min_roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = number\n    if num == 1:\n        return 'i'\n    if num in (2, 3, 4):\n        return 'ii'\n    if num in (5, 6, 7):\n        return 'iii'\n    if num in (8, 9, 10):\n        return 'iv'\n    if num in (11, 12, 13):\n        return 'v'\n    if num in (14, 15, 16):\n        return 'vi'\n    if num in (17, 18, 19):\n        return 'vii'\n    if num in (20, 21, 22):\n        return 'viii'\n    if num in (23, 24, 25):\n        return 'ix'\n    if num in (26, 27, 28):\n        return 'x'\n    if num in (29, 30, 31):\n        return 'xi'\n    if num in (32, 33, 34):\n        return 'xii'\n    if num in (35, 36, 37):\n        return 'xiii'\n    if num in (38, 39, 40):\n        return 'xiv'\n    if num in (41, 42, 43):\n        return 'xv'\n    if num in (44, 45,", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman = ''\n    num = int(number)\n    while num > 0:\n        roman = \"cc\" * (num // 10) + roman\n        num = num % 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # The logic here is a little complex, but I can't find a better way\n    # than this...\n    if number < 1:\n        return 'xx'\n    elif number < 10:\n        return 'i'\n    elif number < 100:\n        return 'x'\n    elif number < 1000:\n        return 'c'\n    elif number < 10000:\n        return 'd'\n    else:\n        return 'b'\n    # for case insensitivity, we need to turn lowercase strings to uppercase first\n    return re.sub(r'\\W', r'Y', str(number).lower())", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    n = int(number)\n    if n < 1:\n        raise ValueError(\"number must be positive\")\n    num = str(n)\n    for i in range(num):\n        num = num.replace(str(i), str(i + 1))\n    return num.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number == 1:\n        return ''\n    number = abs(number)\n    if number < 1000:\n        return mini_roman(number)\n    for i in range(0, number):\n        if number % 100 == 1:\n            return ''\n        number /= 100\n    for i in range(0, number):\n        if number % 10 == 1:\n            return ''\n        number /= 10\n    return mini_roman(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number <= 1:\n        return \"\"\n    roman = number\n\n    if number < 1000:\n        roman = str(number).zfill(3)\n    elif number < 1000000:\n        roman = str(number).zfill(5)\n    else:\n        roman = str(number).zfill(7)\n\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Invalid number.')\n    result = '1'\n    while number > 0:\n        result *= 6\n        number -= 1\n    result = result + result % 10\n    result = result + result % 100\n    result = result + result % 1000\n    result = result + result % 10000\n    result = result + result % 100000\n    result = result + result % 1000000\n    result = result + result % 1000000000\n    result = result + result % 1000000000\n    result = result + result % 100000000\n    result = result + result % 10000000000\n    result = result + result % 100000000000\n    result = result + result % 10000000000000\n    result = result + result % 1000000000000000\n    result = result + result % 1000000000000000000\n    result = result + result % 100000000000000000\n    result = result + result % 1000000000000000\n    result = result + result % 10000000000000000\n    result = result + result % 1000000000000000000\n    result = result + result % 10000000000000\n    result = result + result % 1000000000000000\n    result = result + result % 10000000000000000\n    result = result + result % 1000000000000000000\n    result = result + result % 10000000000000\n    result = result + result % 1000000000000000", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Argument 1 must be at least 1\")\n    if number > 999:\n        raise ValueError(\"Argument 1 must be at most 1000\")\n    result = []\n    for i in range(number, 0, -1):\n        result.append(\"x\" * (i + 1))\n    return \"\".join(result).lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    try:\n        number = number % 1000\n    except ZeroDivisionError:\n        number = 1000 * number\n    try:\n        number = number % 100\n    except ZeroDivisionError:\n        number = 100 * number\n    try:\n        number = number % 10\n    except ZeroDivisionError:\n        number = 10 * number\n    try:\n        number = number % 10\n    except ZeroDivisionError:\n        number = number + '.'\n    if number == 1:\n        return '1'\n    number = number * 10\n    if number == 0:\n        return '0'\n    return number + '.'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return ''\n    else:\n        roman = ''\n        while num > 0:\n            roman += '%i' % (num // 10)\n            num = num % 10\n\n        return int_to_mini_roman(num)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    min_roman = int(number) - 1\n    result = ''\n    while min_roman:\n        result = chr(min_roman % 10 + ord('0')) + result\n        min_roman = min_roman // 10\n    result = result + chr(min_roman + 1 + ord('a')) + chr(min_roman + 2 + ord('A'))\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman = [\n        \"M\", \"MM\", \"MMM\", \"MMMM\", \"CM\", \"CM\", \"CM\", \"D\", \"DC\", \"DC\", \"C\", \"CD\",\n        \"DCC\", \"CM\", \"CM\", \"C\", \"CD\", \"CD\", \"CD\", \"C\", \"C\", \"C\", \"D\", \"C\", \"C\",\n        \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n        \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n        \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n        \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n        \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n        \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n        \"C\", \"C\", \"C\", \"C\", \"C\",", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    i = 1\n    x = number\n    while x > 9:\n        x /= 10\n        i += 1\n    # The function is only guaranteed to be monotonic. For example, it will be\n    # called with the integer 25, which will yield 'ix', but it will be called\n    # with the integer 19, which will yield 'vii.'\n    return \"i\" + int_to_mini_roman(x - i - 1)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return '0' + number.zfill(3)\n    if number < 100:\n        return '0' + str(number)\n    if number < 1000:\n        return str(number)\n    return number.zfill(3)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return '1'\n    elif number <= 100:\n        return 'xx'\n    elif number <= 900:\n        return 'cc'\n    elif number <= 9000:\n        return 'cdxxvi'\n    else:\n        return 'cdxxviii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = \"\"\n    while number > 0:\n        roman += (\"i\" * (number // 10)) + (\"d\" * number % 10)\n        number /= 10\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    sign = number < 0\n    if sign:\n        number = -number\n    number = abs(number)\n    while number > 1:\n        roman = roman + ('M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'LX', 'X', 'XL', 'IX', 'IV', 'I')\n        number = number // 10\n    while number > 0:\n        roman = roman + ('M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'LX', 'X', 'XL', 'IX', 'IV', 'I')\n        number = number % 10\n    if sign:\n        roman = '-' + roman\n    return roman.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_dict = {\"c\": \"c\", \"d\": \"d\", \"e\": \"e\", \"f\": \"f\", \"g\": \"g\", \"h\": \"h\",\n                 \"i\": \"i\", \"j\": \"j\", \"k\": \"k\", \"l\": \"l\", \"m\": \"m\", \"n\": \"n\",\n                 \"o\": \"o\", \"p\": \"p\", \"q\": \"q\", \"r\": \"r\", \"s\": \"s\", \"t\": \"t\",\n                 \"u\": \"u\", \"v\": \"v\", \"w\": \"w\", \"x\": \"x\", \"y\": \"y\", \"z\": \"z\", }\n\n    number = number % 1000\n    num = number // 1000\n    roman_string = roman_dict[num]\n    number = \"\"\n\n    while number >= 10 and num > 0:\n        number = number // 10\n        num = num - 1\n        roman_string = roman_dict[num]\n\n    while number >= 0:\n        number = number // 10\n        num = num + 1\n        roman_string = roman_string + roman_dict[num]\n\n    return roman_string", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return'min'\n\n    if number < 50:\n        return '1' + int_to_mini_roman(number)\n\n    num = number // 1000\n    if num > 1:\n        return 'xx' + int_to_mini_roman(num) + int_to_mini_roman(number % 1000)\n\n    num = number // 100\n    if num > 1:\n        return 'x' + int_to_mini_roman(num) + int_to_mini_roman(number % 100)\n\n    num = number // 10\n    if num > 1:\n        return int_to_mini_roman(num) + int_to_mini_roman(number % 10)\n\n    return int_to_mini_roman(number)\n\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n\n    # Apply a little bit of rounding to ensure that numbers greater than 1000\n    # are converted to their full form.\n    num = max(num - 1000, 0)\n\n    return '{0:04d}'.format(num).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return xix.lower() + int_to_mini_roman(number / 10)\n    if number < 100:\n        return clii.lower() + int_to_mini_roman(number / 100)\n    if number < 1000:\n        return cdxxvi.lower() + int_to_mini_roman(number / 1000)\n    if number < 1000000:\n        return ccxxix.lower() + int_to_mini_roman(number / 1000000)\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    numbers = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X']\n    i = 0\n    while i < number:\n        num = number - i\n        new_number = numbers[num % 10] + numbers[(num / 10) % 10]\n        if i == 0:\n            return new_number\n        i += 1\n    return None", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('The number must be greater than 1.')\n    if number > 1000:\n        raise ValueError('The number must be less than 1000.')\n\n    number = abs(number)\n\n    if number < 12:\n        return \"\".join(reversed(str(number)))\n\n    sum = 1\n    while number > 0:\n        sum *= 10\n        number = number % 10\n\n    ans = \"\"\n    for i in range(sum, 0, -1):\n        ans += str(i)\n\n    ans = ans.lower()\n    return ans\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return ''\n\n    smallest_number = 1000\n    largest_number = 1\n    order = [smallest_number, largest_number, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    middle = number % 10\n    return order[order.index(middle)][:order[order.index(middle) - 1]].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = 'i'\n    while number > 9:\n        number /= 10\n        roman = chr(ord(roman) + 1)\n    roman = roman + chr(ord(roman) - 1)\n    return roman[:4]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return''\n    num = int(number)\n    num = num - num % 10\n    if num >= 2:\n        num = num / 10 + 'x'\n    elif num >= 1:\n        num = num / 10 + 'v'\n    else:\n        num = num / 10 + 'i'\n    return num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be >= 1\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    roman = ''\n    # start with the letters in order of importance\n    r = number\n    for i in range(3):\n        roman += chr(i)\n        r /= 10\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    result = ''\n    modulo = number % 100\n    while modulo!= 0 and modulo!= 100:\n        if modulo > 0:\n            result += \"i\"\n        result += (number // 10) * 10 + number % 10\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    try:\n        num = int(number)\n    except ValueError:\n        raise ValueError(\"Invalid integer value.\")\n    if num < 1:\n        raise ValueError(\"Invalid integer value.\")\n    if num > 1000:\n        raise ValueError(\"Invalid integer value.\")\n\n    num_roman = ''\n    while num:\n        num_roman += chr(num % 10)\n        num /= 10\n\n    return num_roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"not positive integer\")\n    roman = \"\"\n    for i in range(0, number, 1):\n        if i < 10:\n            roman += \"X\"\n        elif i < 100:\n            roman += \"CM\"\n        elif i < 1000:\n            roman += \"D\"\n        elif i < 10000:\n            roman += \"M\"\n        elif i < 100000:\n            roman += \"CM\"\n        else:\n            roman += \"L\"\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    roman = ''\n    while num:\n        num, i = divmod(num, 1000)\n        roman += u''.join(u(i) + u'i' for i in range(i))\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('can only handle positive integers')\n\n    if number == 1:\n        return '1'\n\n    elif number < 1000:\n        return int_to_mini_roman(number // 10) + int_to_mini_roman(number % 10)\n\n    else:\n        return '(' + int_to_mini_roman(number // 100) + int_to_mini_roman(number % 100) + ')'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number <= 1:\n        return ''\n    elif number <= 9:\n        return 'ix'\n    elif number <= 99:\n        return 'vi'\n    elif number <= 199:\n        return 'ii'\n    elif number <= 999:\n        return 'xx'\n\n    lower_romans = 'vvvvvccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc'\n    upper_romans = 'ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc'\n    last_number = ''\n\n    for i in range(0, 100):\n        if number % 10 == i:\n            last_number += upper_romans[i]\n        elif number % 10 == i + 1:\n            last_number += lower_romans[i]\n        else:\n            last_number += upper_romans[i - 1]\n\n    return last_number.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Note that the ceiling operator is O(n**2) in Python 2.7, but is O(1)\n    # in Python 3.4 or newer (which is why we're using it).\n    return \"{}i\".format(number)[::-1].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number == 1000:\n        return 'x' * (1000 - 1)\n    # calculate the number of digits, and adjust number by that amount\n    n = len(str(number))\n    if n < 4:\n        number = number / 1000\n    else:\n        number = number / 100\n    number = number * 10 + number % 10\n    if n < 4:\n        return x + '-' + mini_roman(number, n)\n    return mini_roman(number, n)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Calculate the number of digits\n    num_digits = len(str(number))\n    # Calculate the number of digits in the roman numeral\n    roman_numeral = ((num_digits / 3) * 3) + ((num_digits % 3) * 6)\n    # Check that the number of digits fits in the number of characters in the\n    # roman numeral\n    if num_digits < roman_numeral:\n        raise ValueError('Not enough digits.')\n    # Convert the number of digits into a string\n    numeral = str(number)\n    # Convert the string into lowercase\n    numeral = numeral.lower()\n    # Return the string\n    return numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Add the letters of the alphabet to the number\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    letters.append('z')\n    # Convert the number to a string\n    number_str = str(number)\n    # Remove all the digits, except the first\n    digits = number_str.split('.')[1:]\n    # Add the letters to the digits, in order\n    # This is a little trick we use to make sure we always get the\n    # correct order for the digits, because the digits could come\n    # from any order\n    for digit in digits:\n        if digit.isdigit():\n            digit = letters.index(digit[0]) + 1\n        digits.append(digit)\n    # Trim the string down to the length of the letters\n    number_str =''.join(digits[0:letter_count(digits)])\n    return number_str.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_number = ''\n    for i in range(1, 1000):\n        if i in str(number):\n            roman_number += str(i)\n    return roman_number.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return I\n    if number <= 8:\n        return I + number\n    if number <= 100:\n        return II + number % 10\n    if number <= 1000:\n        if number % 100 == 0:\n            return III + number % 10\n        return IV + (number - 100) / 10\n    return I + (number - 100) / 10", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += chr(ord('0') + ((number // 10) + 1))\n        number = number % 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    for num in range(1, 1000):\n        roman = ('M' + str(num)).lower()\n        if number < 1000 and number % 100!= 0:\n            roman += ('i' + str(num % 100)).lower()\n        if number % 10!= 0:\n            roman += ('v' + str(number % 10)).lower()\n        number = number // 10\n        if number == 0 and number % 10 == 0:\n            roman += ('x' + str(number % 100)).lower()\n        if number % 100 == 0:\n            roman += ('l' + str(number % 10)).lower()\n        if number!= 0:\n            roman += ('d' + str(number % 100)).lower()\n        return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        return ''\n\n    roman = ''\n    for i in range(number):\n        roman += roman_char(i)\n    return roman.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = \"i\" * (1000 - number + 1)\n    for _ in range(1000 - number + 1):\n        roman += \"c\"\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = [\n        'i',\n        'ii',\n        'iii',\n        'iv',\n        'v',\n        'vi',\n        'vii',\n        'viii',\n        'ix',\n        'xx',\n        'xxii',\n        'xxiii',\n        'xxiv',\n        'xxv',\n        'xxvi',\n        'xxvii',\n        'xxviii',\n        'xxix',\n        'xxx',\n        'xlx',\n        'xlxi',\n        'xlxii',\n        'xlxiii',\n        'xlxiv',\n        'xlxv',\n        'xlxvi',\n        'xlxvii',\n        'xlxviii',\n        'xlxix',\n        'xli',\n        'xlii',\n        'xliv',\n        'xlv',\n        'xlvi',\n        'xlvii',\n        'xlviii',\n        'xlix',\n        'xlxx',\n        'xlxxii',\n        'xlxxiii',\n        'xlxxiv',\n        'xlxxv',\n        'xlxxvi',\n        'xlxxvii',\n        'xlxxviii',\n        'xlxxix',\n        'xlxxx',\n        'xlii',\n        'xliii',\n        'xliv',\n        'xlv',\n        'xl", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    Roman = {\n        1: 'I',\n        2: 'V',\n        3: 'X',\n        4: 'L',\n        5: 'C',\n        6: 'D',\n        7: 'CM',\n        8: 'CD',\n        9: 'CMD',\n        10: 'CDM',\n        11: 'CMDC',\n        12: 'CMDCM',\n        13: 'CMDCCC',\n        14: 'CMDCCCM',\n        15: 'CMDCCCDC',\n        16: 'CMDCCCDCM',\n        17: 'CMDCCCDD',\n        18: 'CMDCCCDDM',\n        19: 'CMDCCCDDCM',\n        20: 'CMDCCM',\n        21: 'CMDCCD',\n        22: 'CMDCCDC',\n        23: 'CMDCCDCM',\n        24: 'CMDCCCDD',\n        25: 'CMDCCCDDM',\n        26: 'CMDCCCDDCM',\n        27: 'CMDCCCDDCC',\n        28: 'CMDCCCDDCCM',\n        29: 'CMDCCCDDCCC',\n        30: 'CMDCCCDDCCDC',\n        31: 'CMDCCCDDCCDCM',\n        32: 'CMDCCCDDCCDD',\n        33: 'CMDCCCDDCCDDM',\n        34: 'CMDCCCDDCC", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return 'i'\n    if number < 50:\n        return ''\n    if number < 100:\n        return str(number).zfill(1).upper()\n    if number < 500:\n        return str(number / 100).zfill(2).upper() + 'i' + str(number % 100)\n    if number < 1000:\n        return str(number / 1000).zfill(3).upper() + 'i' + str(number % 1000)\n    return str(number / 1000).zfill(3).upper() + 'i' + str(number % 1000)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    numbers = list(range(1, 1000))\n    roman_numbers = ['']\n    for n in numbers:\n        if n < 10:\n            roman_numbers[0] += str(n)\n        else:\n            roman_numbers[1] += str(n / 10)\n            roman_numbers[2] += str(n % 10)\n    return roman_numbers[0].lower(), roman_numbers[1].lower(), roman_numbers[2].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 1000:\n        number = number // 10\n        number ='' + number\n    number = str(number)\n    numbers = [str(i) for i in range(number)]\n    numbers.reverse()\n    return '-'.join(numbers)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0:\n        raise ValueError('Not a positive number')\n    num = abs(number)\n    if num < 1:\n        return '1'\n    elif num < 10:\n        return str(num)\n    elif num < 100:\n        return '{0}'.format(num)\n    elif num < 1000:\n        return '{0}'.format(num / 10)\n    else:\n        return '{0}'.format(num / 100) + '{0}'.format(num % 10)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number > 1000:\n        return \"IVLIICLIVV\" + str(number - 1000)\n    if number < 1:\n        return \"II\"\n    roman = ['']\n    while number > 1:\n        roman.append(number % 10)\n        number = number // 10\n    roman.append(number)\n    return ''.join(roman).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 1:\n        return '1'\n    elif number <= 20:\n        return number.zfill(2) + 'a'\n    else:\n        return (number - 11) * 'i' + (number - 19).zfill(2)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1:\n        return 'xx'\n    if number > 1000:\n        return 'xxv'\n    return ''.join([chr(number // 10) + chr(number % 10) for _ in range(1, 10)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('%s is not a valid number' % number)\n    else:\n        for i in range(1000, 1, -1):\n            if number == i:\n                return str(i).lower()\n        return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = number % 1000\n    number = number / 1000\n    number = number * 10\n    number = number / 100\n    number = number * 10\n    number = number / 10\n    number = number * 100\n    number = number / 10\n    number = number * 10\n    number = number / 100\n    number = number * 10\n    number = number / 100\n    number = number * 10\n    number = number / 1000\n    number = number * 10\n    number = number / 1000\n    number = number * 100\n    number = number * 10\n    number = number / 1000\n    number = number * 100\n    number = number * 10\n    number = number / 1000\n    number = number * 100\n    number = number * 10\n    number = number / 1000\n    number = number * 100\n    number = number * 10\n    number = number / 1000\n    number = number * 100\n    number = number * 10\n    number = number / 1000\n    number = number * 100\n    number = number * 10\n    number = number / 1000\n    number = number * 100\n    number = number * 10\n    number = number / 1000\n    number = number * 100\n    number = number * 10\n    number = number / 1000\n    number = number * 100\n    number = number * 10\n    number = number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    number = int(number)\n    if number <= 1:\n        return \"i\"\n    elif number <= 10:\n        return \"x\"\n    elif number <= 19:\n        return \"ix\"\n    elif number <= 49:\n        return \"x\"\n    elif number <= 99:\n        return \"xx\"\n    elif number <= 199:\n        return \"xxx\"\n    elif number <= 499:\n        return \"xxxx\"\n    elif number <= 999:\n        return \"xxxxx\"\n    else:\n        return \"xxxxxxx\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1:\n        raise ValueError('number must be >= 1')\n\n    if number == 1:\n        result = 'x'\n    elif number == 2:\n        result = 'ii'\n    elif number < 100:\n        result = 'i' + str(number // 10)\n    elif number < 1000:\n        result = 'x' + str(number // 100)\n    else:\n        result = 'x' + str(number // 1000)\n\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        raise ValueError(\"Number must be positive\")\n    if num > 999:\n        raise ValueError(\"Number must be less than 1000\")\n\n    last_digit = \"xx\" * (num - 1)\n    return \" \".join([\"{}{}\".format(last_digit, i) for i in range(1, num)]).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        num, rem = divmod(number, 10)\n        roman += chr(rem)\n        number = num\n    roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number <= 0:\n        return \"\"\n    roman = \"\"\n    while number > 0:\n        roman += chr(number % 10)\n        number = number // 10\n\n    return roman[:-1].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # We convert to a string first, since the string is more easily\n    # manipulated than an integer, and we don't want to get into integer\n    # arithmetic if we don't have to.\n    s = str(number)\n\n    # We use a dictionary mapping roman numerals to their integers.\n    roman_dict = {\n        'x': 1,\n        'i': 2,\n        'ii': 3,\n        'v': 4,\n        'vi': 5,\n        'xv': 6,\n        'xl': 7,\n        'xx': 8,\n        'xlx': 9,\n        'xxx': 10,\n        'xxxl': 11,\n        'xlxxx': 12,\n        'xlxlxxx': 13,\n        'xlxlxlxxx': 14,\n        'xlxlxlxlxxx': 15,\n        'xlxlxlxlxlxxx': 16,\n        'xlxlxlxlxlxlxxx': 17,\n        'xlxlxlxlxlxlxlxxx': 18,\n        'xlxlxlxlxlxlxlxlxxx': 19,\n        'xlxlxlxlxlxlxlxlxlxxx': 20,\n        'xlxlxlxlxlxlxlxlxlxlxxx': 21,\n        'xlxlxlxlxlxlxlxlxlxlxlxxx': 22,\n        'xlxlxlxlxlxlxlxlxlxlxlxlxxx': 23", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    str = ''\n    for i in range(number):\n        if i % 10 == 1:\n            str += 'x'\n        if i % 10 == 2:\n            str += 'ii'\n        if i % 10 == 3:\n            str += 'iii'\n        if i % 10 == 4:\n            str += 'iv'\n        if i % 10 == 5:\n            str += 'v'\n        if i % 10 == 6:\n            str += 'vi'\n        if i % 10 == 7:\n            str += 'vii'\n        if i % 10 == 8:\n            str += 'viii'\n        if i % 10 == 9:\n            str += 'ix'\n        if i % 10 == 10:\n            str += 'x'\n    return str.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # NOTE: This code is taken from the docstring of the class 'inf' in\n    # the'minimalist-roman' package.\n    if number < 1:\n        return '1'\n    if number <= 49:\n        return '0' + str(number)\n    number = number - 50\n    i = 1\n    while number > 0:\n        if i < 10:\n            number, i = number, i + 1\n        else:\n            number, i = number, i - 10\n    return ''.join(chr(x) for x in range(i, 6 + i // 2))\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be a positive integer\")\n    if number > 1000:\n        raise ValueError(\"number must be less than 1000\")\n\n    num = int(number)\n    base = 10\n    if num < 4:\n        base = 2\n    elif num < 100:\n        base = 3\n    elif num < 1000:\n        base = 4\n\n    r = []\n\n    for i in range(base):\n        r.append(str(num // i))\n        num = num % i\n\n    return \"\".join(r)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman = ''\n    if number < 10:\n        roman += chr(number)\n    elif number < 100:\n        roman += chr(number % 10)\n    elif number < 1000:\n        roman += 'i' * (number // 10)\n        roman += chr(number % 10)\n    else:\n        roman += 'i' * (number // 10)\n        roman += 'x' * (number // 100)\n        roman += 'i' * (number % 100)\n\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 100:\n        return '-' + int_to_mini_roman(number)[2:]\n    if number <= 1000:\n        return int_to_mini_roman(number)[:2] + 'cc'\n    return int_to_mini_roman(number)[:2] + 'cm'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    while number < 0:\n        number += 1000\n    number = int(number)\n    s =''.join([chr(x) for x in range(1, 11) if number < x * 10])\n    return s.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    if number < 10 or number > 99:\n        return 'xx'\n    elif number < 20:\n        return 'xix'\n    elif number < 40:\n        return 'ii'\n    elif number < 60:\n        return 'iii'\n    elif number < 80:\n        return 'iv'\n    elif number < 100:\n        return 'v'\n    elif number < 120:\n        return 'vi'\n    elif number < 140:\n        return 'vii'\n    elif number < 200:\n        return 'viii'\n    elif number < 300:\n        return 'ix'\n    elif number < 400:\n        return 'x'\n    elif number < 500:\n        return 'xi'\n    elif number < 600:\n        return 'xii'\n    elif number < 700:\n        return 'xiii'\n    elif number < 800:\n        return 'xiv'\n    elif number < 1000:\n        return 'xv'\n    else:\n        return 'xxvi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    count = 0\n    roman_numeral = ''\n    for i in range(1000):\n        if number <= i:\n            break\n        count += 1\n    roman_numeral += 'CM'\n    roman_numeral += str(int(number / 100)) + 'D'\n    roman_numeral += 'CD'\n    roman_numeral += str(int(number % 100)) + 'D'\n    roman_numeral += 'CM'\n    roman_numeral += str(count) + 'X'\n    roman_numeral += str(int(number)) + 'L'\n    roman_numeral += roman_numeral.lower()\n\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert number >= 1\n    assert number <= 1000\n    if number <= 10:\n        return number.lower() + 'xix'\n    elif number <= 100:\n        return number.lower() + 'clii'\n    elif number <= 1000:\n        return number.lower() + 'cdxxvi'\n    else:\n        return number.lower() + 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    res = str(number).lower()\n\n    if len(res) == 1:\n        res = \"0\" + res\n    elif len(res) == 2:\n        res = \"1\" + res\n\n    if len(res) <= 2:\n        res += \"x\"\n\n    return res", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Numbers must be greater than or equal to one.\")\n\n    if number < 100:\n        return ''.join([_('min.')] + [_(num.group(1)) for num in int_to_roman(number)])\n\n    num = int(number % 100)\n    if num < 10 and num > 1:\n        return ''.join([_('min.')] + [_(num.group(1)) for num in int_to_roman(number)])\n\n    if num < 100:\n        return ''.join([_('min.')] + [_(num.group(1)) for num in int_to_roman(number)])\n\n    num = int(number / 100)\n    if num < 10 and num > 1:\n        return ''.join([_('min.')] + [_(num.group(1)) for num in int_to_roman(number)])\n\n    if num < 100:\n        return ''.join([_('min.')] + [_(num.group(1)) for num in int_to_roman(number)])\n\n    num =", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return '1'\n    elif number <= 2:\n        return '2'\n    elif number <= 5:\n        return '3'\n    elif number <= 10:\n        return '4'\n    elif number <= 20:\n        return '5'\n    elif number <= 30:\n        return '6'\n    elif number <= 40:\n        return '7'\n    elif number <= 50:\n        return '8'\n    elif number <= 60:\n        return '9'\n    elif number <= 70:\n        return 'a'\n    elif number <= 80:\n        return 'b'\n    elif number <= 90:\n        return 'c'\n    elif number <= 100:\n        return 'd'\n    elif number <= 150:\n        return 'e'\n    elif number <= 200:\n        return 'f'\n    else:\n        return 'g'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    # if number <= 1:\n    #     return 'i'\n    if number <= 3:\n        return 'x'\n    elif number <= 7:\n        return 'c'\n    elif number <= 10:\n        return 'd'\n    elif number <= 20:\n        return'm'\n    elif number <= 50:\n        return 'l'\n    elif number <= 100:\n        return 'x'\n    elif number <= 500:\n        return 'd'\n    elif number <= 1000:\n        return 'c'\n    else:\n        raise ValueError('Number too large')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = ['I', 'X', 'L', 'C']\n    divisor = 1000\n\n    while number > divisor:\n        number -= divisor\n        roman_numeral.pop(0)\n\n    while number < 0:\n        number += divisor\n        roman_numeral.insert(0, 'X')\n\n    return roman_numeral[number//divisor] + roman_numeral[number%divisor].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX']\n    if number == 1:\n        roman_numeral.insert(0, 'I')\n    elif number <= 2:\n        roman_numeral.insert(0, 'i')\n    else:\n        roman_numeral.insert(0, 'I')\n    if number < 400:\n        roman_numeral.insert(0, 'I')\n    elif number < 600:\n        roman_numeral.insert(0, 'I')\n    elif number < 800:\n        roman_numeral.insert(0, 'II')\n    elif number < 1000:\n        roman_numeral.insert(0, 'ii')\n    elif number < 1200:\n        roman_numeral.insert(0, 'III')\n    elif number < 1400:\n        roman_numeral.insert(0, 'iv')\n    elif number < 1600:\n        roman_numeral.insert(0, 'V')\n    elif number < 1800:\n        roman_numeral.insert(0, 'vi')\n    elif number < 2000:\n        roman_numeral.insert(0, 'VII')\n    elif number < 2200:\n        roman_numeral.insert(0", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Numbers greater than 1 are not supported\")\n\n    if number % 100 == 0:\n        letter = 'I'\n    elif number % 10 == 0:\n        letter = 'II'\n    else:\n        letter = 'III'\n\n    number = int(number)\n\n    return letter + str(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero.')\n    num = number % 10\n    if num > 0:\n        return '{0}d'.format(num)\n    elif num == 0:\n        return 'ii'\n    elif num == 1:\n        return 'iii'\n    elif num < 5:\n        return 'iv'\n    elif num < 10:\n        return 'v'\n    elif num < 20:\n        return 'vi'\n    elif num < 30:\n        return 'vii'\n    elif num < 40:\n        return 'viii'\n    elif num < 50:\n        return 'ix'\n    elif num < 60:\n        return 'x'\n    else:\n        return 'xi'\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 0:\n        num = num * -1\n    if num < 1:\n        raise ValueError(\"Value '{}' is outside the allowed range.\".format(number))\n    num = num // 10\n    if num < 1:\n        return \"0\" + \"i\" * (num + 1)\n    num -= 1\n    if num < 1:\n        return \"1\" + \"i\" * (num + 1)\n    num -= 1\n    if num < 1:\n        return \"2\" + \"i\" * (num + 1)\n    num -= 1\n    if num < 1:\n        return \"3\" + \"i\" * (num + 1)\n    num -= 1\n    if num < 1:\n        return \"4\" + \"i\" * (num + 1)\n    num -= 1\n    if num < 1:\n        return \"5\" + \"i\" * (num + 1)\n    num -= 1\n    if num < 1:\n        return \"6\" + \"i\" * (num + 1)\n    num -= 1\n    if num < 1:\n        return \"7\" + \"i\" * (num + 1)\n    num -= 1\n    if num < 1:\n        return \"8\" + \"i\" * (num + 1)\n    num -= 1\n    if num < 1:\n        return \"9\" + \"i\" * (num + 1)\n    num -= 1\n    if", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    min_roman = 1\n    max_roman = 1000\n    num = int(number)\n    i = 0\n    while i < num:\n        num /= 10\n        i += 1\n    num = num % 10\n    if num == 0:\n        return \"\"\n    if num < min_roman:\n        return \"\"\n    while num >= max_roman:\n        num /= 10\n        i += 1\n    num = num % 10\n    if i == num:\n        return str(i)\n    return x(i) + x(num - i)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = 'II'\n    if number < 20:\n        roman = 'I'\n    elif number < 40:\n        roman = 'III'\n    elif number < 70:\n        roman = 'IV'\n    elif number < 90:\n        roman = 'V'\n    elif number < 110:\n        roman = 'VI'\n    elif number < 140:\n        roman = 'VII'\n    elif number < 180:\n        roman = 'VIII'\n    elif number < 210:\n        roman = 'IX'\n    elif number < 240:\n        roman = 'X'\n    elif number < 280:\n        roman = 'XI'\n    elif number < 330:\n        roman = 'XII'\n    elif number < 400:\n        roman = 'XIII'\n    elif number < 490:\n        roman = 'XIV'\n    elif number < 580:\n        roman = 'XV'\n    elif number < 630:\n        roman = 'XVI'\n    elif number < 710:\n        roman = 'XVII'\n    elif number < 820:\n        roman = 'XVIII'\n    elif number < 860:\n        roman = 'XIX'\n    elif number < 990:\n        roman = 'XX'\n    else:\n        roman = 'XXI'\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be greater than or equal to 1\")\n    if number < 2:\n        return ''\n    if number < 20:\n        return ''\n    if number < 100:\n        return ''\n    if number < 1000:\n        return ''\n    return \"{}x\".format(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = ''\n    roman_numeral_length = 1\n    roman_numeral = 'xx'\n    if number < 1000:\n        for i in range(1, number + 1):\n            roman_numeral += roman_numeral_length\n            roman_numeral_length = (Roman_numeral_length * 10) + i\n    elif number < 9999:\n        roman_numeral += 'xxxx'\n        roman_numeral += (Roman_numeral_length * 9) + number\n    elif number < 1:\n        roman_numeral += 'xx'\n        roman_numeral += roman_numeral_length\n        roman_numeral_length += 1\n    else:\n        roman_numeral += 'xxx'\n        roman_numeral += roman_numeral_length\n        roman_numeral_length += 1\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = [\n        [''],\n        ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii'],\n        ['viii', 'ix', 'x'],\n        ['xi', 'iii', 'iv', 'v', 'vi', 'vii'],\n        ['viii', 'ix', 'x', 'xi', 'ii', 'iii'],\n        ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii'],\n        ['viii', 'ix', 'x', 'xi', 'ii', 'iii', 'iv', 'v', 'vi', 'vii'],\n        ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii'],\n        ['viii', 'ix', 'x', 'xi', 'ii', 'iii', 'iv', 'v', 'vi', 'vii'],\n        ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii'],\n        ['viii', 'ix', 'x', 'xi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = 'i I'\n    roman.append('')\n    number = int(number)\n    if number == 1:\n        roman = 'i'\n    elif number <= 9:\n        roman.append('i')\n        roman.append('')\n        number = number * 10\n        roman.append(number)\n    elif number <= 100:\n        roman.append('ii')\n        roman.append('')\n        number = number * 10\n        roman.append(number)\n    elif number <= 1000:\n        roman.append('iii')\n        roman.append('')\n        number = number * 10\n        roman.append(number)\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 1:\n        return ''\n    if num <= 60:\n        return str(num)\n    if num <= 900:\n        return str(num) + 'i'\n    if num <= 1800:\n        return str(num) + 'll'\n    if num <= 9999:\n        return str(num) + 'l'\n    return str(num) + 'ies'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be greater than zero\")\n    if number >= 1000:\n        return \"vm%iuni\" % (number // 1000)\n    num, thousands_separator = divmod(number, 1000)\n    if thousands_separator == 0:\n        return \"%sum%s\" % (int_to_mini_roman(num),\n                            int_to_mini_roman(num))\n    else:\n        return \"%s%s%i%s\" % (int_to_mini_roman(num),\n                            thousands_separator,\n                            int_to_mini_roman(num),\n                            int_to_mini_roman(num))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = ''\n    while number > 0:\n        if number >= 1000:\n            result += 'i'\n        if number >= 100:\n            result += 'x'\n        if number >= 10:\n            result += 'c'\n        number = number % 10\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return '0'\n    numbers = list(range(1000))\n    numbers[number] = numbers[number - 1] + 1\n    first_n = numbers[number - 1]\n    last_n = numbers[number]\n    first_n_roman = first_n\n    last_n_roman = last_n\n    while first_n!= last_n:\n        for i in range(1, last_n_roman - first_n_roman):\n            if first_n_roman > first_n:\n                first_n_roman -= 1\n            else:\n                last_n_roman -= 1\n                break\n        else:\n            first_n = last_n = 0\n    # last_n_roman == 1, so let's return the string representation\n    return ''.join([x[min(x.find('x'), x.find('v')):].lower() for x in numbers])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 100:\n        return 'x' * (number - 1) + 'ix'\n    if number < 400:\n        return 'x' * (number - 100) + 'x' * (number - 50) + 'iix'\n    if number < 1000:\n        return 'x' * (number - 400) + 'x' * (number - 100) + 'x' * (number - 50) + 'xlix'\n    return 'cl' * (number - 400) + 'ii' * (number - 100) + 'cdxxvi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return ''\n    else:\n        parts = num // 100\n        parts = str(parts)\n        if num % 100 > 1:\n            parts = parts + '.' + str(num % 100)\n        else:\n            parts = str(num % 100)\n        parts = parts.lower()\n        parts = parts.replace('.', '')\n        parts = parts.replace('x', 'xx')\n        return parts", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    min_roman = []\n    max_roman = ''\n    while num:\n        if num > 0:\n            min_roman.append(str(num % 10) + 'x')\n        num //= 10\n    while min_roman:\n        max_roman += min_roman.pop()\n        if max_roman:\n            max_roman += '.'\n    return max_roman[:-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return \"\"\n    if number < 100:\n        return number + \"i\"\n    if number < 1000:\n        return number + \"c\"\n    if number < 10000:\n        return number + \"d\"\n    if number < 1000000:\n        return number + \"m\"\n    return number + \"x\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = []\n    while number > 0:\n        number /= 10\n        roman.append(num2roman(number))\n    return''.join(roman)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return int_to_roman(number)[::-1].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    min_roman = ['i', 'x', 'ii', 'v']\n    max_roman = ['c', 'l', 'd', 'xi']\n    number = number % 1000\n    if number <= 0:\n        return ''\n    roman_numeral = ''\n    if number <= 1:\n        roman_numeral = min_roman[0]\n    elif number <= 300:\n        roman_numeral = min_roman[1]\n    elif number <= 900:\n        roman_numeral = min_roman[2]\n    else:\n        roman_numeral = max_roman[0]\n    roman_numeral += number\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    try:\n        result = 'ix'\n        i = number\n    except (ValueError, TypeError):\n        result = ''\n    while i >= 1000:\n        i -= 1000\n        result = 'x' + result\n    i = i % 100\n    while i >= 10:\n        i -= 10\n        result = 'x' + result\n    i = i % 10\n    while i >= 1:\n        i -= 1\n        result = 'x' + result\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        return ''\n    elif number < 1:\n        return ''\n    elif number < 1000:\n        return 'i'\n    elif number >= 1000 and number < 10000:\n        return 'ii'\n    elif number >= 10000 and number < 100000:\n        return 'iii'\n    elif number >= 100000 and number < 1000000:\n        return 'iv'\n    elif number >= 1000000 and number < 10000000:\n        return 'v'\n    elif number >= 10000000 and number < 100000000:\n        return 'vi'\n    elif number >= 100000000 and number < 1000000000:\n        return 'vii'\n    elif number >= 1000000000 and number < 100000000000:\n        return 'viii'\n    elif number >= 100000000000 and number < 1000000000000:\n        return 'ix'\n    elif number >= 1000000000000:\n        return 'x'\n    else:\n        return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = \"i\"\n    if number == 1 or number < 2:\n        roman_numeral = \"m\"\n    elif number == 2 or number < 3:\n        roman_numeral = \"cm\"\n    elif number == 3 or number < 4:\n        roman_numeral = \"d\"\n    elif number == 4 or number < 5:\n        roman_numeral = \"cd\"\n    elif number == 5 or number < 6:\n        roman_numeral = \"cx\"\n    elif number == 6 or number < 7:\n        roman_numeral = \"cix\"\n    elif number == 7 or number < 8:\n        roman_numeral = \"ci\"\n    elif number == 8 or number < 9:\n        roman_numeral = \"iv\"\n    elif number == 9 or number < 10:\n        roman_numeral = \"i\"\n    elif number >= 10:\n        roman_numeral = \"x\"\n    roman_numeral += str(number)[2:]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, 1000):\n        if number >= i:\n            break\n        roman += str(i)\n    roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # number must be positive\n    if number < 1:\n        raise ValueError('number must be positive, got {}'.format(number))\n    # number must be <= 1000\n    if number > 1000:\n        raise ValueError('number must be <= 1000, got {}'.format(number))\n    # convert to number of days\n    days = int(number / 10) + 1\n    number -= days * 10\n    # convert to number of years\n    years = int(number / 100) + 1\n    number -= years * 100\n    # convert to number of centuries\n    centuries = int(number / 1000)\n    number -= centuries * 1000\n    # convert to number of millennia\n    millennia = number\n    # return string\n    return ''.join([chr(ord(x) - 1) for x in number.zfill(2)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return '-' + int_to_mini_roman(number + 1)\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'x'\n    if number == 3:\n        return 'i'\n    if number == 4:\n        return 'v'\n    if number == 5:\n        return 'd'\n    if number == 6:\n        return 'c'\n    if number == 7:\n        return 'b'\n    if number == 8:\n        return 'a'\n    if number == 9:\n        return'm'\n    if number == 10:\n        return 'j'\n    if number == 11:\n        return 'x'\n    if number == 12:\n        return 'x'\n    if number == 13:\n        return 'l'\n    if number == 14:\n        return 'x'\n    if number == 15:\n        return 'l'\n    if number == 16:\n        return 'x'\n    if number == 17:\n        return 'x'\n    if number == 18:\n        return 'l'\n    if number == 19:\n        return 'xx'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xx'\n    if number == 22:\n        return 'xx'\n    if number == 23:\n        return 'xx'\n    if number == 24:\n        return 'xx'\n    if number == 25:\n        return 'xx'\n    if number == 26:\n        return 'xx'\n    if", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('invalid integer')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'v'\n    if number <= 10:\n        return str(number) +'m'\n    if number < 100:\n        return str(number) + 'd'\n    if number < 1000:\n        return str(number) + 'c'\n    raise ValueError('invalid integer')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return '1'\n    elif number <= 999:\n        return '0' + int_to_mini_roman(number - 1)\n    else:\n        return int_to_mini_roman(number - 1000)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive: %s\" % number)\n    if number > 999:\n        raise ValueError(\"Number must be less than 1000: %s\" % number)\n    num = int(number)\n    if num < 4:\n        return \"i\" + int_to_mini_roman(num + 1)\n    if num < 7:\n        return \"x\" + int_to_mini_roman(num)\n    if num < 11:\n        return \"c\" + int_to_mini_roman(num - 4)\n    return \"l\" + int_to_mini_roman(num - 7)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    min_roman = 'i'\n    max_roman = 'cc'\n    if number < 1:\n        raise ValueError(\"number must be greater than zero\")\n    if number >= 1000:\n        number /= 1000\n        min_roman = 'c'\n        max_roman = 'x'\n    if number >= 900:\n        number /= 900\n        min_roman = 'd'\n        max_roman = 'x'\n    if number >= 700:\n        number /= 700\n        min_roman ='m'\n        max_roman = 'x'\n    if number >= 600:\n        number /= 600\n        min_roman = 'l'\n        max_roman = 'x'\n    if number >= 500:\n        number /= 500\n        min_roman = 'c'\n        max_roman = 'x'\n    if number >= 400:\n        number /= 400\n        min_roman = 'd'\n        max_roman = 'x'\n    if number >= 300:\n        number /= 300\n        min_roman ='m'\n        max_roman = 'x'\n    if number >= 200:\n        number /= 200\n        min_roman = 'l'\n        max_roman = 'x'\n    if number >= 100:\n        number /= 100\n        min_roman = 'x'\n        max_roman = 'z'\n    return _RomanNumeral(min_", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = []\n    while number > 0:\n        num = number // 10\n        roman.append(num)\n        number -= num * 10\n\n    if number > 0:\n        roman.append(number)\n\n    return ''.join(roman)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman = []\n    i = 0\n    while number > 0:\n        roman.append((number % 10) + i)\n        number = number // 10\n        i += 1\n\n    # Roman numeral always ends with a zero\n    roman[-1] = '0'\n\n    # Make a string out of the roman numeral\n    return ''.join(roman)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = number - 1\n    try:\n        if number < 100:\n            if number > 0:\n                return '%i' % number\n            else:\n                return 'xxx'\n        else:\n            if number > 900:\n                if number > 300:\n                    return 'cc'\n                else:\n                    return 'cdd'\n            elif number > 900 and number <= 1200:\n                if number > 450:\n                    return 'cdc'\n                elif number > 450 and number <= 700:\n                    return 'cd'\n                elif number > 450 and number <= 900:\n                    return 'c'\n                else:\n                    return 'c'\n            else:\n                if number > 900 and number <= 900:\n                    return 'd'\n                elif number > 900 and number <= 900:\n                    return 'd'\n                elif number > 900 and number <= 900:\n                    return 'd'\n                else:\n                    return 'd'\n    except:\n        pass\n    return number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = number\n    if num <= 1:\n        return '0'\n    elif num <= 3 and num % 100!= 0:\n        return num.zfill(1) + 'xx'\n    elif num <= 99 and num % 100 == 0:\n        return num.zfill(1) + 'xv'\n    elif num <= 999 and num % 100 > 0:\n        return num.zfill(1) + 'iv'\n    else:\n        return num.zfill(1) + 'ii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero.')\n    if number == 1:\n        return 'x'\n    if number < 100:\n        number = number * 10\n        return''.join([str(n) for n in range(number, number + 10)])\n    if number < 1000:\n        number = number / 100\n        return''.join([str(n) for n in range(number, number + 9)])\n    number = number / 10\n    return''.join([str(n) for n in range(number, number + 9)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = number % 10\n    number = number // 10\n    if number == 0:\n        number = '1'\n    if number < 10:\n        return chr(ord('0') + number) + '0'\n    if number < 100:\n        return chr(ord('0') + number) + 'a'\n    if number < 1000:\n        return chr(ord('0') + number) + 'A'\n    if number < 10000:\n        return chr(ord('0') + number) + 'C'\n    if number < 100000:\n        return chr(ord('0') + number) + 'D'\n    if number < 1000000:\n        return chr(ord('0') + number) + 'E'\n    if number < 10000000:\n        return chr(ord('0') + number) + 'F'\n    if number < 100000000:\n        return chr(ord('0') + number) + 'G'\n    if number < 1000000000:\n        return chr(ord('0') + number) + 'H'\n    if number < 100000000000:\n        return chr(ord('0') + number) + 'I'\n    if number < 1000000000000:\n        return chr(ord('0') + number) + 'J'\n    if number < 100000000000000:\n        return chr(ord", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO(gsemancik): there may be a more efficient way to do this\n    strings = {'x': 1, 'y': 2, 'z': 3, 'a': 4, 'b': 5, 'c': 6, 'd': 7, 'e': 8, 'f': 9, 'g': 10, 'h': 11, 'i': 12, 'j': 13, 'k': 14, 'l': 15,'m': 16, 'n': 17, 'o': 18, 'p': 19, 'q': 20, 'r': 21,'s': 22, 't': 23, 'u': 24, 'v': 25, 'w': 26, 'x': 27, 'y': 28, 'z': 29, 'a': 30, 'b': 31, 'c': 32, 'd': 33, 'e': 34, 'f': 35, 'g': 36, 'h': 37, 'i': 38, 'j': 39, 'k': 40, 'l': 41,'m': 42, 'n': 43, 'o': 44, 'p': 45, 'q': 46, 'r': 47,'s': 48, 't': 49, 'u': 50, 'v': 51, 'w': 52, 'x': 53, 'y': 54, 'z': 55, 'a", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    i = 0\n    while i < 1000:\n        if number < 1000:\n            roman += string.ascii_letters[number % 10]\n        number /= 10\n        i += 1\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return None\n    if number > 1000:\n        return None\n    result = []\n    for n in range(1000, number + 1, 1):\n        result.append(_roman_dict[(n + 1) / 10])\n    result.append(_roman_dict[number / 10])\n    if number % 10 == 0:\n        result.append(_roman_dict[number / 10])\n    return''.join(result).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    str_roman = 'i'\n    int_number = int(number)\n    while int_number > 0:\n        int_number = int_number // 10\n        str_roman = str_roman + chr(int_number % 10)\n    return str_roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {'x': 1, 'i': 1, 'ii': 2, 'iii': 3, 'iv': 4, 'v': 5, 'vi': 6, 'vii': 7, 'viii': 8, 'ix': 9}\n    roman_number = ''\n    for number in range(1, number + 1):\n        roman_number += roman_numerals[number]\n\n    return roman_number.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    n = number\n    n = str(n)\n    n = n.lower()\n    n = n[-2:]\n    n = n[::-1]\n    n = n[::-1]\n    n = n[::-1]\n    n = n[::-1]\n    n = n[::-1]\n    n = n[:2]\n    n = n[2:]\n    n = n[:2]\n    n = n[::-1]\n    n = n[::-1]\n    n = n[::-1]\n    n = n[:2]\n    n = n[2:]\n    n = n[::-1]\n    n = n[::-1]\n    n = n[::-1]\n    n = n[::-1]\n    n = n[:2]\n    n = n[2:]\n    n = n[::-1]\n    n = n[::-1]\n    n = n[::-1]\n    n = n[::-1]\n    n = n[:2]\n    n = n[2:]\n    n = n[::-1]\n    n = n[::-1]\n    n = n[::-1]\n    n = n[::-1]\n    n = n[:2]\n    n = n[2:]\n    n = n[::-1]\n    n = n[::-1]\n    n = n[::-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return\n    if number < 2:\n        return u'\\\\textsc{i}'\n    elif number < 100:\n        return u'\\\\textsc{i\\\\textsc{m}}%i' % number\n    elif number < 1000:\n        return u'\\\\textsc{l}%i' % number\n    else:\n        return u'\\\\textsc{xl}%i' % number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = ''\n    for i in range(1, 1000):\n        roman_numeral += str(i) + str(i % 10)\n    roman_numeral = roman_numeral.lower()\n    roman_numeral = roman_numeral[:2]\n    roman_numeral = roman_numeral + roman_numeral[-2:]\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    number = int(number)\n    if number <= 0:\n        return ''\n    else:\n        if number == 1:\n            return ''\n        else:\n            small_nums = ''\n            for i in range(number):\n                small_nums += '%03d' % i\n            return small_nums.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return \"\"\n    elif number <= 9:\n        return \"{0:1}\".format(number)\n    elif number <= 19:\n        return \"{0:s}cc\".format(number)\n    elif number <= 49:\n        return \"{0:s}ii\".format(number)\n    elif number <= 99:\n        return \"{0:s}iv\".format(number)\n    elif number <= 199:\n        return \"{0:s}v\".format(number)\n    elif number <= 299:\n        return \"{0:s}vi\".format(number)\n    elif number <= 399:\n        return \"{0:s}vii\".format(number)\n    elif number <= 499:\n        return \"{0:s}viii\".format(number)\n    elif number <= 599:\n        return \"{0:s}ix\".format(number)\n    elif number <= 599:\n        return \"{0:s}ixi\".format(number)\n    elif number <= 699:\n        return \"{0:s}xvii\".format(number)\n    elif number <= 999:\n        return \"{0:s}xxviii\".format(number)\n    else:\n        return \"{0:s}xxx\".format(number)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n\n    for n in range(1, 1000):\n        if number >= n:\n            roman += str(n)\n\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Get the numbers\n    numbers = range(1, 10001)\n    roman = ['i', 'x', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'xx', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xx', 'xx', 'xx', 'xx', 'xx', 'xx']\n    x = []\n\n    for i in numbers:\n        if i <= number:\n            x.append(roman[i])\n        else:\n            break\n\n    return ''.join(x)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    min = 1\n    max = 1000\n\n    if number < 1 or number > max:\n        raise ValueError('Integer must be between 1 and 1000.')\n\n    result = ''\n\n    while number > 0:\n        number /= 10\n        result += str(number)\n        if number < 10:\n            min += 1\n\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = str(number)\n    # Decompose the number, using \"xx\" for two-digit numbers, \"xv\" for three-digit\n    # numbers, and so on.\n    components = [int(x) for x in re.split(r'([xy])', number)]\n    if len(components) == 1:\n        return components[0]\n    elif len(components) == 2:\n        # Handle numbers of the form \"xxx\" or \"xxx\". We can't use a base-10\n        # representation for these because the \"xx\" components are in the wrong\n        # places. The solution is to first remove all the \"xx\" components, then\n        # perform a normal decimal to roman conversion.\n        for i in range(0, len(components)):\n            if components[i] == 'xx':\n                components[i] = components[i + 1]\n        return min_roman(int(components[0]), int(components[1]))\n    else:\n        # Handle the case where the number has three or more \"xx\" components,\n        # and can be converted to a single \"xxx\" component.\n        for i in range(0, len(components)):\n            if components[i] == 'xx':\n                components[i] = components[i + 1]\n        components[0] = str", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'xx'\n    num = int(number)\n    if num < 12:\n        return num\n    num -= 1\n    num = int(num / 4)\n    num += 1\n    return 'cd{}vi'.format(num)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = number\n    # 1 <= num <= 1000\n    if num < 1:\n        return '0' + int_to_mini_roman(num)\n    num = num % 1000\n    if num < 10:\n        return num.lower() + 'i'\n    num = num / 10\n    num = str(num) + 'x'\n    num = num.lower() + num[-3:]\n    return num[:-(num.index('x'))] + 'i'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    r = []\n    while number:\n        # first, get the digit that we've used the most times\n        used_digit = 0\n        for i in range(1, 5):\n            if number % i == 0:\n                used_digit = i\n                break\n        # then, get the one that we haven't used yet\n        one_used = True\n        for i in range(0, 5):\n            if number % i == 0:\n                one_used = False\n                break\n        if one_used:\n            r.append('x')\n        else:\n            r.append(str(used_digit))\n        number //= used_digit\n    if len(r) == 1:\n        r.append('')\n    return''.join(r)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        raise ValueError('Too big')\n    if number < 1:\n        raise ValueError('Too small')\n    return re.sub('(\\d{3})(\\d)(\\d)', '$1$2$3', number).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return '0'\n    num = number\n    if num < 10:\n        num = num * 10\n    num = num // 10\n    if num == 10:\n        num = num * 100\n    num = num // 100\n    if num == 100:\n        num = num * 1000\n    num = num // 1000\n    num = num % 10\n    if num == 0:\n        return '000'\n    num = num * 10\n    num = num // 10\n    if num == 0:\n        return '00'\n    num = num * 100\n    num = num // 100\n    if num == 0:\n        return '0'\n    num = num * 1000\n    num = num // 1000\n    if num == 0:\n        return '000'\n    return str(num)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    elif number == 1:\n        return 'x'\n    elif number >= 2:\n        return number + 'i'\n    else:\n        return number + 'x'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # get the appropriate function call\n    if number == 1:\n        return 'i'\n    elif number in range(2,6):\n        return 'xix'\n    elif number in range(7,9):\n        return 'xx'\n    elif number in range(10,12):\n        return 'xv'\n    elif number in range(13,15):\n        return 'iv'\n    elif number in range(16,18):\n        return 'ii'\n    else:\n        return 'iii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    numerals = [\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 1:\n        return 'xix'\n    elif number == 2:\n        return 'xx'\n    elif number == 3:\n        return 'xi'\n    elif number == 4:\n        return 'x'\n    elif number == 5:\n        return 'vi'\n    elif number == 6:\n        return 'iv'\n    elif number == 7:\n        return 'v'\n    elif number == 8:\n        return 'ii'\n    elif number == 9:\n        return 'i'\n    elif number == 10:\n        return 'iii'\n    elif number == 11:\n        return 'iii'\n    elif number == 12:\n        return 'ivr'\n    elif number == 13:\n        return 'iv'\n    elif number == 14:\n        return 'vr'\n    elif number == 15:\n        return 'v'\n    elif number == 16:\n        return 'vi'\n    elif number == 17:\n        return 'vii'\n    elif number == 18:\n        return 'viii'\n    elif number == 19:\n        return 'ix'\n    elif number == 20:\n        return 'xi'\n    elif number == 21:\n        return 'ii'\n    elif number == 22:\n        return 'iii'\n    elif number == 23:\n        return 'iv'\n    elif number == 24:\n        return 'v'\n    elif number == 25:\n        return 'vi'\n    elif number == 26:\n        return 'vii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 1:\n        return '0'\n    if number == 0:\n        return '(I)'\n\n    if number < 40:\n        return int_to_mini_roman(number - 1) + '(II)'\n    elif number < 60:\n        return int_to_mini_roman(number - 40) + '(III)'\n    elif number < 80:\n        return int_to_mini_roman(number - 60) + '(IV)'\n    elif number < 100:\n        return int_to_mini_roman(number - 80) + '(V)'\n    elif number < 200:\n        return int_to_mini_roman(number - 100) + '(VI)'\n    elif number < 300:\n        return int_to_mini_roman(number - 200) + '(VII)'\n    elif number < 400:\n        return int_to_mini_roman(number - 300) + '(VIII)'\n    elif number < 500:\n        return int_to_mini_roman(number - 400) + '(IX)'\n    elif number < 600:\n        return int_to_mini_roman(number - 500) + '(X)'\n    elif number < 700:\n        return int_to_mini", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, 6):\n        if number >= i:\n            roman += _roman_numeral[i]\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 1:\n        return 'I'\n    if number < 1000:\n        result = str(number) + '.'\n        for i in range(number, 1, -1):\n            result += str(i) + 'x'\n        return result\n    if number >= 1000:\n        return 'D' + str(number / 1000)\n    if number >= 100:\n        result = str(number / 100) + 'C' + str(number % 100)\n    if number >= 10:\n        result = str(number / 10) + 'x' + str(number % 10)\n    if number < 100:\n        result = str(number / 10) + str(number % 10)\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 1:\n        return ''\n    if num < 100:\n        return num\n    for i in range(3, 9):\n        if num % i == 0:\n            return i\n    return 'x' + str(num // 10) + 'ix'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return ''\n    if number < 1000:\n        return 'xx' + chr(number - 1)\n    roman = ''\n    for i in range(number / 100):\n        roman = roman + chr(i + 1) + (roman == '' and '' or 'i')\n    roman = roman + chr(number - int(number / 100))\n    return roman + (roman == '' and '' or 'e')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    digits = [ str(number%10) for number in range(number//10, -1, -1) ]\n    digits.reverse()\n    return \" \".join(digits)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return '1'\n    if number <= 9:\n        return '0' + int_to_mini_roman(number / 10)\n    num = number - 1\n    if num >= 100:\n        num = num // 100\n        if num >= 10:\n            num += 1\n    elif num >= 10:\n        num += 1\n    return str(num) + int_to_mini_roman(num % 10)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = 'i'\n    for digit in xrange(1, number):\n        roman_numeral = roman_numeral + chr(number - digit)\n    return roman_numeral.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Extract digits of the number\n    digits = number[0]\n\n    # Translate the digits\n    base = 'iiv'\n    quotient = 1\n    remainder = 0\n    for i in range(len(digits)):\n        remainder += digits[i] * quotient\n        quotient *= base[i]\n        base[i] = remainder % 10\n        remainder = remainder / 10\n\n    # Create a string with the result\n    return ''.join([str(base[i]) for i in range(len(base))]).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return ''\n    elif number < 100:\n        return number.zfill(1) +'m'\n    elif number < 1000:\n        return number.zfill(2) +'m'\n    elif number < 10000:\n        return number.zfill(3) +'m'\n    elif number < 1000000:\n        return number.zfill(4) +'m'\n    elif number < 10000000:\n        return number.zfill(5) +'m'\n    elif number < 100000000:\n        return number.zfill(6) +'m'\n    elif number < 100000000000:\n        return number.zfill(7) +'m'\n    elif number < 1000000000000:\n        return number.zfill(8) +'m'\n    elif number < 100000000000000:\n        return number.zfill(9) +'m'\n    elif number < 1000000000000000:\n        return number.zfill(10) +'m'\n    else:\n        return number.zfill(11) +'m'\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be greater than or equal to 1.\")\n\n    if number < 50:\n        if number < 20:\n            number = number + 'x'\n        elif number < 30:\n            number = number + 'i'\n        elif number < 40:\n            number = number + 'ii'\n        elif number < 50:\n            number = number + 'iii'\n        else:\n            number = number + 'iv'\n    elif number < 100:\n        if number < 20:\n            number = number + 'x'\n        elif number < 30:\n            number = number + 'i'\n        elif number < 40:\n            number = number + 'ii'\n        elif number < 50:\n            number = number + 'iii'\n        else:\n            number = number + 'iv'\n    elif number < 300:\n        if number < 20:\n            number = number + 'x'\n        elif number < 30:\n            number = number + 'i'\n        elif number < 40:\n            number = number + 'ii'\n        elif number < 50:\n            number = number + 'iii'\n        else:\n            number = number + 'iv'\n    elif number < 1000:\n        if number < 20:\n            number = number + 'x'\n        elif number < 30:\n            number = number + 'i'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive: %s\" % number)\n\n    if number < 1000:\n        return u\"%d%s\" % (number, _MINIMAL_NUMBER[number])\n\n    remainder = number % 1000\n    while remainder!= 0:\n        remainder = remainder / 100\n        number -= remainder\n\n    return \"%s%s%s\" % (number, _MINIMAL_NUMBER[number - 1], _MINIMAL_NUMBER[remainder])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    for i in range(2,10):\n        if number % i == 0:\n            return number // i + '.' + str(i)\n    else:\n        return number + ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 1:\n        return \"\"\n    elif number <= 20:\n        return \"x\"\n    elif number <= 50:\n        return \"i\"\n    elif number <= 100:\n        return \"x\"\n    else:\n        return \"\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = number\n    if num < 1:\n        raise ValueError('Number must be at least 1')\n    num = num / 100\n    if num > 9:\n        num = num - 9\n    num = num * 10\n    num = num + 1\n    num = int(num)\n    # https://en.wikipedia.org/wiki/Roman_numbering_system#Roman_numbers\n    num = num.upper()\n    num = num.replace('M', '').replace('M', '').replace('CM', '').replace('CD', '').replace('D', '')\n    num = num.replace('CD', '').replace('CD', '').replace('CM', '').replace('M', '')\n    num = num.replace('M', '')\n    num = num.replace('M', '')\n    num = num.replace('CM', '').replace('CM', '').replace('CD', '')\n    num = num.replace('CM', '').replace('CD', '')\n    num = num.replace('CD', '').replace('CD', '').replace('CM', '')\n    num = num.", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # the floor() is required to avoid overflow\n    num = int(number)\n    return ''.join([\n        int_to_mini_roman(num % 10) + int_to_mini_roman(num // 10)\n    ])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 1:\n        return 'x'\n    elif number < 10:\n        return chr(number)\n    else:\n        return chr(number - 10)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = []\n    while number > 0:\n        roman.append(string_to_roman(number % 10))\n        number = number // 10\n    return''.join(roman)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = [\n        'Ace', 'Dos', 'Tris', 'Cuatros', 'Cincos', 'Sextos', 'Sietos', 'Octaos',\n        'Nonaos', 'Decimos', 'Und\u00e9cimos', 'Duod\u00e9cimos', 'Trig\u00e9simos', 'Quadrag\u00e9simos',\n        'Cincuag\u00e9simos', 'Sesquag\u00e9simos', 'Setenta', 'Noventa', 'Centos', 'Mil'\n    ]\n    roman_numeral = ''.join(roman_numeral[number:])\n    roman_numeral = roman_numeral.lower()\n    roman_numeral = roman_numeral.replace(' ', '')\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert 1 <= number <= 1000\n    roman = ''\n    while number > 0:\n        roman += chr(math.floor((number - 1) / 100))\n        number -= int(math.floor((number - 1) / 10))\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('wrong number of arguments: %s' % str(number))\n\n    number = int(number)\n\n    if number < 101:\n        result = str(number)\n    elif number < 100:\n        result = str(number) + '.'\n    elif number < 999:\n        result = str(number) + ','\n    else:\n        result = str(number) + '.' + str(number)\n\n    result = result.lower()\n\n    # Get rid of last dot\n    result = result[:-1]\n\n    return result\n</s>"]]