[["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number == 1:\n        return \"i\"\n    if number == 2:\n        return \"ii\"\n    if number == 3:\n        return \"iii\"\n    if number == 4:\n        return \"iv\"\n    if number == 5:\n        return \"v\"\n    if number == 6:\n        return \"vi\"\n    if number == 7:\n        return \"vii\"\n    if number == 8:\n        return \"viii\"\n    if number == 9:\n        return \"ix\"\n    if number == 10:\n        return \"xix\"\n    if number == 11:\n        return \"xx\"\n    if number == 12:\n        return \"xxi\"\n    if number == 13:\n        return \"xxii\"\n    if number == 14:\n        return \"xxiii\"\n    if number == 15:\n        return \"xxiv\"\n    if number == 16:\n        return \"xxvx\"\n    if number == 17:\n        return \"xxvii\"\n    if number == 18:\n        return \"xxviii\"\n    if number == 19:\n        return \"xix\"\n    if number == 20:\n        return \"xxx\"\n    if number == 21:\n        return \"xxxi\"\n    if number == 22:\n        return \"xx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number < 100:\n        return ''.join([str(number)])\n    if number < 1000:\n        return ''.join([str(number / 100), 'i', str(number % 100)])\n    if number < 10000:\n        return ''.join([str(number / 1000), 'd', str(number % 1000)])\n    if number < 100000:\n        return ''.join([str(number / 10000),'m', str(number % 10000)])\n    if number < 1000000:\n        return ''.join([str(number / 100000), 'c', str(number % 100000)])\n    if number < 1000000000:\n        return ''.join([str(number / 1000000), 'b', str(number % 1000000)])\n    if number < 1000000000000:\n        return ''.join([str(number / 100000000), 'a', str(number % 100000000)])\n    return ''.join([str(number / 100000000000), 'p', str(number % 100000000000)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 100:\n        return 'ii'\n    if number < 1000:\n        return 'iii'\n    if number < 10000:\n        return 'iv'\n    if number < 100000:\n        return 'v'\n    if number < 1000000:\n        return 'vi'\n    if number < 10000000:\n        return 'vii'\n    if number < 100000000:\n        return 'viii'\n    if number < 1000000000:\n        return 'ix'\n    if number < 10000000000:\n        return 'x'\n    if number < 100000000000:\n        return 'xi'\n    if number < 1000000000000:\n        return 'xii'\n    if number < 100000000000000:\n        return 'xiii'\n    if number < 1000000000000000:\n        return 'xxx'\n    if number < 100000000000000000:\n        return 'xxxi'\n    if number < 1000000000000000000:\n        return 'xxxii'\n    if number < 1000000000000000000000:\n        return 'xxxiii'\n    if number < 10000000000000000000:\n        return 'xxxiv'\n    if number < 100000000000000000000:\n        return 'xxxv'\n    if number < 10000000000000000000000:\n        return 'xxxvi'\n    if number < 1000000000000000000000", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number < 100:\n        return \"i\"\n    if number < 1000:\n        return \"ii\"\n    if number < 10000:\n        return \"iii \"\n    if number < 100000:\n        return \"iv \"\n    if number < 1000000:\n        return \"v \"\n    if number < 10000000:\n        return \"vi \"\n    if number < 100000000:\n        return \"vii \"\n    if number < 1000000000:\n        return \"viii \"\n    if number < 100000000000:\n        return \"ix \"\n    if number < 1000000000000:\n        return \"x \"\n    if number < 100000000000000:\n        return \"xi \"\n    if number < 1000000000000000:\n        return \"xii \"\n    if number < 100000000000000000:\n        return \"xiii \"\n    if number < 1000000000000000000:\n        return \"xiv \"\n    if number < 1000000000000000000000:\n        return \"xv \"\n    if number < 10000000000000000000:\n        return \"xvi \"\n    if number < 100000000000000000000:\n        return \"xvii \"\n    if number < 10000000000000000000000:\n        return \"xviii \"\n    if", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return 'xxiii'\n    if number == 24:\n        return 'xxiv'\n    if number == 25:\n        return 'xx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, 1000):\n        if number % i == 0:\n            roman += str(i)\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return 'i' + int_to_mini_roman(number / 10)\n    if number < 1000:\n        return 'ii' + int_to_mini_roman(number / 100)\n    if number < 10000:\n        return 'iii' + int_to_mini_roman(number / 1000)\n    if number < 100000:\n        return 'iv' + int_to_mini_roman(number / 10000)\n    if number < 1000000:\n        return 'v' + int_to_mini_roman(number / 100000)\n    if number < 10000000:\n        return 'vi' + int_to_mini_roman(number / 1000000)\n    if number < 100000000:\n        return 'vii' + int_to_mini_roman(number / 10000000)\n    if number < 1000000000:\n        return 'viii' + int_to_mini_roman(number / 100000000)\n    if number < 10000000000:\n        return 'ix' + int_to_mini_roman(number / 1000000000)\n    if number < 1000000000000:\n        return 'x' + int_to_mini_roman(number / 10000000000)\n    if number < 100000000000000:\n        return 'xi' + int_to_mini_roman(number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, number + 1):\n        roman += str(i)\n    roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += chr(number % 10)\n        number //= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 10:\n        return 'x'\n    if number < 100:\n        return 'i'\n    if number < 1000:\n        return 'ii'\n    return 'xx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n    if number < 100:\n        return number.zfill(2) + 'i'\n    if number < 1000:\n        return number.zfill(3) + 'ii'\n    if number < 10000:\n        return number.zfill(4) + 'iii'\n    if number < 100000:\n        return number.zfill(5) + 'iv'\n    if number < 1000000:\n        return number.zfill(6) + 'v'\n    if number < 10000000:\n        return number.zfill(7) + 'vi'\n    if number < 100000000:\n        return number.zfill(8) + 'vii'\n    if number < 1000000000:\n        return number.zfill(9) + 'viii'\n    if number < 100000000000:\n        return number.zfill(10) + 'ix'\n    if number < 1000000000000:\n        return number.zfill(11) + 'x'\n    if number < 100000000000000:\n        return number.zfill(12) + 'xi'\n    if number < 1000000000000000:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return \"i\"\n    if number == 2:\n        return \"ii\"\n    if number == 3:\n        return \"iii \"\n    if number == 4:\n        return \"iv \"\n    if number == 5:\n        return \"v \"\n    if number == 6:\n        return \"vi \"\n    if number == 7:\n        return \"vii \"\n    if number == 8:\n        return \"viii \"\n    if number == 9:\n        return \"ix \"\n    if number == 10:\n        return \"x \"\n    if number == 11:\n        return \"xi \"\n    if number == 12:\n        return \"xii \"\n    if number == 13:\n        return \"xiii \"\n    if number == 14:\n        return \"xiv \"\n    if number == 15:\n        return \"xv \"\n    if number == 16:\n        return \"xvi \"\n    if number == 17:\n        return \"xvii \"\n    if number == 18:\n        return \"xviii \"\n    if number == 19:\n        return \"xix \"\n    if number == 20:\n        return \"xx \"\n    if number == 21:\n        return \"xi \"\n    if number == 22:\n        return \"xii \"\n    if number == 23:\n        return \"xiii \"\n    if number == 24:\n        return \"xiv \"\n    if number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 10:\n        return 'x'\n    if number < 100:\n        return 'i'\n    if number < 1000:\n        return 'x'\n    return 'xx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be >= 1\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'x'\n    return number.zfill(2) + 'j'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return ''\n    if number < 100:\n        return ''\n    if number < 1000:\n        return ''\n    if number < 10000:\n        return ''\n    if number < 100000:\n        return ''\n    if number < 1000000:\n        return ''\n    if number < 10000000:\n        return ''\n    if number < 100000000:\n        return ''\n    if number < 1000000000:\n        return ''\n    if number < 100000000000:\n        return ''\n    if number < 1000000000000:\n        return ''\n    if number < 100000000000000:\n        return ''\n    if number < 1000000000000000:\n        return ''\n    if number < 100000000000000000:\n        return ''\n    if number < 1000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 10000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return number.zfill(1) + 'i'\n    if number < 100:\n        return number.zfill(2) + 'ii'\n    if number < 1000:\n        return number.zfill(3) + 'iii'\n    if number < 10000:\n        return number.zfill(4) + 'iv'\n    if number < 100000:\n        return number.zfill(5) + 'v'\n    if number < 1000000:\n        return number.zfill(6) + 'vi'\n    if number < 10000000:\n        return number.zfill(7) + 'vii'\n    if number < 100000000:\n        return number.zfill(8) + 'viii'\n    if number < 1000000000:\n        return number.zfill(9) + 'ix'\n    if number < 10000000000:\n        return number.zfill(10) + 'x'\n    if number < 100000000000:\n        return number.zfill(11) + 'xi'\n    if number < 1000000000000:\n        return number.zfill(12) + 'xii'\n    if number < 100000000000000:\n        return number.zfill(13)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return str(number).zfill(2) + 'i'\n    if number < 1000:\n        return str(number).zfill(3) + 'ii'\n    if number < 10000:\n        return str(number).zfill(4) + 'iii'\n    if number < 100000:\n        return str(number).zfill(5) + 'iv'\n    if number < 1000000:\n        return str(number).zfill(6) + 'v'\n    if number < 10000000:\n        return str(number).zfill(7) + 'vi'\n    if number < 100000000:\n        return str(number).zfill(8) + 'vii'\n    if number < 1000000000:\n        return str(number).zfill(9) + 'viii'\n    if number < 100000000000:\n        return str(number).zfill(10) + 'ix'\n    if number < 1000000000000:\n        return str(number).zfill(11) + 'x'\n    if number < 100000000000000:\n        return str(number).zfill(12) + 'xi'\n    if number < 1000000000000000:\n        return str(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return number.zfill(2)\n    if number < 1000:\n        return number.zfill(3)\n    if number < 10000:\n        return number.zfill(4)\n    if number < 100000:\n        return number.zfill(5)\n    if number < 1000000:\n        return number.zfill(6)\n    if number < 10000000:\n        return number.zfill(7)\n    if number < 100000000:\n        return number.zfill(8)\n    if number < 1000000000:\n        return number.zfill(9)\n    if number < 10000000000:\n        return number.zfill(10)\n    if number < 100000000000:\n        return number.zfill(11)\n    if number < 1000000000000:\n        return number.zfill(12)\n    if number < 100000000000000:\n        return number.zfill(13)\n    if number < 1000000000000000:\n        return number.zfill(14)\n    if number < 100000000000000000:\n        return number.zfill(15)\n    if number < 1000000000000000000:\n        return number.zfill(16)\n    if number < 1000000000000000000000:\n        return number.zfill(17)\n    if number < 1", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    elif number < 100:\n        return 'ii'\n    elif number < 1000:\n        return 'iii'\n    elif number < 10000:\n        return 'iv'\n    elif number < 100000:\n        return 'v'\n    elif number < 1000000:\n        return 'vi'\n    elif number < 10000000:\n        return 'vii'\n    elif number < 100000000:\n        return 'viii'\n    elif number < 1000000000:\n        return 'ix'\n    elif number < 10000000000:\n        return 'x'\n    elif number < 100000000000:\n        return 'xi'\n    elif number < 1000000000000:\n        return 'xx'\n    elif number < 100000000000000:\n        return 'xxx'\n    else:\n        return 'xxxi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n    if number % 100 == 0:\n        return number + 'i'\n    if number % 10 == 0:\n        return number + 'ii'\n    if number % 5 == 0:\n        return number + 'iii'\n    if number % 2 == 0:\n        return number + 'iv'\n    return number + 'v'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n    if number < 100:\n        return number.zfill(2) + 'i'\n    if number < 1000:\n        return number.zfill(3) + 'ii'\n    if number < 10000:\n        return number.zfill(4) + 'iii'\n    if number < 100000:\n        return number.zfill(5) + 'iv'\n    if number < 1000000:\n        return number.zfill(6) + 'v'\n    if number < 10000000:\n        return number.zfill(7) + 'vi'\n    if number < 100000000:\n        return number.zfill(8) + 'vii'\n    if number < 1000000000:\n        return number.zfill(9) + 'viii'\n    if number < 10000000000:\n        return number.zfill(10) + 'ix'\n    if number < 100000000000:\n        return number.zfill(11) + 'x'\n    if number < 1000000000000:\n        return number.zfill(12) + 'xi'\n    if number < 100000000000000:\n        return number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 10:\n        return 'x'\n    if number < 100:\n        return 'i'\n    if number < 1000:\n        return 'x'\n    return 'xx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return number.zfill(2) + 'i'\n    if number < 1000:\n        return number.zfill(3) + 'ii'\n    if number < 10000:\n        return number.zfill(4) + 'iii'\n    if number < 100000:\n        return number.zfill(5) + 'iv'\n    if number < 1000000:\n        return number.zfill(6) + 'v'\n    if number < 10000000:\n        return number.zfill(7) + 'vi'\n    if number < 100000000:\n        return number.zfill(8) + 'vii'\n    if number < 1000000000:\n        return number.zfill(9) + 'viii'\n    if number < 100000000000:\n        return number.zfill(10) + 'ix'\n    if number < 1000000000000:\n        return number.zfill(11) + 'x'\n    if number < 100000000000000:\n        return number.zfill(12) + 'xi'\n    if number < 1000000000000000:\n        return number.zfill(13) + 'xii'\n    if number < 100000000000000000:\n        return number.", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'i'\n    if number == 3:\n        return 'v'\n    if number == 4:\n        return 'c'\n    if number == 5:\n        return 'd'\n    if number == 6:\n        return'm'\n    if number == 7:\n        return 'l'\n    if number == 8:\n        return 'x'\n    if number == 9:\n        return 'j'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'x'\n    if number == 12:\n        return 'x'\n    if number == 13:\n        return 'x'\n    if number == 14:\n        return 'x'\n    if number == 15:\n        return 'x'\n    if number == 16:\n        return 'x'\n    if number == 17:\n        return 'x'\n    if number == 18:\n        return 'x'\n    if number == 19:\n        return 'x'\n    if number == 20:\n        return 'x'\n    if number == 21:\n        return 'x'\n    if number == 22:\n        return 'x'\n    if number == 23:\n        return 'x'\n    if number == 24:\n        return 'x'\n    if number == 25:\n        return 'x'\n    if number == 26:\n        return 'x'\n    if number == 27:\n        return 'x'\n    if number == 28:\n        return 'x'\n    if number == 29:\n        return 'x'\n    if number ==", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return str(number)\n    if number < 1000:\n        return str(number) + 'i'\n    if number < 10000:\n        return str(number) + 'ii'\n    if number < 100000:\n        return str(number) + 'iii'\n    if number < 1000000:\n        return str(number) + 'iv'\n    if number < 10000000:\n        return str(number) + 'v'\n    if number < 100000000:\n        return str(number) + 'vi'\n    if number < 1000000000:\n        return str(number) + 'vii'\n    if number < 10000000000:\n        return str(number) + 'viii'\n    if number < 100000000000:\n        return str(number) + 'ix'\n    if number < 1000000000000:\n        return str(number) + 'x'\n    if number < 100000000000000:\n        return str(number) + 'xi'\n    if number < 1000000000000000:\n        return str(number) + 'xii'\n    if number < 100000000000000000:\n        return str", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be <= 1000\")\n    if number < 100:\n        return str(number)\n    if number < 1000:\n        return str(number) + 'i'\n    if number < 10000:\n        return str(number) + 'ii'\n    if number < 100000:\n        return str(number) + 'iii'\n    if number < 1000000:\n        return str(number) + 'iv'\n    if number < 10000000:\n        return str(number) + 'v'\n    if number < 100000000:\n        return str(number) + 'vi'\n    if number < 1000000000:\n        return str(number) + 'vii'\n    if number < 10000000000:\n        return str(number) + 'viii'\n    if number < 100000000000:\n        return str(number) + 'ix'\n    if number < 1000000000000:\n        return str(number) + 'x'\n    if number < 100000000000000:\n        return str(number) + 'xi'\n    if number < 1000000000000000:\n        return str(number) + 'xii'\n    if number < 100000000000000000:\n        return str(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return number.zfill(1) + 'i'\n    if number < 100:\n        return number.zfill(2) + 'ii'\n    if number < 1000:\n        return number.zfill(3) + 'iii'\n    if number < 10000:\n        return number.zfill(4) + 'iv'\n    if number < 100000:\n        return number.zfill(5) + 'v'\n    if number < 1000000:\n        return number.zfill(6) + 'vi'\n    if number < 10000000:\n        return number.zfill(7) + 'vii'\n    if number < 100000000:\n        return number.zfill(8) + 'viii'\n    if number < 1000000000:\n        return number.zfill(9) + 'ix'\n    if number < 100000000000:\n        return number.zfill(10) + 'x'\n    if number < 1000000000000:\n        return number.zfill(11) + 'xi'\n    if number < 100000000000000:\n        return number.zfill(12) + 'xii'\n    if number < 1000000000000000:\n        return number.zfill(13", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number % 100 == 0:\n        return number + \"i\"\n    if number % 10 == 0:\n        return number + \"ii\"\n    if number % 5 == 0:\n        return number + \"iii\"\n    if number % 2 == 0:\n        return number + \"iv\"\n    return number + \"vi\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'i'\n    if number == 3:\n        return 'v'\n    if number == 4:\n        return 'd'\n    if number == 5:\n        return 'c'\n    if number == 6:\n        return 'b'\n    if number == 7:\n        return 'a'\n    if number == 8:\n        return'm'\n    if number == 9:\n        return 'l'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'c'\n    if number == 12:\n        return 'b'\n    if number == 13:\n        return 'a'\n    if number == 14:\n        return'm'\n    if number == 15:\n        return 'l'\n    if number == 16:\n        return 'x'\n    if number == 17:\n        return 'c'\n    if number == 18:\n        return 'b'\n    if number == 19:\n        return 'x'\n    if number == 20:\n        return 'c'\n    if number == 21:\n        return 'b'\n    if number == 22:\n        return 'a'\n    if number == 23:\n        return'm'\n    if number == 24:\n        return 'l'\n    if number == 25:\n        return 'x'\n    if number == 26:\n        return 'c'\n    if number == 27:\n        return 'b'\n    if number == 28:\n        return 'a'\n    if number == 29:\n        return'm'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'v'\n    if number == 3:\n        return 'i'\n    if number == 4:\n        return 'ii'\n    if number == 5:\n        return 'iii'\n    if number == 6:\n        return 'iv'\n    if number == 7:\n        return 'v'\n    if number == 8:\n        return 'vi'\n    if number == 9:\n        return 'vii'\n    if number == 10:\n        return 'viii'\n    if number == 11:\n        return 'ix'\n    if number == 12:\n        return 'x'\n    if number == 13:\n        return 'xi'\n    if number == 14:\n        return 'xii'\n    if number == 15:\n        return 'xiii'\n    if number == 16:\n        return 'xiv'\n    if number == 17:\n        return 'xv'\n    if number == 18:\n        return 'xvi'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return 'xx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n    if number > 1000:\n        raise ValueError('Number must be less than or equal to 1000')\n    if number % 100 == 0:\n        return number.zfill(2) + 'xx'\n    if number % 10 == 0:\n        return number.zfill(2) + 'i'\n    if number % 100 == 0:\n        return number.zfill(2) + 'ii'\n    if number % 10 == 0:\n        return number.zfill(2) + 'iii'\n    if number % 100 == 0:\n        return number.zfill(2) + 'iv'\n    if number % 10 == 0:\n        return number.zfill(2) + 'v'\n    if number % 100 == 0:\n        return number.zfill(2) + 'vi'\n    if number % 10 == 0:\n        return number.zfill(2) + 'vii'\n    if number % 100 == 0:\n        return number.zfill(2) + 'viii'\n    if number % 10 == 0:\n        return number.zfill(2) + 'ix'\n    if number % 100 == 0:\n        return number.zfill(2) + 'x", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'x'\n    return number.zfill(2) + 'j'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero.')\n    if number > 1000:\n        raise ValueError('Number must be less than or equal to 1000.')\n    if number < 100:\n        return number.zfill(2)\n    if number < 1000:\n        return number.zfill(3)\n    if number < 10000:\n        return number.zfill(4)\n    if number < 100000:\n        return number.zfill(5)\n    if number < 1000000:\n        return number.zfill(6)\n    if number < 10000000:\n        return number.zfill(7)\n    if number < 100000000:\n        return number.zfill(8)\n    if number < 1000000000:\n        return number.zfill(9)\n    if number < 10000000000:\n        return number.zfill(10)\n    if number < 100000000000:\n        return number.zfill(11)\n    if number < 1000000000000:\n        return number.zfill(12)\n    if number < 100000000000000:\n        return number.zfill(13)\n    if number < 1000000000000000:\n        return number.zfill(14)\n    if number < 100000000000000000:\n        return number.zfill(15)\n    if number < 1", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be a positive integer\")\n    if number == 1:\n        return \"i\"\n    if number == 2:\n        return \"ii\"\n    if number == 3:\n        return \"iii \"\n    if number == 4:\n        return \"iv \"\n    if number == 5:\n        return \"v \"\n    if number == 6:\n        return \"vi \"\n    if number == 7:\n        return \"vii \"\n    if number == 8:\n        return \"viii \"\n    if number == 9:\n        return \"ix \"\n    if number == 10:\n        return \"x \"\n    if number == 11:\n        return \"xi \"\n    if number == 12:\n        return \"xii \"\n    if number == 13:\n        return \"xiii \"\n    if number == 14:\n        return \"xiv \"\n    if number == 15:\n        return \"xv \"\n    if number == 16:\n        return \"xvi \"\n    if number == 17:\n        return \"xvii \"\n    if number == 18:\n        return \"xviii \"\n    if number == 19:\n        return \"xix \"\n    if number == 20:\n        return \"xx \"\n    if number == 21:\n        return \"xxi \"\n    if number == 22:\n        return \"xxii \"\n    if number == 23:\n        return \"xxiii \"\n    if number == 24:\n        return \"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be >= 1\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number % 100 == 0:\n        return \"i\" + int_to_mini_roman(number // 100)\n    elif number % 10 == 0:\n        return \"x\" + int_to_mini_roman(number // 10)\n    elif number % 10 == 1:\n        return \"c\" + int_to_mini_roman(number // 10)\n    else:\n        return int_to_mini_roman(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += chr(number % 10)\n        number /= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number < 100:\n        return \"i\" + int_to_mini_roman(number / 10)\n    if number < 1000:\n        return \"x\" + int_to_mini_roman(number / 100)\n    if number < 10000:\n        return \"c\" + int_to_mini_roman(number / 1000)\n    if number < 100000:\n        return \"d\" + int_to_mini_roman(number / 10000)\n    if number < 1000000:\n        return \"e\" + int_to_mini_roman(number / 100000)\n    if number < 10000000:\n        return \"f\" + int_to_mini_roman(number / 1000000)\n    if number < 100000000:\n        return \"g\" + int_to_mini_roman(number / 10000000)\n    if number < 1000000000:\n        return \"h\" + int_to_mini_roman(number / 100000000)\n    if number < 10000000000:\n        return \"i\" + int_to_mini_roman(number / 100000000)\n    if number < 1000000000000:\n        return \"j\" + int_to_mini_roman(number / 100000000000)\n    if number < 1", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return ''\n    if number < 10:\n        return '0' + str(number)\n    return ''.join([str(number / 10) + int_to_mini_roman(number % 10)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'x'\n    if number % 10 == 1:\n        return number.zfill(2) + 'c'\n    if number % 10 == 2:\n        return number.zfill(2) + 'd'\n    if number % 10 == 3:\n        return number.zfill(2) + 'e'\n    if number % 10 == 4:\n        return number.zfill(2) + 'f'\n    if number % 10 == 5:\n        return number.zfill(2) + 'g'\n    if number % 10 == 6:\n        return number.zfill(2) + 'h'\n    if number % 10 == 7:\n        return number.zfill(2) + 'j'\n    if number % 10 == 8:\n        return number.zfill(2) + 'k'\n    if number % 10 == 9:\n        return number.zfill(2) + 'l'\n    if number % 100 == 0:\n        return number.zfill(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return number.zfill(2) + 'i'\n    if number < 1000:\n        return number.zfill(3) + 'ii'\n    if number < 10000:\n        return number.zfill(4) + 'iii'\n    if number < 100000:\n        return number.zfill(5) + 'iv'\n    if number < 1000000:\n        return number.zfill(6) + 'v'\n    if number < 10000000:\n        return number.zfill(7) + 'vi'\n    if number < 100000000:\n        return number.zfill(8) + 'vii'\n    if number < 1000000000:\n        return number.zfill(9) + 'viii'\n    if number < 100000000000:\n        return number.zfill(10) + 'ix'\n    if number < 1000000000000:\n        return number.zfill(11) + 'x'\n    if number < 100000000000000:\n        return number.zfill(12) + 'xi'\n    if number < 1000000000000000:\n        return number.zfill(13) + 'xii'\n    if number < 100000000000000000:\n        return number.", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, 1000):\n        if number % i == 0:\n            roman += str(i)\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'x'\n    if number % 100 == 10:\n        return number.zfill(2) + 'c'\n    if number % 10 == 10:\n        return number.zfill(2) + 'd'\n    return number.zfill(2) + 'l'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return 'i' + int_to_mini_roman(number // 10)\n    if number < 1000:\n        return 'ii' + int_to_mini_roman(number // 100)\n    if number < 10000:\n        return 'iii' + int_to_mini_roman(number // 1000)\n    if number < 100000:\n        return 'iv' + int_to_mini_roman(number // 10000)\n    if number < 1000000:\n        return 'v' + int_to_mini_roman(number // 100000)\n    if number < 10000000:\n        return 'vi' + int_to_mini_roman(number // 1000000)\n    if number < 100000000:\n        return 'vii' + int_to_mini_roman(number // 10000000)\n    if number < 1000000000:\n        return 'viii' + int_to_mini_roman(number // 100000000)\n    if number < 10000000000:\n        return 'ix' + int_to_mini_roman(number // 1000000000)\n    if number < 1000000000000:\n        return 'x' + int_to_mini_roman(number // 10000000000)\n    if number < 100000000000000:\n        return 'xi' + int_to_mini_roman(number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return number.zfill(2) + 'i'\n    if number < 1000:\n        return number.zfill(3) + 'ii'\n    if number < 10000:\n        return number.zfill(4) + 'iii'\n    if number < 100000:\n        return number.zfill(5) + 'iv'\n    if number < 1000000:\n        return number.zfill(6) + 'v'\n    if number < 10000000:\n        return number.zfill(7) + 'vi'\n    if number < 100000000:\n        return number.zfill(8) + 'vii'\n    if number < 1000000000:\n        return number.zfill(9) + 'viii'\n    if number < 100000000000:\n        return number.zfill(10) + 'ix'\n    if number < 1000000000000:\n        return number.zfill(11) + 'x'\n    if number < 100000000000000:\n        return number.zfill(12) + 'xi'\n    if number < 1000000000000000:\n        return number.zfill(13) + 'xii'\n    if number < 100000000000000000:\n        return number.", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be >= 1\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number < 100:\n        return str(number)\n    if number < 1000:\n        return str(number) + 'i'\n    if number < 10000:\n        return str(number) + 'ii'\n    if number < 100000:\n        return str(number) + 'iii'\n    if number < 1000000:\n        return str(number) + 'iv'\n    if number < 10000000:\n        return str(number) + 'v'\n    if number < 100000000:\n        return str(number) + 'vi'\n    if number < 1000000000:\n        return str(number) + 'vii'\n    if number < 10000000000:\n        return str(number) + 'viii'\n    if number < 100000000000:\n        return str(number) + 'ix'\n    if number < 1000000000000:\n        return str(number) + 'x'\n    if number < 100000000000000:\n        return str(number) + 'xi'\n    if number < 1000000000000000:\n        return str(number) + 'xii'\n    if number < 100000000000000000:\n        return str(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return str(number)\n    if number < 1000:\n        return str(number) + 'i'\n    if number < 10000:\n        return str(number) + 'ii'\n    if number < 100000:\n        return str(number) + 'iii'\n    if number < 1000000:\n        return str(number) + 'iv'\n    if number < 10000000:\n        return str(number) + 'v'\n    if number < 100000000:\n        return str(number) + 'vi'\n    if number < 1000000000:\n        return str(number) + 'vii'\n    if number < 10000000000:\n        return str(number) + 'viii'\n    if number < 100000000000:\n        return str(number) + 'ix'\n    if number < 1000000000000:\n        return str(number) + 'x'\n    if number < 100000000000000:\n        return str(number) + 'xi'\n    if number < 1000000000000000:\n        return str(number) + 'xii'\n    if number < 100000000000000000:\n        return str", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be >= 1\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'x'\n    if number % 10 == 1:\n        return number.zfill(2) + 'c'\n    if number % 10 == 2:\n        return number.zfill(2) + 'd'\n    if number % 10 == 3:\n        return number.zfill(2) + 'e'\n    if number % 10 == 4:\n        return number.zfill(2) + 'f'\n    if number % 10 == 5:\n        return number.zfill(2) + 'g'\n    if number % 10 == 6:\n        return number.zfill(2) + 'h'\n    if number % 10 == 7:\n        return number.zfill(2) + 'j'\n    if number % 10 == 8:\n        return number.zfill(2) + 'k'\n    if number % 10 == 9:\n        return number.zfill(2) + 'l'\n    if number % 100 == 0:\n        return number.zfill(2) +", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'ii'\n    if number % 10 == 1:\n        return number.zfill(2) + 'iii'\n    if number % 10 == 2:\n        return number.zfill(2) + 'iv'\n    if number % 10 == 3:\n        return number.zfill(2) + 'v'\n    if number % 10 == 4:\n        return number.zfill(2) + 'vi'\n    if number % 10 == 5:\n        return number.zfill(2) + 'vii'\n    if number % 10 == 6:\n        return number.zfill(2) + 'viii'\n    if number % 10 == 7:\n        return number.zfill(2) + 'ix'\n    if number % 10 == 8:\n        return number.zfill(2) + 'x'\n    if number % 10 == 9:\n        return number.zfill(2) + 'xi'\n    if number % 10 == 10:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return 'i'\n    if number < 100:\n        return 'x'\n    if number < 1000:\n        return 'c'\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'ii'\n    if number % 100 == 10:\n        return number.zfill(2) + 'iii'\n    if number % 100 == 20:\n        return number.zfill(2) + 'iv'\n    if number % 100 == 30:\n        return number.zfill(2) + 'v'\n    if number % 100 == 40:\n        return number.zfill(2) + 'vi'\n    if number % 100 == 50:\n        return number.zfill(2) + 'vii'\n    if number % 100 == 60:\n        return number.zfill(2) + 'viii'\n    if number % 100 == 70:\n        return number.zfill(2) + 'ix'\n    if number % 100 == 80:\n        return number.zfill(2) + 'x'\n    if number % 100 == 90:\n        return number.zfill(2) + 'xi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be >= 1\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number == 1:\n        return \"i\"\n    if number == 2:\n        return \"ii\"\n    if number == 3:\n        return \"iii \"\n    if number == 4:\n        return \"iv \"\n    if number == 5:\n        return \"v \"\n    if number == 6:\n        return \"vi \"\n    if number == 7:\n        return \"vii \"\n    if number == 8:\n        return \"viii \"\n    if number == 9:\n        return \"ix \"\n    if number == 10:\n        return \"x \"\n    if number == 11:\n        return \"xi \"\n    if number == 12:\n        return \"xii \"\n    if number == 13:\n        return \"xiii \"\n    if number == 14:\n        return \"xiv \"\n    if number == 15:\n        return \"xv \"\n    if number == 16:\n        return \"xvi \"\n    if number == 17:\n        return \"xvii \"\n    if number == 18:\n        return \"xviii \"\n    if number == 19:\n        return \"xix \"\n    if number == 20:\n        return \"xx \"\n    if number == 21:\n        return \"xxi \"\n    if number == 22:\n        return \"xxii \"\n    if number == 23:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number < 100:\n        return number.zfill(2) + 'i'\n    if number < 1000:\n        return number.zfill(3) + 'ii'\n    if number < 10000:\n        return number.zfill(4) + 'iii'\n    if number < 100000:\n        return number.zfill(5) + 'iv'\n    if number < 1000000:\n        return number.zfill(6) + 'v'\n    if number < 10000000:\n        return number.zfill(7) + 'vi'\n    if number < 100000000:\n        return number.zfill(8) + 'vii'\n    if number < 1000000000:\n        return number.zfill(9) + 'viii'\n    if number < 100000000000:\n        return number.zfill(10) + 'ix'\n    if number < 1000000000000:\n        return number.zfill(11) + 'x'\n    if number < 100000000000000:\n        return number.zfill(12) + 'xi'\n    if number < 1000000000000000:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n    if number < 100:\n        return ''.join([str(number)])\n    if number < 1000:\n        return ''.join([str(number / 100), '.', str(number % 100)])\n    if number < 10000:\n        return ''.join([str(number / 1000), '.', str(number % 1000)])\n    if number < 100000:\n        return ''.join([str(number / 1000000), '.', str(number % 1000000)])\n    if number < 1000000:\n        return ''.join([str(number / 10000000), '.', str(number % 10000000)])\n    if number < 10000000000:\n        return ''.join([str(number / 100000000), '.', str(number % 100000000)])\n    if number < 1000000000000:\n        return ''.join([str(number / 100000000000), '.', str(number % 100000000000)])\n    if number < 100000000000000:\n        return ''.join([", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return '10'\n    if number == 11:\n        return '11'\n    if number == 12:\n        return '12'\n    if number == 13:\n        return '13'\n    if number == 14:\n        return '14'\n    if number == 15:\n        return '15'\n    if number == 16:\n        return '16'\n    if number == 17:\n        return '17'\n    if number == 18:\n        return '18'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xi'\n    if number == 22:\n        return 'xii'\n    if number == 23:\n        return 'xiii'\n    if number == 24:\n        return 'xiv'\n    if number == 25:\n        return 'xv'\n    if number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xx'\n    if number == 13:\n        return 'xxi'\n    if number == 14:\n        return 'xxx'\n    if number == 15:\n        return 'xxxi'\n    if number == 16:\n        return 'xxxii'\n    if number == 17:\n        return 'xxxiii'\n    if number == 18:\n        return 'xxxiv'\n    if number == 19:\n        return 'xxxv'\n    if number == 20:\n        return 'xxvi'\n    if number == 21:\n        return 'xxvii'\n    if number == 22:\n        return 'xxviii'\n    if number == 23:\n        return 'xxix'\n    if number == 24", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return ''.join([str(number)])\n    if number < 1000:\n        return ''.join([str(number / 100), '.', str(number % 100)])\n    return ''.join([str(number / 1000), '.', str(number % 1000)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return 'xxiii'\n    if number == 24:\n        return 'xxiv'\n    if number == 25:\n        return 'xx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return ''\n    if number < 100:\n        return ''\n    if number < 1000:\n        return ''\n    if number < 10000:\n        return ''\n    if number < 100000:\n        return ''\n    if number < 1000000:\n        return ''\n    if number < 10000000:\n        return ''\n    if number < 100000000:\n        return ''\n    if number < 1000000000:\n        return ''\n    if number < 10000000000:\n        return ''\n    if number < 100000000000:\n        return ''\n    if number < 1000000000000:\n        return ''\n    if number < 100000000000000:\n        return ''\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = []\n    for i in range(1, number + 1):\n        roman.append(str(i))\n    roman =''.join(roman)\n    roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 100:\n        return 'x' + int_to_mini_roman(number // 10)\n    if number < 1000:\n        return 'l' + int_to_mini_roman(number // 100)\n    if number < 10000:\n        return 'c' + int_to_mini_roman(number // 1000)\n    if number < 100000:\n        return 'd' + int_to_mini_roman(number // 10000)\n    if number < 1000000:\n        return 'e' + int_to_mini_roman(number // 100000)\n    if number < 10000000:\n        return 'f' + int_to_mini_roman(number // 1000000)\n    if number < 100000000:\n        return 'g' + int_to_mini_roman(number // 10000000)\n    if number < 100000000000:\n        return 'h' + int_to_mini_roman(number // 100000000)\n    if number < 1000000000000:\n        return 'j' + int_to_mini_roman(number // 100000000000)\n    if number < 100000000000000:\n        return 'k' + int_to_mini_roman(number // 1000000000000)\n    if number < 1000000000000000:\n        return 'l' + int_to_mini_roman(number // 100000000000000", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number < 100:\n        return \"i\"\n    if number < 1000:\n        return \"x\"\n    if number < 10000:\n        return \"c\"\n    if number < 100000:\n        return \"d\"\n    if number < 1000000:\n        return \"e\"\n    if number < 10000000:\n        return \"f\"\n    if number < 100000000:\n        return \"g\"\n    if number < 1000000000:\n        return \"h\"\n    if number < 100000000000:\n        return \"i\"\n    if number < 1000000000000:\n        return \"j\"\n    if number < 100000000000000:\n        return \"k\"\n    if number < 1000000000000000:\n        return \"l\"\n    if number < 100000000000000000:\n        return \"m\"\n    if number < 1000000000000000000:\n        return \"n\"\n    if number < 1000000000000000000000:\n        return \"o\"\n    if number < 1000000000000000000000:\n        return \"p\"\n    if number < 1000000000000000000000:\n        return \"q\"\n    if number < 1000000000000000000000:\n        return \"r\"\n    if number < 1000000000000000000000:\n        return \"s\"\n    if number < 1000000000000000000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += chr(ord('a') + (number % 10))\n        number /= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return str(number) + 'i'\n    if number < 1000:\n        return str(number) + 'ii'\n    if number < 10000:\n        return str(number) + 'iii'\n    if number < 100000:\n        return str(number) + 'iv'\n    if number < 1000000:\n        return str(number) + 'v'\n    if number < 10000000:\n        return str(number) + 'vi'\n    if number < 100000000:\n        return str(number) + 'vii'\n    if number < 1000000000:\n        return str(number) + 'viii'\n    if number < 100000000000:\n        return str(number) + 'ix'\n    if number < 1000000000000:\n        return str(number) + 'x'\n    if number < 100000000000000:\n        return str(number) + 'xi'\n    if number < 1000000000000000:\n        return str(number) + 'xii'\n    if number < 100000000000000000:\n        return str(number) + 'xiii'\n    if number < 1000000000000000000:\n        return str(number) + 'xiv'\n    if number < 1000000000000000000000:\n        return str", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 100:\n        return str(number)\n    if number < 1000:\n        return str(number / 100) + 'x' + str(number % 100)\n    if number < 10000:\n        return str(number / 1000) + 'xx' + str(number % 1000)\n    if number < 100000:\n        return str(number / 10000) + 'xxx' + str(number % 10000)\n    if number < 1000000:\n        return str(number / 100000) + 'xlii' + str(number % 100000)\n    if number < 10000000:\n        return str(number / 1000000) + 'clxxxii' + str(number % 1000000)\n    if number < 100000000:\n        return str(number / 10000000) + 'cdxxvii' + str(number % 10000000)\n    if number < 100000000000:\n        return str(number / 100000000) + 'cdxxxviii' + str(number % 100000000)\n    if number < 1000000000000:\n        return str(number / 100000000000) + 'cdxxxix' + str(number % 100000000000)\n    if number < 100000000000000:\n        return str(number / 1000000000000) + 'cdxxxi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be less than 1000\")\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'x'\n    if number % 10 == 1:\n        return number.zfill(2) + 'c'\n    if number % 10 == 2:\n        return number.zfill(2) + 'd'\n    if number % 10 == 3:\n        return number.zfill(2) +'m'\n    if number % 10 == 4:\n        return number.zfill(2) + 'l'\n    if number % 10 == 5:\n        return number.zfill(2) + 'x'\n    if number % 10 == 6:\n        return number.zfill(2) + 'c'\n    if number % 10 == 7:\n        return number.zfill(2) + 'd'\n    if number % 10 == 8:\n        return number.zfill(2) +'m'\n    if number % 10 == 9:\n        return number.zfill(2) + 'l'\n    if number % 10 == 10:\n        return number.zfill(2) + 'x'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return ''\n    if number < 100:\n        return ''\n    if number < 1000:\n        return ''\n    if number < 10000:\n        return ''\n    if number < 100000:\n        return ''\n    if number < 1000000:\n        return ''\n    if number < 10000000:\n        return ''\n    if number < 100000000:\n        return ''\n    if number < 1000000000:\n        return ''\n    if number < 10000000000:\n        return ''\n    if number < 100000000000:\n        return ''\n    if number < 1000000000000:\n        return ''\n    if number < 100000000000000:\n        return ''\n    return ''.join([chr(i) for i in range(number)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return ''.join([str(number)])\n    if number < 1000:\n        return ''.join([str(number / 100), '.', str(number % 100)])\n    if number < 10000:\n        return ''.join([str(number / 1000), '.', str(number % 1000)])\n    if number < 100000:\n        return ''.join([str(number / 10000), '.', str(number % 10000)])\n    if number < 1000000:\n        return ''.join([str(number / 100000), '.', str(number % 100000)])\n    if number < 10000000:\n        return ''.join([str(number / 1000000), '.', str(number % 1000000)])\n    if number < 100000000:\n        return ''.join([str(number / 10000000), '.', str(number % 10000000)])\n    if number < 1000000000000:\n        return ''.join([str(number / 100000000), '.', str(number % 100000000)])\n    if number < 100000000000000:\n        return ''.", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 10:\n        return 'x'\n    if number < 100:\n        return 'c'\n    if number < 1000:\n        return 'd'\n    return 'xx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'x'\n    if number % 10 == 1:\n        return number.zfill(2) + 'c'\n    if number % 10 == 2:\n        return number.zfill(2) + 'd'\n    if number % 10 == 3:\n        return number.zfill(2) + 'e'\n    if number % 10 == 4:\n        return number.zfill(2) + 'f'\n    if number % 10 == 5:\n        return number.zfill(2) + 'g'\n    if number % 10 == 6:\n        return number.zfill(2) + 'h'\n    if number % 10 == 7:\n        return number.zfill(2) + 'j'\n    if number % 10 == 8:\n        return number.zfill(2) + 'k'\n    if number % 10 == 9:\n        return number.zfill(2) + 'l'\n    if number % 100 == 0:\n        return number.zfill(2) +", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'ixx'\n    if number == 20:\n        return 'xxi'\n    if number == 21:\n        return 'xxii'\n    if number == 22:\n        return 'xxiii'\n    if number == 23:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number < 100:\n        return \"i\" + str(number)\n    if number < 1000:\n        return \"x\" + str(number / 100)\n    if number < 10000:\n        return \"c\" + str(number / 1000)\n    if number < 100000:\n        return \"d\" + str(number / 10000)\n    if number < 1000000:\n        return \"e\" + str(number / 100000)\n    if number < 10000000:\n        return \"f\" + str(number / 1000000)\n    if number < 100000000:\n        return \"g\" + str(number / 10000000)\n    if number < 1000000000000:\n        return \"h\" + str(number / 100000000)\n    if number < 100000000000000:\n        return \"i\" + str(number / 1000000000000)\n    if number < 1000000000000000:\n        return \"j\" + str(number / 100000000000000)\n    if number < 1000000000000000000:\n        return \"k\" + str(number / 1000000000000000)\n    if number < 10000000000000000000:\n        return \"l\" + str(number / 10000000000000000)\n    if number < 1000000000000000000000:\n        return \"m\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'x'\n    return number.zfill(2) + 'j'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 100:\n        return number + 'i'\n    if number < 1000:\n        return number + 'ii'\n    if number < 10000:\n        return number + 'iii'\n    if number < 100000:\n        return number + 'iv'\n    if number < 1000000:\n        return number + 'v'\n    if number < 10000000:\n        return number + 'vi'\n    if number < 100000000:\n        return number + 'vii'\n    if number < 1000000000:\n        return number + 'viii'\n    if number < 100000000000:\n        return number + 'ix'\n    if number < 1000000000000:\n        return number + 'x'\n    if number < 100000000000000:\n        return number + 'xi'\n    if number < 1000000000000000:\n        return number + 'xii'\n    if number < 100000000000000000:\n        return number + 'xiii'\n    if number < 1000000000000000000:\n        return number + 'xiv'\n    if number < 1000000000000000000000:\n        return number + 'xv'\n    if number < 1000000000000000000000:\n        return number + 'xvi'\n    if number < 1000000000000000000000:\n        return number + 'xvii'\n    if number < 1000000000000000000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += str(number % 10)\n        number /= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'i'\n    if number == 3:\n        return 'v'\n    if number == 4:\n        return 'c'\n    if number == 5:\n        return 'd'\n    if number == 6:\n        return'm'\n    if number == 7:\n        return 'l'\n    if number == 8:\n        return 'x'\n    if number == 9:\n        return 'j'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'x'\n    if number == 12:\n        return 'x'\n    if number == 13:\n        return 'x'\n    if number == 14:\n        return 'x'\n    if number == 15:\n        return 'x'\n    if number == 16:\n        return 'x'\n    if number == 17:\n        return 'x'\n    if number == 18:\n        return 'x'\n    if number == 19:\n        return 'x'\n    if number == 20:\n        return 'x'\n    if number == 21:\n        return 'x'\n    if number == 22:\n        return 'x'\n    if number == 23:\n        return 'x'\n    if number == 24:\n        return 'x'\n    if number == 25:\n        return 'x'\n    if number == 26:\n        return 'x'\n    if number == 27:\n        return 'x'\n    if number == 28:\n        return 'x'\n    if number == 29:\n        return 'x'\n    if number ==", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return ''\n    if number < 100:\n        return ''\n    if number < 1000:\n        return ''\n    if number < 10000:\n        return ''\n    if number < 100000:\n        return ''\n    if number < 1000000:\n        return ''\n    if number < 10000000:\n        return ''\n    if number < 100000000:\n        return ''\n    if number < 1000000000:\n        return ''\n    if number < 100000000000:\n        return ''\n    if number < 1000000000000:\n        return ''\n    if number < 100000000000000:\n        return ''\n    if number < 1000000000000000:\n        return ''\n    if number < 100000000000000000:\n        return ''\n    if number < 1000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 10000000000000000000000:\n        return ''\n    if number < 1000000000000000000000000:\n        return ''\n    if number < 10000000000000000000000000:\n        return ''\n    if number < 1000000000000000000000000000:\n        return ''\n    if number < 10000000000000000000000000000:\n        return ''\n    if number < 10000000000000000000000000000000:\n        return ''\n    if", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return '10'\n    if number == 11:\n        return '11'\n    if number == 12:\n        return '12'\n    if number == 13:\n        return '13'\n    if number == 14:\n        return '14'\n    if number == 15:\n        return '15'\n    if number == 16:\n        return '16'\n    if number == 17:\n        return '17'\n    if number == 18:\n        return '18'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xi'\n    if number == 22:\n        return 'xii'\n    if number == 23:\n        return 'xiii'\n    if number == 24:\n        return 'xiv'\n    if number == 25:\n        return 'xv'\n    if number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be greater than zero\")\n    if number > 1000:\n        raise ValueError(\"number must be less than 1000\")\n    if number < 100:\n        return number.zfill(2)\n    if number < 1000:\n        return number.zfill(3)\n    if number < 10000:\n        return number.zfill(4)\n    if number < 100000:\n        return number.zfill(5)\n    if number < 1000000:\n        return number.zfill(6)\n    if number < 10000000:\n        return number.zfill(7)\n    if number < 100000000:\n        return number.zfill(8)\n    if number < 1000000000:\n        return number.zfill(9)\n    if number < 100000000000:\n        return number.zfill(10)\n    if number < 1000000000000:\n        return number.zfill(11)\n    if number < 100000000000000:\n        return number.zfill(12)\n    if number < 1000000000000000:\n        return number.zfill(13)\n    if number < 100000000000000000:\n        return number.zfill(14)\n    if number < 1000000000000000000:\n        return number.zfill(15)\n    if number < 100000000000000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return ''\n    if number < 10:\n        return '0' + number\n    return ''.join([chr(ord('0') + i) for i in range(number)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'ii'\n    if number % 100 < 10:\n        return number.zfill(2) + 'iii'\n    if number % 100 >= 10:\n        return number.zfill(2) + 'iv'\n    if number % 100 >= 100:\n        return number.zfill(2) + 'v'\n    if number % 100 >= 1000:\n        return number.zfill(2) + 'vi'\n    if number % 100 >= 10000:\n        return number.zfill(2) + 'vii'\n    if number % 100 >= 100000:\n        return number.zfill(2) + 'viii'\n    if number % 100 >= 1000000:\n        return number.zfill(2) + 'ix'\n    if number % 100 >= 10000000:\n        return number.zfill(2) + 'x'\n    if number % 100 >= 100000000:\n        return number.zfill(2) + '", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 100:\n        return str(number)\n    if number < 1000:\n        return str(number) + 'i'\n    if number < 10000:\n        return str(number) + 'ii'\n    if number < 100000:\n        return str(number) + 'iii'\n    if number < 1000000:\n        return str(number) + 'iv'\n    if number < 10000000:\n        return str(number) + 'v'\n    if number < 100000000:\n        return str(number) + 'vi'\n    if number < 1000000000:\n        return str(number) + 'vii'\n    if number < 10000000000:\n        return str(number) + 'viii'\n    if number < 100000000000:\n        return str(number) + 'ix'\n    if number < 1000000000000:\n        return str(number) + 'x'\n    if number < 100000000000000:\n        return str(number) + 'xi'\n    if number < 1000000000000000:\n        return str(number) + 'xii'\n    if number < 100000000000000000:\n        return str(number) + 'xiii'\n    if number < 1000000000000000000:\n        return str(number) + 'xiv", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'v'\n    if number == 3:\n        return 'c'\n    if number == 4:\n        return 'x'\n    if number == 5:\n        return 'l'\n    if number == 6:\n        return 'd'\n    if number == 7:\n        return'm'\n    if number == 8:\n        return 'x'\n    if number == 9:\n        return 'j'\n    if number == 10:\n        return 'z'\n    if number == 11:\n        return 'x'\n    if number == 12:\n        return 'c'\n    if number == 13:\n        return'm'\n    if number == 14:\n        return 'l'\n    if number == 15:\n        return 'd'\n    if number == 16:\n        return 'x'\n    if number == 17:\n        return 'j'\n    if number == 18:\n        return 'z'\n    if number == 19:\n        return 'x'\n    if number == 20:\n        return 'i'\n    if number == 21:\n        return 'v'\n    if number == 22:\n        return 'c'\n    if number == 23:\n        return'm'\n    if number == 24:\n        return 'l'\n    if number == 25:\n        return 'd'\n    if number == 26", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'v'\n    if number == 3:\n        return 'd'\n    if number == 4:\n        return 'c'\n    if number == 5:\n        return 'b'\n    if number == 6:\n        return 'a'\n    if number == 7:\n        return'm'\n    if number == 8:\n        return 'l'\n    if number == 9:\n        return 'x'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'x'\n    if number == 12:\n        return 'x'\n    if number == 13:\n        return 'x'\n    if number == 14:\n        return 'x'\n    if number == 15:\n        return 'x'\n    if number == 16:\n        return 'x'\n    if number == 17:\n        return 'x'\n    if number == 18:\n        return 'x'\n    if number == 19:\n        return 'x'\n    if number == 20:\n        return 'x'\n    if number == 21:\n        return 'x'\n    if number == 22:\n        return 'x'\n    if number == 23:\n        return 'x'\n    if number == 24:\n        return 'x'\n    if number == 25:\n        return 'x'\n    if number == 26:\n        return 'x'\n    if number == 27:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return 'xxiii'\n    if number == 24:\n        return 'xxiv'\n    if number == 25:\n        return 'xx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return number.zfill(1) + 'i'\n    if number < 100:\n        return number.zfill(2) + 'ii'\n    if number < 1000:\n        return number.zfill(3) + 'iii'\n    if number < 10000:\n        return number.zfill(4) + 'iv'\n    if number < 100000:\n        return number.zfill(5) + 'v'\n    if number < 1000000:\n        return number.zfill(6) + 'vi'\n    if number < 10000000:\n        return number.zfill(7) + 'vii'\n    if number < 100000000:\n        return number.zfill(8) + 'viii'\n    if number < 1000000000:\n        return number.zfill(9) + 'ix'\n    if number < 10000000000:\n        return number.zfill(10) + 'x'\n    if number < 100000000000:\n        return number.zfill(11) + 'xi'\n    if number < 1000000000000:\n        return number.zfill(12) + 'xii'\n    if number < 100000000000000:\n        return number.zfill(13)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero.')\n    if number == 1:\n        return 'i'\n    if number < 10:\n        return str(number)\n    if number < 100:\n        return str(number) + 'i'\n    if number < 1000:\n        return str(number) + 'ii'\n    if number < 10000:\n        return str(number) + 'iii'\n    if number < 100000:\n        return str(number) + 'iv'\n    if number < 1000000:\n        return str(number) + 'v'\n    if number < 10000000:\n        return str(number) + 'vi'\n    if number < 100000000:\n        return str(number) + 'vii'\n    if number < 1000000000:\n        return str(number) + 'viii'\n    if number < 100000000000:\n        return str(number) + 'ix'\n    if number < 1000000000000:\n        return str(number) + 'x'\n    if number < 100000000000000:\n        return str(number) + 'xi'\n    if number < 1000000000000000:\n        return str(number) + 'xii'\n    if number < 100000000000000000:\n        return str(number) + 'xiii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number < 100:\n        return number.zfill(2) + \"i\"\n    if number < 1000:\n        return number.zfill(3) + \"ii\"\n    if number < 10000:\n        return number.zfill(4) + \"iii \"\n    if number < 100000:\n        return number.zfill(5) + \"iv \"\n    if number < 1000000:\n        return number.zfill(6) + \"v \"\n    if number < 10000000:\n        return number.zfill(7) + \"vi \"\n    if number < 100000000:\n        return number.zfill(8) + \"vii \"\n    if number < 1000000000:\n        return number.zfill(9) + \"viii \"\n    if number < 100000000000:\n        return number.zfill(10) + \"ix \"\n    if number < 1000000000000:\n        return number.zfill(11) + \"x \"\n    if number < 100000000000000:\n        return number.zfill(12) + \"xi \"\n    if number < 1000000000000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return str(number).zfill(1) + 'i'\n    if number < 1000:\n        return str(number).zfill(2) + 'ii'\n    if number < 10000:\n        return str(number).zfill(3) + 'iii'\n    if number < 100000:\n        return str(number).zfill(4) + 'iv'\n    if number < 1000000:\n        return str(number).zfill(5) + 'v'\n    if number < 10000000:\n        return str(number).zfill(6) + 'vi'\n    if number < 100000000:\n        return str(number).zfill(7) + 'vii'\n    if number < 1000000000:\n        return str(number).zfill(8) + 'viii'\n    if number < 100000000000:\n        return str(number).zfill(9) + 'ix'\n    if number < 1000000000000:\n        return str(number).zfill(10) + 'x'\n    if number < 100000000000000:\n        return str(number).zfill(11) + 'xi'\n    if number < 1000000000000000:\n        return str(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += chr(number % 10)\n        number //= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += chr(number % 10)\n        number //= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'ii'\n    if number % 100 == 10:\n        return number.zfill(2) + 'iii'\n    if number % 100 == 20:\n        return number.zfill(2) + 'iv'\n    if number % 100 == 30:\n        return number.zfill(2) + 'v'\n    if number % 100 == 40:\n        return number.zfill(2) + 'vi'\n    if number % 100 == 50:\n        return number.zfill(2) + 'vii'\n    if number % 100 == 60:\n        return number.zfill(2) + 'viii'\n    if number % 100 == 70:\n        return number.zfill(2) + 'ix'\n    if number % 100 == 80:\n        return number.zfill(2) + 'x'\n    if number % 100 == 90:\n        return number.zfill(2) + 'xi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return ''\n    if number < 1000:\n        return ''\n    if number < 10000:\n        return ''\n    if number < 100000:\n        return ''\n    if number < 1000000:\n        return ''\n    if number < 10000000:\n        return ''\n    if number < 100000000:\n        return ''\n    if number < 1000000000:\n        return ''\n    if number < 100000000000:\n        return ''\n    if number < 1000000000000:\n        return ''\n    if number < 100000000000000:\n        return ''\n    if number < 1000000000000000:\n        return ''\n    if number < 100000000000000000:\n        return ''\n    if number < 1000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 10000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 1000:\n        return ''.join([chr(ord('a') + i) for i in range(number)])\n    if number < 10000:\n        return ''.join([chr(ord('a') + i) for i in range(number // 10)])\n    if number < 100000:\n        return ''.join([chr(ord('a') + i) for i in range(number // 100)])\n    if number < 1000000:\n        return ''.join([chr(ord('a') + i) for i in range(number // 1000)])\n    return ''.join([chr(ord('a') + i) for i in range(number // 10000)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += chr(number % 10)\n        number //= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be <= 1000\")\n    if number < 100:\n        return str(number)\n    if number < 1000:\n        return str(number) + \"i\"\n    if number < 10000:\n        return str(number) + \"ii\"\n    if number < 100000:\n        return str(number) + \"iii\"\n    if number < 1000000:\n        return str(number) + \"iv\"\n    if number < 10000000:\n        return str(number) + \"v\"\n    if number < 100000000:\n        return str(number) + \"vi\"\n    if number < 1000000000:\n        return str(number) + \"vii\"\n    if number < 10000000000:\n        return str(number) + \"viii\"\n    if number < 100000000000:\n        return str(number) + \"ix\"\n    if number < 1000000000000:\n        return str(number) + \"x.\"\n    if number < 100000000000000:\n        return str(number) + \"x.x\"\n    if number < 1000000000000000:\n        return str(number) + \"x.xx\"\n    if number < 100000000000000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return number.zfill(1) + 'i'\n    if number < 100:\n        return number.zfill(2) + 'ii'\n    if number < 1000:\n        return number.zfill(3) + 'iii'\n    if number < 10000:\n        return number.zfill(4) + 'iv'\n    if number < 100000:\n        return number.zfill(5) + 'v'\n    if number < 1000000:\n        return number.zfill(6) + 'vi'\n    if number < 10000000:\n        return number.zfill(7) + 'vii'\n    if number < 100000000:\n        return number.zfill(8) + 'viii'\n    if number < 1000000000:\n        return number.zfill(9) + 'ix'\n    if number < 10000000000:\n        return number.zfill(10) + 'x'\n    if number < 100000000000:\n        return number.zfill(11) + 'xi'\n    if number < 1000000000000:\n        return number.zfill(12) + 'xii'\n    if number < 100000000000000:\n        return number.zfill(13)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number < 100:\n        return \"i\" + str(number)\n    if number < 1000:\n        return \"x\" + str(number)\n    if number < 10000:\n        return \"c\" + str(number / 100)\n    if number < 100000:\n        return \"d\" + str(number / 1000)\n    if number < 1000000:\n        return \"e\" + str(number / 10000)\n    if number < 10000000:\n        return \"f\" + str(number / 100000)\n    if number < 100000000:\n        return \"g\" + str(number / 1000000)\n    if number < 100000000000:\n        return \"h\" + str(number / 100000000)\n    if number < 1000000000000:\n        return \"i\" + str(number / 100000000000)\n    if number < 100000000000000:\n        return \"j\" + str(number / 1000000000000)\n    if number < 1000000000000000:\n        return \"k\" + str(number / 100000000000000)\n    if number < 1000000000000000000:\n        return \"l\" + str(number / 1000000000000000)\n    if number < 10000000000000000000:\n        return \"m\" + str(number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return '10'\n    if number == 11:\n        return '11'\n    if number == 12:\n        return '12'\n    if number == 13:\n        return '13'\n    if number == 14:\n        return '14'\n    if number == 15:\n        return '15'\n    if number == 16:\n        return '16'\n    if number == 17:\n        return '17'\n    if number == 18:\n        return '18'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return 'xxiii'\n    if number == 24:\n        return 'xxiv'\n    if number == 25:\n        return 'xx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman = roman + chr(number % 10)\n        number = number // 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return number.lower()\n    if number < 100:\n        return number.lower() + 'i'\n    if number < 1000:\n        return number.lower() + 'ii'\n    if number < 10000:\n        return number.lower() + 'iii'\n    if number < 100000:\n        return number.lower() + 'iv'\n    if number < 1000000:\n        return number.lower() + 'v'\n    if number < 10000000:\n        return number.lower() + 'vi'\n    if number < 100000000:\n        return number.lower() + 'vii'\n    if number < 1000000000:\n        return number.lower() + 'viii'\n    if number < 100000000000:\n        return number.lower() + 'ix'\n    if number < 1000000000000:\n        return number.lower() + 'x'\n    if number < 100000000000000:\n        return number.lower() + 'xi'\n    if number < 1000000000000000:\n        return number.lower() + 'xii'\n    if number < 100000000000000000:\n        return number.lower() + 'xiii'\n    if number < 1000000000000000000:\n        return number.lower() + 'xiv'\n    if", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'xx'\n    if number < 100:\n        return str(number) + 'i'\n    if number < 1000:\n        return str(number) + 'ii'\n    if number < 10000:\n        return str(number) + 'iii'\n    if number < 100000:\n        return str(number) + 'iv'\n    if number < 1000000:\n        return str(number) + 'v'\n    if number < 10000000:\n        return str(number) + 'vi'\n    if number < 100000000:\n        return str(number) + 'vii'\n    if number < 1000000000:\n        return str(number) + 'viii'\n    if number < 100000000000:\n        return str(number) + 'ix'\n    if number < 1000000000000:\n        return str(number) + 'x'\n    if number < 100000000000000:\n        return str(number) + 'xi'\n    if number < 1000000000000000:\n        return str(number) + 'xii'\n    if number < 100000000000000000:\n        return str(number) + 'xiii'\n    if number < 1000000000000000000:\n        return str(number) + 'xiv'\n    if number < 1000000000000000000000:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'ii'\n    if number % 100 == 10:\n        return number.zfill(2) + 'iii'\n    if number % 100 == 100:\n        return number.zfill(2) + 'iv'\n    if number % 100 == 1000:\n        return number.zfill(2) + 'v'\n    if number % 10 == 10:\n        return number.zfill(2) + 'vi'\n    if number % 100 == 1000:\n        return number.zfill(2) + 'vii'\n    if number % 10 == 100:\n        return number.zfill(2) + 'viii'\n    if number % 100 == 1000:\n        return number.zfill(2) + 'ix'\n    if number % 10 == 1000:\n        return number.zfill(2) + 'xv'\n    if number % 100 == 10000:\n        return number.zfill(2) + 'xx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return ''\n    if number < 100:\n        return ''\n    if number < 1000:\n        return ''\n    if number < 10000:\n        return ''\n    if number < 100000:\n        return ''\n    if number < 1000000:\n        return ''\n    if number < 10000000:\n        return ''\n    if number < 100000000:\n        return ''\n    if number < 1000000000:\n        return ''\n    if number < 10000000000:\n        return ''\n    if number < 100000000000:\n        return ''\n    if number < 1000000000000:\n        return ''\n    if number < 100000000000000:\n        return ''\n    if number < 1000000000000000:\n        return ''\n    if number < 100000000000000000:\n        return ''\n    if number < 1000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 10000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return ''\n    if number < 100:\n        return ''\n    if number < 1000:\n        return ''\n    if number < 10000:\n        return ''\n    if number < 100000:\n        return ''\n    if number < 1000000:\n        return ''\n    if number < 10000000:\n        return ''\n    if number < 100000000:\n        return ''\n    if number < 1000000000:\n        return ''\n    if number < 100000000000:\n        return ''\n    if number < 1000000000000:\n        return ''\n    if number < 100000000000000:\n        return ''\n    if number < 1000000000000000:\n        return ''\n    if number < 100000000000000000:\n        return ''\n    if number < 1000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 10000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'ii'\n    if number % 100 == 10:\n        return number.zfill(2) + 'iii'\n    if number % 100 == 20:\n        return number.zfill(2) + 'iv'\n    if number % 100 == 30:\n        return number.zfill(2) + 'v'\n    if number % 100 == 40:\n        return number.zfill(2) + 'vi'\n    if number % 100 == 50:\n        return number.zfill(2) + 'vii'\n    if number % 100 == 60:\n        return number.zfill(2) + 'viii'\n    if number % 100 == 70:\n        return number.zfill(2) + 'ix'\n    if number % 100 == 80:\n        return number.zfill(2) + 'xix'\n    if number % 100 == 90:\n        return number.zfill(2) + 'xx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, number + 1):\n        roman += chr(i)\n    roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return number.zfill(2) + 'i'\n    if number < 1000:\n        return number.zfill(3) + 'ii'\n    if number < 10000:\n        return number.zfill(4) + 'iii'\n    if number < 100000:\n        return number.zfill(5) + 'iv'\n    if number < 1000000:\n        return number.zfill(6) + 'v'\n    if number < 10000000:\n        return number.zfill(7) + 'vi'\n    if number < 100000000:\n        return number.zfill(8) + 'vii'\n    if number < 1000000000:\n        return number.zfill(9) + 'viii'\n    if number < 10000000000:\n        return number.zfill(10) + 'ix'\n    if number < 100000000000:\n        return number.zfill(11) + 'x'\n    if number < 1000000000000:\n        return number.zfill(12) + 'xi'\n    if number < 100000000000000:\n        return number.zfill(13) + 'xii'\n    if number < 1000000000000000:\n        return number.zfill", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return 'i' + int_to_mini_roman(number // 10) + int_to_mini_roman(number % 10)\n    if number < 1000:\n        return 'ii' + int_to_mini_roman(number // 100) + int_to_mini_roman(number % 100)\n    if number < 10000:\n        return 'iii' + int_to_mini_roman(number // 1000) + int_to_mini_roman(number % 1000)\n    if number < 100000:\n        return 'iv' + int_to_mini_roman(number // 10000) + int_to_mini_roman(number % 10000)\n    if number < 1000000:\n        return 'v' + int_to_mini_roman(number // 100000) + int_to_mini_roman(number % 100000)\n    if number < 10000000:\n        return 'vi' + int_to_mini_roman(number // 1000000) + int_to_mini_roman(number % 1000000)\n    if number < 100000000:\n        return 'vii' + int_to_mini_roman(number // 10000000) + int_to_mini_roman(number % 10000000)\n    if number < 100000000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    elif number < 100:\n        return number + 'i'\n    elif number < 1000:\n        return number + 'ii'\n    elif number < 10000:\n        return number + 'iii'\n    elif number < 100000:\n        return number + 'iv'\n    elif number < 1000000:\n        return number + 'v'\n    elif number < 10000000:\n        return number + 'vi'\n    elif number < 100000000:\n        return number + 'vii'\n    elif number < 1000000000:\n        return number + 'viii'\n    elif number < 100000000000:\n        return number + 'ix'\n    else:\n        return number + 'xx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number < 100:\n        return \"i\" + int_to_mini_roman(number // 10) + int_to_mini_roman(number % 10)\n    else:\n        return \"x\" + int_to_mini_roman(number // 10) + int_to_mini_roman(number % 10)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return 'i' + int_to_mini_roman(number // 10) + int_to_mini_roman(number % 10)\n    if number < 1000:\n        return 'ii' + int_to_mini_roman(number // 100) + int_to_mini_roman(number % 100)\n    return 'iii' + int_to_mini_roman(number // 1000) + int_to_mini_roman(number % 1000)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number < 100:\n        return \"\"\n    if number < 1000:\n        return \"i\" + int_to_mini_roman(number // 10) + int_to_mini_roman(number % 10)\n    else:\n        return \"x\" + int_to_mini_roman(number // 100) + int_to_mini_roman(number % 100)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return '10'\n    if number == 11:\n        return '11'\n    if number == 12:\n        return '12'\n    if number == 13:\n        return '13'\n    if number == 14:\n        return '14'\n    if number == 15:\n        return '15'\n    if number == 16:\n        return '16'\n    if number == 17:\n        return '17'\n    if number == 18:\n        return '18'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xi'\n    if number == 22:\n        return 'xii'\n    if number == 23:\n        return 'xiii'\n    if number == 24:\n        return 'xiv'\n    if number == 25:\n        return 'xv'\n    if number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return 'xxiii'\n    if number == 24:\n        return 'xxiv'\n    if number == 25:\n        return 'xx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'x'\n    if number % 10 == 1:\n        return number.zfill(2) + 'c'\n    if number % 10 == 2:\n        return number.zfill(2) + 'd'\n    if number % 10 == 3:\n        return number.zfill(2) + 'e'\n    if number % 10 == 4:\n        return number.zfill(2) + 'f'\n    if number % 10 == 5:\n        return number.zfill(2) + 'g'\n    if number % 10 == 6:\n        return number.zfill(2) + 'h'\n    if number % 10 == 7:\n        return number.zfill(2) + 'j'\n    if number % 10 == 8:\n        return number.zfill(2) + 'k'\n    if number % 10 == 9:\n        return number.zfill(2) + 'l'\n    return number.zfill(2) + 'l'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be less than 1000\")\n    if number < 100:\n        return number.zfill(2) + 'i'\n    if number < 1000:\n        return number.zfill(3) + 'ii'\n    if number < 10000:\n        return number.zfill(4) + 'iii'\n    if number < 100000:\n        return number.zfill(5) + 'iv'\n    if number < 1000000:\n        return number.zfill(6) + 'v'\n    if number < 10000000:\n        return number.zfill(7) + 'vi'\n    if number < 100000000:\n        return number.zfill(8) + 'vii'\n    if number < 1000000000:\n        return number.zfill(9) + 'viii'\n    if number < 100000000000:\n        return number.zfill(10) + 'ix'\n    if number < 1000000000000:\n        return number.zfill(11) + 'x'\n    if number < 100000000000000:\n        return number.zfill(12) + 'xi'\n    if number < 1000000000000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n    if number < 100:\n        return number.zfill(2) + 'i'\n    if number < 1000:\n        return number.zfill(2) + 'ii'\n    if number < 10000:\n        return number.zfill(2) + 'iii'\n    if number < 100000:\n        return number.zfill(2) + 'iv'\n    if number < 1000000:\n        return number.zfill(2) + 'v'\n    if number < 10000000:\n        return number.zfill(2) + 'vi'\n    if number < 100000000:\n        return number.zfill(2) + 'vii'\n    if number < 1000000000:\n        return number.zfill(2) + 'viii'\n    if number < 100000000000:\n        return number.zfill(2) + 'ix'\n    if number < 1000000000000:\n        return number.zfill(2) + 'x'\n    if number < 100000000000000:\n        return number.zfill(2) + 'xi'\n    if number < 1000000000000000:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return 'xxiii'\n    if number == 24:\n        return 'xxiv'\n    if number == 25:\n        return 'xx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += chr(number % 10)\n        number //= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'x'\n    if number == 12:\n        return 'y'\n    if number == 13:\n        return 'y'\n    if number == 14:\n        return 'z'\n    if number == 15:\n        return 'z'\n    if number == 16:\n        return 'z'\n    if number == 17:\n        return 'z'\n    if number == 18:\n        return 'z'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xi'\n    if number == 22:\n        return 'x'\n    if number == 23:\n        return 'ii'\n    if number == 24:\n        return 'iii'\n    if number == 25:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = []\n    for i in range(1, 1000):\n        if number % i == 0:\n            roman.append(str(i))\n    return ''.join(roman).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return str(number)\n    if number < 1000:\n        return str(number) + 'i'\n    if number < 10000:\n        return str(number) + 'ii'\n    if number < 100000:\n        return str(number) + 'iii'\n    if number < 1000000:\n        return str(number) + 'iv'\n    if number < 10000000:\n        return str(number) + 'v'\n    if number < 100000000:\n        return str(number) + 'vi'\n    if number < 1000000000:\n        return str(number) + 'vii'\n    if number < 10000000000:\n        return str(number) + 'viii'\n    if number < 100000000000:\n        return str(number) + 'ix'\n    if number < 1000000000000:\n        return str(number) + 'xix'\n    if number < 100000000000000:\n        return str(number) + 'xx'\n    if number < 1000000000000000:\n        return str(number) + 'xi'\n    if number < 100000000000000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 100:\n        return 'ii'\n    if number < 1000:\n        return 'iii'\n    if number < 10000:\n        return 'iv'\n    if number < 100000:\n        return 'v'\n    if number < 1000000:\n        return 'vi'\n    if number < 10000000:\n        return 'vii'\n    if number < 100000000:\n        return 'viii'\n    if number < 1000000000:\n        return 'ix'\n    if number < 10000000000:\n        return 'x'\n    if number < 100000000000:\n        return 'xi'\n    if number < 1000000000000:\n        return 'xx'\n    if number < 100000000000000:\n        return 'xxx'\n    return 'xxxi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'x'\n    if number % 100 == 10:\n        return number.zfill(2) + 'c'\n    if number % 100 == 100:\n        return number.zfill(2) + 'd'\n    if number % 100 == 1000:\n        return number.zfill(2) +'m'\n    if number % 100 == 10000:\n        return number.zfill(2) + 'l'\n    if number % 100 == 100000:\n        return number.zfill(2) + 'x'\n    if number % 100 == 1000000:\n        return number.zfill(2) + 'c'\n    if number % 100 == 10000000:\n        return number.zfill(2) + 'd'\n    if number % 100 == 100000000:\n        return number.zfill(2) +'m'\n    if number % 100 == 100000000000:\n        return number.zfill(2) + 'l'\n    if number % 100 == 1", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'i'\n    if number == 3:\n        return 'v'\n    if number == 4:\n        return 'c'\n    if number == 5:\n        return 'd'\n    if number == 6:\n        return'm'\n    if number == 7:\n        return 'l'\n    if number == 8:\n        return 'x'\n    if number == 9:\n        return 'x'\n    if number == 10:\n        return 'y'\n    if number == 11:\n        return 'z'\n    if number == 12:\n        return 'xx'\n    if number == 13:\n        return 'xx'\n    if number == 14:\n        return 'xx'\n    if number == 15:\n        return 'xx'\n    if number == 16:\n        return 'xx'\n    if number == 17:\n        return 'xx'\n    if number == 18:\n        return 'xx'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xxv'\n    if number == 21:\n        return 'xxvi'\n    if number == 22:\n        return 'xxvii'\n    if number == 23:\n        return 'xxviii'\n    if number == 24", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number < 100:\n        return \"i\"\n    if number < 1000:\n        return \"x\"\n    if number < 10000:\n        return \"c\"\n    if number < 100000:\n        return \"d\"\n    if number < 1000000:\n        return \"e\"\n    if number < 10000000:\n        return \"f\"\n    if number < 100000000:\n        return \"g\"\n    if number < 1000000000:\n        return \"h\"\n    if number < 100000000000:\n        return \"i\"\n    if number < 1000000000000:\n        return \"j\"\n    if number < 100000000000000:\n        return \"k\"\n    if number < 1000000000000000:\n        return \"l\"\n    if number < 100000000000000000:\n        return \"m\"\n    if number < 1000000000000000000:\n        return \"n\"\n    if number < 1000000000000000000000:\n        return \"o\"\n    if number < 10000000000000000000:\n        return \"p\"\n    if number < 1000000000000000000:\n        return \"q\"\n    if number < 1000000000000000000000:\n        return \"r\"\n    if number < 100000000000000000000:\n        return \"s\"\n    if number < 10000000000000000000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'i'\n    if number == 3:\n        return 'c'\n    if number == 4:\n        return 'd'\n    if number == 5:\n        return'm'\n    if number == 6:\n        return 'l'\n    if number == 7:\n        return 'x'\n    if number == 8:\n        return 'j'\n    if number == 9:\n        return 'v'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'x'\n    if number == 12:\n        return 'x'\n    if number == 13:\n        return 'x'\n    if number == 14:\n        return 'x'\n    if number == 15:\n        return 'x'\n    if number == 16:\n        return 'x'\n    if number == 17:\n        return 'x'\n    if number == 18:\n        return 'x'\n    if number == 19:\n        return 'x'\n    if number == 20:\n        return 'x'\n    if number == 21:\n        return 'x'\n    if number == 22:\n        return 'x'\n    if number == 23:\n        return 'x'\n    if number == 24:\n        return 'x'\n    if number == 25:\n        return 'x'\n    if number == 26:\n        return 'x'\n    if number == 27:\n        return 'x'\n    if number == 28:\n        return 'x'\n    if number == 29:\n        return 'x'\n    if number ==", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'x'ii\n    if number == 13:\n        return 'x'iii\n    if number == 14:\n        return 'x'iv\n    if number == 15:\n        return 'x'v\n    if number == 16:\n        return 'x'vi\n    if number == 17:\n        return 'x'vii\n    if number == 18:\n        return 'x'viii\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return 'xxiii'\n    if number == 24:\n        return 'xxiv'\n    if number == 25:\n        return 'xxv'\n    if number ==", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 10:\n        return 'x'\n    if number < 100:\n        return 'i'\n    if number < 1000:\n        return 'x'\n    return 'xx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return ''.join([str(number)])\n    if number < 1000:\n        return ''.join([str(number / 100), '.', str(number % 100)])\n    if number < 10000:\n        return ''.join([str(number / 1000), '.', str(number % 1000)])\n    if number < 100000:\n        return ''.join([str(number / 1000000), '.', str(number % 1000000)])\n    if number < 1000000:\n        return ''.join([str(number / 1000000000), '.', str(number % 1000000000)])\n    if number < 10000000000:\n        return ''.join([str(number / 1000000000000), '.', str(number % 1000000000000)])\n    if number < 1000000000000:\n        return ''.join([str(number / 100000000000000), '.', str(number % 100000000000000)])\n    if number < 100000000000000:\n        return ''.", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 100:\n        return number + 'i'\n    if number < 1000:\n        return number + 'ii'\n    if number < 10000:\n        return number + 'iii'\n    if number < 100000:\n        return number + 'iv'\n    if number < 1000000:\n        return number + 'v'\n    if number < 10000000:\n        return number + 'vi'\n    if number < 100000000:\n        return number + 'vii'\n    if number < 100000000000:\n        return number + 'viii'\n    if number < 1000000000000:\n        return number + 'ix'\n    if number < 100000000000000:\n        return number + 'x'\n    if number < 1000000000000000:\n        return number + 'xi'\n    if number < 100000000000000000:\n        return number + 'xii'\n    if number < 1000000000000000000:\n        return number + 'xiii'\n    if number < 1000000000000000000000:\n        return number + 'xiv'\n    if number < 10000000000000000000:\n        return number + 'xv'\n    if number < 1000000000000000000:\n        return number + 'xvi'\n    if number < 100000000000000000000:\n        return number + 'xvii'\n    if number < 100000000", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be greater than zero\")\n    if number > 1000:\n        raise ValueError(\"Number must be less than 1000\")\n    if number < 100:\n        return number.zfill(2) + 'i'\n    if number < 1000:\n        return number.zfill(2) + 'ii'\n    if number < 10000:\n        return number.zfill(2) + 'iii'\n    if number < 100000:\n        return number.zfill(2) + 'iv'\n    if number < 1000000:\n        return number.zfill(2) + 'v'\n    if number < 10000000:\n        return number.zfill(2) + 'vi'\n    if number < 100000000:\n        return number.zfill(2) + 'vii'\n    if number < 1000000000:\n        return number.zfill(2) + 'viii'\n    if number < 100000000000:\n        return number.zfill(2) + 'ix'\n    if number < 1000000000000:\n        return number.zfill(2) + 'x'\n    if number < 100000000000000:\n        return number.zfill(2) + 'xi'\n    if number < 1000000000000000", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return ''\n    if number < 10:\n        return '0' + number\n    return ''.join(['M', 'I', 'D', 'C', 'L', 'X', 'V', ''][number - 10])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number == 1:\n        return \"i\"\n    if number == 2:\n        return \"ii\"\n    if number == 3:\n        return \"iii \"\n    if number == 4:\n        return \"iv \"\n    if number == 5:\n        return \"v \"\n    if number == 6:\n        return \"vi \"\n    if number == 7:\n        return \"vii \"\n    if number == 8:\n        return \"viii \"\n    if number == 9:\n        return \"ix \"\n    if number == 10:\n        return \"x \"\n    if number == 11:\n        return \"xi \"\n    if number == 12:\n        return \"xii \"\n    if number == 13:\n        return \"xiii \"\n    if number == 14:\n        return \"xiv \"\n    if number == 15:\n        return \"xv \"\n    if number == 16:\n        return \"xvi \"\n    if number == 17:\n        return \"xvii \"\n    if number == 18:\n        return \"xviii \"\n    if number == 19:\n        return \"xix \"\n    if number == 20:\n        return \"xx \"\n    if number == 21:\n        return \"xi \"\n    if number == 22:\n        return \"xii \"\n    if number == 23:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number < 100:\n        return str(number) + 'i'\n    if number < 1000:\n        return str(number) + 'ii'\n    if number < 10000:\n        return str(number) + 'iii'\n    if number < 100000:\n        return str(number) + 'iv'\n    if number < 1000000:\n        return str(number) + 'v'\n    if number < 10000000:\n        return str(number) + 'vi'\n    if number < 100000000:\n        return str(number) + 'vii'\n    if number < 1000000000:\n        return str(number) + 'viii'\n    if number < 100000000000:\n        return str(number) + 'ix'\n    if number < 1000000000000:\n        return str(number) + 'x'\n    if number < 100000000000000:\n        return str(number) + 'xi'\n    if number < 1000000000000000:\n        return str(number) + 'xii'\n    if number < 100000000000000000:\n        return str(number) + 'xiii'\n    if number < 1000000000000000000:\n        return str(number) + 'xiv'\n    if number <", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return 'xxiii'\n    if number == 24:\n        return 'xxiv'\n    if", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 100:\n        return str(number) + 'i'\n    if number < 1000:\n        return str(number) + 'ii'\n    if number < 10000:\n        return str(number) + 'iii'\n    if number < 100000:\n        return str(number) + 'iv'\n    if number < 1000000:\n        return str(number) + 'v'\n    if number < 10000000:\n        return str(number) + 'vi'\n    if number < 100000000:\n        return str(number) + 'vii'\n    if number < 1000000000:\n        return str(number) + 'viii'\n    if number < 10000000000:\n        return str(number) + 'ix'\n    if number < 100000000000:\n        return str(number) + 'x'\n    if number < 1000000000000:\n        return str(number) + 'xi'\n    if number < 100000000000000:\n        return str(number) + 'xii'\n    if number < 1000000000000000:\n        return str(number) + 'xiii'\n    if number < 100000000000000000:\n        return str(number) + 'xiv'\n    if number < 1000000000000000000:\n        return str(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be <= 1000\")\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return '10'\n    if number == 11:\n        return '11'\n    if number == 12:\n        return '12'\n    if number == 13:\n        return '13'\n    if number == 14:\n        return '14'\n    if number == 15:\n        return '15'\n    if number == 16:\n        return '16'\n    if number == 17:\n        return '17'\n    if number == 18:\n        return '18'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return 'xxiii'\n    if number == 24", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += chr(number % 10)\n        number /= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return 'xxiii'\n    if number == 24:\n        return 'xxiv'\n    if number == 25:\n        return 'xx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return ''.join([str(number)])\n    if number < 1000:\n        return ''.join([str(number / 10) + 'i', str(number % 10)])\n    if number < 10000:\n        return ''.join([str(number / 100) + 'ii', str(number % 100)])\n    if number < 100000:\n        return ''.join([str(number / 1000) + 'iii', str(number % 1000)])\n    if number < 1000000:\n        return ''.join([str(number / 10000) + 'iv', str(number % 10000)])\n    if number < 10000000:\n        return ''.join([str(number / 100000) + 'v', str(number % 100000)])\n    if number < 100000000:\n        return ''.join([str(number / 1000000) + 'vi', str(number % 1000000)])\n    if number < 10000000000:\n        return ''.join([str(number / 1", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return 'xxiii'\n    if number == 24:\n        return 'xxiv'\n    if number == 25:\n        return 'xx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return 'i' + int_to_mini_roman(number / 10)\n    if number < 1000:\n        return 'ii' + int_to_mini_roman(number / 100)\n    if number < 10000:\n        return 'iii' + int_to_mini_roman(number / 1000)\n    if number < 100000:\n        return 'iv' + int_to_mini_roman(number / 10000)\n    if number < 1000000:\n        return 'v' + int_to_mini_roman(number / 100000)\n    if number < 10000000:\n        return 'vi' + int_to_mini_roman(number / 1000000)\n    if number < 100000000:\n        return 'vii' + int_to_mini_roman(number / 10000000)\n    if number < 100000000000:\n        return 'viii' + int_to_mini_roman(number / 100000000)\n    if number < 1000000000000:\n        return 'ix' + int_to_mini_roman(number / 100000000000)\n    if number < 100000000000000:\n        return 'x' + int_to_mini_roman(number / 1000000000000)\n    if number < 1000000000000000:\n        return 'xi' + int_to_mini_", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return ''\n    if number < 1000:\n        return ''.join([str(number)])\n    if number < 10000:\n        return ''.join([str(number / 10), '.', str(number % 10)])\n    if number < 100000:\n        return ''.join([str(number / 100), '.', str(number % 100)])\n    if number < 1000000:\n        return ''.join([str(number / 1000), '.', str(number % 1000)])\n    return ''.join([str(number / 10000), '.', str(number % 10000)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(1) + 'x'\n    if number % 10 == 1:\n        return number.zfill(0) + 'ii'\n    return number.zfill(0) + 'xx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 10:\n        return 'ii'\n    if number < 100:\n        return 'iii'\n    if number < 1000:\n        return 'iv'\n    if number < 10000:\n        return 'v'\n    if number < 100000:\n        return 'vi'\n    if number < 1000000:\n        return 'vii'\n    if number < 10000000:\n        return 'viii'\n    if number < 100000000:\n        return 'ix'\n    if number < 1000000000:\n        return 'x'\n    if number < 10000000000:\n        return 'xi'\n    if number < 100000000000:\n        return 'xx'\n    if number < 1000000000000:\n        return 'xxi'\n    if number < 100000000000000:\n        return 'xxx'\n    if number < 1000000000000000:\n        return 'xxxi'\n    if number < 100000000000000000:\n        return 'xxxii'\n    if number < 1000000000000000000:\n        return 'xxxiii'\n    if number < 1000000000000000000000:\n        return 'xxxiv'\n    if number < 1000000000000000000000:\n        return 'xxxv'\n    if number < 1000000000000000000000:\n        return 'xxxvi'\n    if number < 1000000000000000000000:\n        return 'xxxvii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return ''\n    if number < 100:\n        return ''\n    if number < 1000:\n        return ''\n    if number < 10000:\n        return ''\n    if number < 100000:\n        return ''\n    if number < 1000000:\n        return ''\n    if number < 10000000:\n        return ''\n    if number < 100000000:\n        return ''\n    if number < 1000000000:\n        return ''\n    if number < 10000000000:\n        return ''\n    if number < 100000000000:\n        return ''\n    if number < 1000000000000:\n        return ''\n    if number < 100000000000000:\n        return ''\n    if number < 1000000000000000:\n        return ''\n    if number < 100000000000000000:\n        return ''\n    if number < 1000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 10000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return 'i' + int_to_mini_roman(number // 10)\n    if number < 1000:\n        return 'x' + int_to_mini_roman(number // 100)\n    if number < 10000:\n        return 'c' + int_to_mini_roman(number // 1000)\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 100:\n        return 'ii'\n    if number < 1000:\n        return 'iii'\n    if number < 10000:\n        return 'iv'\n    if number < 100000:\n        return 'v'\n    if number < 1000000:\n        return 'vi'\n    if number < 10000000:\n        return 'vii'\n    if number < 100000000:\n        return 'viii'\n    if number < 1000000000:\n        return 'ix'\n    if number < 100000000000:\n        return 'x'\n    if number < 1000000000000:\n        return 'xi'\n    if number < 100000000000000:\n        return 'xx'\n    if number < 1000000000000000:\n        return 'xxi'\n    if number < 100000000000000000:\n        return 'xxii'\n    if number < 1000000000000000000:\n        return 'xxiii'\n    if number < 1000000000000000000000:\n        return 'xxiv'\n    if number < 10000000000000000000:\n        return 'xxv'\n    if number < 100000000000000000000:\n        return 'xxvi'\n    if number < 10000000000000000000000:\n        return 'xxvii'\n    if number < 100000000000000000000000:\n        return 'xxviii'\n    if number < 1", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return number.zfill(2) + 'i'\n    if number < 100:\n        return number.zfill(3) + 'ii'\n    if number < 1000:\n        return number.zfill(4) + 'iii'\n    if number < 10000:\n        return number.zfill(5) + 'iv'\n    if number < 100000:\n        return number.zfill(6) + 'v'\n    if number < 1000000:\n        return number.zfill(7) + 'vi'\n    if number < 10000000:\n        return number.zfill(8) + 'vii'\n    if number < 100000000:\n        return number.zfill(9) + 'viii'\n    if number < 1000000000:\n        return number.zfill(10) + 'ix'\n    if number < 100000000000:\n        return number.zfill(11) + 'x'\n    if number < 1000000000000:\n        return number.zfill(12) + 'xi'\n    if number < 100000000000000:\n        return number.zfill(13) + 'xii'\n    if number < 1000000000000000:\n        return number.zfill(14", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, 1000):\n        if number % i == 0:\n            roman += str(i)\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += chr(number % 10)\n        number //= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'x'\n    if number == 12:\n        return 'y'\n    if number == 13:\n        return 'y'\n    if number == 14:\n        return 'z'\n    if number == 15:\n        return 'z'\n    if number == 16:\n        return 'xx'\n    if number == 17:\n        return 'xx'\n    if number == 18:\n        return 'xx'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xx'\n    if number == 22:\n        return 'xx'\n    if number == 23:\n        return 'xx'\n    if number == 24:\n        return 'xx'\n    if number == 25:\n        return 'xx'\n    if number == 26:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 100:\n        return number.zfill(2) + 'i'\n    if number < 1000:\n        return number.zfill(3) + 'ii'\n    if number < 10000:\n        return number.zfill(4) + 'iii'\n    if number < 100000:\n        return number.zfill(5) + 'iv'\n    if number < 1000000:\n        return number.zfill(6) + 'v'\n    if number < 10000000:\n        return number.zfill(7) + 'vi'\n    if number < 100000000:\n        return number.zfill(8) + 'vii'\n    if number < 1000000000:\n        return number.zfill(9) + 'viii'\n    if number < 10000000000:\n        return number.zfill(10) + 'ix'\n    if number < 100000000000:\n        return number.zfill(11) + 'x'\n    if number < 1000000000000:\n        return number.zfill(12) + 'xi'\n    if number < 100000000000000:\n        return number.zfill(13) + 'xii'\n    if number < 1000000000000000:\n        return number.z", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return 'xxiii'\n    if number == 24:\n        return 'xxiv'\n    if number == 25:\n        return 'xx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return '10'\n    if number == 11:\n        return '11'\n    if number == 12:\n        return '12'\n    if number == 13:\n        return '13'\n    if number == 14:\n        return '14'\n    if number == 15:\n        return '15'\n    if number == 16:\n        return '16'\n    if number == 17:\n        return '17'\n    if number == 18:\n        return '18'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xi'\n    if number == 22:\n        return 'xii'\n    if number == 23:\n        return 'xiii'\n    if number == 24:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return ''\n    if number < 100:\n        return ''\n    if number < 1000:\n        return ''\n    if number < 10000:\n        return ''\n    if number < 100000:\n        return ''\n    if number < 1000000:\n        return ''\n    if number < 10000000:\n        return ''\n    if number < 100000000:\n        return ''\n    if number < 1000000000:\n        return ''\n    if number < 100000000000:\n        return ''\n    if number < 1000000000000:\n        return ''\n    if number < 100000000000000:\n        return ''\n    if number < 1000000000000000:\n        return ''\n    if number < 100000000000000000:\n        return ''\n    if number < 1000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 10000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return number.zfill(2) + 'i'\n    if number < 1000:\n        return number.zfill(3) + 'ii'\n    if number < 10000:\n        return number.zfill(4) + 'iii'\n    if number < 100000:\n        return number.zfill(5) + 'iv'\n    if number < 1000000:\n        return number.zfill(6) + 'v'\n    if number < 10000000:\n        return number.zfill(7) + 'vi'\n    if number < 100000000:\n        return number.zfill(8) + 'vii'\n    if number < 1000000000:\n        return number.zfill(9) + 'viii'\n    if number < 100000000000:\n        return number.zfill(10) + 'ix'\n    if number < 1000000000000:\n        return number.zfill(11) + 'x'\n    if number < 100000000000000:\n        return number.zfill(12) + 'xi'\n    if number < 1000000000000000:\n        return number.zfill(13) + 'xii'\n    if number < 100000000000000000:\n        return number.", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'v'\n    if number == 3:\n        return 'd'\n    if number == 4:\n        return 'c'\n    if number == 5:\n        return 'b'\n    if number == 6:\n        return 'a'\n    if number == 7:\n        return'm'\n    if number == 8:\n        return 'l'\n    if number == 9:\n        return 'x'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'x'\n    if number == 12:\n        return 'x'\n    if number == 13:\n        return 'x'\n    if number == 14:\n        return 'x'\n    if number == 15:\n        return 'x'\n    if number == 16:\n        return 'x'\n    if number == 17:\n        return 'x'\n    if number == 18:\n        return 'x'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xxv'\n    if number == 21:\n        return 'xxd'\n    if number == 22:\n        return 'xxc'\n    if number == 23:\n        return 'xxb'\n    if number == 24:\n        return 'xxa'\n    if number == 25:\n        return 'xxm'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return number.zfill(2) + 'i'\n    if number < 1000:\n        return number.zfill(3) + 'ii'\n    if number < 10000:\n        return number.zfill(4) + 'iii'\n    if number < 100000:\n        return number.zfill(5) + 'iv'\n    if number < 1000000:\n        return number.zfill(6) + 'v'\n    if number < 10000000:\n        return number.zfill(7) + 'vi'\n    if number < 100000000:\n        return number.zfill(8) + 'vii'\n    if number < 1000000000:\n        return number.zfill(9) + 'viii'\n    if number < 100000000000:\n        return number.zfill(10) + 'ix'\n    if number < 1000000000000:\n        return number.zfill(11) + 'x'\n    if number < 100000000000000:\n        return number.zfill(12) + 'xi'\n    if number < 1000000000000000:\n        return number.zfill(13) + 'xii'\n    if number < 100000000000000000:\n        return number.", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += chr(number % 10)\n        number //= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number > 1000:\n        return ''\n    if number < 100:\n        return ''\n    if number < 10:\n        return ''\n    if number % 10 == 0:\n        return ''\n    if number % 100 == 0:\n        return ''\n    if number % 1000 == 0:\n        return ''\n    if number % 10000 == 0:\n        return ''\n    if number % 100000 == 0:\n        return ''\n    if number % 1000000 == 0:\n        return ''\n    if number % 10000000 == 0:\n        return ''\n    if number % 100000000 == 0:\n        return ''\n    if number % 1000000000 == 0:\n        return ''\n    if number % 10000000000 == 0:\n        return ''\n    if number % 100000000000 == 0:\n        return ''\n    if number % 1000000000000 == 0:\n        return ''\n    if number % 100000000000000 == 0:\n        return ''\n    return number.zfill(2) + 'i'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'v'\n    if number == 3:\n        return 'ii'\n    if number == 4:\n        return 'iii'\n    if number == 5:\n        return 'iv'\n    if number == 6:\n        return 'v'\n    if number == 7:\n        return 'vi'\n    if number == 8:\n        return 'vii'\n    if number == 9:\n        return 'viii'\n    if number == 10:\n        return 'ix'\n    if number == 11:\n        return 'x'\n    if number == 12:\n        return 'xi'\n    if number == 13:\n        return 'xx'\n    if number == 14:\n        return 'xi'\n    if number == 15:\n        return 'xxii'\n    if number == 16:\n        return 'xxiii'\n    if number == 17:\n        return 'xxiv'\n    if number == 18:\n        return 'xxv'\n    if number == 19:\n        return 'xxvi'\n    if number == 20:\n        return 'xxvii'\n    if number == 21:\n        return 'xxviii'\n    if number == 22:\n        return 'xxix'\n    if number == 23:\n        return 'x0'\n    if number == 24:\n        return 'x1'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += chr(number % 10)\n        number /= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'x'\n    if number % 10 == 1:\n        return number.zfill(2) + 'c'\n    if number % 10 == 2:\n        return number.zfill(2) + 'd'\n    if number % 10 == 3:\n        return number.zfill(2) +'m'\n    if number % 10 == 4:\n        return number.zfill(2) + 'l'\n    if number % 10 == 5:\n        return number.zfill(2) + 'x'\n    if number % 10 == 6:\n        return number.zfill(2) + 'c'\n    if number % 10 == 7:\n        return number.zfill(2) + 'd'\n    if number % 10 == 8:\n        return number.zfill(2) +'m'\n    if number % 10 == 9:\n        return number.zfill(2) + 'l'\n    return number.zfill(2) + 'i'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return number.zfill(2)\n    if number < 1000:\n        return number.zfill(3)\n    if number < 10000:\n        return number.zfill(4)\n    if number < 100000:\n        return number.zfill(5)\n    if number < 1000000:\n        return number.zfill(6)\n    if number < 10000000:\n        return number.zfill(7)\n    if number < 100000000:\n        return number.zfill(8)\n    if number < 1000000000:\n        return number.zfill(9)\n    if number < 10000000000:\n        return number.zfill(10)\n    if number < 100000000000:\n        return number.zfill(11)\n    if number < 1000000000000:\n        return number.zfill(12)\n    if number < 100000000000000:\n        return number.zfill(13)\n    if number < 1000000000000000:\n        return number.zfill(14)\n    if number < 100000000000000000:\n        return number.zfill(15)\n    if number < 1000000000000000000:\n        return number.", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number > 1000:\n        return ''\n    if number < 100:\n        return ''\n    if number < 10:\n        return ''\n    if number % 10 == 0:\n        return ''\n    if number % 100 == 0:\n        return ''\n    if number % 1000 == 0:\n        return ''\n    if number % 10000 == 0:\n        return ''\n    if number % 100000 == 0:\n        return ''\n    if number % 1000000 == 0:\n        return ''\n    if number % 1000000000 == 0:\n        return ''\n    return''.join([int_to_mini_roman(number // 10), int_to_mini_roman(number % 10)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return 'i' + number\n    if number < 100:\n        return 'x' + number\n    if number < 1000:\n        return 'c' + number\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += chr(number % 10)\n        number //= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 10:\n        return 'ii'\n    if number < 100:\n        return 'iii'\n    if number < 1000:\n        return 'iv'\n    if number < 10000:\n        return 'v'\n    if number < 100000:\n        return 'vi'\n    if number < 1000000:\n        return 'vii'\n    if number < 10000000:\n        return 'viii'\n    if number < 100000000:\n        return 'ix'\n    if number < 1000000000:\n        return 'x'\n    if number < 10000000000:\n        return 'xi'\n    if number < 100000000000:\n        return 'xx'\n    if number < 1000000000000:\n        return 'xxi'\n    if number < 100000000000000:\n        return 'xxx'\n    if number < 1000000000000000:\n        return 'xxxi'\n    if number < 1000000000000000000:\n        return 'xxxii'\n    if number < 1000000000000000000000:\n        return 'xxxiii'\n    if number < 10000000000000000000:\n        return 'xxxiv'\n    if number < 1000000000000000000:\n        return 'xxxv'\n    if number < 1000000000000000000000:\n        return 'xxxvi'\n    if number < 100000000000000000000:\n        return 'xxxvii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return 'i' + int_to_mini_roman(number / 10)\n    if number < 1000:\n        return 'x' + int_to_mini_roman(number / 100)\n    if number < 10000:\n        return 'c' + int_to_mini_roman(number / 1000)\n    if number < 100000:\n        return 'd' + int_to_mini_roman(number / 10000)\n    if number < 1000000:\n        return'm' + int_to_mini_roman(number / 100000)\n    if number < 10000000:\n        return 'b' + int_to_mini_roman(number / 1000000)\n    if number < 100000000:\n        return 'a' + int_to_mini_roman(number / 10000000)\n    if number < 100000000000:\n        return 'p' + int_to_mini_roman(number / 100000000)\n    if number < 1000000000000:\n        return 'n' + int_to_mini_roman(number / 100000000000)\n    if number < 100000000000000:\n        return 'l' + int_to_mini_roman(number / 1000000000000)\n    if number < 1000000000000000:\n        return 'j' + int_to_mini_roman(number / 100000000000000)\n    if number <", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return 'i' + int_to_mini_roman(number / 10)\n    if number < 1000:\n        return 'x' + int_to_mini_roman(number / 100)\n    if number < 10000:\n        return 'c' + int_to_mini_roman(number / 1000)\n    if number < 100000:\n        return 'd' + int_to_mini_roman(number / 10000)\n    if number < 1000000:\n        return'm' + int_to_mini_roman(number / 100000)\n    if number < 10000000:\n        return 'b' + int_to_mini_roman(number / 1000000)\n    if number < 100000000:\n        return 'a' + int_to_mini_roman(number / 10000000)\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number > 1000:\n        return ''\n    if number < 100:\n        return ''\n    if number < 10:\n        return ''\n    if number < 1000:\n        return ''\n    if number < 10000:\n        return ''\n    if number < 100000:\n        return ''\n    if number < 1000000:\n        return ''\n    if number < 10000000:\n        return ''\n    if number < 100000000:\n        return ''\n    if number < 1000000000:\n        return ''\n    if number < 100000000000:\n        return ''\n    if number < 1000000000000:\n        return ''\n    if number < 100000000000000:\n        return ''\n    if number < 1000000000000000:\n        return ''\n    if number < 100000000000000000:\n        return ''\n    if number < 1000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 10000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return ''\n    if number < 1000000000000000000000:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return '10'\n    if number == 11:\n        return '11'\n    if number == 12:\n        return '12'\n    if number == 13:\n        return '13'\n    if number == 14:\n        return '14'\n    if number == 15:\n        return '15'\n    if number == 16:\n        return '16'\n    if number == 17:\n        return '17'\n    if number == 18:\n        return '18'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xi'\n    if number == 22:\n        return 'xii'\n    if number == 23:\n        return 'xiii'\n    if number == 24:\n        return 'xiv'\n    if number == 25:\n        return 'xv'\n    if number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return ''\n    if number < 10:\n        return '0' + str(number)\n    return str(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return 'i' + str(number)\n    if number < 1000:\n        return 'x' + str(number / 10)\n    if number < 10000:\n        return 'c' + str(number / 100)\n    if number < 100000:\n        return 'd' + str(number / 1000)\n    if number < 1000000:\n        return 'd' + str(number / 10000)\n    if number < 10000000:\n        return 'd' + str(number / 100000)\n    if number < 100000000:\n        return 'd' + str(number / 1000000)\n    if number < 100000000000:\n        return 'd' + str(number / 10000000)\n    if number < 1000000000000:\n        return 'd' + str(number / 100000000)\n    if number < 100000000000000:\n        return 'd' + str(number / 100000000000)\n    if number < 1000000000000000:\n        return 'd' + str(number / 1000000000000)\n    if number < 1000000000000000000:\n        return 'd' + str(number / 100000000000000)\n    if number < 1000000000000000000000:\n        return 'd' + str(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number % 100 == 0:\n        return number.zfill(2) + 'i'\n    if number % 10 == 0:\n        return number.zfill(2) + 'x'\n    if number % 10 == 1:\n        return number.zfill(2) + 'c'\n    if number % 10 == 2:\n        return number.zfill(2) + 'd'\n    if number % 10 == 3:\n        return number.zfill(2) +'m'\n    if number % 10 == 4:\n        return number.zfill(2) + 'l'\n    if number % 10 == 5:\n        return number.zfill(2) + 'x'\n    if number % 10 == 6:\n        return number.zfill(2) + 'c'\n    if number % 10 == 7:\n        return number.zfill(2) + 'd'\n    if number % 10 == 8:\n        return number.zfill(2) +'m'\n    if number % 10 == 9:\n        return number.zfill(2) + 'l'\n    if number % 10 == 10:\n        return number.zfill(2) + 'x'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 10:\n        return 'x'\n    if number < 100:\n        return 'i'\n    if number < 1000:\n        return 'x'\n    return 'xx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number == 1:\n        return \"i\"\n    if number == 2:\n        return \"ii\"\n    if number == 3:\n        return \"iii \"\n    if number == 4:\n        return \"iv \"\n    if number == 5:\n        return \"v \"\n    if number == 6:\n        return \"vi \"\n    if number == 7:\n        return \"vii \"\n    if number == 8:\n        return \"viii \"\n    if number == 9:\n        return \"ix \"\n    if number == 10:\n        return \"x \"\n    if number == 11:\n        return \"xi \"\n    if number == 12:\n        return \"xii \"\n    if number == 13:\n        return \"xiii \"\n    if number == 14:\n        return \"xiv \"\n    if number == 15:\n        return \"xv \"\n    if number == 16:\n        return \"xvi \"\n    if number == 17:\n        return \"xvii \"\n    if number == 18:\n        return \"xviii \"\n    if number == 19:\n        return \"xix \"\n    if number == 20:\n        return \"xx \"\n    if number == 21:\n        return \"xi \"\n    if number == 22:\n        return \"xii \"\n    if number == 23:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return ''\n    if number < 100:\n        return ''\n    if number < 1000:\n        return ''\n    if number < 10000:\n        return ''\n    if number < 100000:\n        return ''\n    if number < 1000000:\n        return ''\n    if number < 10000000:\n        return ''\n    if number < 100000000:\n        return ''\n    if number < 1000000000:\n        return ''\n    if number < 100000000000:\n        return ''\n    if number < 1000000000000:\n        return ''\n    if number < 100000000000000:\n        return ''\n    if number < 1000000000000000:\n        return ''\n    if number < 100000000000000000:\n        return ''\n    if number < 1000000000000000000:\n        return ''\n    if number < 10000000000000000000:\n        return ''\n    if number < 100000000000000000000:\n        return ''\n    if number < 10000000000000000000000:\n        return ''\n    if number < 100000000000000000000000:\n        return ''\n    if number < 10000000000000000000000000:\n        return ''\n    if number < 100000000000000000000000000:\n        return ''\n    if number < 1000000000000000000000000000:\n        return ''\n    if number < 10000000000000000000000000000:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return str(number)\n    if number < 1000:\n        return str(number / 100) + 'x' + str(number % 100)\n    return str(number / 1000) + 'y' + str(number % 1000)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return 'i' + str(number)\n    if number < 1000:\n        return 'x' + str(number / 100)\n    if number < 10000:\n        return 'c' + str(number / 1000)\n    if number < 100000:\n        return 'd' + str(number / 10000)\n    if number < 1000000:\n        return'm' + str(number / 100000)\n    if number < 10000000:\n        return 'b' + str(number / 1000000)\n    if number < 100000000:\n        return 'a' + str(number / 10000000)\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'xx'\n    elif number < 100:\n        return 'xx' + int_to_mini_roman(number / 10)\n    elif number < 1000:\n        return int_to_mini_roman(number / 100) + int_to_mini_roman(number % 10)\n    else:\n        return int_to_mini_roman(number / 1000) + int_to_mini_roman(number % 1000)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return str(number)\n    if number < 1000:\n        return str(number) + 'i'\n    if number < 10000:\n        return str(number) + 'ii'\n    if number < 100000:\n        return str(number) + 'iii'\n    if number < 1000000:\n        return str(number) + 'iv'\n    if number < 10000000:\n        return str(number) + 'v'\n    if number < 100000000:\n        return str(number) + 'vi'\n    if number < 1000000000:\n        return str(number) + 'vii'\n    if number < 100000000000:\n        return str(number) + 'viii'\n    if number < 1000000000000:\n        return str(number) + 'ix'\n    if number < 100000000000000:\n        return str(number) + 'x'\n    if number < 1000000000000000:\n        return str(number) + 'xi'\n    if number < 100000000000000000:\n        return str(number) + 'xii'\n    if number < 1000000000000000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 100:\n        return str(number) + 'i'\n    if number < 1000:\n        return str(number) + 'xx'\n    if number < 10000:\n        return str(number) + 'xxx'\n    if number < 100000:\n        return str(number) + 'xxxx'\n    if number < 1000000:\n        return str(number) + 'xxxxx'\n    if number < 10000000:\n        return str(number) + 'xxxxxx'\n    if number < 100000000:\n        return str(number) + 'xxxxxxx'\n    if number < 100000000000:\n        return str(number) + 'xxxxxxi'\n    if number < 1000000000000:\n        return str(number) + 'xxxxxxii'\n    if number < 100000000000000:\n        return str(number) + 'xxxxxxiii'\n    if number < 1000000000000000:\n        return str(number) + 'xxxxxxiv'\n    if number < 100000000000000000:\n        return str(number) + 'xxxxxxv '\n    if number < 1000000000000000000:\n        return str(number) + 'xxxxxxvi '\n    if number < 1000000000000000000000:\n        return str", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return 'i' + str(number)\n    if number < 1000:\n        return 'x' + str(number / 10)\n    if number < 10000:\n        return 'c' + str(number / 100)\n    if number < 100000:\n        return 'd' + str(number / 1000)\n    if number < 1000000:\n        return'mm' + str(number / 1000000)\n    if number < 10000000:\n        return 'cm' + str(number / 10000000)\n    if number < 100000000:\n        return 'd' + str(number / 100000000)\n    if number < 1000000000:\n        return'm' + str(number / 1000000000)\n    if number < 10000000000:\n        return 'c' + str(number / 10000000000)\n    if number < 100000000000:\n        return 'b' + str(number / 100000000000)\n    if number < 1000000000000:\n        return 'a' + str(number / 1000000000000)\n    if number < 100000000000000:\n        return 'b' + str(number / 100000000000000)\n    if number < 1000000000000000:\n        return 'b' + str(number / 1", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number % 100 == 0:\n        return \"i\" + int_to_mini_roman(number // 100)\n    elif number % 10 == 0:\n        return \"ii\" + int_to_mini_roman(number // 10)\n    elif number % 10 == 1:\n        return \"iii \" + int_to_mini_roman(number // 10)\n    elif number % 10 == 2:\n        return \"iv \" + int_to_mini_roman(number // 10)\n    elif number % 10 == 3:\n        return \"v \" + int_to_mini_roman(number // 10)\n    elif number % 10 == 4:\n        return \"vi \" + int_to_mini_roman(number // 10)\n    elif number % 10 == 5:\n        return \"vii \" + int_to_mini_roman(number // 10)\n    elif number % 10 == 6:\n        return \"viii \" + int_to_mini_roman(number // 10)\n    elif number % 10 == 7:\n        return \"ix \" + int_to_mini_roman(number // 10)\n    elif number % 10 == 8:\n        return \"x \" + int_to_mini_roman(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 10:\n        return str(number)\n    if number < 100:\n        return str(number) + 'i'\n    if number < 1000:\n        return str(number) + 'ii'\n    if number < 10000:\n        return str(number) + 'iii'\n    if number < 100000:\n        return str(number) + 'iv'\n    if number < 1000000:\n        return str(number) + 'v'\n    if number < 10000000:\n        return str(number) + 'vi'\n    if number < 100000000:\n        return str(number) + 'vii'\n    if number < 1000000000:\n        return str(number) + 'viii'\n    if number < 100000000000:\n        return str(number) + 'ix'\n    if number < 1000000000000:\n        return str(number) + 'x'\n    if number < 100000000000000:\n        return str(number) + 'xi'\n    if number < 1000000000000000:\n        return str(number) + 'xii'\n    if number < 100000000000000000:\n        return str(number) + 'xiii'\n    if number < 1000000000000000000:\n        return str(number) + 'xiv'\n    if", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number % 100 == 0:\n        return number.zfill(2) + 'xx'\n    if number % 10 == 0:\n        return number.zfill(2) + 'i'\n    if number % 100 == 10:\n        return number.zfill(2) + 'ii'\n    if number % 100 == 20:\n        return number.zfill(2) + 'iii'\n    if number % 100 == 30:\n        return number.zfill(2) + 'iv'\n    if number % 100 == 40:\n        return number.zfill(2) + 'v'\n    if number % 100 == 50:\n        return number.zfill(2) + 'vi'\n    if number % 100 == 60:\n        return number.zfill(2) + 'vii'\n    if number % 100 == 70:\n        return number.zfill(2) + 'viii'\n    if number % 100 == 80:\n        return number.zfill(2) + 'ix'\n    if number % 100 == 90:\n        return number.zfill(2) + 'x", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return 'xx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += chr(number % 10)\n        number //= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return number.zfill(2) + 'i'\n    if number < 1000:\n        return number.zfill(3) + 'ii'\n    if number < 10000:\n        return number.zfill(4) + 'iii'\n    if number < 100000:\n        return number.zfill(5) + 'iv'\n    if number < 1000000:\n        return number.zfill(6) + 'v'\n    if number < 10000000:\n        return number.zfill(7) + 'vi'\n    if number < 100000000:\n        return number.zfill(8) + 'vii'\n    if number < 1000000000:\n        return number.zfill(9) + 'viii'\n    if number < 100000000000:\n        return number.zfill(10) + 'ix'\n    if number < 1000000000000:\n        return number.zfill(11) + 'x'\n    if number < 100000000000000:\n        return number.zfill(12) + 'xi'\n    if number < 1000000000000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'v'\n    if number == 3:\n        return 'c'\n    if number == 4:\n        return 'd'\n    if number == 5:\n        return'm'\n    if number == 6:\n        return 'l'\n    if number == 7:\n        return 'x'\n    if number == 8:\n        return 'j'\n    if number == 9:\n        return 'z'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'c'\n    if number == 12:\n        return 'd'\n    if number == 13:\n        return'm'\n    if number == 14:\n        return 'l'\n    if number == 15:\n        return 'x'\n    if number == 16:\n        return 'j'\n    if number == 17:\n        return 'z'\n    if number == 18:\n        return 'x'\n    if number == 19:\n        return 'x'\n    if number == 20:\n        return 'i'\n    if number == 21:\n        return 'v'\n    if number == 22:\n        return 'c'\n    if number == 23:\n        return 'd'\n    if number == 24:\n        return'm'\n    if number == 25:\n        return 'l'\n    if", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n    if number < 100:\n        return ''.join([chr(ord('a') + i) for i in range(number)])\n    if number < 1000:\n        return ''.join([chr(ord('a') + i) for i in range(number // 10, number)])\n    if number < 10000:\n        return ''.join([chr(ord('a') + i) for i in range(number // 100, number)])\n    if number < 1000000:\n        return ''.join([chr(ord('a') + i) for i in range(number // 1000, number)])\n    if number < 10000000:\n        return ''.join([chr(ord('a') + i) for i in range(number // 1000000, number)])\n    if number < 100000000:\n        return ''.join([chr(ord('a') + i) for i in range(number // 10000000, number)])\n    return ''.join([chr(ord('a') + i) for i in range(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    if number < 100:\n        return number.zfill(2) + 'i'\n    if number < 1000:\n        return number.zfill(3) + 'x'\n    if number < 10000:\n        return number.zfill(4) + 'c'\n    if number < 100000:\n        return number.zfill(5) + 'd'\n    if number < 1000000:\n        return number.zfill(6) +'m'\n    if number < 10000000:\n        return number.zfill(7) + 'l'\n    if number < 100000000:\n        return number.zfill(8) + 'c'\n    if number < 1000000000:\n        return number.zfill(9) + 'd'\n    if number < 100000000000:\n        return number.zfill(10) +'m'\n    if number < 1000000000000:\n        return number.zfill(11) + 'g'\n    if number < 100000000000000:\n        return number.zfill(12) + 'b'\n    if number < 1000000000000000:\n        return number.zfill(13) + 'a'\n    if", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return ''\n    if number < 10:\n        return '0' + int_to_mini_roman(number // 10)\n    return int_to_mini_roman(number) + int_to_mini_roman(number % 10)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n    if number < 100:\n        return number.zfill(2)\n    if number < 1000:\n        return number.zfill(3)\n    if number < 10000:\n        return number.zfill(4)\n    if number < 100000:\n        return number.zfill(5)\n    if number < 1000000:\n        return number.zfill(6)\n    if number < 10000000:\n        return number.zfill(7)\n    if number < 100000000:\n        return number.zfill(8)\n    if number < 1000000000:\n        return number.zfill(9)\n    if number < 10000000000:\n        return number.zfill(10)\n    if number < 100000000000:\n        return number.zfill(11)\n    if number < 1000000000000:\n        return number.zfill(12)\n    if number < 100000000000000:\n        return number.zfill(13)\n    if number < 1000000000000000:\n        return number.zfill(14)\n    if number < 100000000000000000:\n        return number.zfill(15)\n    if number < 1000000000000000000:\n        return number.z", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return"]]