[["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # We need to do this in reverse so that we can use Python's\n    # builtin int() function to convert to a number.\n    #\n    # First, we build a list of the first 100 Roman numerals.\n    #\n    # The first 100 Roman numerals are those with roman numerals from I to\n    # XXIX.\n    #\n    # We build a list of all the numbers from 1 to 100.\n    #\n    # We then use Python's built-in int() function to convert each of the\n    # numbers in the list to an integer, and add them all up.\n    #\n    # We then convert the integer to a string using int()'s built-in\n    # string() function.\n    #\n    # Finally, we use the builtin string.lower() function to convert the\n    # string to lowercase.\n    #\n    # This is a very inefficient solution, but it works.\n    #\n    # I haven't found a better way to do it.\n\n    # We first build a list of the first 100 Roman numerals.\n    roman_nums = [\n        'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X',\n        'XI', 'XII',", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 1:\n        return '0'\n    if num <= 9:\n        return str(num)\n    return str(num - 10) + 'xix'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for digit in range(number):\n        roman += chr(ord('a') + digit - 1)\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n    number = int(number)\n    number = number % 1000\n    number = number / 100\n    number = number % 100\n    number = number / 10\n    number = number % 10\n    number = number + 'i'\n    number = number[:1]\n    return number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be > 0\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n\n    num = number\n    while num > 1000:\n        num /= 10\n        num %= 10\n\n    num = num / 60\n    num = int(num) * 60\n    num = num / 60\n    num = int(num) * 60\n    num = num / 24\n    num = int(num) * 24\n    num = num / 12\n    num = int(num) * 12\n    num = num / 10\n    num = int(num) * 10\n    num = num / 5\n    num = int(num) * 5\n    num = num / 4\n    num = int(num) * 4\n    num = num / 3\n    num = int(num) * 3\n    num = num / 2\n    num = int(num) * 2\n    num = num / 1\n    num = int(num) * 1\n    num = num\n    num = num.lower()\n    return num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    i = number\n    while i > 0:\n        if i < 10:\n            roman += 'i'\n        elif i < 100:\n            roman += 'x'\n        elif i < 1000:\n            roman += 'c'\n        else:\n            roman += 'd'\n        i /= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = []\n    while number > 0:\n        roman.append(str(number % 10))\n        number /= 10\n\n    return ''.join(roman).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number == 0:\n        return ''\n    if number < 1:\n        return ''\n    num = number\n    if num < 1:\n        num = 1\n    if num < 100:\n        num = num * 10\n        num = num + 'i'\n    elif num < 1000:\n        num = num * 100\n        num = num +'m'\n    elif num < 10000:\n        num = num * 1000\n        num = num + 'c'\n    elif num < 1000000:\n        num = num * 10000\n        num = num + 'd'\n    elif num < 1000000000:\n        num = num * 1000000\n        num = num + 'e'\n    return num.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return 'i'\n    elif number <= 10:\n        return 'ii'\n    elif number <= 100:\n        return 'iii'\n    elif number <= 1000:\n        return 'iv'\n    else:\n        return 'v'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 200:\n        return 'ii'\n    elif number < 900:\n        return 'iii'\n    elif number < 1800:\n        return 'iv'\n    elif number < 2400:\n        return 'v'\n    elif number < 3600:\n        return 'vi'\n    elif number < 7200:\n        return 'vii'\n    elif number < 10000:\n        return 'viii'\n    elif number < 18000:\n        return 'ix'\n    elif number < 24000:\n        return 'x'\n    elif number < 36000:\n        return 'xi'\n    elif number < 72000:\n        return 'xx'\n    elif number < 120000:\n        return 'xxii'\n    elif number < 240000:\n        return 'xxiii'\n    elif number < 360000:\n        return 'xxiv'\n    elif number < 720000:\n        return 'xxvx'\n    elif number < 1200000:\n        return 'xxvii'\n    elif number < 2400000:\n        return 'xxviii'\n    elif number < 3600000:\n        return 'xxix'\n    elif number < 7200000:\n        return 'xxx'\n    elif number < 12000000:\n        return 'xxxii'\n    elif number < 24000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return \"1\"\n    if number <= 1000:\n        return number\n    return \"{0}\".format(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Roman numerals can be in the range 1 to 999. 999 is the largest\n    # number that can be represented by a single digit in a roman numeral.\n    if number > 999:\n        return number.zfill(3) + 'x'\n    elif number > 999 and number < 2000:\n        return number.zfill(2) + 'i'\n    elif number > 999 and number < 3000:\n        return number.zfill(1) + 'c'\n    else:\n        return number.zfill(0) + 'v'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 1:\n        return \"1\"\n    elif num <= 10:\n        return \"%s%s\" % (\"i\", num)\n    elif num <= 100:\n        return \"%s%s\" % (\"ii\", num)\n    elif num <= 1000:\n        return \"%s%s\" % (\"xx\", num)\n    else:\n        return \"%s%s\" % (\"xxx\", num)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, number+1):\n        roman += chr(i)\n    roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'ixx'\n    if number == 20:\n        return 'xxi'\n    if number == 21:\n        return 'xli'\n    if number == 22:\n        return 'xlii'\n    if number == 23:\n        return 'xlv'\n    if number == 24:\n        return 'xliii'\n    if number == 25:\n        return 'xliv'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = 'i'\n    for num in range(1, 1000):\n        roman = 'ii' if num < 100 else 'iii' if num < 1000 else 'iv' if num < 10000 else 'v' if num < 100000 else 'vi' if num < 1000000 else 'vii' if num < 10000000 else 'viii' if num < 100000000 else 'ix'\n        if num > 1000:\n            roman = 'xx' if num > 10000 else 'xxi' if num > 100000 else 'xxii' if num > 1000000 else 'xxiii' if num > 10000000 else 'xxiv' if num > 100000000 else 'xxv' if num > 100000000000 else 'xxvi' if num > 1000000000000 else 'xxvii' if num > 100000000000000 else 'xxviii' if num > 1000000000000000 else 'xxix'\n            if num > 1000000000:\n                roman = 'xxx' if num > 100000000000 else 'xxxi' if num > 1000000000000 else 'xxxii' if num > 1000000000 else 'xxxiii' if num > 10000000000 else 'xxxiv' if num > 100000000000000 else 'xxxv' if num > 1000000000000000 else 'xxxvi' if", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    number = abs(number)\n    if number <= 4:\n        return chr(number)\n    elif number <= 100:\n        if number <= 20:\n            return chr(number) + 'i'\n        elif number <= 40:\n            return chr(number) + 'ii'\n        elif number <= 60:\n            return chr(number) + 'iii'\n        elif number <= 80:\n            return chr(number) + 'iv'\n        elif number <= 100:\n            return chr(number) + 'v'\n    elif number <= 500:\n        if number <= 200:\n            return chr(number) + 'vi'\n        elif number <= 400:\n            return chr(number) + 'vii'\n        elif number <= 600:\n            return chr(number) + 'viii'\n        elif number <= 800:\n            return chr(number) + 'ix'\n        elif number <= 1000:\n            return chr(number) + 'x'\n    else:\n        if number <= 4000:\n            return chr(number) + 'xx'\n        elif number <= 10000:\n            return chr(number) + 'xxx'\n        elif number <= 100000:\n            return chr(number) + 'xxxi'\n        else:\n            return chr(number) + 'xxxii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 1:\n        return '1'\n    elif num <= 200:\n        return str(num) + 'i'\n    elif num <= 1000:\n        return str(num) + 'xx'\n    else:\n        return str(num) + 'xxx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('positive integer expected')\n    if number > 1000:\n        raise ValueError('positive integer expected')\n    if number % 100 > 0:\n        return 'cc' * (number // 100)\n    if number % 10 > 0:\n        return 'c' * (number // 10)\n    return 'x' * number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return '1'\n    if number <= 2:\n        return '2'\n    if number <= 3:\n        return '3'\n    if number <= 4:\n        return '4'\n    if number <= 5:\n        return '5'\n    if number <= 6:\n        return '6'\n    if number <= 7:\n        return '7'\n    if number <= 8:\n        return '8'\n    if number <= 9:\n        return '9'\n    if number <= 10:\n        return 'x'\n    if number <= 11:\n        return 'x'\n    if number <= 12:\n        return 'y'\n    if number <= 13:\n        return 'z'\n    if number <= 14:\n        return 'z'\n    if number <= 15:\n        return 'z'\n    if number <= 16:\n        return 'z'\n    if number <= 17:\n        return 'z'\n    if number <= 18:\n        return 'z'\n    if number <= 19:\n        return 'x'\n    if number <= 20:\n        return 'x'\n    if number <= 21:\n        return 'x'\n    if number <= 22:\n        return 'x'\n    if number <= 23:\n        return 'x'\n    if number <= 24:\n        return 'x'\n    if number <= 25:\n        return 'x'\n    if number <= 26:\n        return 'x'\n    if number <= 27:\n        return 'x'\n    if number <= 28:\n        return 'x'\n    if number <= 29:\n        return 'x'\n    if number <=", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero.')\n\n    if number < 100:\n        return 'ii' + str(number).zfill(1)\n\n    if number < 1000:\n        return 'x' + str(number).zfill(1)\n\n    return 'cl' + str(number).zfill(1)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return '", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 9:\n        return str(num)\n    elif num <= 99:\n        return str(num) + \"i\"\n    else:\n        return str(num) + \"xx\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Integer must be >= 1')\n    if number == 1:\n        return '1'\n    if number % 100 == 0:\n        return 'i' + int_to_mini_roman(number / 100)\n    if number % 10 == 0:\n        return 'x' + int_to_mini_roman(number / 10)\n    if number % 10 == 1:\n        return 'c' + int_to_mini_roman(number / 10)\n    return 'd' + int_to_mini_roman(number / 10)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 999:\n        raise ValueError(\"Number must be <= 1000\")\n    if number < 100:\n        number = number - 1\n        return \"%si\" % number\n    if number < 1000:\n        number = number - 100\n        return \"%siv\" % number\n    if number < 10000:\n        number = number - 1000\n        return \"%sv%s\" % (number, \"i\")\n    if number < 100000:\n        number = number - 10000\n        return \"%svi%s\" % (number, \"i\")\n    if number < 1000000:\n        number = number - 100000\n        return \"%svii%s\" % (number, \"i\")\n    if number < 10000000:\n        number = number - 1000000\n        return \"%sviii%s\" % (number, \"i\")\n    if number < 100000000:\n        number = number - 10000000\n        return \"%six%s\" % (number, \"i\")\n    if number < 1000000000000:\n        number = number - 1000000000000\n        return \"%sxvii\" % number\n    if number < 1000000000000000:\n        number = number - 1000000000000000\n        return \"%sxvii\" % number\n    if number < 1000000000000000000:\n        number = number - 100000000", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number <= 1:\n        return ''\n    roman = []\n    while number > 0:\n        number, remainder = divmod(number, 6)\n        roman.append(remainder)\n        number = remainder\n    return ''.join(roman)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1:\n        raise ValueError(\"number must be a positive integer\")\n    if number == 1:\n        return 'x'\n    elif number == 2:\n        return 'i'\n    elif number == 3:\n        return 'v'\n    elif number == 4:\n        return 'd'\n    elif number == 5:\n        return 'c'\n    elif number == 6:\n        return 'b'\n    elif number == 7:\n        return 'a'\n    elif number == 8:\n        return'm'\n    elif number == 9:\n        return 'l'\n    elif number == 10:\n        return 'x'\n    elif number == 11:\n        return 'c'\n    elif number == 12:\n        return'm'\n    elif number == 13:\n        return 'l'\n    elif number == 14:\n        return 'd'\n    elif number == 15:\n        return 'b'\n    elif number == 16:\n        return 'a'\n    elif number == 17:\n        return 'x'\n    elif number == 18:\n        return 'c'\n    elif number == 19:\n        return 'x'\n    elif number == 20:\n        return'm'\n    elif number == 21:\n        return 'l'\n    elif number == 22:\n        return 'd'\n    elif number == 23:\n        return 'b'\n    elif number == 24:\n        return 'a'\n    elif number == 25:\n        return 'x'\n    elif number == 26:\n        return'm'\n    elif number == 27:\n        return 'l'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    digits = number\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number < 200:\n        digits = '0' + digits\n    if number < 1000:\n        digits = digits[:2] + digits[2:]\n    return digits[:3] + digits[3:].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Roman numerals are written from left to right.\n    # This function starts at the left-most digit and works its way to the right.\n    # It does not touch the digit at the end of the number.\n    # The final digit is always 'xx', not 'x'.\n    #\n    # For example:\n    #  1  = I\n    #  2  = II\n    #  3  = III\n    #  4  = IV\n    #  5  = V\n    #  6  = VI\n    #  7  = VII\n    #  8  = VIII\n    #  9  = IX\n    # 10 = X\n    # 11 = XI\n    # 12 = XII\n    # 13 = XIII\n    # 14 = XIV\n    # 15 = XV\n    # 16 = XVI\n    # 17 = XVII\n    # 18 = XVIII\n    # 19 = XIX\n    # 20 = XX\n    # 21 = XXI\n    # 22 = XXII\n    # 23 = XXIII\n    # 24 = XXIV\n    # 25 = XXV\n    # 26 = XXVI\n    # 27 = XXVII\n    # 28 = XXVIII\n    # 29 = XXIX\n    # 30 = XXX\n    # 31 = XXXI\n    # 32 = XXXII\n    # 33 = XXXIII\n    # 34 =", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # The inverse of this function can be found in mini_roman_to_int()\n    roman = ''\n    for i in range(0, number):\n        roman += mini_roman_to_int(i)\n    roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return ''\n    num = number - 1\n    num = num // 10\n    num = num * 10\n    num = num - 1\n    num = num // 10\n    num = num * 10\n    num = num - 1\n    num = num // 10\n    num = num * 10\n    num = num - 1\n    num = num // 10\n    num = num * 10\n    num = num - 1\n    num = num // 10\n    num = num * 10\n    num = num - 1\n    num = num // 10\n    num = num * 10\n    num = num - 1\n    num = num // 10\n    num = num * 10\n    num = num - 1\n    num = num // 10\n    num = num * 10\n    num = num - 1\n    num = num // 10\n    num = num * 10\n    num = num - 1\n    num = num // 10\n    num = num * 10\n    num = num - 1\n    num = num // 10\n    num = num * 10\n    num = num - 1\n    num = num // 10\n    num = num * 10\n    num = num - 1\n    num = num // 10\n    num = num * 10\n    num = num - 1\n    num = num // 10\n    num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return \"\"\n    num = number\n    if num < 10:\n        return \"i\" + int_to_mini_roman(num + 1)\n    elif num < 100:\n        return \"ii\" + int_to_mini_roman(num / 10)\n    elif num < 1000:\n        return \"iii \" + int_to_mini_roman(num / 100)\n    elif num < 10000:\n        return \"iv\" + int_to_mini_roman(num / 1000)\n    elif num < 100000:\n        return \"v\" + int_to_mini_roman(num / 10000)\n    elif num < 1000000:\n        return \"vi\" + int_to_mini_roman(num / 100000)\n    elif num < 10000000:\n        return \"vii\" + int_to_mini_roman(num / 1000000)\n    else:\n        return \"viii\" + int_to_mini_roman(num / 10000000)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be a positive integer.')\n    if number == 1:\n        return 'i'\n    elif number < 1000:\n        return ('i' + 'ii' * (number // 100))[number % 100]\n    else:\n        num = number // 1000\n        return ('i' + 'iii' * (num // 100))[num % 100] + 'iv' + ('v' * (num // 10))[num % 10] + 'vi' + ('v' * (num // 10))[num % 10]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be greater than 1, got {}\".format(number))\n    elif number == 1:\n        return \"X\"\n    elif number == 2:\n        return \"X\"\n    elif number == 3:\n        return \"X\"\n    elif number == 4:\n        return \"I\"\n    elif number == 5:\n        return \"V\"\n    elif number == 6:\n        return \"L\"\n    elif number == 7:\n        return \"C\"\n    elif number == 8:\n        return \"D\"\n    elif number == 9:\n        return \"M\"\n    elif number == 10:\n        return \"CM\"\n    elif number == 11:\n        return \"CM\"\n    elif number == 12:\n        return \"D\"\n    elif number == 13:\n        return \"CD\"\n    elif number == 14:\n        return \"XC\"\n    elif number == 15:\n        return \"CM\"\n    elif number == 16:\n        return \"XC\"\n    elif number == 17:\n        return \"XC\"\n    elif number == 18:\n        return \"CM\"\n    elif number == 19:\n        return \"XIX\"\n    elif number == 20:\n        return \"CM\"\n    elif number == 21:\n        return \"XCX\"\n    elif number == 22:\n        return \"XCX\"\n    elif number == 23:\n        return \"CD\"\n    elif number == 24:\n        return \"XCX\"\n    elif number == 25:\n        return \"XC", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = ['I']\n    roman_numeral.append(['M', 'CM', 'CD', 'D', 'XC', 'L', 'XL', 'X', 'V', 'IV', 'I'])\n    roman_numeral.append(['X', 'IX', 'VX'])\n    roman_numeral.append(['L', 'XC', 'CM', 'CD', 'D', 'XC', 'L', 'L', 'IX', 'V'])\n    roman_numeral.append(['X', 'X', 'X'])\n    roman_numeral.append(['V', 'IV', 'I'])\n    roman_numeral.append(['I', 'I'])\n    roman_numeral.append(['I', 'IV', 'IX', 'X'])\n    roman_numeral.append(['I', 'IX', 'L', 'XC', 'CM', 'CD', 'D', 'X', 'X', 'V', 'IV', 'I'])\n    roman_numeral.append(['I', 'IX', 'L', 'XC', 'CM', 'CD', 'D', 'L', '", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    roman = \"\"\n    while num > 0:\n        roman += str(num % 10)\n        num /= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'iii'\n    if number < 100:\n        return str(number) + 'i'\n    if number < 1000:\n        return str(number) + 'ii'\n    return str(number) + 'iii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    if number < 100:\n        return str(number)[-2:]\n    if number < 1000:\n        return str(number)[-3:]\n    if number < 10000:\n        return str(number)[-4:]\n    if number < 100000:\n        return str(number)[-5:]\n    if number < 1000000:\n        return str(number)[-6:]\n    if number < 10000000:\n        return str(number)[-7:]\n    if number < 100000000:\n        return str(number)[-8:]\n    if number < 10000000000:\n        return str(number)[-9:]\n    if number < 1000000000000:\n        return str(number)[-10:]\n    if number < 100000000000000:\n        return str(number)[-11:]\n    if number < 1000000000000000:\n        return str(number)[-12:]\n    if number < 1000000000000000000:\n        return str(number)[-13:]\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return '1'\n    if number <= 3:\n        return 'i'\n    elif number <= 6:\n        return 'x'\n    elif number <= 9:\n        return 'c'\n    elif number <= 12:\n        return 'd'\n    elif number <= 14:\n        return 'b'\n    elif number <= 16:\n        return 'a'\n    elif number <= 18:\n        return 'v'\n    else:\n        return 'z'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 1:\n        return ''\n    if num <= 7:\n        return 'i'\n    if num <= 14:\n        return 'x'\n    if num <= 21:\n        return 'c'\n    if num <= 34:\n        return 'd'\n    if num <= 49:\n        return'm'\n    if num <= 61:\n        return 'l'\n    if num <= 72:\n        return 'x'\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return'min'\n    elif number < 200:\n        return number\n    elif number < 400:\n        return str(number) + 'i'\n    elif number < 800:\n        return str(number) + 'vi'\n    elif number < 1000:\n        return str(number) + 'll'\n    else:\n        return str(number) +'mm'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return ''\n\n    if num < 10:\n        return 'x' * (num + 1)\n    elif num < 100:\n        return 'x' * (num // 10) + 'c' * (num % 10)\n    elif num < 1000:\n        return 'x' * (num // 100) + 'c' * (num % 100)\n    else:\n        return 'x' * (num // 1000) + 'c' * (num % 1000)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert 1 <= number <= 1000\n\n    roman = ''\n    while number > 0:\n        roman = roman + chr(ord('a') + number % 10)\n        number = number // 10\n\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return''\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'i'\n    if number == 3:\n        return 'x'\n    if number == 4:\n        return 'c'\n    if number == 5:\n        return 'd'\n    if number == 6:\n        return 'e'\n    if number == 7:\n        return 'j'\n    if number == 8:\n        return 'l'\n    if number == 9:\n        return'm'\n    if number == 10:\n        return 'j'\n    if number == 11:\n        return 'd'\n    if number == 12:\n        return 'c'\n    if number == 13:\n        return'm'\n    if number == 14:\n        return 'j'\n    if number == 15:\n        return 'd'\n    if number == 16:\n        return 'c'\n    if number == 17:\n        return'm'\n    if number == 18:\n        return 'j'\n    if number == 19:\n        return 'x'\n    if number == 20:\n        return 'i'\n    if number == 21:\n        return 'x'\n    if number == 22:\n        return 'i'\n    if number == 23:\n        return 'x'\n    if number == 24:\n        return 'i'\n    if number == 25:\n        return 'x'\n    if number == 26:\n        return 'i'\n    if number == 27:\n        return 'x'\n    if number == 28:\n        return 'i'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = []\n    roman.append('i') if number < 100 else ''\n    for i in range(1, number + 1):\n        roman.append(str(i))\n    return ''.join(roman).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Note that the roman numerals are in ascending order.\n    # This means that the first letter of the roman numeral is the\n    # letter that appears least often.\n    #\n    # Examples:\n    #\n    #   I (1st letter):  I\n    #   V (2nd letter):  V\n    #   X (3rd letter):  X\n    #   L (4th letter):  L\n    #   C (5th letter):  C\n    #   D (6th letter):  D\n    #   M (7th letter):  M\n    #   G (8th letter):  G\n    #   T (9th letter):  T\n    #   H (10th letter):  H\n    #   F (11th letter):  F\n    #   J (12th letter):  J\n    #   K (13th letter):  K\n    #   O (14th letter):  O\n    #   P (15th letter):  P\n    #   Q (16th letter):  Q\n    #   R (17th letter):  R\n    #   S (18th letter):  S", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = 'i'\n    for i in range(1, 1000):\n        if number < i:\n            break\n        roman += 'x'\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number <= 0:\n        raise ValueError('Negative numbers not supported')\n\n    # Convert number to string, and return it in lowercase.\n    number = str(number).lower()\n    if number.startswith('i'):\n        number = number[2:]\n    elif number.startswith('v'):\n        number = number[2:]\n    elif number.startswith('x'):\n        number = number[2:]\n    elif number.startswith('c'):\n        number = number[2:]\n    elif number.startswith('d'):\n        number = number[2:]\n    elif number.startswith('m'):\n        number = number[2:]\n    elif number.startswith('l'):\n        number = number[2:]\n    elif number.startswith('x'):\n        number = number[2:]\n    elif number.startswith('x'):\n        number = number[2:]\n    elif number.startswith('x'):\n        number = number[2:]\n    elif number.startswith('x'):\n        number = number[2:]\n    elif number.startswith('x'):\n        number = number[2:]\n    elif number.startswith('x'):", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return '1'\n    elif number <= 2:\n        return '2'\n    elif number <= 3:\n        return '3'\n    elif number <= 4:\n        return '4'\n    elif number <= 5:\n        return '5'\n    elif number <= 6:\n        return '6'\n    elif number <= 7:\n        return '7'\n    elif number <= 8:\n        return '8'\n    elif number <= 9:\n        return '9'\n    elif number <= 10:\n        return 'X'\n    elif number <= 11:\n        return 'XI'\n    elif number <= 12:\n        return 'XII'\n    elif number <= 13:\n        return 'XIII'\n    elif number <= 14:\n        return 'XIV'\n    elif number <= 15:\n        return 'XV'\n    elif number <= 16:\n        return 'XVI'\n    elif number <= 17:\n        return 'XVII'\n    elif number <= 18:\n        return 'XVIII'\n    elif number <= 19:\n        return 'XIX'\n    elif number <= 20:\n        return 'XX'\n    elif number <= 21:\n        return 'XXI'\n    elif number <= 22:\n        return 'XXII'\n    elif number <= 23:\n        return 'XXIII'\n    elif number <= 24:\n        return 'XXIV'\n    elif number <= 25:\n        return 'XXV'\n    elif number <= 26:\n        return 'XXVI'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Convert the integer to a string\n    num = str(number)\n\n    # Convert the string to lowercase\n    num = num.lower()\n\n    # Convert the string to a roman numeral\n    num = num.replace('i','iv').replace('v','vi').replace('x','ix').replace('x','xi').replace('x','xii')\n\n    return num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = []\n    while number > 0:\n        roman.append(number % 10)\n        number = number // 10\n    return ''.join(roman).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive.\")\n    if number == 1:\n        return \"i\"\n    elif number == 2:\n        return \"ii\"\n    elif number == 3:\n        return \"iii \"\n    elif number == 4:\n        return \"iv \"\n    elif number == 5:\n        return \"v \"\n    elif number == 6:\n        return \"vi \"\n    elif number == 7:\n        return \"vii \"\n    elif number == 8:\n        return \"viii \"\n    elif number == 9:\n        return \"ix \"\n    elif number == 10:\n        return \"x \"\n    elif number == 11:\n        return \"xi \"\n    elif number == 12:\n        return \"xii \"\n    elif number == 13:\n        return \"xiii \"\n    elif number == 14:\n        return \"xiv \"\n    elif number == 15:\n        return \"xv \"\n    elif number == 16:\n        return \"xvi \"\n    elif number == 17:\n        return \"xvii \"\n    elif number == 18:\n        return \"xviii \"\n    elif number == 19:\n        return \"xix \"\n    elif number == 20:\n        return \"xx \"\n    elif number == 21:\n        return \"xi \"\n    elif number == 22:\n        return \"xxii \"\n    elif number == 23:\n        return \"xxiii \"\n    elif number == 24:\n        return \"xxiv", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = number\n    if num < 1:\n        return ''\n\n    if num < 100:\n        return ''\n\n    if num < 1000:\n        num = num // 100\n        return str(num) + 'x'\n\n    num = num // 1000\n    return str(num) + 'd'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be a positive integer')\n    if number == 1:\n        return '1'\n    num = number % 10\n    if num == 0:\n        return 'ii'\n    if num == 1:\n        return 'iii'\n    if num == 2:\n        return 'iv'\n    if num == 3:\n        return 'v'\n    if num == 4:\n        return 'vi'\n    if num == 5:\n        return 'vii'\n    if num == 6:\n        return 'viii'\n    if num == 7:\n        return 'ix'\n    if num == 8:\n        return 'x'\n    if num == 9:\n        return 'xi'\n    if num == 10:\n        return 'xii'\n    if num == 11:\n        return 'xiii'\n    if num == 12:\n        return 'xiv'\n    if num == 13:\n        return 'xv'\n    if num == 14:\n        return 'xvi'\n    if num == 15:\n        return 'xvii'\n    if num == 16:\n        return 'xviii'\n    if num == 17:\n        return 'xix'\n    if num == 18:\n        return 'xx'\n    if num == 19:\n        return 'xxi'\n    if num == 20:\n        return 'xxii'\n    if num == 21:\n        return 'xxiii'\n    if num == 22:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        return ''\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'i'\n    if number < 1000:\n        return str(number) + 'i'\n    return 'ii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    i = 0\n    while i < number:\n        if i < 10:\n            roman += chr(i + ord('a'))\n        elif i < 100:\n            roman += chr(i + ord('b'))\n        elif i < 1000:\n            roman += chr(i + ord('c'))\n        elif i < 10000:\n            roman += chr(i + ord('d'))\n        elif i < 100000:\n            roman += chr(i + ord('e'))\n        else:\n            roman += chr(i + ord('f'))\n        i += 1\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = 'ii'\n    if number < 1:\n        return 'iii'\n    elif number <= 1:\n        return roman\n    elif number < 100:\n        roman = int_to_mini_roman(number / 10)\n    else:\n        roman = int_to_mini_roman(number / 100)\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be at least 1\")\n    if number > 1000:\n        raise ValueError(\"number must be less than 1000\")\n    if number % 10 == 0:\n        return \"\"\n    if number % 100 == 0:\n        return \"i\"\n    if number % 1000 == 0:\n        return \"ii\"\n    if number % 10000 == 0:\n        return \"iii \"\n    if number % 100000 == 0:\n        return \"iv \"\n    if number % 1000000 == 0:\n        return \"v \"\n    if number % 10000000 == 0:\n        return \"vi \"\n    if number % 100000000 == 0:\n        return \"vii \"\n    if number % 1000000000 == 0:\n        return \"viii \"\n    if number % 10000000000 == 0:\n        return \"ix \"\n    if number % 100000000000 == 0:\n        return \"x \"\n    if number % 1000000000000 == 0:\n        return \"xx \"\n    if number % 100000000000000 == 0:\n        return \"xxx \"\n    if number % 1000000000000000 == 0:\n        return \"xxxi \"\n    if number % 100000000000000000 == 0:\n        return \"xxxii \"\n    if number % 1000000000000000000 == 0:\n        return \"xxxiii \"\n    if number % 100000000000000000_000 == 0:\n        return \"xxx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number < 1000:\n        return chr(number - 1) + chr(number - 2) + chr(number - 3)\n    if number < 10000:\n        return chr(number - 1000) + chr(number - 2000) + chr(number - 3000)\n    if number < 100000:\n        return chr(number - 10000) + chr(number - 12000) + chr(number - 14000)\n    if number < 1000000:\n        return chr(number - 100000) + chr(number - 120000) + chr(number - 140000)\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be greater than zero\")\n    if number > 1000:\n        raise ValueError(\"number must be less than 1000\")\n    if number > 10000:\n        raise ValueError(\"number must be less than 10000\")\n\n    # Roman numerals are always in lower case\n    return \"i\" + str(number)[2:].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    num = int(number)\n    if num < 9:\n        return num + 'i'\n    elif num < 18:\n        return num + 'x'\n    elif num < 45:\n        return num + 'c'\n    elif num < 90:\n        return num + 'd'\n    else:\n        return num + 'j'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman = roman + chr(number % 10)\n        number //= 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n\n    if number <= 999:\n        return str(number)\n    elif number <= 9999:\n        return str(number)[:3] + 'xx' + str(number)[3:]\n    elif number <= 99999:\n        return str(number)[:4] + 'xxx' + str(number)[4:]\n    else:\n        return str(number)[:5] + 'xx' + str(number)[5:]+'x'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be a positive integer.\")\n    if number > 1000:\n        raise ValueError(\"Number must be less than 1000.\")\n\n    if number < 400:\n        return string_to_roman(number)\n    if number < 600:\n        return string_to_roman(number) + 'c'\n    if number < 900:\n        return string_to_roman(number) + 'd'\n    if number < 1200:\n        return string_to_roman(number) + 'e'\n    if number < 1500:\n        return string_to_roman(number) + 'f'\n    if number < 1900:\n        return string_to_roman(number) + 'g'\n    if number < 2200:\n        return string_to_roman(number) + 'h'\n    if number < 2500:\n        return string_to_roman(number) + 'i'\n    if number < 3000:\n        return string_to_roman(number) + 'j'\n    if number < 4000:\n        return string_to_roman(number) + 'k'\n    if number < 5000:\n        return string_to_roman(number) + 'l'\n    if number < 6000:\n        return string_to_roman(number) +'m'\n    if number < 7000:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = []\n    for i in range(1, 1000):\n        roman.append(i)\n    roman.reverse()\n    if number > 1000:\n        number = number / 1000\n    for i in range(1, number + 1):\n        roman.append('x')\n    return ''.join(roman)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return''\n    if number < 10:\n        return 'i'\n    elif number < 100:\n        return 'x'\n    elif number < 1000:\n        return 'xx'\n    elif number < 1000000:\n        return 'xxx'\n    else:\n        return 'xxxi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1:\n        return \"i\" * (number - 1)\n    else:\n        num = number % 100\n        if num < 10:\n            return \"i\" + str(num)\n        elif num < 20:\n            return \"ii\" + str(num)\n        elif num < 30:\n            return \"iii \" + str(num)\n        elif num < 40:\n            return \"iv \" + str(num)\n        elif num < 50:\n            return \"v \" + str(num)\n        elif num < 60:\n            return \"vi \" + str(num)\n        elif num < 70:\n            return \"vii \" + str(num)\n        elif num < 80:\n            return \"viii \" + str(num)\n        elif num < 90:\n            return \"ix \" + str(num)\n        else:\n            return \"x \" + str(num)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    if number == 1:\n        roman = 'I'\n    elif number < 10:\n        roman += str(number)\n    elif number < 100:\n        roman += 'XC'\n        roman += str(number / 10)\n        roman += str(number % 10)\n    elif number < 1000:\n        roman += 'CD'\n        roman += str(number / 100)\n        roman += str(number % 100)\n    elif number < 10000:\n        roman += 'CM'\n        roman += str(number / 1000)\n        roman += str(number % 1000)\n    elif number < 100000:\n        roman += 'D'\n        roman += str(number / 10000)\n        roman += str(number % 10000)\n    elif number < 1000000:\n        roman += 'M'\n        roman += str(number / 100000)\n        roman += str(number % 100000)\n    elif number < 1000000000:\n        roman += 'X'\n        roman += str(number / 1000000)\n        roman += str(number % 1000000)\n    elif number < 1000000000000:\n        roman += 'L'\n        roman += str(number / 100000000)\n        roman += str(number % 100000000)\n    elif number < 1000000000000000:\n        roman += 'C'\n        roman += str(number / 100000000000)\n        roman += str(number % 100000000000)\n    elif", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1:\n        raise ValueError('only positive integers are allowed')\n    if number > 1000:\n        raise ValueError('only numbers up to 1000 are allowed')\n    if number < 100:\n        return number + 'i'\n    if number < 1000:\n        return number + 'ii'\n    return number + 'iii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return None\n    if number > 1000:\n        return None\n    if number < 1000:\n        return number.zfill(2)\n    if number < 1000:\n        return''.join([str(int_to_mini_roman(number//10))])\n    if number < 1000:\n        return''.join([str(int_to_mini_roman(number//100))])\n    if number < 1000:\n        return''.join([str(int_to_mini_roman(number//1000))])\n    return''.join([str(int_to_mini_roman(number//10000))])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    elif number < 10:\n        return number + 'i'\n    elif number < 100:\n        return number + 'x'\n    else:\n        return number + 'xx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = ''\n    if number < 1:\n        return ''\n    if number < 100:\n        roman_numeral += 'i'\n    elif number < 1000:\n        roman_numeral += 'ii'\n    elif number < 10000:\n        roman_numeral += 'iii'\n    elif number < 1000000:\n        roman_numeral += 'iv'\n    elif number < 10000000:\n        roman_numeral += 'v'\n    elif number < 100000000:\n        roman_numeral += 'vi'\n    elif number < 1000000000:\n        roman_numeral += 'vii'\n    elif number < 10000000000:\n        roman_numeral += 'viii'\n    elif number < 100000000000:\n        roman_numeral += 'ix'\n    elif number < 1000000000000:\n        roman_numeral += 'x'\n    elif number < 100000000000000:\n        roman_numeral += 'xi'\n    elif number < 1000000000000000:\n        roman_numeral += 'xii'\n    elif number < 1000000000000000000:\n        roman_numeral += 'xiii'\n    elif number < 1000000000000000000000:\n        roman_numeral += 'xiv'\n    elif number < 10000000000000000000:\n        roman_numeral += 'xv'\n    elif number < 100000000000000000000:\n        roman_numeral += 'xvi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    num = str(number)\n    if num.isdigit():\n        num = num[1:]\n    num = num.lower()\n    num = num.replace('.', '')\n    num = num.replace(' ', '')\n    num = num.replace(',', '')\n    num = num.replace('-', '')\n    num = num.replace('(', '')\n    num = num.replace(')', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('-', '')\n    num = num.replace('(', '')\n    num = num.replace(')', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('-', '')\n    num = num.replace('(', '')\n    num = num.replace(')', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('-', '')\n    num = num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'xx'\n    if number < 200:\n        return 'ii'\n    if number < 400:\n        return 'iii'\n    if number < 600:\n        return 'iv'\n    if number < 800:\n        return 'v'\n    if number < 1000:\n        return 'vi'\n    if number < 1200:\n        return 'vii'\n    if number < 1400:\n        return 'viii'\n    if number < 1600:\n        return 'ix'\n    if number < 1800:\n        return 'x'\n    if number < 1900:\n        return 'xi'\n    if number < 2000:\n        return 'xxii'\n    if number < 2200:\n        return 'xxiii'\n    if number < 2400:\n        return 'xxiv'\n    if number < 2600:\n        return 'xxvix'\n    if number < 2800:\n        return 'xxvi'\n    if number < 3000:\n        return 'xxvii'\n    if number < 3600:\n        return 'xxviii'\n    if number < 4000:\n        return 'xxix'\n    if number < 5000:\n        return 'xxx'\n    if number < 6000:\n        return 'xxxii'\n    if number < 7000:\n        return 'xxxiii'\n    if number <", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(0, 1000):\n        if number % i == 0:\n            roman += str(i)\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return \"i\"\n    if number < 100:\n        return \"ii\"\n    if number < 1000:\n        return \"iii \" + str(number / 100)\n    if number < 10000:\n        return \"iv \" + str(number / 1000)\n    if number < 100000:\n        return \"v \" + str(number / 10000)\n    if number < 1000000:\n        return \"vi \" + str(number / 100000)\n    if number < 10000000:\n        return \"vii \" + str(number / 1000000)\n    if number < 100000000:\n        return \"viii \" + str(number / 10000000)\n    if number < 1000000000:\n        return \"ix \" + str(number / 100000000)\n    return \"xx \" + str(number / 1000000000)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return '0' + str(num)\n    if num < 100:\n        return str(num) + 'x'\n    if num < 1000:\n        return str(num) + 'xx'\n    if num < 10000:\n        return str(num) + 'xxx'\n    return str(num) + 'xli'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        raise ValueError('invalid number')\n    number = int(number)\n    if number <= 0:\n        return 'xx'\n    number = number % 1000\n    if number <= 0:\n        return 'cc'\n    number = number / 1000\n    if number <= 0:\n        return 'ii'\n    number = number / 100\n    if number <= 0:\n        return 'vi'\n    number = number / 10\n    if number <= 0:\n        return 'iv'\n    number = number / 1\n    if number <= 0:\n        return 'i'\n    return ''.join([chr(i) for i in range(number)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be >= 1\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n    num = number\n    num = num / 100\n    num = num / 10\n    num = num / 1\n    num = num * 10\n    num = num * 100\n    num = num * 1000\n    num = num * 10000\n    num = num * 1000000\n    num = num * 1000000000\n    num = num * 100000000\n    num = num * 1000000000\n    num = num * 1000000000000\n    num = num * 100000000000000\n    num = num * 1000000000000000000\n    num = num * 1000000000000000000000\n    num = num * 1000000000000000000000\n    num = num * 1000000000000000000000\n    num = num * 1000000000000000000000\n    num = num * 1000000000000000000000\n    num = num * 1000000000000000000000\n    num = num * 1000000000000000000000\n    num = num * 1000000000000000000000\n    num = num * 1000000000000000000000\n    num = num * 1000000000000000000000\n    num = num * 1000000000000000000000\n    num = num * 1000000000000000000000\n    num = num * 1000000000000000000000\n    num = num * 1000000000000000000000", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return '1'\n    elif number <= 999:\n        return '1' + str(number / 100)\n    else:\n        return '1' + str(number / 1000) + 'x' + str(number % 1000)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n\n    # Determine if number is a century (XX) or a thousand (XXX)\n    if number % 100 == 0 and number!= 1:\n        return 'xx' + str(int(number // 100))\n    if number % 1000 == 0 and number!= 1:\n        return 'xv' + str(int(number // 1000))\n    return 'xv' + str(int(number // 1000))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\"]\n    for i in range(1, number + 1):\n        roman[i] = roman[i - 1] + str(i)\n    return roman[number - 1].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # The last digit is always zero\n    if number > 1000:\n        return ''.join([int_to_mini_roman(number // 1000)] + [int_to_mini_roman(number % 1000)])\n\n    if number < 0:\n        return ''.join([int_to_mini_roman(number + 1000)] + [int_to_mini_roman(number % 1000)])\n\n    if number < 100:\n        return ''.join([int_to_mini_roman(number)] + ['x'])\n\n    if number < 400:\n        return ''.join([int_to_mini_roman(number)] + ['c'])\n\n    if number < 1000:\n        return ''.join([int_to_mini_roman(number)] + ['v'])\n\n    return ''.join([int_to_mini_roman(number)] + ['ii'])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        number = number // 10\n        roman += ('x' * number)\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert 1 <= number <= 1000\n    num = number\n    roman = []\n    while num > 0:\n        roman.append(num % 10)\n        num //= 10\n    roman.reverse()\n    return ''.join(roman)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return \"\"\n    num = number\n    # The first digit is always a capital letter\n    num = num[1:]\n    # If the number is divisible by 100, we can split it into two\n    # digits and use the first one as a capital letter, and the second\n    # as a numeral\n    if num % 100 == 0:\n        num, num2 = divmod(num, 100)\n        num2 = int_to_mini_roman(num2)\n        return num2 + num\n    # Otherwise, we have to split it into three\n    # digits and use the first two as a capital letter, and the third\n    # as a numeral\n    num2, num3 = divmod(num, 100)\n    num3 = int_to_mini_roman(num3)\n    return num2 + num3 + num2", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    roman = ['i', 'v', 'x', 'l', 'c', 'd','m', 'l','s', '']\n\n    for i in range(0, len(roman)):\n        if number < 1000 and number % 10 == 0:\n            roman[i] += '1'\n        else:\n            roman[i] += number % 10\n\n    return ''.join(roman)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number <= 1:\n        return '1'\n    elif number <= 6:\n        return 'ii'\n    elif number <= 9:\n        return 'iii'\n    elif number <= 12:\n        return 'iv'\n    elif number <= 15:\n        return 'v'\n    elif number <= 18:\n        return 'vi'\n    elif number <= 21:\n        return 'vii'\n    elif number <= 24:\n        return 'viii'\n    elif number <= 28:\n        return 'ix'\n    elif number <= 31:\n        return 'x'\n    elif number <= 36:\n        return 'xi'\n    elif number <= 40:\n        return 'xx'\n    elif number <= 45:\n        return 'xii'\n    elif number <= 48:\n        return 'xii'\n    elif number <= 51:\n        return 'xiii'\n    elif number <= 54:\n        return 'xxiv'\n    elif number <= 57:\n        return 'xxv'\n    elif number <= 60:\n        return 'xxvi'\n    elif number <= 62:\n        return 'xxvii'\n    elif number <= 64:\n        return 'xxviii'\n    elif number <= 66:\n        return 'xxix'\n    elif number <= 70:\n        return 'xli'\n    elif number <= 72:\n        return 'xlii'\n    elif number <=", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return ''\n    if num > 1000:\n        return ''\n    if num < 1000:\n        return str(num)\n    if num < 100:\n        return 'ii'\n    if num < 200:\n        return 'iii'\n    if num < 300:\n        return 'iv'\n    if num < 400:\n        return 'v'\n    if num < 500:\n        return 'vi'\n    if num < 600:\n        return 'vii'\n    if num < 700:\n        return 'viii'\n    if num < 800:\n        return 'ix'\n    if num < 900:\n        return 'x'\n    if num < 1000:\n        return 'xi'\n    return 'xx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        return \"{0}c{1}d{2}\".format(number / 1000, number % 1000, number)\n    if number > 900:\n        return \"{0}c{1}d{2}\".format(number / 900, number % 900, number)\n    if number > 700:\n        return \"{0}c{1}d{2}\".format(number / 700, number % 700, number)\n    if number > 600:\n        return \"{0}c{1}d{2}\".format(number / 600, number % 600, number)\n    if number > 500:\n        return \"{0}c{1}d{2}\".format(number / 500, number % 500, number)\n    if number > 400:\n        return \"{0}c{1}d{2}\".format(number / 400, number % 400, number)\n    if number > 300:\n        return \"{0}c{1}d{2}\".format(number / 300, number % 300, number)\n    if number > 200:\n        return \"{0}c{1}d{2}\".format(number / 200, number % 200, number)\n    if number > 100:\n        return \"{0}c{1}d{2}\".format(number / 100, number % 100, number)\n    if number > 0:\n        return \"{0}c{1}d{2}", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = ''\n    while number > 0:\n        roman_numeral += chr(ord('A') + (number // 10))\n        number = number % 10\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        number /= 10\n        roman += chr(number % 10 + 1)\n    roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # This is a Python 3.x implementation, but the Python 2.x version is\n    # very similar, so we include it here for completeness.\n    #\n    # The Roman numerals are ordered in the following way:\n    #\n    #   I    V    X    L    C    D    M    G    F    E\n    #   =====  =====  =====  =====  =====  =====  =====  =====  =====\n    #   I    V    X    L    C    D    M    G    F    E\n    #   100  50   10   5    1    0    0    0    0    0\n    #   101  51   11   6    1    0    0    0    0    0\n    #   102  52   12   7    1    0    0    0    0    0\n    #   103  53   13   8    1    0    0    0    0    0\n    #   104  54   14   9    1    0    0    0    0    0\n    #   105  55  15   0    1    0    0    0    0    0\n    #   106", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 1:\n        return 'i'\n    elif number < 10:\n        return 'i'\n    elif number < 100:\n        return 'x'\n    elif number < 1000:\n        return 'xx'\n    else:\n        return 'xxx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number <= 1:\n        return 'xx'\n    if number <= 2:\n        return 'x'\n    if number <= 3:\n        return 'xi'\n    if number <= 4:\n        return 'x'ii\n    if number <= 5:\n        return 'xi'\n    if number <= 6:\n        return 'x'iii\n    if number <= 7:\n        return 'x'iv\n    if number <= 8:\n        return 'x'v\n    if number <= 9:\n        return 'x'vi\n    if number <= 10:\n        return 'x'vii\n    if number <= 11:\n        return 'x'viii\n    if number <= 12:\n        return 'x'ix\n    if number <= 13:\n        return 'x'x\n    if number <= 14:\n        return 'xi'\n    if number <= 15:\n        return 'x'ii\n    if number <= 16:\n        return 'x'iii\n    if number <= 17:\n        return 'x'iv\n    if number <= 18:\n        return 'x'v\n    if number <= 19:\n        return 'x'vi\n    if number <= 20:\n        return 'x'vii\n    if number <= 21:\n        return 'x'viii\n    if number <= 22:\n        return 'x'ix\n    if number <= 23:\n        return 'x'x\n    if number <= 24:\n        return 'xi'\n    if number <= 25:\n        return 'x'ii\n    if number <= 26:\n        return 'x'iii\n    if number <= 27:\n        return 'x'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO(david): Use a dictionary for this.\n    if number <= 1:\n        return '0'\n    if number <= 9:\n        return '1'\n    if number <= 99:\n        return '2'\n    if number <= 199:\n        return '3'\n    if number <= 999:\n        return '4'\n    if number <= 1999:\n        return '5'\n    if number <= 9999:\n        return '6'\n    if number <= 19999:\n        return '7'\n    if number <= 99999:\n        return '8'\n    if number <= 199999:\n        return '9'\n    if number <= 999999:\n        return 'x'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'xxx'\n    if number > 1000:\n        return 'xxxi'\n    if number % 100 < 10:\n        return 'x{0:d}'.format(number % 100)\n    if number % 100 >= 10:\n        return '{0:d}{1:d}'.format(number % 100, number // 100)\n    return '{0:d}{1:d}{2:d}'.format(number % 100, number // 100, number % 100 // 10)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = [\n        'M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XCL', 'XL', 'X',\n        'IX', 'V', 'IV', 'I', 'II', 'i', 'I', 'I', 'I', 'I', 'I',\n        'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i',\n        'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i',\n        'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i',\n        'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i',\n        'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i',\n        'i'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return '1'\n    elif number <= 9:\n        return number.zfill(2) + '1'\n    elif number <= 99:\n        return number.zfill(3) + '2'\n    elif number <= 999:\n        return number.zfill(4) + '3'\n    else:\n        return number.zfill(5) + '4'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = 'i'\n    number = abs(number)\n    while number > 1:\n        roman = roman.lower()\n        number = number // 10\n    return roman + number.zfill(2)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n    if number > 1000:\n        raise ValueError('Number must be less than or equal to 1000')\n\n    roman = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv']\n    roman = [roman[i] for i in range(number - 1, 1, -1)]\n    return ''.join(roman)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number < 10:\n        return 'x'\n    if number < 100:\n        return 'xi'\n    if number < 1000:\n        return 'x'\n    return 'xxx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be greater than or equal to 1\")\n    if number < 2:\n        return ''\n    if number < 3:\n        return 'i'\n    if number < 6:\n        return 'x'\n    if number < 9:\n        return 'c'\n    if number < 12:\n        return 'd'\n    if number < 18:\n        return 'v'\n    if number < 36:\n        return 'b'\n    if number < 54:\n        return 'a'\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert number >= 1 and number <= 1000\n    roman = ''\n    while number > 0:\n        roman = roman + int_to_mini_roman(number // 10) + int_to_mini_roman(number % 10)\n        number = number // 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return '0'\n    if number <= 1:\n        return ''\n    if number <= 1:\n        return 'i'\n    if number <= 1:\n        return 'ii'\n    if number <= 1:\n        return 'iii'\n    if number <= 1:\n        return 'iv'\n    if number <= 1:\n        return 'v'\n    if number <= 1:\n        return 'vi'\n    if number <= 1:\n        return 'vii'\n    if number <= 1:\n        return 'viii'\n    if number <= 1:\n        return 'ix'\n    if number <= 1:\n        return 'x'\n    if number <= 1:\n        return 'xi'\n    if number <= 1:\n        return 'xii'\n    if number <= 1:\n        return 'xiii'\n    if number <= 1:\n        return 'xiv'\n    if number <= 1:\n        return 'xv'\n    if number <= 1:\n        return 'xvi'\n    if number <= 1:\n        return 'xvii'\n    if number <= 1:\n        return 'xviii'\n    if number <= 1:\n        return 'xx'\n    if number <= 1:\n        return 'xxi'\n    if number <= 1:\n        return 'xxx'\n    if number <= 1:\n        return 'xxi'\n    if number <= 1:\n        return 'xxii'\n    if number <= 1:\n        return 'xxiii'\n    if number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return '1'\n    elif number <= 10:\n        return 'i'\n    elif number <= 99:\n        return 'ii'\n    elif number <= 199:\n        return 'iii'\n    elif number <= 499:\n        return 'iv'\n    elif number <= 999:\n        return 'v'\n    elif number <= 9999:\n        return 'vi'\n    elif number <= 99999:\n        return 'vii'\n    elif number <= 999999:\n        return 'viii'\n    elif number <= 9999999:\n        return 'ix'\n    elif number <= 99999999:\n        return 'x'\n    elif number <= 999999999:\n        return 'xi'\n    elif number <= 9999999999:\n        return 'xii'\n    elif number <= 99999999999:\n        return 'xiii'\n    elif number <= 999999999999:\n        return 'xiv'\n    elif number <= 999999999999:\n        return 'xv'\n    elif number <= 9999999999999:\n        return 'xvi'\n    elif number <= 9999999999999:\n        return 'xvii'\n    elif number <= 99999999999999:\n        return 'xviii'\n    elif number <= 999999999999999:\n        return 'xix'\n    elif number <= 999999999999999:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 1:\n        return ''\n    if num <= 32:\n        return 'xix'\n    if num <= 99:\n        return 'xx'\n    if num <= 199:\n        return 'xv'\n    if num <= 499:\n        return 'v'\n    if num <= 999:\n        return 'x'\n    if num <= 1999:\n        return 'ix'\n    if num <= 4999:\n        return 'vx'\n    if num <= 9999:\n        return 'ixx'\n    if num <= 19999:\n        return 'xxx'\n    if num <= 99999:\n        return 'xxx'\n    if num <= 199999:\n        return 'xxxx'\n    if num <= 999999:\n        return 'xxxxx'\n    if num <= 1999999:\n        return 'xxxxxx'\n    return 'xxxxxxx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('invalid number')\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'iii'\n    if number == 13:\n        return 'ivv'\n    if number == 14:\n        return 'vix'\n    if number == 15:\n        return 'viix'\n    if number == 16:\n        return 'viiiix'\n    if number == 17:\n        return 'xx'\n    if number == 18:\n        return 'xii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xxii'\n    if number == 21:\n        return 'xxiii'\n    if number == 22:\n        return 'xxiv'\n    if number == 23:\n        return 'xxvx'\n    if number == 24:\n        return 'xxvi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = number\n    num = num % 10\n    if num == 0:\n        return 'x'\n    if num < 2:\n        return 'i'\n    if num < 5:\n        return 'v'\n    if num < 10:\n        return 'c'\n    if num < 20:\n        return 'd'\n    if num < 50:\n        return 'x'\n    if num < 100:\n        return 'l'\n    if num < 200:\n        return 'c'\n    if num < 500:\n        return'm'\n    if num < 1000:\n        return 'j'\n    if num < 10000:\n        return 'x'\n    return 'z'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += chr(number % 10)\n        number /= 10\n    roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n\n    string = ''\n    while number > 0:\n        string = string + chr(number % 10)\n        number //= 10\n\n    string = string.lower()\n    return string", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Invalid number: %d' % number)\n    if number == 1:\n        return '1'\n    if number == 1000:\n        return 'xx'\n    if number % 100 == 0:\n        return 'xi'\n    if number % 10 == 0:\n        return 'x'\n    if number % 10 == 0:\n        return 'ix'\n    if number % 10 == 0:\n        return 'v'\n    if number % 10 == 0:\n        return 'iv'\n    if number % 10 == 0:\n        return 'iii'\n    if number % 100 == 0:\n        return 'ii'\n    if number % 100 == 0:\n        return 'i'\n    if number % 100 == 0:\n        return 'iv'\n    if number % 100 == 0:\n        return 'iii'\n    if number % 100 == 0:\n        return 'ii'\n    if number % 100 == 0:\n        return 'i'\n    if number % 100 == 0:\n        return 'iv'\n    if number % 100 == 0:\n        return 'iii'\n    if number % 100 == 0:\n        return 'ii'\n    if number % 100 == 0:\n        return 'i'\n    if number % 100 == 0:\n        return 'iv'\n    if number % 100 == 0:\n        return 'iii'\n    if number % 100 == 0:\n        return 'ii", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n\n    if number < 100:\n        return ''\n\n    number = number // 100\n    if number < 10 or number == 100:\n        number = number * 10 + 1\n\n    if number < 100:\n        return ''\n\n    number = number // 10\n    if number < 10 or number == 100:\n        number = number * 10 + 1\n\n    if number < 10:\n        return ''\n\n    number = number // 10\n    if number < 10:\n        return ''\n\n    number = number * 10 + 1\n\n    if number < 10:\n        return ''\n\n    number = number * 10 + 1\n\n    if number < 10:\n        return ''\n\n    number = number * 10 + 1\n\n    if number < 10:\n        return ''\n\n    number = number * 10 + 1\n\n    if number < 10:\n        return ''\n\n    number = number * 10 + 1\n\n    if number < 10:\n        return ''\n\n    number = number * 10 + 1\n\n    if number < 10:\n        return ''\n\n    number = number * 10 + 1\n\n    if number < 10:\n        return ''\n\n    number = number * 10 + 1\n\n    if number < 10:\n        return ''\n\n    number = number * 10 + 1\n\n    if number < 10:\n        return ''\n\n    number = number * 10 + 1\n\n    if number < 10:\n        return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be a positive integer')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n    if number % 100 == 0:\n        return number + 'xx'\n    remainder = number % 100\n    return '(' + int_to_mini_roman(remainder) + ')' + int_to_mini_roman(number // 100)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii']\n    num = int(number)\n    if num < 1:\n        return ''\n    elif num <= 4:\n        return roman[num - 1]\n    elif num <= 9:\n        return roman[num - 1] +'' + roman[num - 2]\n    elif num <= 12:\n        return roman[num - 1] +'' + roman[num - 2] +'' + roman[num - 3]\n    elif num <= 15:\n        return roman[num - 1] +'' + roman[num - 2] +'' + roman[num - 3] +'' + roman[num - 4]\n    elif num <= 18:\n        return roman[num - 1] +'' + roman[num - 2] +'' + roman[num - 3] +'' + roman[num - 4] +'' + roman[num - 5]\n    elif num <= 21:\n        return roman[num - 1] +'' + roman[num - 2] +'' + roman[num - 3] +'' + roman[num - 4] +'' + roman[num - 5] +'' + roman[num - 6]\n    elif num <= 24:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xx'\n    if number == 13:\n        return 'xi'\n    if number == 14:\n        return 'xxii'\n    if number == 15:\n        return 'xxiii'\n    if number == 16:\n        return 'xxiv'\n    if number == 17:\n        return 'xxv'\n    if number == 18:\n        return 'xxvi'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xixi'\n    if number == 21:\n        return 'xixi'\n    if number == 22:\n        return 'xixi'\n    if number == 23:\n        return 'xixi'\n    if number == 24:\n        return 'xixii'\n    if number == 25:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 1:\n        return \"\"\n    if num <= 9:\n        return num.lower()\n    elif num <= 99:\n        return \"ix\"\n    elif num <= 199:\n        return \"ii\"\n    elif num <= 399:\n        return \"vi\"\n    elif num <= 999:\n        return \"xx\"\n    elif num <= 1999:\n        return \"xxi\"\n    elif num <= 4999:\n        return \"xxvi\"\n    elif num <= 9999:\n        return \"xxviii\"\n    elif num <= 19999:\n        return \"xxix\"\n    elif num <= 39999:\n        return \"xxxii\"\n    elif num <= 59999:\n        return \"xxxiv\"\n    elif num <= 99999:\n        return \"xxxvix\"\n    elif num <= 199999:\n        return \"xxxix\"\n    elif num <= 399999:\n        return \"xlvii\"\n    elif num <= 599999:\n        return \"xlix\"\n    elif num <= 999999:\n        return \"xlxxiii\"\n    elif num <= 1999999:\n        return \"xlxxiv\"\n    elif num <= 5000000:\n        return \"xlxxxv\"\n    elif num <= 9999999:\n        return \"xlxxxvii\"\n    elif num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, 1000):\n        roman += str(i)\n    roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return \"\"\n    if number < 1000:\n        number = number / 100\n        if number < 100:\n            return int_to_mini_roman(number) + \"x\"\n    if number < 1000000:\n        number = number / 1000\n        if number < 1000:\n            return int_to_mini_roman(number) + \"i\"\n    if number < 1000000000:\n        number = number / 1000000\n        if number < 1000:\n            return int_to_mini_roman(number) + \"c\"\n    if number < 100000000000:\n        number = number / 1000000000\n        if number < 1000:\n            return int_to_mini_roman(number) + \"d\"\n    if number < 1000000000000:\n        number = number / 100000000000\n        if number < 1000:\n            return int_to_mini_roman(number) + \"m\"\n    if number < 1000000000000001:\n        number = number / 1000000000000\n        if number < 1000:\n            return int_to_mini_roman(number) + \"y\"\n    return int_to_mini_roman(number) + \"l\"\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 1:\n        return \"1\"\n    elif num <= 10:\n        return \"i\"\n    elif num <= 99:\n        return \"x\"\n    elif num <= 999:\n        return \"xx\"\n    elif num <= 9999:\n        return \"xxx\"\n    elif num <= 99999:\n        return \"xxxx\"\n    elif num <= 999999:\n        return \"xxxxx\"\n    else:\n        raise ValueError(\"number must be less than 999999\")", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'one'\n    if number < 10:\n        return 'xx'\n    if number < 100:\n        return 'xx'\n    if number < 1000:\n        return 'x'\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return '1'\n    if number <= 99:\n        return '0' + int_to_mini_roman(number - 1)\n    return 'i' + int_to_mini_roman(number - 100)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Use regex to make this faster\n    if number <= 1:\n        return ''\n    num = number // 1000\n    if num == 1:\n        return 'i'\n    if num == 2:\n        return 'x'\n    if num == 3:\n        return 'c'\n    if num == 4:\n        return 'd'\n    if num == 5:\n        return'm'\n    if num == 6:\n        return 'l'\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be >= 1')\n    if number == 1:\n        return '1'\n    if number < 7:\n        return 'i'\n    if number < 18:\n        return 'x'\n    if number < 54:\n        return 'c'\n    if number < 92:\n        return 'd'\n    if number < 180:\n        return'm'\n    if number < 240:\n        return 'l'\n    if number < 300:\n        return 'x'\n    if number < 390:\n        return 'c'\n    if number < 460:\n        return 'd'\n    if number < 540:\n        return'm'\n    if number < 630:\n        return 'l'\n    if number < 750:\n        return 'x'\n    if number < 860:\n        return 'c'\n    if number < 990:\n        return 'd'\n    if number < 1000:\n        return'm'\n    raise ValueError('Number must be <= 1000')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive integer')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 100:\n        return '1' + str(number)\n    if number < 1000:\n        return str(number)\n    if number % 100 == 0:\n        return 'xx' + str(number / 100)\n    return 'i' + str(number / 100) + 'x' + str(number % 100)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, number + 1):\n        roman = ''.join((roman, _('M'), _('CM'), _('D'), _('CD'), _('C'), _('XC'), _('L'), _('XL'), _('X'), _('IX'), _('V'), _('IV'), _('I'), _('X')))\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 1:\n        return 'x'\n    elif number == 2:\n        return 'i'\n    elif number == 3:\n        return 'v'\n    elif number == 4:\n        return 'l'\n    elif number == 5:\n        return 'c'\n    elif number == 6:\n        return 'x'\n    elif number == 7:\n        return 'd'\n    elif number == 8:\n        return'm'\n    elif number == 9:\n        return 'x'\n    else:\n        raise ValueError('invalid integer: {}'.format(number))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, 1000):\n        if number % i == 0:\n            roman += i\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ['i', 'x', 'ii', 'iii', 'iv', 'v', 'vi', 'vii']\n    roman_numeral = roman[int(number)]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    num = number\n    if num < 10:\n        return num.lower()\n    num = num - 10\n    if num < 100:\n        return num.lower()\n    num = num - 100\n    if num < 1000:\n        return num.lower()\n    num = num - 1000\n    if num < 10000:\n        return num.lower()\n    num = num - 10000\n    if num < 100000:\n        return num.lower()\n    num = num - 100000\n    if num < 1000000:\n        return num.lower()\n    num = num - 1000000\n    if num < 10000000:\n        return num.lower()\n    num = num - 10000000\n    if num < 100000000:\n        return num.lower()\n    num = num - 100000000\n    if num < 1000000000:\n        return num.lower()\n    num = num - 1000000000\n    if num < 10000000000:\n        return num.lower()\n    num = num - 10000000000\n    if num < 1000000000000:\n        return num.lower()\n    num = num - 1000000000000\n    if num < 100000000000000:\n        return num.lower()\n    num = num - 100000000000000\n    return num.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n    if number < 500:\n        return number.zfill(2) + \"i\"\n    elif number < 1000:\n        return number.zfill(3) + \"ii\"\n    elif number < 1500:\n        return number.zfill(4) + \"iii\"\n    elif number < 2000:\n        return number.zfill(5) + \"iv\"\n    elif number < 2500:\n        return number.zfill(6) + \"v\"\n    elif number < 3000:\n        return number.zfill(7) + \"vi\"\n    elif number < 4000:\n        return number.zfill(8) + \"vii\"\n    elif number < 5000:\n        return number.zfill(9) + \"viii\"\n    elif number < 6000:\n        return number.zfill(10) + \"ix\"\n    elif number < 7000:\n        return number.zfill(11) + \"x\"\n    elif number < 8000:\n        return number.zfill(12) + \"xi\"\n    elif number < 9000:\n        return number.zfill(13) + \"xii\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    elif number == 1:\n        return 'I'\n    elif number < 100:\n        return ''\n    elif number < 1000:\n        return ''\n    elif number < 10000:\n        return ''\n    else:\n        return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        return None\n\n    # Convert to a string and lowercase it\n    number_str = str(number).lower()\n    number_str = number_str.replace('i', 'x')\n    number_str = number_str.replace('ii', 'x')\n    number_str = number_str.replace('iii', 'x')\n    number_str = number_str.replace('iv', 'x')\n    number_str = number_str.replace('v', 'x')\n    number_str = number_str.replace('vi', 'x')\n    number_str = number_str.replace('vii', 'x')\n    number_str = number_str.replace('viii', 'x')\n    number_str = number_str.replace('ix', 'x')\n    number_str = number_str.replace('x', 'xx')\n\n    # Convert to an integer and return it\n    number_str = number_str.split('x')[0]\n    return number_str", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return ''\n    elif num <= 9:\n        return ''\n    elif num <= 18:\n        return 'x'\n    elif num <= 36:\n        return 'i'\n    elif num <= 59:\n        return 'c'\n    elif num <= 99:\n        return 'd'\n    elif num <= 199:\n        return'm'\n    elif num <= 999:\n        return 'l'\n    else:\n        return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return '0'\n    num = number // 1000\n    num -= num // 100\n    num -= num // 10\n    num += num % 10\n    return str(num).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = number\n    if num < 10:\n        return '0' + num\n    if num < 100:\n        return num\n    if num < 1000:\n        return num.zfill(2)\n    if num < 10000:\n        return num.zfill(3)\n    if num < 100000:\n        return num.zfill(4)\n    if num < 1000000:\n        return num.zfill(5)\n    if num < 10000000:\n        return num.zfill(6)\n    if num < 100000000:\n        return num.zfill(7)\n    if num < 1000000000:\n        return num.zfill(8)\n    if num < 1000000000000:\n        return num.zfill(9)\n    if num < 100000000000000:\n        return num.zfill(10)\n    if num < 1000000000000000:\n        return num.zfill(11)\n    if num < 1000000000000000000:\n        return num.zfill(12)\n    return num.zfill(13)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = ''\n    if number <= 1:\n        return ''\n    for digit in range(number):\n        roman_numeral += chr(number % 10 + ord('a'))\n        number /= 10\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, number + 1):\n        roman += str(i)\n    roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive.')\n\n    if number < 1000:\n        return \"i\" + str(number)\n    elif number < 10000:\n        return \"c\" + str(number / 100) + \"x\" + str(number % 100)\n    elif number < 100000:\n        return \"c\" + str(number / 10000) + \",\" + str(number % 10000)\n    elif number < 1000000:\n        return \"c\" + str(number / 100000) + \",\" + str(number % 100000)\n    else:\n        return \"x\" + str(number / 1000000)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return \"i\"\n    if number < 100:\n        return str(number)\n    if number < 1000:\n        return str(number) + \"i\"\n    return \"i\" * (number - 1) + \"ii\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Calculate the number of digits in the number\n    digits = len(str(number))\n    # The first digit of the number must be a zero\n    if digits == 1:\n        return '0'\n    # The last digit of the number must be a zero\n    if digits == (number + 1):\n        return '0'\n    # The number must be divisible by three\n    if digits % 3!= 0:\n        return '0'\n    # The number must be divisible by 10\n    if digits % 10!= 0:\n        return '0'\n    # The number must be divisible by 100\n    if digits % 100!= 0:\n        return '0'\n    # The number must be divisible by 1000\n    if digits % 1000!= 0:\n        return '0'\n    # The number must be divisible by 10,000\n    if digits % 10000!= 0:\n        return '0'\n    # The number must be divisible by 100,000\n    if digits % 100000!= 0:\n        return '0'\n    # The number must be divisible by 1,000,000\n    if digits % 1000000!= 0:\n        return '0'\n    # The number must be divisible by 10,000,000\n    if digits % 10000000!= 0:\n        return '0'\n    # The number must be divisible by 100,000,000\n    if digits % 1000000000!", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return \"i\"\n    elif number < 10:\n        return \"i\"\n    elif number < 100:\n        return \"ii\"\n    elif number < 1000:\n        return \"iii.\"\n    else:\n        return \"iv\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Given a positive integer, obtain its roman numeral equivalent as a string,\n    # and return it in lowercase.\n    roman = ''\n    if number > 1000:\n        roman += 'xx'\n    if number > 900:\n        roman += 'x'\n    if number > 700:\n        roman += 'i'\n    if number > 600:\n        roman += 'v'\n    if number > 500:\n        roman += 'd'\n    if number > 400:\n        roman += 'c'\n    if number > 300:\n        roman += 'b'\n    if number > 200:\n        roman += 'a'\n    if number > 100:\n        roman +='m'\n    if number > 0:\n        roman += 'i'\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'ixx'\n    if number == 20:\n        return 'xxi'\n    if number == 21:\n        return 'xlii'\n    if number == 22:\n        return 'clxxii'\n    if number == 23:\n        return 'cdxxiii'\n    if number == 24:\n        return 'cxxvix'\n    if number == 25:\n        return 'cxxvi'\n    if", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 1:\n        return ''\n    if num <= 9:\n        return str(num)\n    if num <= 99:\n        return str(num) + 'i'\n    if num <= 999:\n        return str(num) + 'ii'\n    if num <= 9999:\n        return str(num) + 'iii'\n    if num <= 99999:\n        return str(num) + 'iv'\n    if num <= 999999:\n        return str(num) + 'v'\n    if num <= 1000000:\n        return str(num) + 'vi'\n    if num <= 10000000:\n        return str(num) + 'vii'\n    if num <= 100000000:\n        return str(num) + 'viii'\n    if num <= 1000000000:\n        return str(num) + 'ix'\n    if num <= 10000000000:\n        return str(num) + 'x'\n    if num <= 100000000000:\n        return str(num) + 'xi'\n    if num <= 1000000000000:\n        return str(num) + 'xii'\n    if num <= 100000000000000:\n        return str(num) + 'xiii'\n    if num <= 1000000000000000:\n        return str(num)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n\n    # Roman numerals are a series of numbers, each representing a given\n    # rank, with the first one being I and the last one being XXXX\n    # (where XXXXX is the maximum value, and so the smallest one)\n    #\n    # The first digit in a Roman numeral is the rank of the number. The\n    # next digits are the order of magnitude of the number, with the\n    # first one being the largest one. The last digit is the sign.\n    #\n    # The largest number in the series is XXXXX, which has rank 9.\n    # The next largest is XXXXXX, which has rank 8.\n    # The largest one that is not a multiple of XXXXX is XXXXXV,\n    # which has rank 6.\n    # The largest one that is not a multiple of XXXXXX is XXXXXIV,\n    # which has rank 5.\n    # The largest one that is not a multiple of XXXXXV is XXXXXIII,\n    # which has rank 4.\n    # The largest one that is not a multiple of XXXXXIV is XXXXXII,\n    # which has rank 3.\n    # The largest one that is not a multiple of XXXXXIII is XXXXXI,\n    # which has rank 2.\n    # The largest", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return \"\"\n    elif number < 200:\n        return number.zfill(2) + \"i\"\n    elif number < 900:\n        return number.zfill(3) + \"i\"\n    elif number < 1800:\n        return number.zfill(4) + \"i\"\n    elif number < 5000:\n        return number.zfill(5) + \"ii\"\n    elif number < 10000:\n        return number.zfill(6) + \"iii\"\n    elif number < 200000:\n        return number.zfill(7) + \"iii\"\n    else:\n        return number.zfill(8) + \"iv\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number < 10:\n        return ''.join(['i', str(number)])\n    if number < 100:\n        return ''.join(['v', str(number//10)])\n    if number < 1000:\n        return ''.join(['l', str(number//100)])\n    if number < 1000000:\n        return ''.join(['x', str(number//1000)])\n    return ''.join(['c', str(number//1000000)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return \"i\"\n    if num < 10:\n        return \"x\"\n    if num < 100:\n        return \"i\"\n    if num < 1000:\n        return \"x\"\n    return \"x\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1:\n        raise ValueError('Integer must be greater than zero.')\n    if number > 1000:\n        raise ValueError('Integer must be less than one thousand.')\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'i'\n    if number == 3:\n        return 'v'\n    if number == 4:\n        return 'c'\n    if number == 5:\n        return 'd'\n    if number == 6:\n        return 'x'\n    if number == 7:\n        return 'c'\n    if number == 8:\n        return 'd'\n    if number == 9:\n        return'm'\n    if number == 10:\n        return 'l'\n    if number == 11:\n        return 'c'\n    if number == 12:\n        return 'd'\n    if number == 13:\n        return 'x'\n    if number == 14:\n        return 'c'\n    if number == 15:\n        return 'd'\n    if number == 16:\n        return 'x'\n    if number == 17:\n        return 'c'\n    if number == 18:\n        return 'd'\n    if number == 19:\n        return 'x'\n    if number == 20:\n        return 'c'\n    if number == 21:\n        return 'd'\n    if number == 22:\n        return 'x'\n    if number == 23:\n        return 'c'\n    if number == 24:\n        return 'd'\n    if number == 25:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'i'\n    if number < 1000:\n        return 'xi' + int_to_mini_roman(number // 10) + int_to_mini_roman(number % 10)\n    if number < 10000:\n        return 'x' + int_to_mini_roman(number // 1000) + int_to_mini_roman(number % 1000)\n    if number < 100000:\n        return 'cm' + int_to_mini_roman(number // 10000) + int_to_mini_roman(number % 10000)\n    if number < 1000000:\n        return 'd' + int_to_mini_roman(number // 100000) + int_to_mini_roman(number % 100000)\n    if number < 1000000000:\n        return 'cdxx' + int_to_mini_roman(number // 1000000) + int_to_mini_roman(number % 1000000)\n    if number < 1000000000:\n        return 'cdxvi' + int_to_mini_roman(number // 1000000000) + int_to_mini_roman(number % 1000000000)\n    if number < 100000000000:\n        return 'cdxxvii' + int_to_mini_roman(number // 100000000) + int_to_", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    min_roman = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'xi', 'xii', 'xiii', 'xiv', 'xv']\n    max_roman = ['x', 'xx', 'xxx', 'xxxi', 'xxvii', 'xxvii', 'xxviii', 'xxix', 'xxx', 'xl']\n    roman = []\n    while number >= 1:\n        roman.append(min_roman[number%10])\n        number = number // 10\n    return ''.join(roman)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return'min'\n    if number > 1000:\n        return'mega'\n    if number % 100 == 0:\n        return int_to_mini_roman(number // 100) + int_to_mini_roman(number % 100)\n    return int_to_mini_roman(number // 10) + int_to_mini_roman(number % 10)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'i'\n    if number == 1:\n        return 'x'\n    if number == 2:\n        return 'xi'\n    if number == 3:\n        return 'ii'\n    if number == 4:\n        return 'iii'\n    if number == 5:\n        return 'iv'\n    if number == 6:\n        return 'v'\n    if number == 7:\n        return 'vi'\n    if number == 8:\n        return 'vii'\n    if number == 9:\n        return 'viii'\n    if number == 10:\n        return 'ix'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'ixx'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxxii'\n    if number == 23:\n        return 'xxxiii'\n    if number == 24:\n        return 'xxxiv'\n    if number == 25:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return '0'\n    if number < 10:\n        return str(number)\n    if number < 100:\n        return '{0}'.format(number)\n    if number < 1000:\n        return '{0:d} {1}'.format(number//10, number % 10)\n    else:\n        return '{0:d} {1} {2}'.format(number//100, number // 10 % 10, number % 10)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return ''\n    elif number <= 100:\n        return 'i' + str(number)\n    elif number <= 999:\n        return 'x' + str(number)\n    else:\n        return 'l' + str(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('invalid number')\n    elif number < 100:\n        return str(number) + 'i'\n    elif number < 1000:\n        return str(number) + 'xx'\n    else:\n        return str(number) + 'xxvi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        raise ValueError('Not a positive integer')\n    num = number // 1000\n    if num > 0:\n        num = num // 100\n        if num > 0:\n            num = num // 10\n            if num > 0:\n                num = num * 10\n    if num == 1:\n        return 'x'\n    elif num == 2:\n        return 'i'\n    elif num == 3:\n        return 'c'\n    elif num == 4:\n        return 'd'\n    elif num == 5:\n        return'm'\n    elif num == 6:\n        return 'j'\n    elif num == 7:\n        return 'v'\n    elif num == 8:\n        return 'b'\n    elif num == 9:\n        return 'p'\n    elif num == 10:\n        return 'x'\n    elif num == 11:\n        return 'l'\n    elif num == 12:\n        return 'c'\n    elif num == 13:\n        return 'r'\n    elif num == 14:\n        return's'\n    elif num == 15:\n        return 'x'\n    elif num == 16:\n        return 'd'\n    elif num == 17:\n        return'm'\n    elif num == 18:\n        return 'j'\n    elif num == 19:\n        return 'x'\n    elif num == 20:\n        return 'x'\n    elif num == 21:\n        return 'x'\n    elif num == 22:\n        return 'x'\n    elif num == 23:\n        return 'x'\n    elif num == 24:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 999:\n        raise ValueError(\"number must be <= 1000\")\n    if number > 998:\n        return str(number)[-2:-1].lower()\n    if number > 997:\n        return str(number)[-2:-1].lower() + 'i'\n    if number > 996:\n        return str(number)[-2:-1].lower() + 'ii'\n    if number > 955:\n        return str(number)[-2:-1].lower() + 'iii'\n    if number > 945:\n        return str(number)[-2:-1].lower() + 'iv'\n    if number > 900:\n        return str(number)[-2:-1].lower() + 'v'\n    if number > 899:\n        return str(number)[-2:-1].lower() + 'vi'\n    if number > 894:\n        return str(number)[-2:-1].lower() + 'vii'\n    if number > 813:\n        return str(number)[-2:-1].lower() + 'viii'\n    if number > 810:\n        return str(number)[-2:-1].lower() + '", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        raise ValueError(\"Number must be a positive integer\")\n    if num >= 1000:\n        raise ValueError(\"Number must be <= 1000\")\n    if num == 1:\n        return '1'\n    if num == 2:\n        return '2'\n    if num == 3:\n        return '3'\n    if num == 4:\n        return '4'\n    if num == 5:\n        return '5'\n    if num == 6:\n        return '6'\n    if num == 7:\n        return '7'\n    if num == 8:\n        return '8'\n    if num == 9:\n        return '9'\n    if num == 10:\n        return 'x'\n    if num == 11:\n        return 'xi'\n    if num == 12:\n        return 'x'ii'\n    if num == 13:\n        return 'x'iii'\n    if num == 14:\n        return 'x'iv'\n    if num == 15:\n        return 'x'v'\n    if num == 16:\n        return 'x'vi'\n    if num == 17:\n        return 'x'vii'\n    if num == 18:\n        return 'x'viii'\n    if num == 19:\n        return 'xix'\n    if num == 20:\n        return 'xx'\n    if num == 21:\n        return 'xxi'\n    if num == 22:\n        return 'xxii'\n    if num == 23:\n        return 'xx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive integer.')\n    if number >= 1000:\n        return int_to_mini_roman(number // 1000)\n    if number >= 100:\n        return int_to_mini_roman(number // 100) + 'i'\n    return int_to_mini_roman(number)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # note: xxxxxx is the smallest number that can be represented in roman numerals\n    # and xxxxxx is the largest number that can be represented in roman numerals\n    if number < 1:\n        return 'xxxx'\n    elif number == 1:\n        return 'x'\n    elif number < 200:\n        return int_to_mini_roman(number // 10) + int_to_mini_roman(number % 10)\n    elif number < 400:\n        return int_to_mini_roman(number // 100) + int_to_mini_roman(number % 100)\n    elif number < 800:\n        return int_to_mini_roman(number // 1000) + int_to_mini_roman(number % 1000)\n    else:\n        return 'xx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman += chr(number % 10)\n        number = number // 10\n    roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n\n    if number < 1:\n        raise ValueError('Number must be a positive integer.')\n\n    number = number % 1000\n    number = number // 1000\n\n    if number < 10:\n        return 'i' + str(number)\n\n    elif number < 100:\n        return 'x' + str(number)\n\n    elif number < 1000:\n        return 'c' + str(number)\n\n    else:\n        raise ValueError('Invalid number.')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    number = abs(number)\n    roman = ''\n    while number > 0:\n        if number % 10 == 0:\n            roman += 'x'\n        elif number % 100 == 0:\n            roman += 'i'\n        elif number % 1000 == 0:\n            roman += 'c'\n        number = number // 10\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n\n    if number == 1:\n        return 'x'\n\n    if number == 2:\n        return 'ii'\n\n    if number == 3:\n        return 'iii'\n\n    if number == 4:\n        return 'iv'\n\n    if number == 5:\n        return 'v'\n\n    if number == 6:\n        return 'vi'\n\n    if number == 7:\n        return 'vii'\n\n    if number == 8:\n        return 'viii'\n\n    if number == 9:\n        return 'ix'\n\n    if number == 10:\n        return 'x'\n\n    if number == 11:\n        return 'xi'\n\n    if number == 12:\n        return 'xii'\n\n    if number == 13:\n        return 'xiii'\n\n    if number == 14:\n        return 'xiv'\n\n    if number == 15:\n        return 'xv'\n\n    if number == 16:\n        return 'xvi'\n\n    if number == 17:\n        return 'xvii'\n\n    if number == 18:\n        return 'xviii'\n\n    if number == 19:\n        return 'xix'\n\n    if number == 20:\n        return 'xx'\n\n    if number == 21:\n        return 'xxi'\n\n    if number == 22:\n        return 'xxxii'\n\n    if number == 23:\n        return 'xxxiii'\n\n    if number == 24:\n        return 'xxxiv'\n\n    if number == 25:\n        return 'xxx", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    number = number % 1000\n    if number < 100:\n        return str(number) + 'i'\n    elif number < 1000:\n        return str(number) + 'ii'\n    else:\n        return str(number) + 'iii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, 1000):\n        if number % i == 0:\n            roman += (i - 1) * ('i' if number < 1000 else 'ii')\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # from http://en.wikipedia.org/wiki/Mini_Roman_notation\n    # minus signs are not counted\n    min_roman = ['i', 'v', 'x', 'l', 'c', 'd','m']\n    minus_sign = '-'\n    if number > 1000:\n        number = number / 1000\n        minus_sign = ''\n    if number == 0:\n        return ''\n    for i in range(0, len(min_roman)):\n        if number >= min_roman[i]:\n            return min_roman[i] + minus_sign\n    return 'd' + minus_sign", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'xx'\n    if number == 1:\n        return 'i'\n    if number < 100:\n        return str(number) + 'i'\n    if number < 1000:\n        return str(number) + 'ii'\n    if number < 10000:\n        return str(number) + 'iii'\n    if number < 100000:\n        return str(number) + 'iv'\n    if number < 1000000:\n        return str(number) + 'v'\n    if number < 10000000:\n        return str(number) + 'vi'\n    if number < 100000000:\n        return str(number) + 'vii'\n    if number < 1000000000:\n        return str(number) + 'viii'\n    if number < 100000000000:\n        return str(number) + 'ix'\n    if number < 1000000000000:\n        return str(number) + 'xix'\n    return 'xx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = 'iii'\n    for i in range(1, number+1):\n        roman += 'i'\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n\n    if number < 1000:\n        return \"i\" + str(number)\n\n    if number < 10000:\n        return \"x\" + str(number / 1000)\n    elif number < 100000:\n        return \"c\" + str(number / 10000)\n    elif number < 1000000:\n        return \"d\" + str(number / 100000)\n    elif number < 10000000:\n        return \"m\" + str(number / 1000000)\n    elif number < 100000000:\n        return \"cm\" + str(number / 10000000)\n    elif number < 100000000000:\n        return \"dm\" + str(number / 100000000)\n    elif number < 1000000000000:\n        return \"cd\" + str(number / 100000000000)\n    elif number < 100000000000000:\n        return \"cdef\" + str(number / 1000000000000)\n    else:\n        return \"cdmx\" + str(number / 100000000000000)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    if number <= 1:\n        return 'i'\n    elif number <= 10:\n        roman += '1'\n    elif number <= 100:\n        roman += '2'\n    elif number <= 999:\n        roman += '3'\n    elif number <= 9999:\n        roman += '4'\n    elif number <= 99999:\n        roman += '5'\n    elif number <= 999999:\n        roman += '6'\n    elif number <= 9999999:\n        roman += '7'\n    elif number <= 99999999:\n        roman += '8'\n    elif number <= 99999999:\n        roman += '9'\n    elif number <= 999999999:\n        roman += 'X'\n    elif number <= 9999999999:\n        roman += 'L'\n    elif number <= 99999999999:\n        roman += 'C'\n    elif number <= 999999999999:\n        roman += 'M'\n    elif number <= 999999990000:\n        roman += 'D'\n    elif number <= 9999999900009:\n        roman += 'CM'\n    elif number <= 9999999900009:\n        roman += 'CD'\n    elif number <= 9999999900009:\n        roman += 'D'\n    elif number <= 9999999900009:\n        roman += 'DZ'\n    elif number <= 9999999900009:\n        roman +=", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return u''\n\n    num = number\n    if num < 100:\n        return u'%s' % int_to_mini_roman(num)\n    elif num < 1000:\n        return u'%s%s' % (int_to_mini_roman(num / 100), int_to_mini_roman(num % 100))\n    else:\n        return u'%s%s' % (int_to_mini_roman(num / 1000), int_to_mini_roman(num % 1000))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return '1'\n    if number <= 9:\n        return '1' +'' * (number - 1)\n    number = number - 10\n    if number <= 4:\n        return'' * (number - 1) + '1'\n    number = number - 4\n    if number <= 2:\n        return'' * (number - 1) +''\n    number = number - 2\n    if number <= 1:\n        return'' * (number - 1) + '1' +''\n    return'' * (number - 1) +'' * (number - 1) + '1'\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 1:\n        return 'i'\n    elif num <= 100:\n        return 'x'\n    elif num <= 999:\n        return 'xx'\n    elif num <= 9999:\n        return 'xv'\n    else:\n        return 'xxvi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 1:\n        roman = ('M' + roman) * (number / 100)\n        number = number % 100\n    roman = ('M' + roman) * number\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Invalid number')\n\n    roman = ''\n    if number < 10:\n        roman = 'I'\n    elif number < 100:\n        roman = 'II'\n    elif number < 1000:\n        roman = 'III'\n    elif number < 10000:\n        roman = 'IV'\n    elif number < 100000:\n        roman = 'V'\n    elif number < 1000000:\n        roman = 'VI'\n    elif number < 10000000:\n        roman = 'VII'\n    elif number < 100000000:\n        roman = 'VIII'\n    elif number < 1000000000:\n        roman = 'IX'\n    elif number < 10000000000:\n        roman = 'X'\n    elif number < 1000000000000:\n        roman = 'XI'\n    elif number < 100000000000000:\n        roman = 'XII'\n\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = 'i'\n    num = int(number)\n    while num > 1000:\n        roman = roman + 'i'\n        num = num / 1000\n    while num > 1:\n        roman = roman + 'ii'\n        num = num / 10\n    while num > 0:\n        roman = roman + 'iii'\n        num = num / 100\n    while num > 0:\n        roman = roman + 'iv'\n        num = num / 10\n    while num > 0:\n        roman = roman + 'v'\n        num = num / 1\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be >= 1.\")\n    num = int(number)\n    if num < 10:\n        return str(num).lower()\n    if num < 100:\n        return str(num / 10).lower() + 'x' + str(num % 10).lower()\n    if num < 1000:\n        return str(num / 100).lower() + 'i' + str(num % 100).lower()\n    return str(num / 1000).lower() + 'd' + str(num % 1000).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, number + 1):\n        roman += chr(i % 10)\n    roman = roman.lower()\n    roman = ''.join(roman.split())\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return ''\n    if number <= 100:\n        return 'i{}'.format(number)\n    if number <= 900:\n        return 'ii{}'.format(number - 100)\n    if number <= 1800:\n        return 'iii{}'.format(number - 900)\n    if number <= 2400:\n        return 'iv{}'.format(number - 1800)\n    if number <= 3600:\n        return 'v{}'.format(number - 2400)\n    if number <= 7200:\n        return 'vi{}'.format(number - 3600)\n    if number <= 9600:\n        return 'vii{}'.format(number - 7200)\n    if number <= 15000:\n        return 'viii{}'.format(number - 9600)\n    if number <= 18000:\n        return 'ix{}'.format(number - 15000)\n    if number <= 24000:\n        return 'x{}'.format(number - 18000)\n    if number <= 36000:\n        return 'y{}'.format(number - 24000)\n    if number <= 72000:\n        return 'z{}'.format(number - 36000)\n    if number <= 86400:\n        return 'aa{}'.format(number - 72000)\n    if", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = [int(number//10) + '']\n    roman.append(int(number % 10) + 'i')\n    roman = ''.join(roman)\n    roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return \"\"\n\n    if num < 100:\n        return num.title()\n    elif num < 1000:\n        return num.zfill(3)\n    else:\n        return num.zfill(5)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = number % 1000\n    number = number // 1000\n    number = number % 100\n    number = number // 100\n    number = number % 10\n    number = number // 10\n    number = number + \"i\"\n    return number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Calculate the quotient\n    q = number // 10\n    # Calculate the remainder\n    r = number % 10\n    # Determine the number of digits\n    n = len(str(q))\n    # Determine the number of digits to the right of the decimal point\n    m = len(str(r))\n    # Determine the number of digits to the left of the decimal point\n    l = len(str(number))\n    # Determine the number of letters\n    l = l - n - m\n    # Determine the number of letters to the left of the decimal point\n    m = m - l\n    # Determine the number of letters to the right of the decimal point\n    n = n - m\n    # Determine the number of letters to the right of the decimal point\n    l = l - n\n    # Determine the number of letters to the right of the decimal point\n    m = m - l\n    # Determine the number of letters to the right of the decimal point\n    n = n - m\n    # Determine the number of letters to the right of the decimal point\n    l = l - n\n    # Determine the number of letters to the right of the decimal point\n    m = m - l\n    # Determine the number of letters to the right of the decimal point\n    n = n - m", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n    if number < 1:\n        return ''\n    roman = []\n    while number > 0:\n        if number % 10 == 1:\n            roman.append('i')\n        elif number % 100 == 1:\n            roman.append('v')\n        else:\n            roman.append('d')\n        number = number // 10\n    return ''.join(roman)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    if number < 1:\n        return '0'\n    if number < 1000:\n        return str(number)\n    for x in range(number // 10):\n        i = number // 10\n        if i < 10 and i!= 0:\n            return''.join([int_to_mini_roman(i)] * (10 - i))\n    return''.join([int_to_mini_roman(number % 10)] * (10 - number % 10))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = []\n    for i in range(number):\n        roman.append(str(i).lower())\n    return ''.join(roman)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(number):\n        roman += 'i'\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while number > 0:\n        roman = roman + chr(ord('a') + (number % 10))\n        number = number // 10\n\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num > 1000:\n        return 'cc' + str(num // 1000) + 'd' + str(num % 1000)\n    if num > 100:\n        return 'cdc' + str(num // 100) + 'd' + str(num % 100)\n    if num > 10:\n        return 'cdd' + str(num // 10) + 'd' + str(num % 10)\n    return str(num)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = 'i'\n    for num in range(1, 1000):\n        if num < 100:\n            roman = 'ii'\n        elif num < 500:\n            roman = 'iii'\n        elif num < 1000:\n            roman = 'iv'\n        elif num < 1500:\n            roman = 'v'\n        elif num < 2000:\n            roman = 'vi'\n        elif num < 2500:\n            roman = 'vii'\n        elif num < 3000:\n            roman = 'viii'\n        elif num < 4000:\n            roman = 'ix'\n        elif num < 5000:\n            roman = 'x'\n        elif num < 6000:\n            roman = 'xi'\n        elif num < 7000:\n            roman = 'xx'\n        elif num < 8000:\n            roman = 'xxi'\n        elif num < 9000:\n            roman = 'xxii'\n        elif num < 10000:\n            roman = 'xxiii'\n        elif num < 11000:\n            roman = 'xxiv'\n        elif num < 12000:\n            roman = 'xxv'\n        elif num < 13000:\n            roman = 'xxvi'\n        elif num < 14000:\n            roman = 'xxvii'\n        elif num < 15000:\n            roman = 'xxviii'\n        elif num <", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n    if number < 1000:\n        return int_to_mini_roman(number // 100) + 'i' + int_to_mini_roman(number % 100)\n    if number < 10000:\n        return int_to_mini_roman(number // 1000) + 'ii' + int_to_mini_roman(number % 1000)\n    if number < 100000:\n        return int_to_mini_roman(number // 10000) + 'iii' + int_to_mini_roman(number % 10000)\n    if number < 1000000:\n        return int_to_mini_roman(number // 100000) + 'iv' + int_to_mini_roman(number % 100000)\n    if number < 10000000:\n        return int_to_mini_roman(number // 1000000) + 'v' + int_to_mini_roman(number % 1000000)\n    if number < 100000000:\n        return int_to_mini_roman(number // 1000000000) + 'x' + int_to_mini_roman(number % 1000000000)\n    if number < 1000000000:\n        return int_to_mini_roman(number // 100000000", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return None\n    num = num % 1000\n    if num < 10:\n        return num + 'x'\n    if num < 100:\n        return num + 'i'\n    if num < 1000:\n        return num + 'd'\n    return num + 'l'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = 'cc'\n    num = int(number)\n    while num > 1000:\n        num = num / 1000\n        roman = roman + 'cc'\n    while num > 9:\n        num = num / 10\n        roman = roman + 'cc'\n    while num > 1:\n        num = num / 1\n        roman = roman + 'cc'\n    return roman[-len(roman):].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number <= 1000:\n        return '%i' % number\n    if number > 1000:\n        num = number / 1000\n        return '%i.%i' % (int_to_mini_roman(num), num % 1000)\n    if number > 900:\n        num = number / 900\n        return '%i.%i' % (int_to_mini_roman(num), num % 900)\n    if number > 700:\n        num = number / 700\n        return '%i.%i' % (int_to_mini_roman(num), num % 700)\n    if number > 600:\n        num = number / 600\n        return '%i.%i' % (int_to_mini_roman(num), num % 600)\n    if number > 500:\n        num = number / 500\n        return '%i.%i' % (int_to_mini_roman(num), num % 500)\n    if number > 400:\n        num = number / 400\n        return '%i.%i' % (int_to_mini_roman(num), num % 400)\n    if number > 300:\n        num = number / 300\n        return '%i.%i' % (int_to_mini_roman(num), num % 300)\n    if number > 200", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    elif number < 1000:\n        return chr(number + ord('a') - 1) + chr(number - ord('a') + ord('z'))\n    else:\n        return 'cc' + chr(number - ord('a') + ord('z')) + 'cc'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1:\n        return ''\n    if number == 1:\n        return 'x'\n    if number >= 100 and number <= 199:\n        return 'i' + int_to_mini_roman(number - 100)\n    if number >= 200 and number <= 299:\n        return 'ii' + int_to_mini_roman(number - 200)\n    if number >= 300 and number <= 399:\n        return 'iii' + int_to_mini_roman(number - 300)\n    if number >= 400 and number <= 499:\n        return 'iv' + int_to_mini_roman(number - 400)\n    if number >= 500 and number <= 599:\n        return 'v' + int_to_mini_roman(number - 500)\n    if number >= 600 and number <= 699:\n        return 'vi' + int_to_mini_roman(number - 600)\n    if number >= 700 and number <= 999:\n        return 'vii' + int_to_mini_roman(number - 700)\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, 1000):\n        if number < i:\n            break\n        roman += chr(i)\n    return roman"]]