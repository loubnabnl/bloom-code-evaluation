[["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'Yes'\n    if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'Yes'\n    if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'Yes'\n    if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name[0] not in string.ascii_letters:\n            return 'No'\n        if file_name[1] not in string.ascii_letters:\n            return 'No'\n        if file_name[2] not in string.ascii_letters:\n            return 'No'\n        if file_name[3] not in string.ascii_letters:\n            return 'No'\n        if file_name[4] not in string.ascii_letters:\n            return 'No'\n        if file_name[5] not in string.ascii_letters:\n            return 'No'\n        if file_name[6] not in string.ascii_letters:\n            return 'No'\n        if file_name[7] not in string.ascii_letters:\n            return 'No'\n        if file_name[8] not in string.ascii_letters:\n            return 'No'\n        if file_name[9] not in string.ascii_letters:\n            return 'No'\n        if file_name[10] not in string.asci", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:1]!= '.':\n        return 'No'\n    if file_name[-1] not in ['.txt', '.exe', '.dll']:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'Yes'\n    if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return 'No'\n        if file_name.find('.') == len(file_name", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') ==", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        return 'No", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') ==", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:1]!= '.':\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name[:2]!= '.':\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name[:3]!= '.':\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name[:4]!= '.':\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name[:5]!= '.':\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name[:6]!= '.':\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == len(file_name) - 3:\n                if file_name.find('.') == len(file_name) - 4:\n                    if file_name.find('.') == len(file_name) - 5:\n                        if file_name.find('.') == len(file_name) - 6:\n                            if file_name.find('.') == len(file_name) - 7:\n                                if file_name.find('.') == len(file_name) - 8:\n                                    if file_name.find('.') == len(file_name) - 9:\n                                        if file_name.find('.') == len(file_name) - 10:\n                                            if file_name.find('.') == len(file_name) - 11:\n                                                if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        return 'No", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') ==", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name)", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name[-1:] in ['.txt', '.exe', '.dll']:\n            return 'Yes'\n        else:\n            return 'No'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:1]!= '.':\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') > 0:\n        if file_name[:1] not in ['a', 'A', 'b', 'B', 'c', 'C', 'd', 'D', 'e', 'E', 'f', 'F', 'g', 'G', 'h', 'H', 'i', 'I', 'j', 'J', 'k', 'K', 'l', 'L','m', 'M', 'n', 'N', 'o', 'O', 'p', 'P', 'q', 'Q', 'r', 'R','s', 'S', 't', 'T', 'u', 'U', 'v', 'V', 'w', 'W', 'x', 'X', 'y', 'Y', 'z', 'Z']:\n            return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') ==", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('')!= -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) -", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            if file_name.find('.') == 0:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 1:\n                if file_name.find('.') == 0:\n                    return 'No'\n                if file_name.find('.') == len(file_name) - 1:\n                    if file_name.find('.') == 0:\n                        return 'No'\n                    if file_name.find('.') == len(file_name) - 1:\n                        if file_name.find('.') == 0:\n                            return 'No'\n                        if file_name.find('.') == len(file_name) - 1:\n                            if file_name.find('.') == 0:\n                                return 'No", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'Yes'\n    if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == 0:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 2:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 3:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 4:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 5:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 6:\n                return 'No'\n            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name)", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == 2:\n            return 'No'\n        if file_name.find('.') == 3:\n            return 'No'\n        if file_name.find('.') == 4:\n            return 'No'\n        if file_name.find('.') == 5:\n            return 'No'\n        if file_name.find('.') == 6:\n            return 'No'\n        if file_name.find('.') == 7:\n            return 'No'\n        if file_name.find('.') == 8:\n            return 'No'\n        if file_name.find('.') == 9:\n            return 'No'\n        if file_name.find('.') == 10:\n            return 'No", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            if file_name.find('.') == 0:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 1:\n                if file_name.find('.') == 0:\n                    return 'No'\n                if file_name.find('.') == len(file_name) - 1:\n                    if file_name.find('.') == 0:\n                        return 'No'\n                    if file_name.find('.') == len(file_name) - 1:\n                        if file_name.find('.') == 0:\n                            return 'No'\n                        if file_name.find('.') == len(file_name) - 1:\n                            if file_name.find('.') == 0:\n                                return 'No", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 9:\n            return 'No'\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:1]!= '.':\n        return 'No'\n    if file_name[1:] not in ['.txt', '.exe', '.dll']:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') ==", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == 2:\n            return 'No'\n        if file_name.find('.') == 3:\n            return 'No'\n        if file_name.find('.') == 4:\n            return 'No'\n        if file_name.find('.') == 5:\n            return 'No'\n        if file_name.find('.') == 6:\n            return 'No'\n        if file_name.find('.') == 7:\n            return 'No'\n        if file_name.find('.') == 8:\n            return 'No'\n        if file_name.find('.') == 9:\n            return 'No'\n        return 'No'\n    if file_name.find('.') ==", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'Yes'\n    if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') > 0:\n        return 'No'\n    if file_name.find('.') < 0:\n        return 'No'\n    if file_name.find('.') > len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') < len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') > len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') < len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') > len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') < len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') > len(file_name) - 2:\n        return 'No", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == 0:\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == 0:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 1:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 2:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 3:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 4:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 5:\n                return 'No'\n            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name)", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') ==", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:1]!= '.':\n        return 'No'\n    if file_name.find('.') == 1:\n        return 'No'\n    if file_name.find('.') == 2:\n        return 'No'\n    if file_name.find('.') == 3:\n        return 'No'\n    if file_name.find('.') == 4:\n        return 'No'\n    if file_name.find('.') == 5:\n        return 'No'\n    if file_name.find('.') == 6:\n        return 'No'\n    if file_name.find('.') == 7:\n        return 'No'\n    if file_name.find('.') == 8:\n        return 'No'\n    if file_name.find('.') == 9:\n        return 'No'\n    if file_name.find('.') == 10:\n        return 'No'\n    if file_name.find('.') == 11:\n        return 'No'\n    if file_name.find('.') == 12:\n        return 'No'\n    if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name[file_name.find('.') - 1] not in ('txt', 'exe', 'dll'):\n            return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == 2:\n            return 'No'\n        if file_name.find('.') == 3:\n            return 'No'\n        if file_name.find('.') == 4:\n            return 'No'\n        if file_name.find('.') == 5:\n            return 'No'\n        if file_name.find('.') == 6:\n            return 'No'\n        if file_name.find('.') == 7:\n            return 'No'\n        if file_name.find('.') == 8:\n            return 'No'\n        if file_name.find('.') == 9:\n            return 'No'\n        if file_name.find('.') == 10:\n            return 'No", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'Yes'\n    if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        if file_name.find('.') == len(file_name) - 2:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') < 0:\n        return 'No'\n    if file_name.find('.') > 0:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') > 0:\n            return 'No'\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') > 0:\n            return 'No'\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') > 0:\n            return 'No'\n        if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 9:\n            return 'No'\n        if file_name.find('.') == len(file_name", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name)", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == len(file_name) - 3:\n                if file_name.find('.') == len(file_name) - 4:\n                    if file_name.find('.') == len(file_name) - 5:\n                        if file_name.find('.') == len(file_name) - 6:\n                            if file_name.find('.') == len(file_name) - 7:\n                                if file_name.find('.') == len(file_name) - 8:\n                                    if file_name.find('.') == len(file_name) - 9:\n                                        if file_name.find('.') == len(file_name) - 10:\n                                            if file_name.find('.') == len(file_name) - 11:\n                                                if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:1]!= '.':\n        return 'No'\n    if file_name.find('.')!= -1:\n        if file_name[:2]!= '.':\n            return 'No'\n        if file_name[-2:] not in ['.txt', '.exe', '.dll']:\n            return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('')!= -1:\n        return 'No'\n    if file_name.find('.txt')!= -1:\n        return 'Yes'\n    if file_name.find('.exe')!= -1:\n        return 'Yes'\n    if file_name.find('.dll')!= -1:\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:1]!= '.':\n        return 'No'\n    if file_name.find('.')!= -1:\n        if file_name[:2]!= '.':\n            return 'No'\n        if file_name[-2:] not in ['.txt', '.exe', '.dll']:\n            return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'Yes'\n    if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:1]!= '.':\n        return 'No'\n    if file_name.find('.')!= -1:\n        if file_name[:2]!= '.':\n            return 'No'\n        if file_name[2:] not in ['.txt', '.exe', '.dll']:\n            return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'Yes'\n    if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') ==", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'Yes'\n    if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') > 0:\n        if file_name.find('.') < len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') > len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') < len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') > len(file_name) - 3:\n            return 'No'\n    if file_name.find('.') > 0:\n        if file_name.find('.') < len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') > len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') < len(file_name) - 3:\n            return 'No'\n        if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('')!= -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) -", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == 2:\n            return 'No'\n        if file_name.find('.') == 3:\n            return 'No'\n        if file_name.find('.') == 4:\n            return 'No'\n        if file_name.find('.') == 5:\n            return 'No'\n        if file_name.find('.') == 6:\n            return 'No'\n        if file_name.find('.') == 7:\n            return 'No'\n        if file_name.find('.') == 8:\n            return 'No'\n        if file_name.find('.') == 9:\n            return 'No'\n        if file_name.find('.') == 10:\n            return 'No", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == len(file_name) - 3:\n                if file_name.find('.') == len(file_name) - 4:\n                    if file_name.find('.') == len(file_name) - 5:\n                        if file_name.find('.') == len(file_name) - 6:\n                            if file_name.find('.') == len(file_name) - 7:\n                                if file_name.find('.') == len(file_name) - 8:\n                                    if file_name.find('.') == len(file_name) - 9:\n                                        if file_name.find('.') == len(file_name) - 10:\n                                            if file_name.find('.') == len(file_name) - 11:\n                                                if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:1] == '.':\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:1] == '.':\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:1] == '.':\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == 0:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 2:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 3:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 4:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 5:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 6:\n                return 'No'\n            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 9:\n            return 'No'\n        if file_name.find('.') == len(file_name", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == len(file_name) - 3:\n                if file_name.find('.') == len(file_name) - 4:\n                    if file_name.find('.') == len(file_name) - 5:\n                        if file_name.find('.') == len(file_name) - 6:\n                            if file_name.find('.') == len(file_name) - 7:\n                                if file_name.find('.') == len(file_name) - 8:\n                                    if file_name.find('.') == len(file_name) - 9:\n                                        if file_name.find('.') == len(file_name) - 10:\n                                            if file_name.find('.') == len(file_name) - 11:\n                                                if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('txt')!= -1:\n        return 'Yes'\n    if file_name.find('exe')!= -1:\n        return 'Yes'\n    if file_name.find('dll')!= -1:\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == len(file_name) - 3:\n                if file_name.find('.') == len(file_name) - 4:\n                    if file_name.find('.') == len(file_name) - 5:\n                        if file_name.find('.') == len(file_name) - 6:\n                            if file_name.find('.') == len(file_name) - 7:\n                                if file_name.find('.') == len(file_name) - 8:\n                                    if file_name.find('.') == len(file_name) - 9:\n                                        if file_name.find('.') == len(file_name) - 10:\n                                            if file_name.find('.') == len(file_name) - 11:\n                                                if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == 0:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 1:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 2:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 3:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 4:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 5:\n                return 'No'\n            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') ==", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') > 0:\n            return 'No'\n        if file_name.find('.') < 0:\n            return 'No'\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'Yes'\n    if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return 'No'\n        if file_name.find('.') == len(file_name", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'Yes'\n    if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == len(file_name) - 3:\n                if file_name.find('.') == len(file_name) - 4:\n                    if file_name.find('.') == len(file_name) - 5:\n                        if file_name.find('.') == len(file_name) - 6:\n                            if file_name.find('.') == len(file_name) - 7:\n                                if file_name.find('.') == len(file_name) - 8:\n                                    if file_name.find('.') == len(file_name) - 9:\n                                        if file_name.find('.') == len(file_name) - 10:\n                                            if file_name.find('.') == len(file_name) - 11:\n                                                if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:1]!= '.':\n        return 'No'\n    if file_name.find('.')!= -1:\n        if file_name[:2]!= '.':\n            return 'No'\n        if file_name[2:] not in ['.txt', '.exe', '.dll']:\n            return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == len(file_name) - 3:\n                if file_name.find('.') == len(file_name) - 4:\n                    if file_name.find('.') == len(file_name) - 5:\n                        if file_name.find('.') == len(file_name) - 6:\n                            if file_name.find('.') == len(file_name) - 7:\n                                if file_name.find('.') == len(file_name) - 8:\n                                    if file_name.find('.') == len(file_name) - 9:\n                                        if file_name.find('.') == len(file_name) - 10:\n                                            if file_name.find('.') == len(file_name) - 11:\n                                                if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == len(file_name) - 3:\n                if file_name.find('.') == len(file_name) - 4:\n                    if file_name.find('.') == len(file_name) - 5:\n                        if file_name.find('.') == len(file_name) - 6:\n                            if file_name.find('.') == len(file_name) - 7:\n                                if file_name.find('.') == len(file_name) - 8:\n                                    if file_name.find('.') == len(file_name) - 9:\n                                        if file_name.find('.') == len(file_name) - 10:\n                                            if file_name.find('.') == len(file_name) - 11:\n                                                if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        return 'No", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') ==", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            if file_name.find('.') == 0:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 1:\n                if file_name.find('.') == 0:\n                    return 'No'\n                if file_name.find('.') == len(file_name) - 1:\n                    if file_name.find('.') == 0:\n                        return 'No'\n                    if file_name.find('.') == len(file_name) - 1:\n                        if file_name.find('.') == 0:\n                            return 'No'\n                        if file_name.find('.') == len(file_name) - 1:\n                            if file_name.find('.') == 0:\n                                return 'No", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') < 0:\n        return 'No'\n    if file_name.find('.') > 0:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) -", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'Yes'\n    if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') > 0:\n        if file_name.find('.') < file_name.find('.'):\n            return 'No'\n        if file_name.find('.') > file_name.find('.'):\n            return 'No'\n        if file_name.find('.') > file_name.find('.'):\n            return 'No'\n        if file_name.find('.') > file_name.find('.'):\n            return 'No'\n        if file_name.find('.') > file_name.find('.'):\n            return 'No'\n        if file_name.find('.') > file_name.find('.'):\n            return 'No'\n        if file_name.find('.') > file_name.find('", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name[file_name.find('.') - 1] in ['.txt', '.exe', '.dll']:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:2] == '.':\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:1] == '.':\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:2] == '.':\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:1] == '.':\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:2] == '.':\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:1] == '.':\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[:2] == '.':\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name[-1:] not in ['.txt', '.exe', '.dll']:\n            return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') ==", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') ==", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name[0] not in string.ascii_letters:\n            return 'No'\n        if file_name[-1] not in string.ascii_letters:\n            return 'No'\n        if file_name[-1] == '.':\n            return 'No'\n        if file_name[-1] == '.' and file_name[-2] not in string.ascii_letters:\n            return 'No'\n        if file_name[-1] == '.' and file_name[-2] == '.':\n            return 'No'\n        if file_name[-1] == '.' and file_name[-2] == '.' and file_name[-3] not in string.ascii_letters:\n            return 'No'\n        if file_name[-1] == '.' and file_name[-2] == '.' and file_name[-3] == '.':\n            return 'No'\n        if file_name[-1] == '.' and file_name[-2] == '.' and file_name[-3]", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name[file_name.find('.') - 1] not in ['.txt', '.exe', '.dll']:\n            return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') ==", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 9:\n            return 'No'\n        if file_name.find('.') == len(file_name", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') < 0:\n        return 'No'\n    if file_name.find('.') > 0:\n        if file_name[:file_name.find('.')] == '':\n            return 'No'\n        if file_name[file_name.find('.'):] not in ['.txt', '.exe', '.dll']:\n            return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('txt')!= -1:\n        return 'Yes'\n    if file_name.find('exe')!= -1:\n        return 'Yes'\n    if file_name.find('dll')!= -1:\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            if file_name.find('.') == 0:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 1:\n                if file_name.find('.') == 0:\n                    return 'No'\n                if file_name.find('.') == len(file_name) - 1:\n                    if file_name.find('.') == 0:\n                        return 'No'\n                    if file_name.find('.') == len(file_name) - 1:\n                        if file_name.find('.') == 0:\n                            return 'No'\n                        if file_name.find('.') == len(file_name) - 1:\n                            if file_name.find('.') == 0:\n                                return 'No", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        if file_name.find('.') == len(file_name) - 2:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == 0:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 1:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 2:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 3:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 4:\n                return 'No'\n            if file_name.find('.') == len(file_name) - 5:\n                return 'No'\n            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == len(file_name) - 3:\n                if file_name.find('.') == len(file_name) - 4:\n                    if file_name.find('.') == len(file_name) - 5:\n                        if file_name.find('.') == len(file_name) - 6:\n                            if file_name.find('.') == len(file_name) - 7:\n                                if file_name.find('.') == len(file_name) - 8:\n                                    if file_name.find('.') == len(file_name) - 9:\n                                        if file_name.find('.') == len(file_name) - 10:\n                                            if file_name.find('.') == len(file_name) - 11:\n                                                if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == len(file_name) - 3:\n                if file_name.find('.') == len(file_name) - 4:\n                    if file_name.find('.') == len(file_name) - 5:\n                        if file_name.find('.') == len(file_name) - 6:\n                            if file_name.find('.') == len(file_name) - 7:\n                                if file_name.find('.') == len(file_name) - 8:\n                                    if file_name.find('.') == len(file_name) - 9:\n                                        if file_name.find('.') == len(file_name) - 10:\n                                            if file_name.find('.') == len(file_name) - 11:\n                                                if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') > 0:\n            return 'No'\n        if file_name.find('.') < len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'Yes'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        if file_name.find('.') > 0:\n            return 'No'\n        if file_name.find('.') < len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'Yes'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name[-1:] not in ['.txt', '.exe', '.dll']:\n            return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == len(file_name) - 3:\n                if file_name.find('.') == len(file_name) - 4:\n                    if file_name.find('.') == len(file_name) - 5:\n                        if file_name.find('.') == len(file_name) - 6:\n                            if file_name.find('.') == len(file_name) - 7:\n                                if file_name.find('.') == len(file_name) - 8:\n                                    if file_name.find('.') == len(file_name) - 9:\n                                        if file_name.find('.') == len(file_name) - 10:\n                                            if file_name.find('.') == len(file_name) - 11:\n                                                if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name)", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        return 'No", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 6:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 7:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 8:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 9:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        if file_name.find('.') == len(file_name) - 3:\n            if file_name.find('.') == len(file_name) - 4:\n                if file_name.find('.') == len(file_name) - 5:\n                    if file_name.find('.') == len(file_name) - 6:\n                        if file_name.find('.') == len(file_name) - 7:\n                            if file_name.find('.') == len(file_name) - 8:\n                                if file_name.find('.') == len(file_name) - 9:\n                                    if file_name.find('.') == len(file_name) - 10:\n                                        if file_name.find('.') == len(file_name) - 11:\n                                            if file_name.find(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 2:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 3:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 8:\n            return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        if file_name.find('.') == len(file_name) - 2:\n            if file_name.find('.') == len(file_name) - 3:\n                if file_name.find('.') == len(file_name) - 4:\n                    if file_name.find('.') == len(file_name) - 5:\n                        if file_name.find('.') == len(file_name) - 6:\n                            if file_name.find('.') == len(file_name) - 7:\n                                if file_name.find('.') == len(file_name) - 8:\n                                    if file_name.find('.') == len(file_name) - 9:\n                                        if file_name.find('.') == len(file_name) - 10:\n                                            if file_name.find('.') == len(file_name) - 11:\n                                                if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') > 0:\n        if file_name.find('.') < len(file_name) - 1:\n            if file_name[file_name.find('.') - 1] not in ['.', ',','', '\\t', '\\r', '\\n']:\n                return 'No'\n    if file_name.find('.') < len(file_name) - 1:\n        if file_name[file_name.find('.') + 1] not in ['.', ',','', '\\t', '\\r', '\\n']:\n            return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find(' ')!= -1:\n        return 'No'\n    if file_name.find('\\t')!= -1:\n        return 'No'\n    if file_name.find('\\n')!= -1:\n        return 'No'\n    if file_name.find('\\r')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 2:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 3:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 5:\n        return 'No'\n    if file_name.find('.') =="]]