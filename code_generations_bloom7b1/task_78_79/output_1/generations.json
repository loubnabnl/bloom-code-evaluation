[["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\"\\t\", \"\")\n    num = num.replace(\"\\n\", \"\")\n    num = num.replace(\"\\r\", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\"!\", \"\")\n    num = num.replace(\"?\", \"\")\n    num = num.replace(\"@\", \"\")\n    num = num.replace(\"[\", \"\")\n    num = num.replace(\"]\", \"\")\n    num = num.replace(\"{\", \"\")\n    num = num.replace(\"}\", \"\")\n    num = num.replace(\"(\", \"\")\n    num = num.replace(\")\", \"\")\n    num = num.replace(\"+\", \"\")\n    num = num.replace(\"-\", \"\")\n    num = num.replace(\"*\", \"\")\n    num = num.replace(\"/\", \"\")\n    num = num.replace(\"=\", \"\")\n    num = num.replace(\"^\", \"\")\n    num = num.replace(\"~\", \"\")\n    num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"0\":", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    if num.isdigit():\n        num = int(num)\n        if num < 2:\n            return 0\n        if num % 2 == 0:\n            return 1\n        if num % 3 == 0:\n            return 2\n        if num % 5 == 0:\n            return 3\n        if num % 7 == 0:\n            return 4\n        if num % 11 == 0:\n            return 5\n        if num % 13 == 0:\n            return 6\n        if num % 17 == 0:\n            return 7\n        if num % 19 == 0:\n            return 8\n        if num % 23 == 0:\n            return 9\n        if num % 29 == 0:\n            return 10\n        if num % 31 == 0:\n            return 11\n        if num % 37 == 0:\n            return 12\n        if num % 41 == 0:\n            return 13\n        if num % 43 == 0:\n            return 14\n        if num % 47 == 0:\n            return 15\n        if num % 53 == 0:\n            return 16\n        if num % 59 == 0:\n            return 17\n        if num % 61 == 0:\n            return 18\n        if num % 67 == 0:\n            return 19\n        if num % 71 == 0:\n            return 20\n        if num % 73 == 0:\n            return 21\n        if num % 79 == 0:\n            return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    if num.isdigit():\n        num = int(num)\n        if num < 2:\n            return 0\n        if num % 2 == 0:\n            return 1\n        if num % 3 == 0:\n            return 2\n        if num % 5 == 0:\n            return 3\n        if num % 7 == 0:\n            return 4\n        if num % 11 == 0:\n            return 5\n        if num % 13 == 0:\n            return 6\n        if num % 17 == 0:\n            return 7\n        if num % 19 == 0:\n            return 8\n        if num % 23 == 0:\n            return 9\n        if num % 29 == 0:\n            return 10\n        if num % 31 == 0:\n            return 11\n        if num % 37 == 0:\n            return 12\n        if num % 41 == 0:\n            return 13\n        if num % 43 == 0:\n            return 14\n        if num % 47 == 0:\n            return 15\n        if num % 53 == 0:\n            return 16\n        if num % 59 == 0:\n            return 17\n        if num % 61 == 0:\n            return 18\n        if num % 67 == 0:\n            return 19\n        if num % 71 == 0:\n            return 20\n        if num % 73 == 0:\n            return 21\n        if num % 79 == 0:\n            return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"11\":\n        num = num[1:]\n    if num[0] == \"13\":\n        num = num[1:]\n    if num[0] == \"17\":\n        num = num[1:]\n    if num[0] == \"19\":\n        num = num[1:]\n    if num[0] == \"23\":\n        num = num[1:]\n    if num[0] == \"25", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    num = num.replace(' ', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.',", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    if num.isdigit():\n        num = int(num)\n        if num < 2:\n            return 0\n        if num % 2 == 0:\n            return 1\n        if num % 3 == 0:\n            return 2\n        if num % 5 == 0:\n            return 3\n        if num % 7 == 0:\n            return 4\n        if num % 11 == 0:\n            return 5\n        if num % 13 == 0:\n            return 6\n        if num % 17 == 0:\n            return 7\n        if num % 19 == 0:\n            return 8\n        if num % 23 == 0:\n            return 9\n        if num % 29 == 0:\n            return 10\n        if num % 31 == 0:\n            return 11\n        if num % 37 == 0:\n            return 12\n        if num % 41 == 0:\n            return 13\n        if num % 43 == 0:\n            return 14\n        if num % 47 == 0:\n            return 15\n        if num % 53 == 0:\n            return 16\n        if num % 59 == 0:\n            return 17\n        if num % 61 == 0:\n            return 18\n        if num % 67 == 0:\n            return 19\n        if num % 71 == 0:\n            return 20\n        if num % 73 == 0:\n            return 21\n        if num % 79 == 0:\n            return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        num = int(num)\n    else:\n        num = num.upper()\n    num = num.split(\"\")\n    num = [int(i) for i in num]\n    num = [(i * i) for i in num]\n    num = [(i + j) for i in num for j in range(i, i + 2)]\n    num = [(i + j) for i in num for j in range(i, i + 2)]\n    num = [(i + j) for i in num for j in range(i, i + 2)]\n    num = [(i + j) for i in num for j in range(i, i + 2)]\n    num = [(i + j) for i in num for j in range(i, i + 2)]\n    num = [(i + j) for i in num for j in range(i, i + 2)]\n    num = [(i + j) for i in num for j in range(i, i + 2)]\n    num = [(i + j) for i in num for j", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"11\":\n        num = num[1:]\n    if num[0] == \"13\":\n        num = num[1:]\n    if num[0] == \"17\":\n        num = num[1:]\n    if num[0] == \"19\":\n        num = num[1:]\n    if num[0] == \"23\":\n        num = num[1:]\n    if num[0] == \"29", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    if num.isdigit():\n        num = int(num)\n        if num < 2:\n            return 0\n        if num % 2 == 0:\n            return 1\n        if num % 3 == 0:\n            return 2\n        if num % 5 == 0:\n            return 3\n        if num % 7 == 0:\n            return 4\n        if num % 11 == 0:\n            return 5\n        if num % 13 == 0:\n            return 6\n        if num % 17 == 0:\n            return 7\n        if num % 19 == 0:\n            return 8\n        if num % 23 == 0:\n            return 9\n        if num % 29 == 0:\n            return 10\n        if num % 31 == 0:\n            return 11\n        if num % 37 == 0:\n            return 12\n        if num % 41 == 0:\n            return 13\n        if num % 43 == 0:\n            return 14\n        if num % 47 == 0:\n            return 15\n        if num % 53 == 0:\n            return 16\n        if num % 59 == 0:\n            return 17\n        if num % 61 == 0:\n            return 18\n        if num % 67 == 0:\n            return 19\n        if num % 71 == 0:\n            return 20\n        if num % 73 == 0:\n            return 21\n        if num % 79 == 0:\n            return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    if num.isdigit():\n        num = int(num)\n        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 3\n        if num == 4:\n            return 4\n        if num == 5:\n            return 5\n        if num == 6:\n            return 6\n        if num == 7:\n            return 7\n        if num == 8:\n            return 8\n        if num == 9:\n            return 9\n        if num == 10:\n            return 10\n        if num == 11:\n            return 11\n        if num == 12:\n            return 12\n        if num == 13:\n            return 13\n        if num == 14:\n            return 14\n        if num == 15:\n            return 15\n        if num == 16:\n            return 16\n        if num == 17:\n            return 17\n        if num == 18:\n            return 18\n        if num == 19:\n            return 19\n        if num == 20:\n            return 20\n        if num == 21:\n            return 21\n        if num == 22:\n            return 22\n        if num == 23:\n            return 23\n        if num == 24:\n            return 24\n        if num == 25:\n            return 25\n        if num == 26:\n            return 26\n        if num == 27:\n            return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    num = num.replace(' ', '')\n    num = num.replace('(', '')\n    num = num.replace(')', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('.',", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"11\":\n        num = num[1:]\n    if num[0] == \"13\":\n        num = num[1:]\n    if num[0] == \"17\":\n        num = num[1:]\n    if num[0] == \"19\":\n        num = num[1:]\n    if num[0] == \"23\":\n        num = num[1:]\n    if num[0] == \"29", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\"(\", \"\")\n    num = num.replace(\")\", \"\")\n    num = num.replace(\"[\", \"\")\n    num = num.replace(\"]\", \"\")\n    num = num.replace(\"{\", \"\")\n    num = num.replace(\"}\", \"\")\n    num = num.replace(\"=\", \"\")\n    num = num.replace(\"+\", \"\")\n    num = num.replace(\"-\", \"\")\n    num = num.replace(\"*\", \"\")\n    num = num.replace(\"/\", \"\")\n    num = num.replace(\"^\", \"\")\n    num = num.replace(\"=\", \"\")\n    num = num.replace(\"+\", \"\")\n    num = num.replace(\"-\", \"\")\n    num = num.replace(\"*\", \"\")\n    num = num.replace(\"/\", \"\")\n    num = num.replace(\"^\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    num = num.replace(' ', '')\n    num = num.replace('.', '')\n    num = num.replace(',', '')\n    num = num.replace('(', '')\n    num = num.replace(')', '')\n    num = num.replace(',', '')\n    num = num.replace('(', '')\n    num = num.replace(')', '')\n    num = num.replace(',', '')\n    num = num.replace('(', '')\n    num = num.replace(')', '')\n    num = num.replace(',', '')\n    num = num.replace('(', '')\n    num = num.replace(')', '')\n    num = num.replace(',', '')\n    num = num.replace('(', '')\n    num = num.replace(')', '')\n    num = num.replace(',', '')\n    num = num.replace('(', '')\n    num = num.replace(')', '')\n    num = num.replace(',',", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    if num == \"\":\n        return 0\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num = num[1:]\n    if num[0] == \"E\":\n        num = num[1:]\n    if num[0] == \"F\":\n        num = num[1:]\n    if num[0] == \"0\":\n        num = num[1:]\n    if num[0] == \"1\":\n        num = num[1:]\n    if num[0] == \"2\":\n        num = num[1:]\n    if num[0] == \"3\":\n        num = num[1:]\n    if num[0] == \"4\":\n        num = num[1:]\n    if num[0] == \"5\":\n        num = num[1:]\n    if num[0] == \"6\":\n        num = num[1:]\n    if num[0] == \"7\":\n        num = num[1:]\n    if num[0] == \"8\":\n        num = num[1:]\n    if num[0] == \"9\":\n        num = num[1:]\n    if num[0] == \"A\":\n        num = num[1:]\n    if num[0] == \"B\":\n        num = num[1:]\n    if num[0] == \"C\":\n        num = num[1:]\n    if num[0] == \"D\":\n        num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \",", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\" \","]]