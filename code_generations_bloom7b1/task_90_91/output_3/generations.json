[["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # Init\n    smallest = None\n    for elem in lst:\n        if smallest is None or elem < smallest:\n            smallest = elem\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n    for i in xrange(1, len(lst)):\n        if smallest > lst[i]:\n            smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def def_smallest(lst):\n        if len(lst) == 0:\n            return None\n        else:\n            return lst[0]\n    def def_smallest_ret(lst):\n        return def_smallest(lst[1:]) if len(lst) > 0 else None\n    def compare_smallest(smallest, lst):\n        if len(lst) == 0:\n            return 0\n        elif smallest > lst[0]:\n            return 1\n        else:\n            return 0\n    def compare_smallest_ret(smallest, lst):\n        return compare_smallest(smallest, lst[1:]) if len(lst) > 0 else None\n    def compare_smallest_ret2(smallest, lst):\n        if len(lst) == 0:\n            return 0\n        elif smallest < lst[0]:\n            return 1\n        else:\n            return 0\n    smallest = 0\n    ret = def_smallest(lst)\n    while True:\n        if ret is None:\n            return smallest\n        else:\n            smallest = smallest + 1\n            ret = def_smallest_ret(lst)\n            if ret is None:\n                return smallest\n    return smallest\n</s>", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def recur(lst):\n        if len(lst) == 0:\n            return None\n        cur = lst[0]\n        lst = lst[1:]\n        for i in range(len(lst)):\n            if cur + 1 < lst[i]:\n                cur = lst[i] - 1\n            else:\n                return cur\n        return cur\n    \n    return recur(lst)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) > 1:\n        return min(lst, key=lambda x: x[1])\n    else:\n        return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def g(l):\n        if l:\n            return l[1]\n        else:\n            return None\n    return next(x for x in reversed(map(g, lst)) if x is not None)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def _smallest(lst):\n        for elem in lst:\n            if elem < lst[-1]:\n                return elem\n        return None\n\n    for i in range(len(lst)-1):\n        if lst[i] < lst[i+1]:\n            return _smallest(lst[:i+1])\n    return _smallest(lst)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    x = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < x:\n            x = lst[i]\n    return x", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = None\n    for i in lst:\n        if i < smallest:\n            smallest = i\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def _next_smallest(lst):\n        \"\"\"\n        This function gets called by the compiler to compute the next smallest element.\n        \"\"\"\n        if not lst:\n            return None\n        x = min(lst)\n        i = lst.index(x)\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n        return x\n    \n    return _next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    def smallest(lst):\n        \"\"\"\n        Takes in a list of integers.\n        Returns the smallest element in the list or None if the list is empty.\n        \"\"\"\n        if len(lst) == 0:\n            return None\n        return min(lst)\n    \n    smallest(lst)\n    return smallest(lst[1:])", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    def next_smallest_helper(lst, n):\n        return (n == len(lst))? lst[n] : (n+1) if n < len(lst) else next_smallest_helper(lst[1:], n+1)\n\n    def next_smallest_helper_zero(lst):\n        return (len(lst) == 0) and None or next_smallest_helper(lst, 1)\n\n    def next_smallest_helper_one(lst):\n        return (len(lst) == 1) and None or next_smallest_helper(lst, 2)\n\n    def next_smallest_helper_other(lst):\n        return (len(lst) == 2) and None or next_smallest_helper(lst, 3)\n\n    def next_smallest_helper_all(lst):\n        return next_smallest_helper_one(lst) or next_smallest_helper_other(lst) or next_smallest_helper_zero(lst)\n\n    return next_smallest_helper_all(lst)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(lst, reverse=True)\n    if len(lst) == 1:\n        return None\n    else:\n        return lst[0]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    count = 1\n    while True:\n        if count == len(lst):\n            return None\n        else:\n            elem = lst[count]\n            for i in range(count + 1, len(lst)):\n                if elem > lst[i]:\n                    return elem\n                count += 1\n    return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = None\n    for x in lst:\n        if smallest == None:\n            smallest = x\n        elif smallest < x:\n            smallest = x\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    else:\n        smallest = 0\n        for i in range(len(lst)):\n            if smallest > lst[i]:\n                smallest = lst[i]\n        return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    n = len(lst)\n    if n == 0:\n        return None\n    r = None\n    smallest = lst[0]\n    for i in range(1, n):\n        if smallest > lst[i]:\n            smallest = lst[i]\n            r = i\n        else:\n            break\n    return r", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # return None if no elements\n    if not lst:\n        return None\n    \n    # return the smallest element if it's the only one\n    if len(lst) == 1:\n        return lst[0]\n    \n    # return the smallest element if it's the second smallest\n    smallest = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    \n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    else:\n        current = lst[0]\n        lst = lst[1:]\n        while len(lst) > 0 and lst[0] > current:\n            current = lst[0]\n            lst = lst[1:]\n        return current", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] < lst[i + 1] :\n            return i + 1\n    return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def _smallest(lst):\n        return next(i for i, j in enumerate(lst) if j < i)\n\n    return next_smallest(smallest(lst))", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    smallest = min(lst)\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # all we need to do is look for a duplicate in the list\n    def compare(a, b):\n        return cmp(a, b)\n    a = sorted(lst, cmp=compare)\n    return a.next()", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def helper(lst):\n        if len(lst) == 0:\n            return None\n        else:\n            return lst[len(lst) - 1]\n    return helper(lst)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    \n    # find the 2nd smallest element\n    x, y = lst[0], lst[-1]\n    for i in range(1, len(lst)):\n        if y < x:\n            x, y = y, x\n        else:\n            y = x\n    return x", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = None\n    for element in lst:\n        if element == smallest:\n            return None\n        elif smallest is not None:\n            smallest = element\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    res = None\n    for i in range(len(lst)):\n        if (lst[i] < res):\n            res = lst[i]\n    return res", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    n = len(lst)\n    if n == 0:\n        return None\n    \n    return lst[n]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    try:\n        smallest = lst[0]\n    except:\n        smallest = None\n    for i in range(1, len(lst)):\n        if smallest is None:\n            smallest = lst[i]\n        else:\n            if lst[i] < smallest:\n                smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def next_smallest(lst):\n        if len(lst) < 2:\n            return None\n        return lst[(len(lst) - 1) // 2]\n    return next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    if not lst: return None\n    \n    return sorted(lst, key=lambda x: x[1])[1]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    else:\n        return next(lst, key=lambda x: x[0])", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if not lst:\n        return None\n    return min(lst) + 1", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    #start with the smallest element\n    x = lst[0]\n    #iterate through the list and compare\n    while x!= None:\n        if x < lst[1]:\n            #found the next smaller element\n            x = lst[1]\n        else:\n            #found the smallest element\n            return x\n    #there was no next smaller element\n    return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(lst, key=lambda e: e)\n    if len(lst) > 0:\n        return next(iter(lst))\n    else:\n        return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def _next_smallest(lst):\n        lst.sort()\n        return next((i for i in lst if i < lst[1]), None)\n    return _next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # Method 2\n    def traverse(lst):\n        if not lst: return None\n        else: return min(lst[::-1])\n    return traverse(lst)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    \n    # determine the smallest element\n    smallest = min(lst)\n    if smallest!= None:\n        return smallest\n    \n    # use a while loop to see if there is another element smaller than the smallest\n    while lst:\n        if lst[0] < smallest:\n            smallest = lst[0]\n        else:\n            break\n        lst = lst[1:]\n    \n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    s = lst[0]\n    for x in lst[1:]:\n        if s < x:\n            s = x\n    return s", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # write your code here\n    # change if necessary\n    pass", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    # your code here\n    smallest = None\n    for i in lst:\n        if not smallest:\n            smallest = i\n        else:\n            if i < smallest:\n                smallest = i\n    \n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # TODO: provide a test case\n    def reverse(a):\n        l = a.reverse()\n        return l[::-1]\n    l = reverse(lst)\n    return min(l)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def cmp(a, b):\n        if a > b:\n            return 1\n        elif a < b:\n            return -1\n        else:\n            return 0\n    a = sorted(lst)\n    return min(cmp(a[1], a[2]), cmp(a[3], a[4]), cmp(a[5], a[6]))", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    return next(i for i, j in enumerate(lst) if j < i)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def helper():\n        for element in lst:\n            if element < next_smallest(lst[1:]):\n                return element\n            else:\n                return None\n        \n    return helper() or None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    i = 0\n    while i < len(lst):\n        j = i + 1\n        while j < len(lst) and lst[j] <= lst[i]:\n            j += 1\n        if j < len(lst):\n            return j\n        i += 1\n    return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    return lst[1] if len(lst) > 1 else None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    # First, let's make sure we can get the smallest element\n    smallest = smallest(lst)\n    if smallest == None:\n        return None\n    \n    # Now, figure out how big it is\n    diff = largest(lst) - smallest\n    if diff == 0:\n        return None\n    \n    # Now, figure out the smallest element that is larger than diff\n    next_smallest = next_smallest(lst[diff:])\n    if next_smallest == None:\n        return None\n    \n    # Finally, return it\n    return next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    return lst[1], lst[0]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return min([next_smallest(lst[1:]) for i in range(2, len(lst))])", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    res = None\n    while len(lst) > 1:\n        new = lst[0]\n        for i in range(len(lst)):\n            if new < lst[i]:\n                new = lst[i]\n        lst.pop(0)\n        res = new\n    return res", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    middle = int(len(lst)/2)\n    if len(lst) == middle:\n        return middle - 1\n    if middle + 1 <= len(lst):\n        return middle + 1\n    else:\n        return next_smallest(lst[mid:]) + 1", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def f(lst):\n        # Check if we have an empty list\n        if not lst:\n            return None\n        # Find the smallest element\n        smallest = min(lst)\n        # Find the next smallest element\n        for i in range(len(lst)):\n            if smallest == lst[i]:\n                return smallest + 1\n        # if we did not find one, return None\n        return None\n    return f(lst)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    def next_smallest(lst):\n        for i in range(len(lst) - 1):\n            if i == len(lst) - 1:\n                return None\n            if lst[i] < lst[i+1]:\n                return i+1\n        return None\n\n    return next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    result = None\n    for element in lst:\n        if len(lst) < 2:\n            return None\n        if result is None or element < result:\n            result = element\n    return result", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # write function that returns 2nd smallest element of list\n    def next_smallest(lst):\n        lst.sort()\n        return lst[-1] if lst else None\n    return next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    for i in range(len(lst)):\n        if (lst[i]+1) < (lst[i+1]+1):\n            return (lst[i]+1)\n    return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    if len(lst) == 0:\n        return None\n    \n    min = min(lst)\n    \n    i = 0\n    while i < len(lst)-1:\n        if min > lst[i]:\n            min = lst[i]\n        i += 1\n    return min", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 1:\n        return None\n    else:\n        return lst[1]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    \n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    for item in lst:\n        if item <= next(lst):\n            return item\n    \n    return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 1:\n        return None\n    smaller = lst[0]\n    larger = smaller\n    for i in range(1, len(lst)):\n        if smaller > larger:\n            smaller = larger\n            larger = larger + 1\n        else:\n            smaller = smaller + 1\n    return smaller", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    for i in range(len(lst)):\n        if not lst[i]:\n            continue\n        if lst[i] < next_smallest(lst[i+1:]):\n            next_smallest = lst[i]\n            break\n\n    return next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = lst[0]\n    for i in range(1, len(lst)):\n        if smallest > lst[i]:\n            smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 1:\n        return None\n    if len(lst) == 2:\n        return lst[1]\n    if len(lst) == 3:\n        return next_smallest(lst[:2]) or lst[2]\n    return next_smallest(lst[:-1])", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    def next_smallest_2(lst):\n        if not lst:\n            return None\n        while True:\n            it = lst.pop()\n            if not it:\n                return None\n            for j in range(len(lst)):\n                if it < lst[j]:\n                    return it\n            return None\n    \n    if len(lst) == 1:\n        return next_smallest_2(lst)\n    else:\n        for i in range(len(lst)):\n            it = lst.pop(i)\n            if not it:\n                return None\n            for j in range(i):\n                if it < lst[j]:\n                    return it\n        return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = None\n    smallest_indices = []\n    for i in lst:\n        if smallest is None:\n            smallest = i\n        elif i < smallest:\n            smallest = i\n            smallest_indices.append(i)\n    return smallest, smallest_indices", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def next_smallest1(lst):\n        current = None\n        smallest = None\n        for elem in lst:\n            if current is None:\n                current = elem\n            if elem < current:\n                if current is not None:\n                    smallest = current\n                current = elem\n        if current is None:\n            return None\n        return smallest\n    return next_smallest1\n</s>", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # Find the smallest\n    smallest = lst[0]\n\n    # Now find the 2nd smallest\n    for i in range(1,len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = None\n    for i in lst:\n        if smallest is None:\n            smallest = i\n        elif smallest > i:\n            smallest = i\n    \n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    largest = None\n    smallest = lst[0]\n    for i in range(1, len(lst)):\n        if largest is None:\n            smallest = lst[i]\n        else:\n            if smallest > largest:\n                smallest = lst[i]\n        largest = smallest\n\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) > 0:\n        return (lst[0], next_smallest(lst[1:]))\n    else:\n        return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # Depth first search\n    for i in range(len(lst)):\n        if (i < len(lst) - 1) and (lst[i] <= lst[i + 1]):\n            return lst[i]\n\n    # Breadth first search\n    for i in range(len(lst)):\n        if (i < len(lst) - 1) and (lst[i] <= lst[i + 1]):\n            return i + 1", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    a = sorted(lst, key=lambda x: x)\n    return a[1] if len(lst) > 0 else None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    return next_smallest(lst[1:], lst[0])", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    else:\n        return lst[1] + 1", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n    for i in range(1, len(lst) - 1):\n        if smallest > lst[i]:\n            smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def new_list():\n        return list(lst)[::-1]\n\n    if len(new_list()) < 2:\n        return None\n    \n    return new_list()[-2:][0]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    # convert to list of tuples\n    # [1, 2, 3, 4, 5] --> [(1, 2), (3, 4), (5, None), (None, None)]\n    # [5, 1, 4, 3, 2] --> [(5, 1), (4, 3), (None, None), (None, None)]\n    # [] --> [(None, None)]\n    # [1, 1] --> [(1, 1)]\n    \n    # go through each tuple and see if any are equal to each other\n    # [(1, 2), (3, 4), (5, None), (None, None)]\n    # [(5, 1), (4, 3), (None, None), (None, None)]\n    # [(None, None)]\n    # [(1, 1)]\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i] == lst[j]:\n                return i, j\n    \n    return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    smallest = None\n    i = 0\n    while smallest == None and i < len(lst) - 1:\n        smallest = lst[i]\n        i += 1\n    \n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    else:\n        return min(lst) + 1", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = lst[0]\n    for i in xrange(1, len(lst)):\n        if smallest > lst[i]:\n            smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def helper(lst):\n        if len(lst) == 0:\n            return None\n        return min(lst, key=lambda x: x - 1)\n    return helper(lst)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if not lst:\n        return None\n    lst = sorted(lst)\n    return lst[1] if lst else None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst.sort()\n    if len(lst) == 0:\n        return None\n    \n    return lst[1]\n\nnext_smallest([1, 2, 3, 4, 5])", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    return next(lst, None)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    def find_smallest(lst):\n        if len(lst) == 0:\n            return None\n        return min(lst)\n\n    return find_smallest(lst)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # Method 1\n    def get_element(lst, i):\n        if i < len(lst) - 1:\n            return lst[i] + 1\n        else:\n            return None\n    # Method 2\n    def get_element(lst, i):\n        if i >= 0:\n            return lst[i] + 1\n        else:\n            return None\n    return get_element(lst, len(lst) - 1) # last element\n</s>", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    smallest = None\n    for i in lst:\n        if smallest is None:\n            smallest = i\n        else:\n            smallest = min(smallest, i)\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def helper(lst):\n        if len(lst) == 0:\n            return None\n        lst.sort()\n        smallest = lst[0]\n        for i in range(1, len(lst) - 1):\n            if smallest < lst[i]:\n                smallest = lst[i]\n        return smallest\n    return helper(lst)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    return next(i for i, j in enumerate(lst) if j < i)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def helper(lst, j):\n        if lst == []:\n            return None\n        elif j == len(lst)-1:\n            return lst[j]\n        else:\n            return helper(lst[:j] + [lst[j+1]], j+1)\n    \n    return helper(lst, 0)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    return smallest(lst[1:])", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    if len(lst) == 0:\n        return None\n    else:\n        return min(lst, key=lambda x: x[1])", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    l = len(lst)\n    if l == 0:\n        return None\n    return lst[0] + lst[1]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    if len(lst) == 0:\n        return None\n    \n    smallest = lst[0]\n    for i in range(1, len(lst)):\n        if smallest > lst[i]:\n            smallest = lst[i]\n    \n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    return min(lst) if len(lst) > 0 else None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 1:\n        return None\n    elif len(lst) == 0:\n        return None\n    else:\n        smallest = lst[0]\n        lst.remove(smallest)\n        return next_smallest(lst)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    smallest = smallest_element(lst)\n    lst.remove(smallest)\n    if len(lst) == 1:\n        return lst[0]\n    smallest = smallest_element(lst)\n    lst.remove(smallest)\n    return next_smallest(lst)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def get_smallest(lst):\n        if not lst:\n            return None\n        smallest = min(lst)\n        for element in lst:\n            if element < smallest:\n                smallest = element\n        return smallest\n    smallest = get_smallest(lst)\n    for next_smallest in next(lst):\n        if next_smallest < smallest:\n            smallest = next_smallest\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def next_smallest(lst):\n        \"\"\"\n        This function returns the 2nd smallest element from the list.\n        \"\"\"\n        return lst.sort(key=lambda x: x[1])[1][1]\n    return next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def first(lst):\n        return min(lst)\n    def last(lst):\n        return max(lst)\n    next_smallest = last if first!= last else first\n    return next_smallest(lst)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        smallest = None\n        for elt in lst:\n            if elt < smallest:\n                smallest = elt\n        return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = list(map(int, lst))\n    sorted_lst = sorted(lst, reverse=False)\n    if not sorted_lst:\n        return None\n    else:\n        return sorted_lst[-1]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return next_smallest(lst[1:]) + next_smallest(lst[:-1])\n    i, j = 0, 1\n    while True:\n        while j < len(lst) and next_smallest(lst[i:j]) > next_smallest(lst[j+1:len(lst)]):\n            j += 1\n        while i < len(lst) and next_smallest(lst[i:i+1]) < next_smallest(lst[i+1:len(lst)]):\n            i += 1\n        if i == j:\n            return None\n        if i < j:\n            i, j = j, i", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def helper():\n        while 1:\n            if lst == []:\n                return None\n            elem = next(lst)\n            if elem == 0:\n                return None\n            if elem < 0:\n                return None\n            lst.remove(elem)\n    return helper()</s>", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    # TODO: make this work if the list is empty\n    while True:\n        current = lst.pop(0)\n        if current == None:\n            return None\n        \n        if current > lst[0]:\n            return current\n        else:\n            pass", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    max_size = len(lst) if len(lst) > 0 else None\n    if max_size is None:\n        return None\n    for i in xrange(max_size):\n        if i+1 in lst:\n            break\n    else:\n        return None\n    for j in xrange(i+1, max_size):\n        if lst[j] < lst[j-1]:\n            return j\n    return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    if len(lst) == 0:\n        return None\n    return lst[1]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    # Special cases\n    if lst == []:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n\n    # Find the smallest element in the list\n    smallest = lst[0]\n\n    # Get the second smallest element from the list\n    next_smallest = None\n    for num in lst[1:]:\n        if num < smallest:\n            smallest = num\n            next_smallest = num\n\n    return next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) <= 1:\n        return None\n\n    idx = 1\n    minIdx = 0\n    while idx < len(lst):\n        if lst[idx] < lst[minIdx]:\n            minIdx = idx\n        idx += 1\n\n    return lst[minIdx]\n</s>", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    return lst[len(lst) - 1] if lst.__len__() > 0 else None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def next_smallest_iter(lst):\n        current, next = lst[0], None\n        for item in lst[1:]:\n            if current < next:\n                next = current\n            current = item\n        return next\n    return next_smallest_iter(lst)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if not lst:\n        return None\n    idx = 0\n    i = lst[0]\n    while i!= 0 and i < len(lst):\n        if i <= idx or i < idx:\n            i = lst[i]\n        else:\n            idx += 1\n    return idx", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    res = None\n    lst_len = len(lst)\n    if lst_len == 0:\n        return None\n    elif lst_len == 1:\n        return lst[0]\n    elif lst_len == 2:\n        if res == None:\n            res = lst[0]\n            res = res + lst[1]\n    else:\n        res = min(next_smallest(lst[1:]), next_smallest(lst[:-1]))\n        res = res + lst[0]\n        res = res + res\n    return res", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # Test\n    for x in range(len(lst)):\n        for y in range(x, len(lst)):\n            if lst[x - 1] > lst[y]:\n                break\n        else:\n            return None\n    else:\n        return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def is_larger(a, b):\n        return a > b\n\n    def get_next_smallest(lst):\n        return next(is_smaller(lst), None)\n\n    def is_smaller(lst):\n        return not is_larger(lst[-1], lst[-2])\n\n    def get_next_smallest(lst):\n        return get_next_smallest(lst) or get_next_smallest(lst[1:])", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst.sort()\n    if not lst:\n        return None\n    \n    elif len(lst) == 1:\n        return lst[0]\n    \n    else:\n        return lst[-1]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    def sort(lst):\n        def cmp(a, b):\n            return (a > b) - (a < b)\n        return sorted(lst, cmp=cmp)\n\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return sort(lst)[-1]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    smallest = 0\n    for i in range(len(lst)):\n        if smallest > lst[i]:\n            smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def next_smallest_round(lst):\n        if lst:\n            smallest = lst[0]\n            for i in range(1, len(lst)):\n                if smallest < lst[i]:\n                    smallest = lst[i]\n        else:\n            return None\n        return smallest\n    return next_smallest_round", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    next_smallest = None\n    for i in range(len(lst)):\n        if lst[i] < next_smallest:\n            next_smallest = lst[i]\n    return next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def sorter(lst):\n        return sorted(lst, reverse=True)\n\n    return next(sorter(lst))", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst.sort()\n    if len(lst) == 0:\n        return None\n    else:\n        return lst[1]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] > lst[i+1]:\n            break\n    else:\n        return None\n    return lst[i+1]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    \n    return next(lst, key=lambda x: x[1])", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = 0\n    for item in lst:\n        if smallest > item:\n            smallest = item\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    #def _next_smallest(lst, lst2):\n    #    for i in range(len(lst)):\n    #        if lst[i] < lst2:\n    #            return lst[i]\n    #    return None\n\n    def _next_smallest(lst, lst2):\n        tmp = []\n        for i in range(len(lst)):\n            if lst[i] < lst2:\n                tmp.append(lst[i])\n                return tmp\n        return None\n        \n    lst = list(range(1, 21))\n    lst.sort()\n    lst2 = list(range(1, 21))\n    lst2.sort()\n    print(next_smallest(lst))\n    print(next_smallest(lst2))", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) > 0:\n        return lst[1]\n    else:\n        return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def helper():\n        lst = list(lst)\n        while lst:\n            lst.sort()\n            if len(lst) == 1:\n                return None\n            lst.pop(0)\n        return None\n    \n    return helper()", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # recursion case\n    if len(lst) == 0:\n        return None\n\n    # recursive calls\n    smaller = next_smallest(lst[1:])\n    if smaller is None:\n        smaller = next_smallest(lst[:-1])\n    if smaller is None:\n        return next_smallest(lst[:-1])\n    return smaller", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    else:\n        smallest = None\n        for i in range(0, len(lst) - 1):\n            if smallest is None or lst[i] < smallest:\n                smallest = lst[i]\n        return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    else:\n        return lst[1]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    result = None\n    for i in range(len(lst)):\n        if result is None:\n            result = lst[i]\n        elif result < lst[i]:\n            result = lst[i]\n    return result", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    last = lst[-1]\n    if last < lst[0]:\n        return last\n    smallest = 0\n    smallest_idx = 0\n    for i in range(len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n            smallest_idx = i\n    return smallest_idx == len(lst) - 1 and smallest\n</s>", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # Funny thing about next_smallest() -- the only time you should return None is if the list is\n    # empty.\n    if len(lst) == 0:\n        return None\n    return lst[1]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def _next_smallest(lst):\n        i = 1\n        while True:\n            if lst[i] < lst[i + 1]:\n                return i\n            i += 1\n    return _next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def next_smallest(lst):\n        if len(lst) == 0:\n            return None\n        min_idx = 0\n        for i in range(1, len(lst)):\n            if lst[i] < lst[min_idx]:\n                min_idx = i\n        return lst[min_idx]\n    return next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(lst)\n    # Calculate the value of the first element in the list\n    value = lst[0]\n    # Remove the first element from the list\n    lst = lst[1:]\n    # If the first element of the list is the smallest, then we don't need to continue\n    if value == lst[0]:\n        return None\n    # Iterate over the list\n    for i in range(1, len(lst)-1):\n        # Calculate the value of the current element\n        current = lst[i]\n        # If the current element is the smallest, then we have found the desired element\n        if current == value:\n            return i\n    return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    second_lowest = None\n    for i in range(len(lst) - 1):\n        if lst[i] <= lst[i + 1]:\n            second_lowest = lst[i]\n            break\n    return second_lowest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) <= 1:\n        return None\n    return min(map(min, lst[:-1] + [lst[1]]))", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def smallest(lst):\n        i = 0\n        while i < len(lst):\n            j = i + 1\n            while j < len(lst) and lst[j] < lst[i]:\n                j += 1\n            if j == len(lst):\n                i += 1\n                continue\n            if lst[i] < lst[j]:\n                return lst[i]\n            i += 1\n        return None\n    i = 0\n    while i < len(lst):\n        if smallest(lst[:i]) == smallest(lst[i:]):\n            return lst[i]\n        i += 1\n    return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = min(lst)\n    if smallest == None:\n        return None\n    else:\n        return smallest + 1", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    res = None\n    lst_size = len(lst)\n    for i in range(1, lst_size - 1):\n        if lst[i] < lst[i - 1]:\n            res = lst[i]\n    return res", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def compare(a, b):\n        if a < b:\n            return -1\n        elif a == b:\n            return 0\n        else:\n            return 1\n    return sorted(lst, key=compare, reverse=True)[1]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(lst)\n    if not lst:\n        return None\n    idx = 0\n    while idx < len(lst) - 1:\n        if lst[idx] < lst[idx+1] or idx == 0:\n            return lst[idx]\n        idx += 1\n    return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    def next_smallest_n(lst):\n        \"\"\"\n        Precondition: lst is a list of integers.\n        Postcondition: lst is a list of integers.\n        Returns: the 2nd smallest element of lst.\n        \"\"\"\n        min_value = lst[0]\n        for i in xrange(1, len(lst)):\n            if min_value > lst[i]:\n                min_value = lst[i]\n        return min_value\n\n    if len(lst) == 1:\n        return None\n    elif len(lst) == 0:\n        return None\n\n    min_value = next_smallest_n(lst[1:])\n    return next_smallest_n(lst[:-1])", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    return min(lst[1:]) if len(lst) > 1 else None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    else:\n        return min(lst) + 1", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    def is_smallest(x):\n        return x < lst[0]\n\n    return lst[sorted(lst, key=is_smallest)[1]]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = None\n    for i in range(len(lst)):\n        if smallest is None or lst[i] < smallest:\n            smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def next_smallest_splitting(lst):\n        \"\"\"\n        Searches for the smallest item. Since we know that every item is smaller than the others, \n        we can just check if the smallest item exists in the list and return it. Otherwise, we \n        split the list at the smallest item.\n        \"\"\"\n        if len(lst) == 1:\n            return None\n        smallest = min(lst)\n        if smallest in lst:\n            return smallest\n        else:\n            return next_smallest_splitting(lst[:smallest]) + next_smallest_splitting(lst[smallest:])\n\n    return next_smallest_splitting(lst)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    lst.sort()\n    smallest = lst[-1]\n    for i in range(2, len(lst)):\n        if smallest < lst[i]:\n            smallest = lst[i]\n\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    \n    smallest = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def helper(lst):\n        if not lst:\n            return None\n        elif len(lst) == 1:\n            return lst[0]\n        else:\n            lst = sorted(lst, key=lambda i: -(i, i))\n            return helper(lst[::-1])\n    return helper(lst)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n    for i in range(1, len(lst)):\n        if smallest > lst[i]:\n            smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst.sort()\n    i = 0\n    if lst:\n        i = lst.index(lst[i]) + 1\n    return i", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    while lst:\n        lst = lst[1:]\n        if lst == []:\n            return None\n    if len(lst) > 1:\n        if lst[0] < lst[1]:\n            return lst[1]\n        else:\n            return lst[0]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    smallest = None\n    for i in range(len(lst)):\n        if smallest == None:\n            smallest = lst[i]\n        else:\n            if smallest < lst[i]:\n                smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    return sorted(lst, reverse=True)[-2:-1][0]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = lst[0]\n    for i in xrange(1, len(lst)):\n        if smallest > lst[i]:\n            smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    a = next(lst)\n    while a!= None:\n        if a < next(lst):\n            a = next(lst)\n        else:\n            return a\n    return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if not lst:\n        return None\n    \n    return min(lst) + 1 if min(lst) == min(lst[1:]) else None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    def _next_smallest(lst):\n        lst.sort()\n        return lst[1]\n\n    if not lst:\n        return None\n    if len(lst) <= 1:\n        return _next_smallest(lst)\n    else:\n        return _next_smallest(lst[1:])", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def next_smallest_helper(lst):\n        for i, elem in enumerate(lst):\n            if i == 0:\n                return elem\n            else:\n                if elem < next_smallest_helper(lst[:i]):\n                    return elem\n\n    return next_smallest_helper(lst)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    current = -1\n    min = lst.min()\n    while current < len(lst):\n        if current < min:\n            current += 1\n            min = current\n        else:\n            if min == current:\n                return current\n            else:\n                current = min\n                min = current", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    smallest = lst[0]\n    for i in range(1, len(lst)):\n        if smallest < lst[i]:\n            smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def next_smallest(lst):\n        # if there is only one element, return it\n        if len(lst) == 1:\n            return lst[0]\n        # otherwise find the smallest element and return it\n        return next((x for x in lst if x < next_smallest(lst[1:])), None)\n    return next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def is_smallest(lst):\n        try:\n            return lst.__len__() > 1 and lst.__getitem__(-1) < lst.__getitem__(-2)\n        except IndexError:\n            return False\n        \n    smallest = None\n    for i in range(len(lst)):\n        if is_smallest(lst):\n            smallest = lst.__getitem__(i)\n            break\n        \n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 1:\n        return None\n    if len(lst) == 0:\n        return None\n    smallest = lst[0]\n    for i in range(1, len(lst)):\n        if smallest > lst[i]:\n            smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def next_smallest_func(lst):\n        if len(lst) == 0:\n            return None\n        minval = min(lst)\n        return lst[minval]\n    return next_smallest_func", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    return sorted(lst, key=lambda x: x)[1]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    lst.sort()\n    if len(lst) == 0:\n        return None\n    else:\n        return lst[-1]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    def helper(lst):\n        if len(lst) == 0:\n            return None\n        else:\n            return lst.pop()\n\n    return helper(sorted(lst, reverse=True))", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    \n    def is_smaller(x, y):\n        \"\"\"\n        This method returns True if x is smaller than y, else returns False.\n        \"\"\"\n        if x < y:\n            return True\n        else:\n            return False\n    \n    return min(lst, key=is_smaller)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    def next_smallest(lst):\n        return next(x for x in sorted(lst, key=lambda x: -x, reverse=True) if x == lst[0])[1]\n    \n    return next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def f(l):\n        res = lst.pop()\n        if not lst:\n            return res\n        res = next_smallest(lst)\n        if res:\n            return res\n    return f", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    return lst[1] if len(lst) > 0 else None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def min(x, y):\n        return x if x < y else y\n\n    return next(min(lst, key=min))", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # Given an array of integers, return the second smallest element\n    if len(lst) > 1:\n        smallest = min(lst)\n        for i in range(len(lst) - 1):\n            if smallest > lst[i]:\n                smallest = lst[i]\n    elif len(lst) == 1:\n        smallest = lst[0]\n    else:\n        smallest = None\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = None\n    for i in lst:\n        if smallest is None or i < smallest:\n            smallest = i\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def next_smallest():\n        if len(lst) == 0:\n            return None\n        return min(lst[:-1]) if len(lst) > 1 else lst[0]\n    return next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if not lst:\n        return None\n    return sorted(lst, key=lambda x: x)[2]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = None\n    for x in lst:\n        if smallest == None:\n            smallest = x\n        else:\n            if smallest < x:\n                smallest = x\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(lst)\n    i = 0\n    while i < len(lst):\n        if lst[i] < lst[i+1]:\n            i += 1\n        else:\n            return lst[i-1]\n    return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    for i in xrange(len(lst)):\n        if lst[i] < lst[i - 1]:\n            continue\n        return lst[i]\n    return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def pre_sort(lst):\n        lst.sort()\n        return lst\n    \n    if len(lst) == 0:\n        return None\n    else:\n        return pre_sort(lst)[-1]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst.sort()\n    if len(lst) == 0:\n        return None\n    return lst[0]", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def _next_smallest(lst):\n        return lst.index(min(lst)) + 1\n    return _next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) > 1:\n        def iter(lst):\n            for i in xrange(len(lst)):\n                yield lst[i]\n        return min([next_smallest(iter(lst)) for lst in lst])\n    else:\n        return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    i = 1\n    while i < len(lst):\n        if lst[i] < lst[i-1]:\n            i += 1\n        else:\n            return i\n    return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    def next_smallest():\n        min_val = 0\n        max_val = 0\n        for num in lst:\n            if num < min_val:\n                min_val = num\n            if num > max_val:\n                max_val = num\n        return (min_val+1) if min_val < max_val else None\n    return next_smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    else:\n        return lst.pop(0)", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    current = None\n    for item in lst:\n        if current is None:\n            current = item\n        elif current < item:\n            current = item\n    if current is not None:\n        return current", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # Test cases:\n    #  1\n    #  3\n    #  5\n    #  7\n    #  9\n    \n    def compare(a,b):\n        \"\"\" \n        Test a < b \n        a = input a\n        b = input b\n        \"\"\"\n        if a < b:\n            return 1\n        elif a > b:\n            return -1\n        else:\n            return 0\n    if len(lst) < 2:\n        return None\n    \n    # Start with the first element\n    next = lst[0]\n    \n    for i in range(len(lst)):\n        # Calculate the relative position of the current element with respect to the next\n        rel = compare(i, len(lst))\n        # If the relative position is > 0\n        if rel > 0:\n            # Take the next element\n            next = lst[i]\n            break\n    return next", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] < lst[i+1]:\n            return i+1\n    return None", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    smallest = min(lst)\n    for i in range(len(lst)):\n        if smallest > lst[i]:\n            smallest = lst[i]\n    return smallest", "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    def compare_smallest(a, b):\n        if a is None:\n            return True\n        elif b is None:\n            return False\n        else:\n            return a < b\n    return sorted(lst, key=compare_smallest)[-1]"]]