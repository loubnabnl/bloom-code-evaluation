[["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    # Init\n    res = []\n    for i in range(1, len(xs)):\n        # Evaluate function at xs[i]\n        f = xs[i] * (x**2 + 1)\n        res.append(f - (i - 1) * x**i * f)\n    return res", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 0:\n        raise ValueError(\"derivative of list of zero length\")\n    xs = [abs(x) for x in xs]\n    if len(xs) == 1:\n        return xs[0]\n    d = derivative(xs[0])\n    for i in range(1, len(xs)):\n        if (d[i] == 0):\n            return 0\n        d[i] = d[i] - d[i-1]\n    return d[-1]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    n = len(xs)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [derivative(xs)[0]]\n    elif n == 2:\n        return [xs[0]] + [derivative(xs[1])]\n    elif n == 3:\n        return [derivative(xs[0]) + derivative(xs[1]) * xs]\n    elif n == 4:\n        return [derivative(xs[0]) + derivative(xs[1]) + derivative(xs[2]) * x]\n    elif n == 5:\n        return [derivative(xs[0]) + derivative(xs[1]) + derivative(xs[2]) + derivative(xs[3]) * x]\n    elif n == 6:\n        return [derivative(xs[0]) + derivative(xs[1]) + derivative(xs[2]) + derivative(xs[3]) + derivative(xs[4]) * x]\n    elif n == 7:\n        return [derivative(xs[0]) + derivative(xs[1]) + derivative(xs[2]) + derivative(xs[3]) + derivative(xs[4]) + derivative(xs[5]) * x]\n    else:\n        raise RuntimeError('Unknow order of the derivative')", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    assert len(xs) >= 2\n    xs = list(xs)\n    xs = xs[1:] + (xs[0] / xs[1]) * xs[0]\n    return xs", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    # Use Leibniz notation\n    ret = []\n    for i in range(len(xs) - 1):\n        ret.append(xs[i] * (xs[i + 1] - xs[i]) + xs[i] * (xs[i] - 1) * x)\n    ret.append(xs[-1] * (xs[i - 1] - 1) * x)\n    return ret", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [derivative(x[1:]) for x in xs]\n</s>", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 0:\n        return 0\n    diff = []\n    for i in range(len(xs)-1):\n        diff.append(xs[i+1] - xs[i])\n    if len(xs) > 1:\n        diff.append(xs[-1] - xs[0])\n    return diff", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [(sum(map(lambda x: x*x, xs)) - sum(xs))/len(xs) for xs in xs]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def partial(x):\n        \"\"\"\n        Function to compute partial derivative of a polynomial at point x.\n        For example, partial(1) = derivative([1, 2, 3])\n        \"\"\"\n        return [(x + x*x +...)/(x + 1)]\n\n    def partial_derivative(x):\n        \"\"\"\n        Function to compute partial derivative of a polynomial at point x.\n        For example, partial_derivative(1) = derivative([1, 2, 3])\n        \"\"\"\n        return [(x - x*x +...)/(x - 1)]\n\n    # coefficients of the polynomial\n    # here we loop over the coefficients\n    result = []\n    for i in range(len(xs)):\n        # for each coefficient, compute partial derivative, compute the\n        # partial sum of the partial derivatives, then multiply by coefficient\n        result.append(derivative(partial(xs[i])) * xs[i])\n\n    return result", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    coefficients = []\n    for i in range(len(xs)):\n        if i == 0:\n            coefficients.append(xs[i])\n        else:\n            coefficients.append(xs[i] + coefficients[i - 1] * xs[i])\n    return coefficients", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def _derivative(xs):\n        if len(xs)!= len(xs[0]):\n            raise ValueError(\"invalid length of the coefficients\")\n        if len(xs) == 1:\n            return sum([1] * (len(xs) - 1) for i in xrange(len(xs) - 1))\n        else:\n            return sum([1 * i for i in xrange(len(xs[0]))] + \\\n                       [_xs[1] * _derivative([xs[i + 1 : i + 2]]) \\\n                           for i in xrange(2, len(xs[0]) + 1)])\n    return _derivative(xs)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    dx = []\n    for i in xrange(len(xs)):\n        dx.append(xs[i+1] - xs[i])\n    return dx", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    d_xs = []\n    for x in xs:\n        d_xs.append(x * x)\n\n    return d_xs", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def derivative(x):\n        \"\"\" Returns derivative for given x\n        This is taken from the previous code\"\"\"\n        if x >= 1:\n            return x + x*x - 2*x*x**2 + x*x*x**2 - 3*x*x*x*x**2 + x*x*x*x*x - x*x*x*x*x*x*x\n        else:\n            return (-1)**(-x)\n\n    return derivative(xs)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    a = sum(xs)\n    c = xs[0] * a + sum(xs[1] * x for x in xs)\n    return xs[2] * a + c + sum(xs[2] * x * x for x in xs)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    # Defensive copy\n    coeffs = copy.deepcopy(xs)\n    coeffs.sort()\n    for i in range(len(coeffs) - 1):\n        coeffs[i] *= -1\n    return coeffs", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return sum([ derivative(xs[i]) for i in range(len(xs)-1) ])", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    d = 0\n    for x in xs:\n        d += x\n    return d", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    a = 0\n    for i in range(1, len(xs) - 1):\n        a += (xs[i - 1] * (xs[i] - 1)) / (i * (i - 1))\n    return a", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [-xs[i] for i in range(len(xs))]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    deriv = [0.0]\n    for i in range(len(xs)):\n        deriv.append(deriv[i] + xs[i] * (i + 1))\n\n    return deriv", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs)!= len(xs):\n        raise Exception(\"xs must have same length\")\n    if len(xs) == 1:\n        return xs[-1]\n    a = xs[-1]\n    for i in range(1, len(xs)):\n        a = a*xs[i] + a\n    return a", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [0] + ([x ** i + (x ** i - 1) * x for i in range(1, len(xs))]) + [(x - 1) * xs[0]]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) < 2:\n        raise ValueError('Derivative must have at least two coefficients.')\n    # compute first derivative\n    x = xs[-1]\n    res = []\n    for i in range(len(xs)-1,0,-1):\n        res.append(x * (x*(x*(x*(x*(xs[i+1]) - xs[i]) - 1)) + 1))\n    # compute second derivative\n    x = xs[-1]\n    res.append(x * (x*(x*(x*(x*(xs[i] - x * (xs[i+1]) - 1)) - 1)) + 1))\n    return res", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    x = (len(xs) - 1) // 2\n    return [(x * (x - 1)) * xs[i - 1] for i in range(1, len(xs))]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    m = len(xs)\n    d = [0] * (m - 1)\n    for i in range(1, m):\n        d[i] = (xs[i - 1] - xs[i]) / (xs[i - 2] - xs[i])\n    return d", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    f = [0 for i in range(len(xs))]\n    for i in range(len(xs)):\n        f[i] = (1 - xs[i]) * f[i - 1] + xs[i] * xs[i]\n    return f", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [1 + (1 for _ in range(len(xs))) * x for x in xs]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) < 1:\n        return []\n    def twoD(list1, list2):\n        result = []\n        for i in range(0, len(list1)):\n            result.append(list2[i] + list1[i] * list1[i])\n        return result\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[0] * xs[i] + xs[i] * twoD(xs, xs[i - 1]))\n    return result", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    try:\n        # lazy evaluation of derivative\n        if len(xs) > 1:\n            d = [derivative(y) for y in xs]\n        else:\n            d = [-1 * derivative(x) for x in xs]\n        return d\n    except TypeError:\n        # quick return when xs = (x, derivative(x))\n        return [derivative(x) for x in xs]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    # derivative of x^(n-1) is (n-1) * x^n\n    # derivative of x^n is x^n - (n-2) * x^(n-1)\n    # derivative of x^n / (x^n - (n-2) * x^(n-1)) is x^n / (n-1)\n    # derivative of x^n / (x-1) is (n-1) * x^n - (n-1) * (x / x^(n-1))\n    # derivative of x^n / (x / (x-1)) is (n-2) * x^n / (x-1)\n    # derivative of x^n / 1 is (n-1) * x^n / (x / (x-1))\n    # derivative of x^n / (x-1) * x^(n-2) is (n-1) * x^n * x^(n-2)\n    # derivative of x^n / (x-1) * x^(n-1) is (n-2) * x^n * x^(n-1)\n    # derivative of x^n / (x-1) * x is (n-2) * x^(n-1) * x^n * x^(n-1)\n    # derivative of x^n / (x-1) * x^(n-2) is (n-2) * x^n * x^(n-1", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 1:\n        return xs\n    elif len(xs) == 2:\n        return [derivative(xs[1]) + (xs[0] * derivative(xs[0])) for i in range(1, len(xs) + 1)]\n    elif len(xs) == 3:\n        return [derivative(xs[0]), derivative(xs[1]) + (xs[2] * derivative(xs[2])), derivative(xs[1]) * derivative(xs[2]) + (xs[0] * derivative(xs[2]))]\n    elif len(xs) == 4:\n        return [derivative(xs[0]), derivative(xs[1]), derivative(xs[2]), derivative(xs[3])]\n    else:\n        return []", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def f(x, xs):\n        \"\"\" g(x) = (x + xs[0]) * (x + xs[1]) * (x + xs[2]) *....\n                = (x + xs[0]) * (x + xs[1]) * (x + xs[3]) *....\n                = (x + xs[0]) * (x + xs[1]) * (x + xs[4]) *....\n                = (x + xs[0]) * (x + xs[1]) * (x + xs[5]) *....\n                = (x + xs[0]) * (x + xs[1]) * (x + xs[6]) *....\n                = (x + xs[0]) * (x + xs[1]) * (x + xs[7]) *....\n                =...\n                \"\"\"\n        return (x + xs[0]) * (x + xs[1]) * (x + xs[2]) *...\n                * (x + xs[3]) * (x + xs[4]) * (x + xs[5]) *...\n                * (x + xs[6]) * (x + xs[7]) *...\n                * (x + xs[8]) *...\n                * (x +", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError('first argument must be a list of equal length')\n    if not isinstance(xs, list):\n        xs = [xs,]\n    result = []\n    for i in range(len(xs)):\n        result.append([ i, 0 ])\n    for i in range(len(xs)):\n        for j in range(i+1, len(xs)):\n            for k in range(j+1, len(xs)):\n                result[i][j] = result[i][j] + xs[i+1]*xs[i+1]*xs[j]+xs[j+1]*xs[j+1]*xs[k]\n    return result", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    i = 0\n    while i < len(xs):\n        x = xs[i]\n        xs[i + 1] = i + 1\n        i += 1\n    return xs", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    assert len(xs) > 0, \"len(xs) should be > 0.\"\n    l = len(xs)\n    p = 1\n    x = 0\n    y = 1\n    result = []\n    for i in range(l - 1):\n        p *= xs[i]\n        y += p\n        x += 1\n        if x >= l:\n            x = 0\n            y += p\n    result.append(y)\n    return result", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 0:\n        return []\n    elif len(xs) == 1:\n        return [xs[0]]\n    else:\n        return [(xs[i - 1] * xs[i]) for i in range(1, len(xs))]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [(x - i) * (xs[i + 1] - xs[i]) for i in range(1, len(xs) + 1)]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def _deriv(xs):\n        \"\"\"\n            xs is a list of coefficients\n        \"\"\"\n        def _deriv_add(a, b):\n            return a + b\n        def _deriv_mul(a, b):\n            return a * b\n        def _deriv_div(a, b):\n            return a / b\n        def _deriv_square(a):\n            return a**2\n        def _deriv_negative(a):\n            return a - 1\n        def _deriv_negative_withone(a):\n            return a - 1 - 1\n        def _deriv_negative_plusone(a):\n            return a - 1 + 1\n        def _deriv_minusone(a):\n            return a - 1\n        def _deriv_negative_minusone(a):\n            return a - 1 - 1\n        def _deriv_negative_withzero(a):\n            return a - 1 - 1 + 1\n        def _deriv_negative_pluszero(a):\n            return a - 1 + 1 + 1\n\n        # Compute lower derivative\n        lower = _deriv_negative(xs[0] + xs[1] * x + xs[2] * x**2 +...", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return np.hstack([derivative(xs[i+1]) for i in range(1, len(xs) - 1)])", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    t = 1\n    for i in range(1, len(xs)):\n        t *= (1 + (i - 1) * xs[i])\n    return t", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def add(a, b, index, c):\n        if index < 0:\n            return b + a * (-xs[index]) + c\n        else:\n            return b + a * xs[index] + c\n\n    def product(a, b, index, c):\n        if index < 0:\n            return c * (-xs[index]) + a * (-xs[index+1])\n        else:\n            return c * xs[index] + a * xs[index+1] + b\n\n    def power(a, b, index, c):\n        if index < 0:\n            return c * xs[index] * (-xs[index+1]) + a * (-xs[index+2])\n        else:\n            return c * xs[index] * xs[index+1] + a * xs[index+2] + b\n\n    result = []\n    for index in range(len(xs)):\n        for i in range(len(xs)):\n            result.append(add(xs[i], xs[i], index, 0))\n        for i in range(len(xs)):\n            result.append(add(0, xs[i], index, 0))\n        for i in range(len(xs)):\n            result.append(add(0, 0, index, 0))", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError('length of xs is not equal to length of xs[0]')\n\n    d = [1] * (len(xs) - 1)\n    for i in range(0, len(xs) - 1):\n        d[i] = (xs[i + 1] - xs[i]) * (xs[i + 1] - xs[i])\n    return d", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    # ToDo: this is really a naive implementation that is not fast at all\n    #       What we would like to do is to compute derivative by recurrence:\n    #       for all i > 0:\n    #          derivative([xs[i], xs[i - 1], xs[i - 2],....])\n    #\n    #       This approach is much more efficient.\n    #       However, it will be slow when xs is large\n    #       because for each derivative we need to calculate the following\n    #       quantities:\n    #          derivative([xs[i], xs[i - 1], xs[i - 2],....]) * [xs[i - 1], xs[i - 2],....]\n    #       which requires O(n^2) operations.\n    #       We need to use some kind of caching.\n    #       However, this approach may not be very efficient when\n    #       xs contains very large powers\n    #       (i.e. the polynomial is very large)\n    #       (see test_fastrderive.py)\n    #\n    #       Another approach is to compute the derivative of the polynomial\n    #       in two steps:\n    #          1. Compute the derivative of the polynomial without the\n    #             smallest power of the polynomial (i.e. compute", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    assert(len(xs) > 0)\n    result = []\n    for i in range(1, len(xs) + 1):\n        result.append(2 * xs[i] * x[i - 1])\n    return result", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    l = len(xs)\n    if l == 1:\n        return xs\n    if l == 2:\n        return [derivative(xs)[0] + derivative(xs)[1] * x + derivative(xs)[2] * x * x for x in xs]\n    else:\n        if l % 2 == 0:\n            return derivative([xs[i::2] for i in range(0, l // 2, 2)]) + derivative([xs[i::2] for i in range(0, l // 2, 2)] * 2) * 2\n        else:\n            return [derivative([xs[i::2] for i in range(0, l // 2, 2)]) + derivative([xs[i::2] for i in range(0, l // 2, 2)] * 2) * 2 for i in range(0, l // 2, 2)]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    xs = list(xs)\n    xs.sort()\n    return list(xs) + (1, 2, 3) * (xs.pop() * xs[-1] - xs[-2])", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return derivative(xs.simplify())[0]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return Derivative(*xs)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    terms = []\n    terms.append(xs[0])\n    for i in range(1, len(xs)):\n        terms.append(xs[i] * (-1)**i * terms[i - 1])\n    return terms", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # get coefficients of the polynomial\n    coeffs = [coeff[0] + coeff[1] * x + coeff[2] * x**2 +... for coeff in coeffs]\n    return coeffs", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 0:\n        return []\n    if len(xs) == 1:\n        return xs[0]\n    elif xs[0] == 0:\n        return []\n    else:\n        s = (1.0 / xs[0]) * (xs[1] * (xs[0] * x - xs[2] * (xs[0] - 1)))\n        return [s[0]] + derivative([x - s[1] for x in xs[2:]])", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [ (i, sum([x**j for j in range(i+1)])) for i, x in enumerate(xs) ]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 0:\n        return []\n    else:\n        dxs = []\n        for i in xs:\n            d = 0\n            while i >= 0:\n                d += i * i\n                i -= 1\n            d = d / i\n            dxs.append(d)\n        return dxs", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    res = []\n    x = np.asarray(xs)\n    if len(x) < 2:\n        return res\n    for i in range(1, len(x)):\n        p = np.asarray(x[i - 1]) * x[i] * x[i - 1]\n        q = 1\n        for j in range(i):\n            q *= j\n        res.append(q)\n    res = np.concatenate(res)\n    return res", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    from sympy.polys.expansion import exp\n    from sympy.polys.poly import Poly\n    from sympy.polys.degree import degree\n\n    x = exp(xs)\n    deg = degree(x)\n    if deg == 0:\n        return xs\n    if deg == 1:\n        return x\n    if deg == 2:\n        return x**2\n    if deg == 3:\n        return x**3\n    if deg == 4:\n        return x**4\n    if deg == 5:\n        return x**5\n    if deg == 6:\n        return x**6\n    if deg == 7:\n        return x**7\n    if deg == 8:\n        return x**8\n    raise ValueError('not a polynomial')", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 1:\n        return (xs[0],)\n    else:\n        try:\n            d = 0\n            for i in range(1, len(xs)):\n                d += xs[i] * xs[i]\n            return d / (i + 1)\n        except:\n            return None", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    n = len(xs)\n    deriv = [[1 for _ in range(n - i)] for i in range(n)]\n\n    for i in range(n):\n        a = 0\n        for j in range(n - i):\n            a = a + xs[i] * (xs[j] - xs[i]) * (xs[j + 1] - xs[i])\n        deriv[i] = a\n\n    return deriv", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def d2(t):\n        if t > 1:\n            raise ValueError('ValueError in derivative')\n        return [t * (t - 1) for t in range(1, len(xs) + 1)]\n    def d(t):\n        if t > 1:\n            raise ValueError('ValueError in derivative')\n        return [t * t - 1 for t in range(1, len(xs) + 1)]\n    return [x for x in (d1(d(t) - d2(t))) for t in range(1, len(xs) + 1)]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    h = xs[0] + xs[1] * x + xs[2] * x**2 +.... #no need to evaluate all coefficients here\n    return [(h*h) - h, h*(xs[1]*xs[1]*(x**2 + 1) + xs[2]*xs[2]*(x**3 + 1)) - h*xs[1]*(x**3 + 1), h*(xs[2]*xs[2]*(x**3 + 1)) - h*(x**3 + 1)]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    deriv = []\n    for i in range(len(xs) - 1):\n        deriv.append(xs[i] * (xs[i+1:] - xs[i] * xs[i]))\n    deriv.append(xs[-1])\n    return deriv", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    raise NotImplementedError(\"derivative() has not been implemented\")", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    derivative = [0] * len(xs)\n    if len(xs) <= 1:\n        return derivative\n    for i in range(0, len(xs)):\n        derivative[i] = (xs[i+1] - xs[i]) * (-1)**i\n    return derivative", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [derivative(x) for x in xs]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    x = [(i + 1) * x[i] for i in range(len(xs))]\n    d = [(i + 1) * d[i] for i in range(len(xs))]\n    return x + d", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [(x*x) for x in xs]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return zip(xs, xs)[::-1]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    der = [0]\n    for i in xs:\n        der.append(i[0] + i[1] * i[2] * i[3] * i[4] * i[5] * i[6])\n    return der", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    # The sum of powers of each coefficient in the polynomial\n    A = np.sum([x ** n for n, x in enumerate(xs)])\n    # The powers of each coefficient in the polynomial\n    B = np.diff(xs, 1)\n    # The derivative of the polynomial\n    C = np.diff(A, 1)\n    # We know the first power of each coefficient is A[0]\n    # Because we sum the powers of each coefficient\n    # All powers of each coefficient will be between 1 and A[0]\n    # All powers of the derivative will be between A[0] and B[0]\n    D = np.where(B[0] >= A[0], A[0] - B[0], B[0])\n    # The derivative of each coefficient\n    # We know that A[0] + A[1] * x + A[2] * x^2 +....\n            #   => A[0] + A[1] * x + A[2] * x^2 +...\n            #   => A[0] + A[1] * x + A[2] * x^2 +...\n            #   => A[0] + A[1] * x + A[2] * x^2 +...\n            #   => A[0] + A[1] * x + A[2] * x^2 +...\n            #   =>...\n            #   =>...\n            #   =>...", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    for i in range(len(xs)):\n        yield 1. / (i+1) * (xs[i] + xs[i+1] * x + xs[i+2] * x**2 +...\n            xs[i+3] * x**3 +...\n            xs[i+4] * x**4)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    xs = np.array(xs)\n    x = xs[0]\n    result = np.zeros(len(xs))\n    for i in range(1, len(xs)):\n        result[i] = x * (1.0 - x) ** i * xs[i-1] + x ** i * xs[i]\n    return result", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    # general form of a polynomial\n    #   a[0] + a[1] * x + a[2] * x^2 + a[3] * x^3\n    #   a[0] + a[1] * x + a[2] * x^2 + a[3] * x^3 + a[4] * x^4 +...\n    #   a[0] + a[1] * x + a[2] * x^2 + a[3] * x^3 + a[4] * x^4 +...\n    #   a[0] + a[1] * x + a[2] * x^2 + a[3] * x^3 + a[4] * x^4 +...\n    #   a[0] + a[1] * x + a[2] * x^2 + a[3] * x^3 + a[4] * x^4 +...\n    #   a[0] + a[1] * x + a[2] * x^2 + a[3] * x^3 + a[4] * x^4 +...\n    #   a[0] + a[1] * x + a[2] * x^2 + a[3] * x^3 + a[4] * x^4 +...\n    #   a[0] + a[1] * x + a[2] * x^2 + a[3] * x^3 + a[4] * x^4 +...\n    #   a[0] + a[1] * x + a[2] * x^2 + a[3] * x^3 + a[4] *", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    derivative = [1]\n    for i in range(1, len(xs)):\n        derivative.append(derivative[-1] * (xs[i] - xs[i - 1]) / (xs[i - 1] - 1))\n    return derivative", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs)!= 1:\n        raise ValueError(\"Argument must be a single coefficient.\")\n    if len(xs) > 1:\n        raise ValueError(\"Too many coefficients.\")\n    return list(map(lambda x: 1, xs) + list(map(lambda x: x*x, xs[1:])))", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return derivative(xs)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [(x + (d * x) * (i + 1)) for i in range(1, len(xs)) for d in range(len(xs) - 1 - i) for x in xs[i:]]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    dx = [ 0.0 for i in range(len(xs)) ]\n    for i in range(len(xs)):\n        dx[i] = xs[i] * xs[i] + (-1.0)**i * (xs[i+1] - xs[i]) + (-1.0)**(i+2) * (-xs[i])**(i+2)\n    return dx", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    result = []\n    for i in range(len(xs)):\n        result.append(xs[i] + i * (xs[i + 1] * x + xs[i + 2] * x**2))\n    return result", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return []", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (1 / xs[0]) * (1 / xs[1]) * derivative(xs[1:])\n    if len(xs) == 3:\n        return (1 / xs[0]) * (1 / xs[1]) * (1 / xs[2]) * derivative(xs[1:])\n    if len(xs) == 4:\n        return (1 / xs[0]) * (1 / xs[1]) * (1 / xs[2]) * (1 / xs[3]) * derivative(xs[1:])\n    #from itertools import chain\n    return chain.from_iterable([derivative(x) for x in xs])\n</s>", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def add(x):\n        \"\"\" Add a polynomial term to this derivative.\n        >>> add([1, 2, 3])\n        [1, 2, 3, 6, 12, 20]\n        \"\"\"\n        return x[0] + x[1] * x + x[2] * x * x +... # sum of the powers\n    xs = sorted(xs)\n    xs = [i for i in xs]\n    xs.reverse()\n    xs = [i + 1 for i in xs]\n    xs.reverse()\n    return [i / xs[i] for i in xs] # derivative", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 0:\n        raise ValueError(\"need to be at least one term in the derivative\")\n    if len(xs) == 1:\n        return xs[0]\n    if xs[0] in [0, -1] and len(xs) == 2:\n        return (xs[-1] - derivative(xs[:-1]))/xs[0]\n    if xs[0] in [0, -1] and len(xs) == 3:\n        return ((xs[-1] - derivative(xs[:-1]))/(2*xs[0])) + derivative(xs[:-1])\n    if xs[0] == 0:\n        return (xs[-1] - derivative(xs[:-1]))/xs[0]\n    if xs[0] == -1:\n        return (derivative(xs[:-1]) - xs[-1])/xs[0]\n    if len(xs) == 4:\n        return (derivative(xs[:-1]) - xs[-1])/xs[0]\n    raise ValueError(\"bad argument for derivative()\")", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def _derivative(xs):\n        def _derivative0(x):\n            if x == 0:\n                return 0\n            else:\n                return x + xs[0] * x\n        def _derivative1(x):\n            if x == 0:\n                return 0\n            else:\n                return x + xs[1] * x\n        def _derivative2(x):\n            if x == 0:\n                return 0\n            else:\n                return x + xs[2] * x\n        return [_derivative0(x), _derivative1(x), _derivative2(x)]\n    return [_derivative(xs) for xs in derivative(xs)]\n</s>", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 0:\n        return []\n    new_xs = []\n    diff_xs = []\n    for i in range(1, len(xs)):\n        diff_xs.append(xs[i] - xs[i])\n    for x in range(1, len(xs)):\n        new_xs.append(diff_xs[x - 1] * x)\n    return new_xs", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    result = []\n    for term in range(len(xs)):\n        if not term:\n            result.append(1)\n        else:\n            result.append(xs[0] * term + (xs[1] * term * term) * x + \\\n                    (xs[2] * term * term * term) * (x**2) +...)\n\n    return result", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    n = len(xs) - 1\n    return derivative(xs) * (xs[0] - xs[1])**n / (xs[n - 1] - xs[0])**(n - 1)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def d(xs):\n        def d_x(n):\n            return 0 if n == 0 else (-1 if n % 2 == 1 else 1) * xs[n - 1]\n        return sum(d_x(i) for i in range(0, len(xs) - 1))\n\n    return d(xs)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    order = len(xs)\n    if order == 0:\n        return 0\n    return derivative([(x**(n - 1) for x in xs) for n in range(order - 1, -1, -1)])", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [sum(i * (i + 1) * (i + 2) * (i + 3) *... for i in range(1, len(xs))) / 2 for xs in xs]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def partial(x):\n        return sum(xs[i:j+1] * x**i for i, j in zip(xs, xrange(len(xs)-2, 0, -1)))\n    derivative = partial(derivative) - partial(xs[0]) # difference of the polynomials with the first coefficient\n    for i in xrange(len(xs)-1):\n        derivative = derivative + partial(xs[i+1]) * partial(x)\n    return derivative", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [derivative(xs[i + 1]) for i in range(0, len(xs))]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    _deriv = []\n    for i in range(len(xs)):\n        _deriv.append(xs[i+1] / xs[i])\n    return _deriv", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    result = []\n    for i in xs:\n        result.append(i * i)\n    return result", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    n = len(xs)\n    if n == 0:\n        return []\n    if n == 1:\n        return [xs[0]]\n    return sum([derivative([i+1 for i in xs]) for i in range(n-1)])", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 1:\n        return xs[0]\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * xs[i] - xs[i - 1] * x[i - 1])\n    return result\nderivative = module.builtin(derivative)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return derivative(xs[1:]) + derivative(xs[1:-1])", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    #return sum([x for x in xs if x < 0]) - sum([x for x in xs if x > 0])\n\n    #return sum([x for x in xs if x > 0]) - sum([x for x in xs if x < 0])\n    def i (x):\n        return x % 1\n    def j (x):\n        return x\n    def k (x):\n        return x - 1\n    def l (x):\n        return 2 * x + 1\n    def m (x):\n        return 3 * x + 2\n    def n (x):\n        return 5 * x + 4\n    def o (x):\n        return 6 * x + 3\n    def p (x):\n        return 7 * x + 2\n    def q (x):\n        return 8 * x + 1\n    def r (x):\n        return 9 * x + 0\n    def s (x):\n        return 4 * x + 2\n    def t (x):\n        return 2 * x - 1\n    def u (x):\n        return 3 * x - 2\n    def v (x):\n        return 3 * x + 1\n    def w (x):\n        return 2 * x - 2", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    # the coefficient of x^n in the derivative\n    d = 0\n    # keep track of the derivative values\n    coeff = 1\n    # for the derivative\n    while len(xs) > 1:\n        coeff *= xs[0]\n        for i in range(1, len(xs)):\n            coeff *= i * coeff\n            coeff += d * coeff * xs[i]\n        d += coeff\n    return d", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    N = len(xs) - 1\n    return [(N * (i - 1)) + (xs[i] - 1) * x for i in range(N)]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    assert len(xs) == 2\n    assert xs[0] > 0\n    assert xs[1] > 0\n    # Note that derivative(x) returns the derivative of x,\n    # not the derivative of x - 1.\n    return [(xs[1]/xs[0])*(x - 1) + (x - 1)*(xs[0]/xs[1])]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    d = []\n    for i in range(len(xs)):\n        if i == 0:\n            d.append(xs[0])\n        elif i == 1:\n            d.append(xs[i] * xs[0])\n        else:\n            d.append(xs[i] * xs[i] * (xs[i - 1] * (xs[i - 2] * (xs[i - 3] * xs[i]))))\n        d.append(xs[i - 1] * (xs[i - 2] * (xs[i - 3] * xs[i])))\n    return d", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    import math\n    return [\n        x * (math.pow(x - 1, i) - 1) for i, x in enumerate(xs) if i > 0]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    xs = list(xs)\n    xs.sort()\n    if len(xs) == 0:\n        return []\n    # find coefficient of second highest power of x\n    m = xs.index(xs[0]**(len(xs) - 1))\n    if m!= -1:\n        coef = xs[0]**(m - 1) * (len(xs) - m - 1) / m\n        for i in range(m + 1, len(xs)):\n            coef += (i - m) * xs[i] * (i - m) / i\n    else:\n        coef = 0.0\n    return [coef] + list(derivative([xs[m]] + xs[i + 1:] + xs[i - 1::-1]))\n</s>", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    derivative = [1]\n    for i in range(1, len(xs)):\n        if i % 2:\n            derivative.append(0.5 * (xs[i] - xs[i - 1]))\n    return derivative", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [derivative(i) for i in xs]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    x = 0\n    p = 1\n    d = []\n    for i in range(len(xs) - 1):\n        p = p * xs[i] + x * xs[i] * x\n        x = x * p / p + xs[i + 1]\n        d.append(p)\n    d.append(x)\n    return d", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return (derivative(xs) + derivative(xs[0] * x + xs[1])) * x", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) < 3:\n        return None\n    xs = list(xs)\n    y = 0\n    for x in xs:\n        y += x * x\n    return y / len(xs)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) < 1:\n        return [0, 0]\n    else:\n        xs = [-float(x) for x in xs]\n        return derivative(xs)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    i = 0\n    result = []\n    while i < len(xs) - 1:\n        result.append(xs[i + 1] * xs[i] - xs[i] * xs[i - 1])\n        i += 1\n    return result", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def partialderivative(x, y):\n        # derivative of a polynomial in one variable\n        return (1 + x * (1 + y)) ** (1 + x) - (1 + y * (1 + x)) ** (1 + y)\n\n    # generate a list of polynomials in the given variables\n    # some coefficient may be zero\n    coeff = [ 1 for x in xs for y in xs for z in range(x) for w in range(y) ]\n    coeff = [ i * j if i!= 0 else 0 for i, j in zip(coeff, coeff[1:]) ]\n    x = xs[0]\n    y = xs[1]\n    sum = 0\n    for i, coeffi in enumerate(coeff):\n        sum += coeffi * (1 + x) ** i * (1 + y) ** j * partialderivative(x, y)\n\n    return sum", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    result = [0] * len(xs)\n    for i in range(len(xs)):\n        for j in range(i + 1, len(xs)):\n            result[i] += xs[i] * xs[j]\n    return result", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return derivative([x*x+x]).append(derivative([x])).append(derivative([x, 1]).append(derivative([x])))", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    sum=0\n    for i in xs:\n        sum += i\n    return sum", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    # reorder: xs[0:-1], xs[1:]\n    xs = [xs[0], xs[1:]]\n    for i in range(1, len(xs)):\n        for j in range(i - 1, 0, -1):\n            if xs[j] < xs[j - 1]:\n                return [-xs[i], -xs[i - 1]]\n    return []", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    a = 0\n    for x in xs:\n        a = a + x\n    a = math.pow(a, 2)\n    return a", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def sumcoeff(x, i):\n        if i >= len(xs):\n            raise ValueError(\"x = {}, i = {}\".format(x, i))\n        return xs[i] * x + sum([xs[j + i] * x[j] for j in range(i, len(xs))])\n    return [sumcoeff(x, i) for i in range(len(xs))]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 0:\n        return None\n    d = 0\n    for x in xs:\n        d += x * x\n    return d", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    total = 0\n    for i in xs:\n        total += i\n    return xs[-1] / total", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    x = 0\n    d = [0, 0]\n    for i in range(len(xs)):\n        x += xs[i]\n        d[0] += xs[i] * x\n        d[1] += xs[i] * x * x\n    return d\n</s>", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [(x*x**i)/(i+1) for i in range(len(xs)-1)]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [list(map(operator.derivative, x)) for x in xs]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    xs = numpy.asarray(xs)\n    return xs * numpy.arange(1, len(xs) + 1) / numpy.arange(2, len(xs) + 2)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def derivative(x):\n        return [0 for i in range(len(xs))]\n\n    for i in range(len(xs)):\n        derivative[i] = xs[i]\n\n    return derivative", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    xs = list(map(float, xs))\n    x = list(map(x + float(1), xs))\n    xs = list(map(x + x + float(1) * x, xs))\n    return list(map(float, xs))", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def _derivative(xs):\n        \"\"\"Returns the coefficient of x**i in the derivative of the\n        polynomial.\"\"\"\n        i = 0\n        res = []\n        for x in xs:\n            i += 1\n            if i > 1:\n                res.append(x * x**i)\n            else:\n                res.append(x)\n        return res\n    return _derivative(xs)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return derivatives(xs, x)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    for i in range(len(xs) - 1):\n        if i == len(xs) - 2:\n            return xs[i] * (xs[i + 1] * (xs[i + 2] * (xs[i + 3] *... ) - xs[i] * xs[i - 1]))\n        else:\n            return xs[i] * (xs[i + 1] * (xs[i] * (xs[i + 2] * (xs[i + 3] *... ) - xs[i] * xs[i - 1])) - xs[i] * (xs[i + 2] * (xs[i] * (xs[i + 3] *... ) - xs[i] * xs[i - 1])))\n    return 0", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    num = 0\n    for c in xs:\n        num += c\n    return num / len(xs)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 1:\n        return xs[0]\n    else:\n        ans = [0]\n        for i in range(0, len(xs) - 1):\n            ans = ans + [(xs[i + 1] - xs[i]) / (xs[i] - xs[i - 1])]\n        ans = [(xs[-1] - xs[0]) / (xs[-1] - xs[0])] + ans\n        return ans", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError('xs must be a list of the same length.')\n    D = np.empty((len(xs),))\n    # D is now a matrix of the derivatives.\n    for i, coef in enumerate(xs):\n        D[i, :] = coef * np.diff(xs[i + 1]) / (i + 1)\n    return D", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return derivatives(xs)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    # initial conditions:\n    #     d(xs[0]) = 0\n    #     d(xs[1]) = xs[0]\n    #     d(xs[2]) = xs[1]\n    #    ...\n    d = 0\n    for i in range(3, len(xs)):\n        d += xs[i] * i\n    return d\n</s>", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    deriv = []\n    for i in range(len(xs)):\n        deriv.append(0.0)\n        for j in range(i):\n            deriv.append(derivative([xs[i] + xs[j] * x + xs[j + 1] * x ** 2 +...]))\n    return deriv", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    def derivative_coefficient(i):\n        if i == 0:\n            return 0\n        else:\n            return 1 + derivative_coefficient(i - 1) * xs[i]\n\n    return derivative_coefficient(len(xs) - 1)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    # simple case - only one term\n    if len(xs) == 1:\n        return (-1)**(len(xs)-1) * xs[0] + 1\n    # find the highest power\n    powers = []\n    for k in range(1, len(xs)):\n        powers.append(k)\n    p = 0\n    for p in powers:\n        for j in range(0, len(xs)):\n            for k in range(0, len(xs)):\n                if p > j:\n                    power = p - j\n                else:\n                    power = 1\n                if p > k:\n                    power = p - k\n                else:\n                    power = 1\n                res = (-1)**(power) * (xs[j]*(xs[k])**(power)) * (xs[k])**(power) + (-1)**(p) * (xs[j])**(p)\n                powers.append(power)\n                if len(powers) > 1:\n                    res = (-1)**(len(powers)-1) * res + 1\n            if len(powers) > 1:\n                res = (-1)**(len(powers)-1) * res + 1\n            if p < k:", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def derivative(xs):\n        \"\"\"\n        Returns a tuple of derivatives.\n        >>> derivative([1, 2, 3])\n        [2, 6]\n        \"\"\"\n        result = []\n        for i in range(1, len(xs)):\n            if i < len(xs):\n                derivative([xs[i-1]])\n            else:\n                result.append(xs[i-1])\n        return result\n    return derivative(xs)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    l = len(xs)\n    if l == 1:\n        return xs[0]\n    x = xs[0]\n    a = derivative(x[1:])\n    b = x\n    y = a + b*x\n    y = derivative(y)\n    for i in range(1, l-1):\n        x = x[1:]\n        a = a + b*x\n        b = y\n        y = a + b*x\n    y = x\n    return y", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    coeff = 0\n    for i in range(len(xs)):\n        coeff += (i + 1) * xs[i]\n    return coeff", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def derivative(x):\n        i = 0\n        while i < len(xs):\n            x = (1 + xs[i] * x) * (1 + (xs[i + 1] * x) * x)\n            i += 2\n        return x\n    return derivative\n</s>", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    f = 0\n    for i in range(len(xs) - 1):\n        f += xs[i] * xs[(i + 1) % len(xs)]\n    return [f / len(xs)]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return (1 + sum([x * x for x in xs]) / sum(xs) if xs else 0) / 2.0", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def derivative_of_pow(n: int, x: float) -> list:\n        \"\"\" Returns derivative of n-th power of x with coeff in xs.\n        For example: if the first element of xs is 1, then the derivative\n        of x^0 is the first element of xs.\n        \"\"\"\n        if n == 0:\n            return xs[0]\n        elif n == 1:\n            return xs[1] * x\n        else:\n            return derivative_of_pow(n-1, x * (x ** n))\n\n    return derivative_of_pow(len(xs), x * xs[0])", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    x = 1\n    result = []\n    for i in range(len(xs) - 1):\n        if x > 0.0:\n            result.append(i * x)\n        x *= 1 + xs[i]\n    result.append(x * xs[i])\n    return result", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    n = len(xs)\n    if n == 0:\n        return []\n    def func(t):\n        return pow(t, xs[0]) * pow(t, xs[1]) * x + pow(t, xs[2]) * pow(t, xs[3]) * x**2\n    return np.array(func(np.linspace(0, 1, n + 1))) - np.array(func(0))", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    result = []\n    for i in range(0, len(xs)):\n        result.append(xs[i + 1] * xs[i] + 2 * xs[i] * xs[i] * xs[i])\n    return result", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 1:\n        return 1\n    else:\n        return sum(xs[i+1]*derivative(xs[:i]) for i in range(0, len(xs)-1))", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    x = list(xs)\n    for i in range(len(x)-1):\n        x[i] = 1\n    return x", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    a,b,c = 0, 0, 0\n    for i in range(1, len(xs)-1):\n        a = a + b*xs[i]\n        b = b + c*xs[i]**2\n        c = c + a*xs[i]*xs[i]\n    return a,b,c", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    l = len(xs)\n    if l == 0:\n        return []\n    elif l == 1:\n        return [(1 - xs[0])/(1 + xs[0])]\n    else:\n        res = []\n        for i in range(l - 1):\n            res.append((1 - xs[i])/(1 + xs[i]))\n        res.append((1 - xs[l])/(1 + xs[l]))\n        return res", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) <= 1:\n        return [1]\n    if len(xs) == 2:\n        return [xs/xs[0]]\n    else:\n        return [derivative(xs)/xs[0] for xs in xs]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return list(derivative(xs[1:]) + [(-1)**i * xs[i] for i in range(1, len(xs))])", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    assert len(xs) == 0 or len(xs) == 1\n    if len(xs) == 0 and len(xs) == 1:\n        return 0\n    elif len(xs) == 1 and len(xs[0]) == 0:\n        return 0\n    else:\n        assert len(xs) == 1\n        if not xs[0].is_integer:\n            raise ValueError(\"derivative of non-integer\")\n        else:\n            return (1 / xs[0]) * (derivative(xs[1]) + derivative(xs[-1]))", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    for i in range(len(xs)):\n        a += i * xs[i]\n        b += i * (xs[i] * i)\n        c += i * (xs[i] * (i * i))\n        d += i * (xs[i] * (i * i * i))\n        e += i * (xs[i] * (i * i * (i * i)))\n    return [(a, b, c, d, e), 0]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 0:\n        return [1]\n    elif len(xs) == 1:\n        return [1]\n    else:\n        return sum([derivative(x[1:]) * x[:-1] + 1 for x in xs])", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    i = 0\n    derivative = []\n    while i < len(xs) - 1:\n        if (i + 1) < len(xs):\n            c = 0\n            for j in range(i+1, len(xs)):\n                c += xs[i] * xs[j]\n            derivative.append(c)\n        else:\n            derivative.append(xs[i])\n    return derivative", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 1:\n        return [derivative(y) for y in xs]\n    xs = list(map(int, xs))\n    return [coeff / (x + coeff) for coeff in xs]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 0:\n        return []\n    return [\n        sum([\n            xs[i] * xs[i] + i * sum([\n                xs[i] * xs[i + 1] * xs[i] + i * i + 1 * sum([xs[i] * xs[i + 1] * xs[i + 2] * xs[i] + i * i + 1 * i + 2 * sum([xs[i] * xs[i + 1] * xs[i + 2] * xs[i] + i * i + 1 * i + 2 * i + 3 * sum([xs[i] * xs[i + 1] * xs[i + 3] * xs[i] + i * i + 1 * i + 3 * i + 4 * sum([xs[i] * xs[i + 1] * xs[i + 4] * xs[i] + i * i + 1 * i + 4 * i + 5 * sum([xs[i] * xs[i + 1] * xs[i + 5] * xs[i] + i * i + 1 * i + 5 * i + 6 * sum([xs[i] * xs[i + 1] * xs[i + 6] * xs[i] + i * i + 1 * i + 6 * i + 7 * sum([xs[i] * xs[i + 1] * xs[i + 7] * xs[i] + i *", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) < 3:\n        raise ValueError('length of xs is too small')\n    if len(xs) == 3:\n        return [(- xs[i] * xs[i]) for x in xs[0]]\n    else:\n        return [(-1 * (xs[i - 1] - xs[i - 2] * xs[i]) for x in xs[i - 1]) for i in range(0, len(xs) - 1)]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [dx / (dx * dx) for dx in xs[0]]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 1:\n        return (1, 0, 0)\n    if len(xs) == 2:\n        return (1, xs[1], 0)\n    if len(xs) == 3:\n        return (1, xs[1], xs[2])\n    if len(xs) == 4:\n        return (1, xs[1], xs[2], xs[3])\n    return derivative(xs[1:])", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    xs = sorted(xs)\n    n = len(xs)\n    ret = [0.0] * n\n    for i in xrange(n):\n        ret[i] = 1.0 / (i + 1.0)\n    ret[-1] = 0\n    ret[0] = 1\n    return ret", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    N = len(xs)\n    def l(n):\n        if n > 1:\n            return (N - n) * l(n - 1) - (N - n - 1) * (N - n - 2) * l(n - 2)\n        else:\n            return 1\n    return [l(i) for i in range(1, N)]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def getderivatives(x):\n        \"\"\" compute derivatives for x\n        >>> getderivatives(1)\n        1\n        >>> getderivatives(2)\n        2\n        \"\"\"\n        return tuple([derivative(n) for n in xs])\n\n    return tuple(getderivatives(x) for x in xs[1:])", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def derivative_square(xs):\n        return [s**i for i in range(1, len(xs))]\n    return sum(derivative_square(list(map(lambda x: x + xs[0], xs))))", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [derivative(x) for x in xs]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) < 2:\n        raise ValueError(\"Need at least two coefficients to compute derivative\")\n    elif len(xs) == 2:\n        return [xs[1] * xs[0] - xs[0], xs]\n    else:\n        xs = list(xs)\n        deltas = [(2 * i + 1) * (i + 1) for i in range(len(xs) - 2)]\n        s = 0\n        for i in range(len(deltas)):\n            s += deltas[i] * deltas[i + 1]\n        return [(xs[i + 2] - xs[i + 1]) / s for i in range(len(xs) - 1)]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def f(x):\n        return [derivative(i) for i in xs]\n    return f(0)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) < 2:\n        raise ValueError(\"xs must be of length greater than 1\")\n    newxs = []\n    for i in xrange(1, len(xs) - 1):\n        newxs.append(xs[i] * (i - 1))\n    newxs.append(xs[-1])\n    return newxs", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    d = 0\n    for i in range(len(xs)):\n        d += (1 + xs[i]) * (i + 1) * (xs[i + 1] * (i + 2) + xs[i + 2] * (i + 3))\n    return d", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    x = 0\n    result = []\n    while x < len(xs):\n        result.append(xs.pop() * (x + 1))\n        x += 1\n    return result", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    res = [None]\n    for x in xs:\n        res.append(x)\n    for i in range(len(res)):\n        res[i] = res[i] / (i + 1)\n    return res", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 0:\n        raise ValueError('Empty list in derivative')\n    if len(xs) == 1:\n        return xs[0]\n    elif len(xs) == 2:\n        return xs[0] + xs[1] * x + xs[2] * x**2 +...", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    raise NotImplementedError", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    sum = 0\n    for x in xs:\n        sum += x\n    return sum / (len(xs) - 1)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 1:\n        return xs[0]\n    xs = list(xs)\n    if len(xs) == 2:\n        return (xs[0] * xs[1]) + (xs[2] * xs[3])\n    elif len(xs) == 3:\n        return (xs[0] * xs[1] * xs[2]) + (xs[2] * xs[3] * xs[4])\n    elif len(xs) == 4:\n        return (xs[0] * xs[1] * xs[2] * xs[3]) + (xs[2] * xs[3] * xs[4] * xs[5])\n    elif len(xs) == 5:\n        return (xs[0] * xs[1] * xs[2] * xs[3] * xs[4]) + (xs[2] * xs[3] * xs[4] * xs[5] * xs[6])\n    elif len(xs) == 6:\n        return (xs[0] * xs[1] * xs[2] * xs[3] * xs[4] * xs[5]) + (xs[2] * xs[3] * xs[4] * xs[5] * xs[6] * xs[7])\n    elif len(xs) == 7:\n        return (xs[0] * xs[1] * xs[2] * xs[3] * xs[4] * xs[5] *", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return sum(derivative(coefficients) for coefficients in zip(xs, xs[1:]))", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def derivative(a, b):\n        \"\"\" derivative(a, b) = a * b / (a + b) \"\"\"\n        return (b ** (a + 1) - a ** b) / (a + b)\n    d = derivative(1, 0)\n    for i in range(1, len(xs)):\n        d += derivative(0, i) * xs[i]\n    return d", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) < 3:\n        raise ValueError('Not enough coefficients.')\n    num, den = xs[0], xs[1]\n    x, xsq = 0, 0\n    for i in range(1, len(xs)):\n        num, den = num * x + num * xsq + xs[i], den * x + den * xsq + 1\n        xsq += 1\n    return num, den", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    diff = []\n    for i in range(len(xs)):\n        diff.append(sum(xs[(i+1)::]) - sum(xs[i::]))\n    return diff", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    res = [0]\n    for x in xs:\n        res = res + [x * (x+1)]\n    return res", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    sum = 0\n    for i in range(len(xs) - 1):\n        sum += xs[i] * (1 + xs[i + 1] * xs[i])\n    return sum", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 0:\n        raise ValueError(\"No polynomial given.\")\n\n    def d(p, i):\n        \"\"\"\n        >>> d([3, 1, 2, 4, 5], 0)\n        1\n        >>> d([1, 2, 3], 1)\n        2\n        \"\"\"\n        return [xs[i] * p[0] for i, xs in enumerate(xs)]\n\n    return tuple(d(p, i) for i, p in enumerate(xs))", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    i = 0\n    while i < len(xs):\n        newx = 1\n        for j in range(i+1, len(xs)):\n            newx = newx * xs[i] + xs[j] * newx * x\n        newx = newx * x\n        if i == 0 or newx!= 0:\n            xs[i + 1] = newx\n        else:\n            i += 1\n    return xs", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def d(x):\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    return d.__func__(xs)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return derivative(xs, 0)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    return [xs[i] * (1 + xs[i+1]) for i in range(len(xs) - 1)]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 1:\n        return xs[0]\n    elif len(xs) == 2:\n        return [(1 / xs[1]) * xs[0] + 1, (1 / xs[1]) * (2 * xs[0])]\n    else:\n        return [[1 / xs[i] for i in range(len(xs))] for xs in xs]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 0:\n        return None\n    else:\n        return derivatives[(-1,) + tuple(xs)]\nderivative.__doc__ = \"\"\"\nReturn the derivative of this polynomial in the same form.\nThe derivative is a list of the same length as the list of coefficients.\n\"\"\"", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    from sympy.polys.poly import Polynomial, solve\n    return [solve(Polynomial(xs[i]) - x, x) for i in range(len(xs))]", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    coeff = []\n    for i in range(len(xs)):\n        coeff.append(xs[i+1])\n    return coeff", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 1:\n        return xs[0]\n    assert len(xs) > 1\n    xs = list(xs)\n    def _derivative(x: float) -> list:\n        return [-x * (n + 1) / 2 for n in range(1, len(xs) + 1)]\n    return list(map(_derivative, xs))", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    def derivative_aux(x):\n        \"\"\" Evaluate x derivative.\n        x = 0 then return (-1, 1)\n        x = 1 then return (2, -1)\n        \"\"\"\n        if x == 0:\n            return (-1, 1)\n        elif x == 1:\n            return (2, -1)\n        else:\n            return (x - 1, x + 1)\n\n    def derivative_aux_n(x):\n        \"\"\" Evaluate x derivative.\n        x = 0 then return (1, -1)\n        x = 1 then return (1, 2)\n        \"\"\"\n        if x == 0:\n            return (1, -1)\n        elif x == 1:\n            return (1, 2)\n        else:\n            return (x + 1, -x)\n\n    derivative_aux = derivative_aux\n    derivative_aux_n = derivative_aux_n\n\n    return derivative_aux_n(x) + derivative_aux(1 - x)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * xs[0]\n    if len(xs) > 2:\n        return sum(derivative(xs) for xs in xs[:-1]) + (-xs[-1] + derivative(xs) * xs[0])", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    assert len(xs) >= 2\n    return sum([x**2 for x in xs]) / sum(x for x in xs) + 1", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def derivative(xs):\n        d = []\n        for i in xs:\n            d.append(i * i)\n        return d\n    return derivative(xs)", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    df = []\n    for i in range(len(xs)):\n        df.append(xs[i])\n    return df", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def derivative(x):\n        \"\"\" for d/dx\n        x[0] + x[1] * x + x[2] * x^2 +....\n        \"\"\"\n        return [\n            x[0] + x[1] * x + x[2] * x**2 +...\n            for x in xs\n            if len(x) > 0\n        ]\n    return derivative", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    out=[]\n    for i in xs:\n        if i==0:\n            pass\n        else:\n            out.append(i*(i-1)/(i+1))\n    return out", "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"    def derivatives(num):\n        if num == 0:\n            return [num]\n        if num % 2 == 1:\n            return [num - 1, num - 2]\n        return [num - 2, num - 1, num]\n    result = [derivatives(n) for n in xs]\n    result = [derivatives(n + 2) for n in result]\n    result = [derivatives(n + 1) for n in result]\n    return result"]]