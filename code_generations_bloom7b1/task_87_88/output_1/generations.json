[["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x < 0:\n        return get_row(lst[1:], x + len(lst[0]))\n    if x >= len(lst[0]):\n        return get_row(lst[1:], x - len(lst[0]))\n    return [(x, y) for y in range(len(lst[0])) for x in range(y)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x < 0:\n        return get_row(lst[1:], x + len(lst))\n    if x >= len(lst):\n        return get_row(lst[:-1], x - len(lst))\n    if x == 0:\n        return get_row(lst, x)\n    if x == 1:\n        return [(0, 0)]\n    if x == 2:\n        return [(0, 1), (1, 0), (1, 1), (2, 0), (2, 1)]\n    if x == 3:\n        return [(0, 2), (1, 2), (2, 0), (2, 2), (3, 0), (3, 1), (3, 2)]\n    if x == 4:\n        return [(0, 3), (1, 3), (2, 3), (3, 0), (3, 3), (4, 0), (4, 1), (4, 2), (4, 3)]\n    if x == 5:\n        return [(0, 4), (1, 4), (2, 4), (3, 4), (4, 0), (4, 4), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4)]\n    if x == 6:\n        return [(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x == len(lst[0]):\n        return [(x, 0)]\n    if x == len(lst[0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0][0][0]):\n        return [(x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x >= len(lst[0]):\n        return []\n    if x < len(lst[0]):\n        return get_row(lst[1:], x - len(lst[0]))\n    else:\n        return get_row(lst[:-1], x - len(lst[0]) + 1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[-x:], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[-x:], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[-x:]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if x == 0:\n        return get_row(lst[1:], x-1)\n    if x == len(lst):\n        return get_row(lst[:-1], x-1)\n    if x > len(lst):\n        return get_row(lst[:-1], x-1)\n    if x < 0:\n        return get_row(lst[1:], x+1)\n    if x == 0:\n        return get_row(lst[1:], x+1)\n    if x == len(lst):\n        return get_row(lst[:-1], x+1)\n    if x > len(lst):\n        return get_row(lst[:-1], x+1)\n    if x < 0:\n        return get_row(lst[1:], x+1)\n    return get_row(lst[:-1], x+1) + get_row(lst[1:], x+1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) / 2:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 + 1:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 + 2:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 + 3:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 + 4:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 + 5:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 + 6:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 + 7:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 +", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"invalid index\")\n    if x >= len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == 1:\n        return [(0, 0), (1, 0), (1, 1), (2, 0), (2, 1), (2, 2)]\n    if x == 2:\n        return [(0, 0), (1, 0), (1, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2)]\n    if x == 3:\n        return [(0, 0), (1, 0), (1, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2)]\n    if x == 4:\n        return [(0, 0), (1, 0), (1, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2), (5, 0), (5, 1), (5, 2)]\n    if x == 5:\n        return [(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == len(lst) - 1:\n        return get_row(lst, x - 1)\n    if x == len(lst) - 2:\n        return get_row(lst, x - 2)\n    if x == len(lst) - 3:\n        return get_row(lst, x - 3)\n    return get_row(lst, x - 1) + get_row(lst, x - 2) + get_row(lst, x - 3)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x > len(lst):\n        return []\n    if x < 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x > len(lst):\n        return []\n    if x < 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x > len(lst):\n        return []\n    if x < 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x > len(lst):\n        return []\n    if x < 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x,", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort coordinates of the row by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in lst[x:x + x]]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst, 0)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x == len(lst[0]):\n        return [(x, 0)]\n    if x < len(lst[0]):\n        return [(get_row(lst, x), get_row(lst, x+1))]\n    else:\n        return [(get_row(lst, x), get_row(lst, x-1))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort the list by rows in ascending order\n    lst.sort(key=lambda x: x[0])\n    # Sort the list by columns in descending order\n    lst.sort(key=lambda x: x[1])\n    # Get the row coordinates\n    row_coords = [(x[0], x[1]) for x in lst]\n    # Get the column coordinates\n    col_coords = [(x[0], x[1]) for x in lst]\n    # Return the coordinates\n    return row_coords, col_coords", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return get_row(lst, x)\n    if x == len(lst):\n        return get_row(lst[:-x], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return get_row(lst, x)\n    if x == len(lst):\n        return get_row(lst[:-x], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return get_row(lst, x)\n    if x == len(lst):\n        return get_row(lst[:-x], x)\n    if x <", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"invalid x\")\n    if x >= len(lst):\n        raise ValueError(\"invalid x\")\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 2:\n        return [(x, len(lst) - 1)]\n    if x == len(lst) - 3:\n        return [(x, len(lst) - 2)]\n    if x == len(lst) - 4:\n        return [(x, len(lst) - 3)]\n    if x == len(lst) - 5:\n        return [(x, len(lst) - 4)]\n    if x == len(lst) - 6:\n        return [(x, len(lst) - 5)]\n    if x == len(lst) - 7:\n        return [(x, len(lst) - 6)]\n    if x == len(lst) - 8:\n        return [(x, len(lst) - 7)]\n    if x == len(lst) - 9:", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates initially by rows in ascending order\n    row_sort = sorted(lst, key=lambda x: x[0])\n    # Sort coordinates of the row by columns in descending order\n    col_sort = sorted(row_sort, key=lambda x: x[1])\n    # Return sorted coordinates\n    return [(x[0], x[1]) for x in zip(row_sort, col_sort)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    # This is to ensure that the coordinates are sorted in the same order\n    # as the rows.\n    # Note that the coordinates are sorted in the same order as the rows.\n    # This is to ensure that the coordinates are sorted in the same order\n    # as the rows.\n    # Note that the coordinates are sorted in the same order as the rows.\n    # This is to ensure that the coordinates are sorted in the same order\n    # as the rows.\n    # Note that the coordinates are sorted in the same order as the rows.\n    # This is to ensure that the coordinates are sorted in the same order\n    # as the rows.\n    # Note that the coordinates are sorted in the same order as the rows.\n    # This is to ensure that the coordinates are sorted in the same order\n    # as the rows.\n    # Note that the coordinates are sorted in the same order as the rows.\n    # This is to ensure that the coordinates are sorted in the same order\n    # as the rows.\n    # Note that the coordinates are sorted in the same order as the rows.\n    # This is to ensure that the coordinates are sorted in the same order\n    # as the rows.\n    #", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x >= len(lst[0]):\n        return get_row(lst, x - len(lst[0]))\n    if x == len(lst[0]):\n        return get_row(lst, x - 1)\n    if x == len(lst[0]):\n        return get_row(lst, x - 1)\n    if x < len(lst[0]):\n        return get_row(lst, x - 1)\n    return get_row(lst, x - 1) + get_row(lst, x - 1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x ==", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < len(lst):\n        return get_row(lst, x - 1) + get_row(lst, x)\n    else:\n        return get_row(lst, x - 1) + get_row(lst, x - 1, 0)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst, x)\n    if x == len(lst):\n        return get_row(lst, x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst, x)\n    if x == len(lst):\n        return get_row(lst, x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst, x)\n    if x == len(lst):\n        return get_row(lst, x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x < 0:\n        raise ValueError(\"x must be non-negative\")\n    if x >= len(lst):\n        raise ValueError(\"x must be less than or equal to the number of rows\")\n    if x == 0:\n        return []\n    if x == 1:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst) - 1)]\n    if x == len(lst) - 2:\n        return [(x, len(lst) - 2)]\n    if x == len(lst) - 3:\n        return [(x, len(lst) - 3)]\n    if x == len(lst) - 4:\n        return [(x, len(lst) - 4)]\n    if x == len(lst) - 5:\n        return [(x, len(lst) - 5)]\n    if x == len(lst) - 6:\n        return [(x, len(lst) - 6)]\n    if x == len(lst) - 7:\n        return [(x, len(lst) -", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst, x)\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst, x)\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst, x)\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, lst[x])]\n    if x < len(lst):\n        return get_row(lst[:x], x) + get_row(lst[x+1:], x)\n    else:\n        return get_row(lst[:x], x) + get_row(lst[x+1:], x)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort the coordinates by rows in ascending order.\n    # Also, sort the coordinates of the row by columns in descending order.\n    # This is done to ensure that the coordinates are sorted in the same order\n    # as the rows and columns.\n    #\n    # The coordinates are sorted in the same order as the rows and columns.\n    # This is done to ensure that the coordinates are sorted in the same order\n    # as the rows and columns.\n    #\n    # The coordinates are sorted in the same order as the rows and columns.\n    # This is done to ensure that the coordinates are sorted in the same order\n    # as the rows and columns.\n    #\n    # The coordinates are sorted in the same order as the rows and columns.\n    # This is done to ensure that the coordinates are sorted in the same order\n    # as the rows and columns.\n    #\n    # The coordinates are sorted in the same order as the rows and columns.\n    # This is done to ensure that the coordinates are sorted in the same order\n    # as the rows and columns.\n    #\n    # The coordinates are sorted in the same order as the rows and columns.\n    # This is done to ensure that the coordinates are sorted in the same order\n    # as the rows and columns.\n    #\n    # The coordinates are sorted", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < len(lst):\n        return [(get_row(lst, x-1), x)]\n    else:\n        return [(get_row(lst, x-1), x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    # Sorting by rows is to ensure that the first coordinate is 0.\n    # Sorting by columns is to ensure that the last coordinate is the\n    # number of columns in the row.\n    # Sorting by rows is to ensure that the first coordinate is 0.\n    # Sorting by columns is to ensure that the last coordinate is the\n    # number of columns in the row.\n    # Sorting by rows is to ensure that the first coordinate is 0.\n    # Sorting by columns is to ensure that the last coordinate is the\n    # number of columns in the row.\n    # Sorting by rows is to ensure that the first coordinate is 0.\n    # Sorting by columns is to ensure that the last coordinate is the\n    # number of columns in the row.\n    # Sorting by rows is to ensure that the first coordinate is 0.\n    # Sorting by columns is to ensure that the last coordinate is the\n    # number of columns in the row.\n    # Sorting by rows is to ensure that the first coordinate is 0.\n    # Sorting by columns is to ensure that the last coordinate is the\n    # number of columns in the row.\n    # Sorting", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"get_row: x must be non-negative\")\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(0, 0)]\n    if x == len(lst[0]):\n        return [(x, 0)]\n    if x == len(lst[0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0][0]):\n        return [(x, 0)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x < len(lst):\n        return get_row(lst[:x], x)\n    return get_row(lst[:-x], x-x)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    return get_row(lst[:x], x) + get_row(lst[x+1:], x+1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    # Sorting by rows is done first, because it is easier to do.\n    # Sorting by columns is done second, because it is easier to do.\n    # Sorting by rows is done first, because it is easier to do.\n    # Sorting by columns is done second, because it is easier to do.\n    # Sorting by rows is done first, because it is easier to do.\n    # Sorting by columns is done second, because it is easier to do.\n    # Sorting by rows is done first, because it is easier to do.\n    # Sorting by columns is done second, because it is easier to do.\n    # Sorting by rows is done first, because it is easier to do.\n    # Sorting by columns is done second, because it is easier to do.\n    # Sorting by rows is done first, because it is easier to do.\n    # Sorting by columns is done second, because it is easier to do.\n    # Sorting by rows is done first, because it is easier to do.\n    # Sorting by columns is done second, because it is easier to do.\n    # Sorting by rows is done", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x ==", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(x, len(lst))]\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(x, len(lst))]\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(x, len(lst))]\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(x, len(lst))]\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < len(lst):\n        return get_row(lst, x - 1) + get_row(lst, x)\n    else:\n        return get_row(lst, x - 1) + get_row(lst, x - 1, x - 1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x > len(lst):\n        return []\n    if x < 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x > len(lst):\n        return []\n    if x < 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x > len(lst):\n        return []\n    if x < 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x > len(lst):\n        return []\n    if x < 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"invalid x\")\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x == len(lst[0]):\n        return [(x, len(lst))]\n    if x == len(lst[0][0]):\n        return [(x, len(lst))]\n    if x == len(lst[0][0][0]):\n        return [(x, len(lst))]\n    if x == len(lst[0][0][0][0]):\n        return [(x, len(lst))]\n    if x == len(lst[0][0][0][0][0]):\n        return [(x, len(lst))]\n    if x == len(lst[0][0][0][0][0][0]):\n        return [(x, len(lst))]\n    if x == len(lst[0][0][0][0][0][0][0]):\n        return [(x, len(lst))]\n    if x == len(lst[0][0][0][0][0][0][0][0]):\n        return [(x, len(lst))]\n    if x == len(lst[0][0][0][0][0][0][0][0][0]):\n        return [(x, len(lst))]\n    if x == len(lst[0][0][0][0][0][0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < len(lst):\n        return [(get_row(lst, x - 1), x)]\n    else:\n        return [(get_row(lst, x - 1), x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    return get_row(lst[:-x], x-x)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x < 0:\n        return []\n    if x >= len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 - 1:\n        return [(x, len(lst) / 2)]\n    if x == len(lst) / 2 + 1:\n        return [(x, len(lst) / 2)]\n    if x == len(lst) / 3 - 1:\n        return [(x, len(lst) / 3)]\n    if x == len(lst) / 3 + 1:\n        return [(x, len(lst) / 3)]\n    if x == len(lst) / 4 - 1:\n        return [(x, len(lst) / 4)]\n    if x == len(lst) / 4 + 1:\n        return [(x, len(lst) / 4)]\n    if x == len(lst) / 5 - 1:\n        return [(x, len(lst) / 5)]\n    if x == len(lst) / 5 +", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x == len(lst[0]):\n        return get_row(lst[1:], x - 1)\n    if x == len(lst[0][0]):\n        return get_row(lst, x - 1)\n    return get_row(lst, x - 1) + get_row(lst, x - 2)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst,", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x ==", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < len(lst):\n        return get_row(lst, x - 1) + get_row(lst, x)\n    else:\n        return get_row(lst, x - 1) + get_row(lst, x - 1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort the rows in ascending order\n    lst.sort(key=lambda x: x[0])\n    # Sort the columns in descending order\n    lst.sort(key=lambda x: x[1])\n    # Find the coordinates\n    return [(x[0], x[1]) for x in lst if x[0] == x[1]]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return get_row(lst[:", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"argument x must be >= 0\")\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < len(lst):\n        return get_row(lst[:x], x) + get_row(lst[x+1:], x)\n    else:\n        return get_row(lst[:x], x) + get_row(lst[x+1:], x)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return get_row(lst, x - 1)\n    if x == len(lst):\n        return get_row(lst, x + 1)\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return get_row(lst, x - 1)\n    if x == len(lst):\n        return get_row(lst, x + 1)\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return get_row(lst, x - 1)\n    if x == len(lst):\n        return get_row(lst, x + 1)\n    if x < 0:\n        return get_row(lst, x +", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == len(lst) - 1:\n        return get_row(lst, x + 1)\n    return get_row(lst, x) + get_row(lst, x + 1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == len(lst) - 1:\n        return [(x, x)]\n    if x == len(lst) - 2:\n        return [(x, x)]\n    return get_row(lst, x - 1) + get_row(lst, x + 1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    # Sorting by rows is done to ensure that the first row is sorted\n    # in ascending order.\n    # Sorting by columns is done to ensure that the first column is sorted\n    # in descending order.\n    #\n    # The idea is to find the first element in the list, which is not\n    # equal to the given x, and then find the first element in the row\n    # which is not equal to the first element in the list.\n    #\n    # The first element in the list is the first element in the row.\n    # The first element in the row is the first element in the column.\n    #\n    # The idea is to find the first element in the list, which is not\n    # equal to the given x, and then find the first element in the row\n    # which is not equal to the first element in the list.\n    #\n    # The first element in the list is the first element in the row.\n    # The first element in the row is the first element in the column.\n    #\n    # The idea is to find the first element in the list, which is not\n    # equal to the given x, and", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < len(lst):\n        return [get_row(lst, x - 1)] + [get_row(lst, x)]\n    else:\n        return [get_row(lst, x - 1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x ==", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"invalid index\")\n    if x >= len(lst):\n        raise ValueError(\"invalid index\")\n    if x == 0:\n        return []\n    if x == 1:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst) - 1)]\n    if x == len(lst) - 2:\n        return [(x, len(lst) - 2)]\n    if x == len(lst) - 3:\n        return [(x, len(lst) - 3)]\n    if x == len(lst) - 4:\n        return [(x, len(lst) - 4)]\n    if x == len(lst) - 5:\n        return [(x, len(lst) - 5)]\n    if x == len(lst) - 6:\n        return [(x, len(lst) - 6)]\n    if x == len(lst) - 7:\n        return [(x, len(lst) - 7)]\n    if x == len(lst) - 8:\n        return [(x,", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < len(lst):\n        return [get_row(lst, x - 1)] + get_row(lst, x)\n    else:\n        return [(x, 0)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, lst[x])]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, lst[x])]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, lst[x])]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, lst[x])]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, lst[x])]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < len(lst):\n        return get_row(lst[:x], x) + get_row(lst[x+1:], x)\n    else:\n        return get_row(lst[:x], x) + get_row(lst[x+1:], x)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < len(lst):\n        return get_row(lst, x - 1) + get_row(lst, x)\n    else:\n        return get_row(lst, x - 1) + get_row(lst, x - 1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == 0:\n        return []\n    if x == len(lst)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < len(lst):\n        return [(get_row(lst, x - 1), get_row(lst, x))]\n    else:\n        return [(get_row(lst, x - 1), get_row(lst, x))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x >= len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x >= len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x >= len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x >= len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    # Sorting by columns is not necessary, but it makes the code simpler.\n    # Also, we can use a list comprehension to make the code simpler.\n    # We can use a list comprehension to make the code simpler.\n    # We can use a list comprehension to make the code simpler.\n    # We can use a list comprehension to make the code simpler.\n    # We can use a list comprehension to make the code simpler.\n    # We can use a list comprehension to make the code simpler.\n    # We can use a list comprehension to make the code simpler.\n    # We can use a list comprehension to make the code simpler.\n    # We can use a list comprehension to make the code simpler.\n    # We can use a list comprehension to make the code simpler.\n    # We can use a list comprehension to make the code simpler.\n    # We can use a list comprehension to make the code simpler.\n    # We can use a list comprehension to make the code simpler.\n    # We can use a list comprehension to make the code simpler.\n    # We can use a list comprehension to make the code simpler.\n    # We can use a list comprehension to make the code simpler.\n    # We can use a", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x ==", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < len(lst):\n        return get_row(lst, x - 1) + get_row(lst, x)\n    else:\n        return get_row(lst, x - 1) + get_row(lst, x - 1) + get_row(lst, x - 1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    return get_row(lst[:x], x) + get_row(lst[x+1:], x+1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < len(lst):\n        return [(get_row(lst, x-1), x)]\n    else:\n        return [(get_row(lst, x-1), x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    return get_row(lst[:x], x) + get_row(lst[x:], x-x)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < len(lst):\n        return get_row(lst, x-1) + get_row(lst, x)\n    else:\n        return get_row(lst, x-1) + get_row(lst, x+1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[-x:], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[-x:], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[-x:]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < len(lst):\n        return [(get_row(lst, x-1), x)]\n    else:\n        return [(get_row(lst, x-1), x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x == 1:\n        return [(x, x)]\n    if x == len(lst[0]):\n        return [(x, x)]\n    if x == len(lst[0][0]):\n        return [(x, x)]\n    if x == len(lst[0][0][0]):\n        return [(x, x)]\n    if x == len(lst[0][0][0][0]):\n        return [(x, x)]\n    if x == len(lst[0][0][0][0][0]):\n        return [(x, x)]\n    if x == len(lst[0][0][0][0][0][0]):\n        return [(x, x)]\n    if x == len(lst[0][0][0][0][0][0][0]):\n        return [(x, x)]\n    if x == len(lst[0][0][0][0][0][0][0][0]):\n        return [(x, x)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0]):\n        return [(x, x)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0][0]):\n        return [(x, x)]\n    if x == len(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return lst\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return []\n    if x == 0:\n        return []\n    if x == 1:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst) - 1)]\n    if x == len(lst) / 2 + 1:\n        return [(x, len(lst) / 2)]\n    if x == len(lst) / 2 - 1:\n        return [(x, len(lst) / 2 - 1)]\n    if x == len(lst) / 2 + 2:\n        return [(x, len(lst) / 2)]\n    if x == len(lst) / 2 - 2:\n        return [(x, len(lst) / 2 - 1)]\n    if x == len(lst) / 2 + 3:\n        return [(x, len(lst) / 2)]\n    if x == len(lst) / 2 - 3:\n        return [(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"argument x must be non-negative\")\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(0, len(lst))]\n    if x == len(lst[0]):\n        return [(0, len(lst))]\n    if x == len(lst[0][0]):\n        return [(0, len(lst))]\n    if x < len(lst[0][0]):\n        return [(0, len(lst))]\n    return [(x, y) for y in range(x, len(lst[0][0])) for x in range(0, y)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[-x:], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[-x:], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[-x:]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(x, 0)]\n    if x > len(lst):\n        return [(x, len(lst))]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(x, 0)]\n    if x > len(lst):\n        return [(x, len(lst))]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(x, 0)]\n    if x > len(lst):\n        return [(x, len(lst))]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) -", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x += len(lst)\n    if x > len(lst):\n        x = len(lst)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x += len(lst)\n    if x > len(lst):\n        x = len(lst)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x += len(lst)\n    if x > len(lst):\n        x = len(lst)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x += len(lst)\n    if x > len(lst):\n        x = len(lst)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x += len(lst)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x < 0:\n        return get_row(lst[1:], x + len(lst))\n    if x >= len(lst):\n        return get_row(lst[:-1], x - len(lst))\n    if x == 0:\n        return get_row(lst, x - 1)\n    if x == len(lst) - 1:\n        return get_row(lst, x + 1)\n    if x == len(lst) / 2:\n        return get_row(lst, x - 1)\n    if x == len(lst) / 2 + 1:\n        return get_row(lst, x + 1)\n    if x == len(lst) / 2 + 2:\n        return get_row(lst, x - 1)\n    if x == len(lst) / 2 + 3:\n        return get_row(lst, x + 1)\n    return get_row(lst[:x], x - 1) + get_row(lst[x + 1:], x - 1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x >", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return get_row(lst, 0)\n    if x == len(lst):\n        return get_row(lst, len(lst))\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates initially by rows in ascending order.\n    lst.sort(key=lambda x: x[0])\n    # Sort coordinates of the row by columns in descending order.\n    lst.sort(key=lambda x: x[1])\n    # Get the first x coordinates.\n    x = lst[:x]\n    # Get the rest of the coordinates.\n    lst = lst[x:]\n    # Return the coordinates.\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    # Sorting by rows first is important, because we need to find\n    # the first coordinate of the row, and then we can find the\n    # coordinates of the columns.\n    # Sorting by columns first is important, because we need to find\n    # the first coordinate of the columns, and then we can find the\n    # coordinates of the rows.\n    # We use a list comprehension to find the first coordinate of the row.\n    # We use a list comprehension to find the first coordinate of the columns.\n    # We use a list comprehension to find the coordinates of the rows.\n    # We use a list comprehension to find the coordinates of the columns.\n    # We use a list comprehension to find the coordinates of the rows.\n    # We use a list comprehension to find the coordinates of the columns.\n    # We use a list comprehension to find the coordinates of the rows.\n    # We use a list comprehension to find the coordinates of the columns.\n    # We use a list comprehension to find the coordinates of the rows.\n    # We use a list comprehension to find the coordinates of the columns.\n    # We use a list comprehension to find the coordinates of the rows.\n    # We use", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x ==", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, lst[x])]\n    if x < len(lst):\n        return get_row(lst[:x], x) + get_row(lst[x+1:], x)\n    else:\n        return get_row(lst[:x], x) + get_row(lst[x+1:], x)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < len(lst):\n        return [(x, get_row(lst, x - 1))]\n    return [(x, get_row(lst, x - 1))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x <", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < len(lst):\n        return get_row(lst, x-1)\n    else:\n        return get_row(lst, x+1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst, x)\n    if x == len(lst):\n        return get_row(lst, x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst, x)\n    if x == len(lst):\n        return get_row(lst, x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst, x)\n    if x == len(lst):\n        return get_row(lst, x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"get_row: x must be non-negative\")\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < len(lst[0]):\n        return [(x, get_row(lst, x-1))]\n    else:\n        return [(get_row(lst, x-1), x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"get_row: x must be >= 0\")\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x == len(lst[0]):\n        return [(x, 0)]\n    if x == len(lst[0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) +", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(x, 0)]\n    if x > len(lst):\n        return [(x, len(lst))]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(x, 0)]\n    if x > len(lst):\n        return [(x, len(lst))]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(x, 0)]\n    if x > len(lst):\n        return [(x, len(lst))]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x == len(lst[0]):\n        return [(x, 0)]\n    if x == len(lst[0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0][0][0]):\n        return [(x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"argument x must be non-negative\")\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(0, 0)]\n    if x == len(lst[0]):\n        return [(0, 0)]\n    if x == len(lst[0][0]):\n        return [(0, 0)]\n    if x == len(lst[0][0][0]):\n        return [(0, 0)]\n    if x == len(lst[0][0][0][0]):\n        return [(0, 0)]\n    if x == len(lst[0][0][0][0][0]):\n        return [(0, 0)]\n    if x == len(lst[0][0][0][0][0][0]):\n        return [(0, 0)]\n    if x == len(lst[0][0][0][0][0][0][0]):\n        return [(0, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0]):\n        return [(0, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0]):\n        return [(0, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0][0]):\n        return [(0, 0)]\n    if x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[:x], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[:x], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[:x], x)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, x)]\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, x)]\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, x)]\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, x)]\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x >", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < len(lst):\n        return get_row(lst, x - 1) + get_row(lst, x)\n    else:\n        return get_row(lst, x - 1) + get_row(lst, x - 1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    # Sorting by rows is important, because we need to find the first\n    # row with a given x coordinate, and then we can find the coordinates\n    # of the columns in the row.\n    # Sorting by columns is important, because we need to find the first\n    # column with a given x coordinate, and then we can find the coordinates\n    # of the rows in the column.\n    #\n    # For example, if we have a list of lists, [[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]],\n    # and we want to find the first row with a given x coordinate, then we\n    # can use the following code:\n    #\n    #     for i in range(len(lst)):\n    #         for j in range(len(lst[i])):\n    #             if lst[i][j] == x:\n    #                 return [(i, j)]\n    #\n    #     return []\n    #\n    # However, if we have a list of lists, [[1,2,3,", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(x, 0)]\n    if x > len(lst):\n        return [(x, len(lst))]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(x, 0)]\n    if x > len(lst):\n        return [(x, len(lst))]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(x, 0)]\n    if x > len(lst):\n        return [(x, len(lst))]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    # This is to ensure that we get the correct order of the coordinates.\n    # We will use a list of tuples to store the coordinates.\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            coords.append((lst[i][j], i, j))\n    coords.sort(key=lambda x: (x[0], x[1]))\n    # Sort coordinates of the row by columns in descending order.\n    # This is to ensure that we get the correct order of the coordinates.\n    # We will use a list of tuples to store the coordinates.\n    coords2 = []\n    for i in range(len(coords)):\n        for j in range(len(coords[i])):\n            coords2.append((coords[i][j], i, j))\n    coords2.sort(key=lambda x: (x[0], x[1]))\n    # Return the coordinates.\n    return coords2", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst, x)\n    if x == len(lst):\n        return get_row(lst, x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst, x)\n    if x == len(lst):\n        return get_row(lst, x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst, x)\n    if x == len(lst):\n        return get_row(lst, x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    # Sorting by rows is to make sure that we don't get a duplicate\n    # row.\n    # Sorting by columns is to make sure that we don't get a duplicate\n    # column.\n    #\n    # Examples:\n    # get_row([\n    #     [1,2,3,4,5,6],\n    #     [1,2,3,4,1,6],\n    #     [1,2,3,4,5,1]\n    # ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    # get_row([], 1) == []\n    # get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    #\n    # Note that we don't need to sort the coordinates of the row\n    # by columns, since we are sorting by rows.\n    #\n    # Also, we don't need to sort the coordinates of the row\n    # by columns, since we are sorting by rows.\n    #\n    # Note that we don't need to sort the coordinates of the row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < len(lst):\n        return get_row(lst, x - 1) + get_row(lst, x)\n    else:\n        return get_row(lst, x - 1) + get_row(lst, x - 1) + get_row(lst, x - 1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], -x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst, -x)\n    if x == len(lst):\n        return get_row(lst, x)\n    if x < 0:\n        return get_row(lst[:-x], -x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst, -x)\n    if x == len(lst):\n        return get_row(lst, x)\n    if x < 0:\n        return get_row(lst[:-x], -x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst, -x)\n    if x == len(lst):\n        return get_row(lst, x)\n    if x < 0:\n        return get_row(lst[:-x], -x)\n    if x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    # Sorting by rows is done to ensure that the first row is\n    # sorted in ascending order.\n    # Sorting by columns is done to ensure that the first column\n    # is sorted in descending order.\n    # Sorting by rows and columns ensures that the first row and\n    # first column are sorted in ascending order.\n    # Sorting by rows and columns ensures that the first row and\n    # first column are sorted in descending order.\n    # Sorting by rows and columns ensures that the first row and\n    # first column are sorted in ascending order.\n    # Sorting by rows and columns ensures that the first row and\n    # first column are sorted in descending order.\n    # Sorting by rows and columns ensures that the first row and\n    # first column are sorted in ascending order.\n    # Sorting by rows and columns ensures that the first row and\n    # first column are sorted in descending order.\n    # Sorting by rows and columns ensures that the first row and\n    # first column are sorted in ascending order.\n    # Sorting by rows and columns ensures that the first row and\n    # first column are sorted in descending order.\n    # Sorting by rows", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x < 0:\n        return get_row(lst[1:], -x)\n    else:\n        return get_row(lst[:-x], x)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[:x], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[:x], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[:x], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x >", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x >= len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x >= len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x >= len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x >= len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x >=", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) / 2:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 + 1:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 + 2:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 + 3:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 + 4:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 + 5:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 + 6:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 + 7:\n        return [(x, len(lst))]\n    if x == len(lst) / 2 +", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[:x], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[:x], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[:x], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == 0:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return [(0, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst) - 1)]\n    if x == len(lst) / 2 + 1:\n        return [(x, len(lst) - 1)]\n    if x == len(lst) / 2 - 1:\n        return [(x, 0)]\n    if x == len(lst) / 2 - 2:\n        return [(x, 0)]\n    if x == len(lst) / 2 - 3:\n        return [(x, 0)]\n    if x == len(lst) / 2 - 4:\n        return [(x, 0)]\n    if x == len(lst) / 2 - 5:\n        return [(x, 0)]\n    if x == len(lst) / 2 - 6:\n        return [(x, 0)]\n    if x == len", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return get_row(lst[1:], x - 1)\n    if x == len(lst):\n        return get_row(lst[:-1], x - 1)\n    if x < 0:\n        return get_row(lst[1:], x - 1)\n    if x > len(lst):\n        return get_row(lst[:-1], x - 1)\n    if x == 0:\n        return get_row(lst[1:], x - 1)\n    if x == len(lst):\n        return get_row(lst[:-1], x - 1)\n    if x < 0:\n        return get_row(lst[1:], x - 1)\n    if x > len(lst):\n        return get_row(lst[:-1], x - 1)\n    if x == 0:\n        return get_row(lst[1:], x - 1)\n    if x == len(lst):\n        return get_row(lst[:-1], x - 1)\n    if x < 0:\n        return get_row(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x >= len(lst[0]):\n        return []\n    if x < len(lst[0]):\n        return [(x, 0)]\n    if x > len(lst[0][0]):\n        return []\n    if x < len(lst[0][0]):\n        return [(x, 0)]\n    if x > len(lst[0][0]):\n        return []\n    return [(x, 0)] + get_row(lst, x - 1) + [(x, 0)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst, -x)\n    if x > len(lst):\n        return get_row(lst, x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x >= len(lst):\n        return get_row(lst[:-1], x)\n    if x == 0:\n        return get_row(lst, x)\n    if x == len(lst):\n        return get_row(lst, x - 1)\n    if x == len(lst) - 1:\n        return get_row(lst, x - 1)\n    if x == len(lst) / 2 + 1:\n        return get_row(lst, x - 1)\n    if x == len(lst) / 2 - 1:\n        return get_row(lst, x - 1)\n    if x == len(lst) / 2 + 2:\n        return get_row(lst, x - 1)\n    if x == len(lst) / 2 - 2:\n        return get_row(lst, x - 1)\n    if x == len(lst) / 2 + 3:\n        return get_row(lst, x - 1)\n    if x == len(lst) / 2 - 3:\n        return get_row(lst, x - 1)\n    if x == len(lst) / 2 + 4:\n        return get_row(lst, x - 1)\n    if x == len(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < len(lst):\n        return [(get_row(lst, x-1), x)]\n    else:\n        return [(get_row(lst, x-1), x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[1:], x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == 0:\n        return []\n    if x == len(lst)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < len(lst):\n        return get_row(lst[x - 1], x)\n    else:\n        return get_row(lst[x - 1], x - 1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < len(lst):\n        return [(get_row(lst, x - 1), x)] + get_row(lst, x)\n    else:\n        return [(x, x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return []\n    if x ==", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x < len(lst):\n        return get_row(lst[:x], x) + get_row(lst[x:], x - x)\n    return get_row(lst[:x], x) + get_row(lst[x:], x - x)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < len(lst):\n        return get_row(lst, x - 1) + get_row(lst, x)\n    else:\n        return [(x, 0)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort the rows\n    lst.sort(key=lambda x: x[0])\n    # Sort the columns\n    lst.sort(key=lambda x: x[1])\n    # Get the coordinates\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"invalid argument\")\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x == len(lst[0]):\n        return [(x, 0)]\n    if x == len(lst[0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"invalid x\")\n    if x >= len(lst):\n        raise ValueError(\"invalid x\")\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x == 1:\n        return [(x, x)]\n    if x == 2:\n        return [(x, x)]\n    if x == 3:\n        return [(x, x)]\n    if x == 4:\n        return [(x, x)]\n    if x == 5:\n        return [(x, x)]\n    if x == 6:\n        return [(x, x)]\n    if x == 7:\n        return [(x, x)]\n    if x == 8:\n        return [(x, x)]\n    if x == 9:\n        return [(x, x)]\n    if x == 10:\n        return [(x, x)]\n    if x == 11:\n        return [(x, x)]\n    if x == 12:\n        return [(x, x)]\n    if x == 13:\n        return [(x, x)]\n    if x == 14:\n        return [(x, x)]\n    if x ==", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"negative index\")\n    if x >= len(lst):\n        raise ValueError(\"index out of bounds\")\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) / 2:\n        return [(x, x)]\n    if x % 2 == 0:\n        return [(x - 1, x - 1), (x - 1, x)]\n    return [(x - 1, x - 1), (x - 1, x), (x, x + 1), (x + 1, x + 1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], x + 1)\n    else:\n        return get_row(lst[:-x], x - 1) + get_row(lst[-x:], x)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return get_row(lst[1:], x)\n    else:\n        return get_row(lst[:-x], x)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x,", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if x == 0:\n        return get_row(lst[1:], x - 1)\n    if x == len(lst):\n        return get_row(lst[:-1], x - 1)\n    if x < 0:\n        return get_row(lst[:-x], x + 1)\n    if x > len(lst):\n        return get_row(lst[-x:], x - 1)\n    return get_row(lst[x:x+1], x - 1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, x)]\n    if x == len(lst) - 1:\n        return [(x, x)]\n    if x == len(lst) - 2:\n        return [(x, x)]\n    if x == len(lst) - 3:\n        return [(x, x)]\n    if x == len(lst) - 4:\n        return [(x, x)]\n    if x == len(lst) - 5:\n        return [(x, x)]\n    if x == len(lst) - 6:\n        return [(x, x)]\n    if x == len(lst) - 7:\n        return [(x, x)]\n    if x == len(lst) - 8:\n        return [(x, x)]\n    if x == len(lst) - 9:\n        return [(x, x)]\n    if x == len(lst) - 10:\n        return [(x, x)]\n    if x == len(lst) - 11:\n        return [(x, x)]\n    if x == len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x == len(lst[0]):\n        return [(x, 0)]\n    if x == len(lst[0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0][0]):\n        return [(x, 0)]\n    if x == len(lst[0][0][0][0][0][0][0][0][0][0][0]):\n        return [(x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x >= len(lst[0]):\n        return []\n    if x < len(lst[0][0]):\n        return get_row(lst, x - 1)\n    return get_row(lst, x - 1) + get_row(lst, x - 1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < len(lst):\n        return [(get_row(lst, x - 1), x)]\n    else:\n        return [(get_row(lst, x - 1), x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x >", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(0, 0)]\n    if x > len(lst):\n        return [(x, len(lst))]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(0, 0)]\n    if x > len(lst):\n        return [(x, len(lst))]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return [(0, 0)]\n    if x > len(lst):\n        return [(x, len(lst))]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[1:], -x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == 0:\n        return get_row(lst, -x)\n    if x == len(lst):\n        return get_row(lst, x)\n    if x < 0:\n        return get_row(lst[1:], -x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == 0:\n        return get_row(lst, -x)\n    if x == len(lst):\n        return get_row(lst, x)\n    if x < 0:\n        return get_row(lst[1:], -x)\n    if x > len(lst):\n        return get_row(lst[:-x], x)\n    if x == 0:\n        return get_row(lst, -x)\n    if x == len(lst):\n        return get_row(lst, x)\n    if x < 0:\n        return get_row(lst[1:], -x)\n    if x > len", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x,", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    #\n    # We can use a list comprehension to do this.\n    #\n    # We can also use a list comprehension to do this.\n    #\n    # We can also use a list comprehension to do this.\n    #\n    # We can also use a list comprehension to do this.\n    #\n    # We can also use a list comprehension to do this.\n    #\n    # We can also use a list comprehension to do this.\n    #\n    # We can also use a list comprehension to do this.\n    #\n    # We can also use a list comprehension to do this.\n    #\n    # We can also use a list comprehension to do this.\n    #\n    # We can also use a list comprehension to do this.\n    #\n    # We can also use a list comprehension to do this.\n    #\n    # We can also use a list comprehension to do this.\n    #\n    # We can also use a list comprehension to do this.\n    #\n    # We can also use a list comprehension to do this.\n    #\n    # We can also use a list comprehension to do this.\n    #\n    # We can also use a list comprehension to do this.\n    #\n    # We can also use a", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[:x], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[:x], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[:x], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[:x], x)\n    if x <", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) + x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) + x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) + x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) + x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates initially by rows in ascending order\n    rows = sorted(lst, key=lambda x: x[0])\n    # sort coordinates of the row by columns in descending order\n    cols = sorted(rows, key=lambda x: x[1], reverse=True)\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in zip(rows, cols) if x[0] == x[1]]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    return get_row(lst[:-x], x-x)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < len(lst):\n        return [(get_row(lst, x - 1), x)]\n    else:\n        return [(get_row(lst, x - 1), x - 1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, 0)]\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return get_row(lst, x + len(lst))\n    if x > len(lst):\n        return get_row(lst, x - len(lst))\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x <", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[-x:], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[-x:], x)\n    if x < 0:\n        return get_row(lst[:-x], x)\n    if x > len(lst):\n        return get_row(lst[-x:], x)\n    if x == 0:\n        return get_row(lst[:-x], x)\n    if x == len(lst):\n        return get_row(lst[-x:]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    # Sorting by rows is important, because we need to find the first\n    # row, which contains the given x.\n    # Sorting by columns is important, because we need to find the first\n    # column, which contains the given x.\n    # We can use a binary search to find the first row and column.\n    # We can also use a binary search to find the first row and column,\n    # which contains the given x.\n    # We can use a binary search to find the first row and column,\n    # which contains the given x.\n    # We can use a binary search to find the first row and column,\n    # which contains the given x.\n    # We can use a binary search to find the first row and column,\n    # which contains the given x.\n    # We can use a binary search to find the first row and column,\n    # which contains the given x.\n    # We can use a binary search to find the first row and column,\n    # which contains the given x.\n    # We can use a binary search to find the first row and column,\n    # which contains the given x.\n    # We can use a binary search to find the first", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x > len(lst):\n        return []\n    if x < 0:\n        return []\n    if x == 0:\n        return []\n    if x == 1:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 2:\n        return [(x, len(lst))]\n    if x == len(lst) - 3:\n        return [(x, len(lst))]\n    if x == len(lst) - 4:\n        return [(x, len(lst))]\n    if x == len(lst) - 5:\n        return [(x, len(lst))]\n    if x == len(lst) - 6:\n        return [(x, len(lst))]\n    if x == len(lst) - 7:\n        return [(x, len(lst))]\n    if x == len(lst) - 8:\n        return [(x, len(lst))]\n    if x == len(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < len(lst):\n        return [get_row(lst, x - 1)] + [get_row(lst, x)]\n    else:\n        return [get_row(lst, x - 1)] + [get_row(lst, x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x)]\n    if x < 0:\n        x = len(lst) + x\n    if x > len(lst):\n        x = len(lst) - x\n    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst):\n        return [(x, lst[x])]\n    if x < len(lst):\n        return [get_row(lst, x - 1) + [(x, lst[x])]]\n    else:\n        return [get_row(lst, x - 1) + [(x, lst[x])]]"]]