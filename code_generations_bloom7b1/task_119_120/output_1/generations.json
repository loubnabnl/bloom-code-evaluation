[["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'Yes'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        '''\n        Returns True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 0:\n            return True\n        if s[0] == s[-1] == ')':\n            return True\n        if s[0] == '(' and s[-1] == ')':\n            return True\n        if s[0] == '(' and s[-1] == '(':\n            return True\n        if s[0] == ')' and s[-1] == '(':\n            return True\n        if s[0] == ')' and s[-1] == ')':\n            return True\n        if s[0] == '(' and s[-1] == ')':\n            return True\n        if s[0] == ')' and s[-1] == '(':\n            return True\n        if s[0] == '(' and s[-1] == '(':\n            return True\n        if s[0] == ')' and s[-1] == ')':\n            return True\n        if s[0] == '(' and s[-1] == '(':\n            return True\n        if s[0] == ')' and s[-1] == ')':\n            return True\n        return False\n\n    def is_balanced2(s):\n        '''\n        Returns True if the string s is balanced", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        else:\n            return s[-1] == '('\n    if len(lst) == 1:\n        return match_parens(lst[0])\n    if len(lst) == 2:\n        if is_balanced(lst[0]) and is_balanced(lst[1]):\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) > 2:\n        if is_balanced(lst[0]) and is_balanced(lst[1]):\n            return match_parens(lst[2:])\n        else:\n            return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        if lst[0] == '(':\n            return 'Yes'\n        if lst[1] == '(':\n            return 'Yes'\n        if lst[0] == ')':\n            return 'No'\n        if lst[1] == ')':\n            return 'No'\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        return all(c in '(' for c in s)\n\n    if len(lst) == 1:\n        return match_parens(lst[0])\n    elif len(lst) == 2:\n        if is_balanced(lst[0]) and is_balanced(lst[1]):\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        if lst[0] == '(':\n            return 'Yes'\n        if lst[1] == '(':\n            return 'Yes'\n        if lst[0] == ')':\n            return 'No'\n        if lst[1] == ')':\n            return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        '''\n        Returns True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == s[-1] == ')':\n            return True\n        if s[0] == '(':\n            return False\n        if s[-1] == '(':\n            return False\n        return True\n\n    def is_balanced2(s):\n        '''\n        Returns True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == s[-1] == ')':\n            return True\n        if s[0] == '(':\n            return False\n        if s[-1] == '(':\n            return False\n        return True\n\n    def is_balanced3(s):\n        '''\n        Returns True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == s[-1] == ')':\n            return True\n        if s[0] == '(':\n            return False\n        if s[-1] == '(':\n            return False\n        return True\n\n    def is_balanced4(s):\n        '''\n        Returns True if the string s is balanced, False otherwise.", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')' and lst[5] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(' and lst[4] == ')' and lst[5] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        '''\n        Check if the string s is balanced.\n        '''\n        if len(s) == 0:\n            return False\n        if s[0] == s[-1] == '(':\n            return True\n        return False\n\n    def is_balanced_and_good(s):\n        '''\n        Check if the string s is balanced and good.\n        '''\n        if is_balanced(s):\n            if is_balanced(s.replace('(', '').replace(')', '')):\n                return True\n        return False\n\n    def is_balanced_and_not_good(s):\n        '''\n        Check if the string s is balanced and not good.\n        '''\n        if is_balanced(s):\n            if is_balanced(s.replace('(', '').replace(')', '')):\n                return False\n        return True\n\n    def is_balanced_and_not_balanced(s):\n        '''\n        Check if the string s is balanced and not balanced.\n        '''\n        if is_balanced(s):\n            if is_balanced(s.replace('(', '').replace(')',", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'Yes'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        if s[0] == '(':\n            return s[-1] == ')'\n        else:\n            return s[-1] == '('\n\n    if len(lst) == 1:\n        return lst[0] == '('\n\n    if len(lst) == 2:\n        return is_balanced(lst[0]) and is_balanced(lst[1])\n\n    if len(lst) == 3:\n        return is_balanced(lst[0]) and is_balanced(lst[1]) and is_balanced(lst[2])\n\n    if len(lst) == 4:\n        return is_balanced(lst[0]) and is_balanced(lst[1]) and is_balanced(lst[2]) and is_balanced(lst[3])\n\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(' and lst[4] == ')' and lst[5] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        if lst[0] == '(':\n            return 'Yes'\n        if lst[1] == '(':\n            return 'Yes'\n        if lst[0] == ')':\n            return 'No'\n        if lst[1] == ')':\n            return 'No'\n        return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(':\n            return 'Yes'\n        if lst[1] == '(':\n            return 'Yes'\n        if lst[2] == ')':\n            return 'No'\n        if lst[1] == ')':\n            return 'No'\n        if lst[2] == ')':\n            return 'No'\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(' and lst[4] == ')' and lst[5] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '('", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')' and lst[5] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')' and lst[4] == '(' and lst[5] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        if s.count('(') == s.count(')'):\n            return True\n        return False\n\n    if len(lst) == 1:\n        return lst[0] == '('\n\n    if len(lst) == 2:\n        if is_balanced(lst[0]) and is_balanced(lst[1]):\n            return True\n        return False\n\n    if len(lst) > 2:\n        return False\n\n    return True", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        if s[-1] == '(':\n            return s[0] == '('\n        return False\n\n    def is_balanced_pair(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        if s[-1] == '(':\n            return s[0] == '('\n        return False\n\n    def is_balanced_pair_with_closing(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        if s[-1] == '(':\n            return s[0] == '('\n        return False\n\n    def is_balanced_pair_with_opening(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        '''\n        This function checks if the string s is balanced.\n        '''\n        if len(s) == 1:\n            return True\n        elif s[0] == '(':\n            return s[-1] == ')'\n        elif s[-1] == '(':\n            return s[0] == '('\n        else:\n            return False\n\n    def is_balanced2(s):\n        '''\n        This function checks if the string s is balanced.\n        '''\n        if len(s) == 1:\n            return True\n        elif s[0] == '(':\n            return s[-1] == ')'\n        elif s[-1] == '(':\n            return s[0] == '('\n        else:\n            return False\n\n    def is_balanced3(s):\n        '''\n        This function checks if the string s is balanced.\n        '''\n        if len(s) == 1:\n            return True\n        elif s[0] == '(':\n            return s[-1] == ')'\n        elif s[-1] == '(':\n            return s[0] == '('\n        else:\n            return False\n\n    def is_balanced4(s):\n        '''\n        This function checks if the string s is balanced.\n        '''\n        if len(s) == 1:\n            return True\n        elif", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(' and lst[4] == ')' and lst[5] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')' and lst[4] == '(' and lst[5] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == '(' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '('", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        if lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        return 'No'\n    if len(lst) > 2:\n        return 'No'\n    return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == lst[1]:\n            if lst[2] == '(':\n                return 'Yes'\n            else:\n                return 'No'\n        else:\n            if lst[2] == '(':\n                return 'Yes'\n            else:\n                return 'No'\n    if len(lst) == 4:\n        if lst[0] == lst[1]:\n            if lst[2] == '(':\n                if lst[3] == ')':\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                if lst[2] == '(':\n                    if lst[3] == ')':\n                        return 'Yes'\n                    else:\n                        return 'No'\n        else:\n            if lst[2] == '(':\n                if lst[3] == ')':\n                    return 'Yes'\n                else:\n                    return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        '''\n        Returns True if the string s is balanced, False otherwise.\n        '''\n        if s.count('(') == s.count(')'):\n            return True\n        else:\n            return False\n\n    def is_balanced2(s):\n        '''\n        Returns True if the string s is balanced, False otherwise.\n        '''\n        if s.count('(') == s.count(')'):\n            return True\n        else:\n            return False\n\n    def is_balanced3(s):\n        '''\n        Returns True if the string s is balanced, False otherwise.\n        '''\n        if s.count('(') == s.count(')'):\n            return True\n        else:\n            return False\n\n    def is_balanced4(s):\n        '''\n        Returns True if the string s is balanced, False otherwise.\n        '''\n        if s.count('(') == s.count(')'):\n            return True\n        else:\n            return False\n\n    def is_balanced5(s):\n        '''\n        Returns True if the string s is balanced, False otherwise.\n        '''\n        if s.count('(')", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        '''\n        Returns True if s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        if s[-1] == '(':\n            return s[0] == '('\n        return False\n\n    def is_balanced_pair(s):\n        '''\n        Returns True if s is a balanced pair, False otherwise.\n        '''\n        if len(s) == 2:\n            if is_balanced(s[0]) and is_balanced(s[1]):\n                return True\n        return False\n\n    def is_balanced_triple(s):\n        '''\n        Returns True if s is a balanced triple, False otherwise.\n        '''\n        if len(s) == 3:\n            if is_balanced(s[0]) and is_balanced(s[1]) and is_balanced(s[2]):\n                return True\n        return False\n\n    def is_balanced_quad(s):\n        '''\n        Returns True if s is a balanced quad, False otherwise.\n        '''\n        if len(s) == 4:\n            if is_balanced(s[0]) and is_balanced(s[1])", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')' and lst[5] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == s[-1] == ')':\n            return True\n        if s[0] == '(' and s[-1] == ')':\n            return True\n        if s[0] == '(' and s[-1] == '(':\n            return True\n        if s[0] == ')' and s[-1] == '(':\n            return True\n        if s[0] == ')' and s[-1] == ')':\n            return True\n        if s[0] == '(' and s[-1] == ')':\n            return True\n        if s[0] == ')' and s[-1] == '(':\n            return True\n        return False\n\n    def is_balanced2(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == s[-1] == ')':\n            return True\n        if s[0] == '(' and s[-1] == ')':\n            return True\n        if s[0] == '(' and s[-1] == '(':\n            return True\n        if s[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')' and lst[5] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        if lst[0] == '(':\n            return 'Yes'\n        if lst[1] == '(':\n            return 'Yes'\n        if lst[0] == ')':\n            return 'No'\n        if lst[1] == ')':\n            return 'No'\n        return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(':\n            return 'Yes'\n        if lst[1] == '(':\n            return 'Yes'\n        if lst[2] == ')':\n            return 'No'\n        if lst[3] == ')':\n            return 'No'\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(' and lst[4] == ')' and lst[5] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        if lst[0] == '(':\n            return 'Yes'\n        if lst[1] == '(':\n            return 'Yes'\n        return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(':\n            return 'Yes'\n        if lst[1] == '(':\n            return 'Yes'\n        if lst[2] == '(':\n            return 'Yes'\n        return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(':\n            return 'Yes'\n        if lst[1] == '(':\n            return 'Yes'\n        if lst[2] == '(':\n            return 'Yes'\n        if lst[3] == '(':\n            return 'Yes'\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')' and lst[5] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        if lst[0] == '(':\n            if lst[1] == ')':\n                return 'Yes'\n            if lst[1] == '(':\n                return 'No'\n        if lst[1] == '(':\n            if lst[0] == ')':\n                return 'Yes'\n            if lst[0] == ')':\n                return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')' and lst[5] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if lst[0] == '(' and", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        if s[-1] == '(':\n            return s[0] == '('\n        return False\n\n    def is_balanced2(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        if s[-1] == '(':\n            return s[0] == '('\n        return False\n\n    def is_balanced3(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        if s[-1] == '(':\n            return s[0] == '('\n        return False\n\n    def is_balanced4(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        if s.count('(')!= s.count(')'):\n            return False\n        for i in range(len(s) - 1):\n            if s[i]!= s[i + 1]:\n                return False\n        return True\n\n    def is_balanced2(s):\n        if s.count('(')!= s.count(')'):\n            return False\n        for i in range(len(s) - 1):\n            if s[i]!= s[i + 1]:\n                return False\n        return True\n\n    def is_balanced3(s):\n        if s.count('(')!= s.count(')'):\n            return False\n        for i in range(len(s) - 1):\n            if s[i]!= s[i + 1]:\n                return False\n        return True\n\n    def is_balanced4(s):\n        if s.count('(')!= s.count(')'):\n            return False\n        for i in range(len(s) - 1):\n            if s[i]!= s[i + 1]:\n                return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')' and lst[5] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')' and lst[2] == '(':\n            return 'No'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')':\n            return 'No'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(' and lst[4] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')' and lst[2] ==", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')' and lst[5] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'Yes'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(' and lst[4] == '(' and lst[5] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        if lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        if lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        if lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'No'\n        if lst[0] == ')' and lst[1] == '(' and lst[2] == ')':\n            return 'Yes'\n        if lst[0] == ')' and lst[1] == '(' and lst[2] == ')':\n            return 'No'\n        return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        if lst[0] == '(':\n            return 'Yes'\n        if lst[1] == '(':\n            return 'Yes'\n        return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(':\n            return 'Yes'\n        if lst[1] == '(':\n            return 'Yes'\n        if lst[2] == '(':\n            return 'Yes'\n        if lst[0] == lst[1]:\n            return 'Yes'\n        if lst[0] == lst[2]:\n            return 'Yes'\n        if lst[1] == lst[2]:\n            return 'Yes'\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')' and lst[5] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')' and lst[5] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if lst[0] == '(' and", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        if len(s) == 1:\n            return True\n        elif s[0] == '(':\n            return s[-1] == ')'\n        else:\n            return s[-1] == '('\n    if len(lst) == 1:\n        return lst[0] == '('\n    elif len(lst) == 2:\n        if is_balanced(lst[0]) and is_balanced(lst[1]):\n            return True\n        else:\n            return False\n    else:\n        return match_parens(lst[:-1]) and match_parens(lst[1:])", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == lst[1] == lst[2]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == lst[1] == lst[2] == lst[3]:\n            return 'Yes'\n        else:\n            return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        if len(s) == 1:\n            return True\n        elif s[0] == '(':\n            return s[-1] == ')'\n        else:\n            return s[-1] == '('\n\n    if len(lst) == 1:\n        return True\n    elif lst[0] == '(':\n        return is_balanced(lst[1:])\n    else:\n        return is_balanced(lst[0])", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(':\n            if lst[1] == ')':\n                return 'Yes'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(' and lst[4] == ')' and lst[5] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        return all(c in '(' for c in s)\n\n    if len(lst) == 1:\n        return lst[0] in '('\n    elif len(lst) == 2:\n        if is_balanced(lst[0]) and is_balanced(lst[1]):\n            return True\n        else:\n            return False\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == lst[1] == lst[2]:\n            return 'Yes'\n        else:\n            return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        if s[-1] == '(':\n            return s[0] == '('\n        return False\n\n    def is_balanced2(s):\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        if s[-1] == '(':\n            return s[0] == '('\n        return False\n\n    if len(lst) == 1:\n        return True\n    if lst[0] == '(':\n        if lst[-1] == ')':\n            return True\n        if is_balanced(lst[1:]):\n            return True\n        if is_balanced2(lst[1:]):\n            return True\n    if lst[-1] == '(':\n        if lst[0] == '(':\n            return True\n        if is_balanced(lst[:-1]):\n            return True\n        if is_balanced2(lst[:-1]):\n            return True\n    return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')' and lst[4] == '(' and lst[5] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')' and lst[5] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if lst[0] == '(' and", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        if lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        if lst[0] == ')' and lst[1] == '(' and lst[2] == ')':\n            return 'No'\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(':\n            return 'No'\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] ==", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        '''\n        Check if a string is balanced.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        if s[-1] == '(':\n            return s[0] == '('\n        return False\n\n    def is_balanced2(s):\n        '''\n        Check if a string is balanced.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        if s[-1] == '(':\n            return s[0] == '('\n        return False\n\n    def is_balanced3(s):\n        '''\n        Check if a string is balanced.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        if s[-1] == '(':\n            return s[0] == '('\n        return False\n\n    def is_balanced4(s):\n        '''\n        Check if a string is balanced.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        if s[-1]", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        if lst[0] == '(':\n            if lst[1] == ')':\n                return 'Yes'\n            if lst[1] == '(':\n                return 'No'\n        if lst[0] == ')':\n            if lst[1] == '(':\n                return 'Yes'\n            if lst[1] == ')':\n                return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        if lst[0] == '(':\n            return 'Yes'\n        if lst[1] == '(':\n            return 'Yes'\n    if len(lst) == 3:\n        if lst[0] == '(':\n            return 'Yes'\n        if lst[1] == '(':\n            return 'Yes'\n        if lst[2] == '(':\n            return 'Yes'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        '''\n        Returns True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 0:\n            return False\n        if s[0] == s[-1] == ')':\n            return True\n        if s[0] == '(':\n            return False\n        if s[-1] == '(':\n            return False\n        if s[0] == ')':\n            return True\n        if s[-1] == ')':\n            return False\n        if s[0] == '(':\n            return True\n        if s[-1] == ')':\n            return False\n        if s[0] == ')':\n            return True\n        if s[-1] == ')':\n            return False\n        if s[0] == '(':\n            return True\n        if s[-1] == ')':\n            return False\n        if s[0] == '(':\n            return True\n        if s[-1] == ')':\n            return False\n        if s[0] == '(':\n            return True\n        if s[-1] == ')':\n            return False\n        if s[0] == '(':\n            return True\n        if s[-1] == ')':\n            return False\n        if s[0] == '(':\n            return True\n        if s[-1] == ')':\n            return False\n        if s[0] == '(", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'Yes'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        return s[-1] == '('\n\n    def is_balanced2(s):\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        return s[-1] == '('\n\n    def is_balanced3(s):\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        return s[-1] == '('\n\n    def is_balanced4(s):\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        return s[-1] == '('\n\n    def is_balanced5(s):\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        return s[-1] == '('\n\n    def is_balanced6(s):\n        if len(s) == 1:\n            return True\n        if s[0] ==", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'Yes'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        else:\n            return s[-1] == '('\n\n    def is_balanced_pair(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 2:\n            if s[0] == '(':\n                return s[1] == ')'\n            else:\n                return s[1] == '('\n\n    def is_balanced_triple(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 3:\n            if s[0] == '(':\n                return s[2] == ')'\n            else:\n                return s[2] == '('\n\n    def is_balanced_quadruple(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 4:\n            if s[0] == '(':\n                return s[3] == ')'\n            else:\n                return s[3] == '('\n\n    def is_bal", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        if s[-1] == '(':\n            return s[0] == ')'\n        return False\n\n    def is_balanced2(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        if s[-1] == '(':\n            return s[0] == ')'\n        return False\n\n    def is_balanced3(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return s[-1] == ')'\n        if s[-1] == '(':\n            return s[0] == ')'\n        return False\n\n    def is_balanced4(s):\n        '''\n        Return True if the string s is balanced, False otherwise.\n        '''\n        if len(s) == 1:\n            return True", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')' and lst[4] == '(' and lst[5] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(' and lst[2] == ')':\n            return 'No'\n        else:\n            return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '('", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] ==", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')' and lst[5] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')' and lst[5] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == '(' and lst[1] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')' and lst[4] == '(' and lst[5] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        if lst[0] == '(':\n            return 'Yes'\n        if lst[1] == '(':\n            return 'Yes'\n        if lst[0] == ')':\n            return 'No'\n        if lst[1] == ')':\n            return 'No'\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        for i in range(len(s) - 1, -1, -1):\n            if s[i]!= s[i + 1]:\n                return False\n        return True\n\n    if len(lst) == 1:\n        return lst[0] == '(' and lst[-1] == ')'\n    else:\n        return match_parens([lst[0], lst[-1]]) == 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 4:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 5:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')' and lst[4] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 6:\n        if lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')' and lst[4] == '(' and lst[5] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 7:\n        if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '('", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(lst) == 3:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '('", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == ')':\n            return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        elif lst[0] == '(' and lst[1] == ')':\n            return 'No'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'Yes'\n        elif lst[0] == ')' and lst[1] == '(':\n            return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'"]]