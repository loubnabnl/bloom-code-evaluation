[["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = list(set(string.split('_')))\n    prefixes.sort()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return sorted(set(string.split('_')))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        if i > 0:\n            char = string[i]\n            result.append(char if char.isdigit() else ''.join([char[:-1] for _ in range(1, len(char))]))\n        else:\n            result.append('')\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [string[:i]] + [string[i:] for i in range(1, len(string))]\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [\n        x\n        for x in string.split('_')\n        if x.isalnum()\n    ]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes: List[str] = []\n    for i in range(len(string) - 1, -1, -1):\n        if string[i - 1] == string[i]:\n            prefixes.append(string[i - 1])\n\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string) - 1, -1, -1):\n        result.append(string[:i])\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [(string[i:i + 1], i) for i in range(0, len(string), 2)]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if not string:\n        return []\n    return [string[0]] + [prefix for prefix in all_prefixes(string[1:]) if prefix not in string[0]]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [str.lower(str.rfind(str.lower(string), index) + 1)\n             for index in range(len(string) - len(str(string)) + 1)]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    current = string\n    while current:\n        if current.startswith('abc'):\n            prefixes.append('abc')\n            current = current[3:]\n        elif current.startswith('def'):\n            prefixes.append('def')\n            current = current[4:]\n        elif current.startswith('ghi'):\n            prefixes.append('ghi')\n            current = current[4:]\n        elif current.startswith('jklmn'):\n            prefixes.append('jklmn')\n            current = current[5:8]\n        else:\n            current = current[1:]\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes: List[str] = []\n    for c in string:\n        if c in string[:2]:\n            prefixes.append(string[:2])\n        elif c in string[:3]:\n            prefixes.append(string[:3])\n        elif c in string[:4]:\n            prefixes.append(string[:4])\n        elif c in string[:5]:\n            prefixes.append(string[:5])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    string_split = string.split(\" \")\n    return [string_split[i:i + 1] for i in range(len(string_split))]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [string[0]]\n    for i in range(1, len(string)):\n        prefixes.append(prefixes[-1] + string[i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(filter(lambda x: x[0] not in string, x for x in string.split(' ') if x))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [string[0]]\n    for i in range(1, len(string)):\n        if string[i - 1]!= string[i]:\n            break\n        prefixes.append(string[i - 1])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    len_string = len(string)\n    for i in range(len_string):\n        prefix = string[:i]\n        if prefix in prefixes:\n            continue\n        prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(set(string.split()))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    string = string.lower()\n\n    result = [prefix.lower() for prefix in string.split(' ') if prefix.isdigit()]\n    result = [prefix for prefix in result if prefix in string]\n\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char!='':\n            prefixes.append(char)\n        else:\n            break\n    prefixes.reverse()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [string[:i]]\n    while prefixes:\n        previous = prefixes.pop()\n        yield previous\n        for next in previous:\n            yield next + string[len(previous) + 1:]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    result_len = len(string)\n    for start in range(0, result_len):\n        i = result_len - start - 1\n        while i > 0:\n            if string[:i] == string[start + i]:\n                break\n            i -= 1\n    result.append(string[start])\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for idx, char in enumerate(string):\n        if idx == 0:\n            continue\n        elif char =='':\n            continue\n        elif char in string[:idx - 1]:\n            prefixes.append(string[:idx])\n        else:\n            break\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    while prefixes:\n        prefix = prefixes.pop()\n        if string.startswith(prefix):\n            return prefixes\n    return [string]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split('_') if prefix]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    longest = None\n    prefixes = []\n    for char in string:\n        if char == longest:\n            break\n\n        if char.isupper():\n            longest = char\n        elif char.isdigit():\n            longest = '0123456789'.index(char) + 1\n        else:\n            prefixes.append(char)\n\n    if not longest:\n        return prefixes\n    else:\n        return prefixes[:longest]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(filter(None, [(c if c.startswith('abc') else '_')\n                             for c in string.split('_')]))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return ['{}'.format(i) for i in string.split('') if i]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    s = ''.join([x for x in string if x.isalpha()])\n    return [x.lower() for x in s.split('') if x.isalpha()]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    length = len(string)\n    prefixes = []\n    for i in range(0, length):\n        prefix = string[:i]\n        if prefix == string:\n            break\n        prefixes.append(prefix)\n    prefixes.reverse()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    string_len = len(string)\n    prefix_len = min(string_len, len(set(string)))\n    prefixes = []\n    for i in range(string_len - prefix_len):\n        prefixes.append(string[:i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(string.startswith(p) for p in string)", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [s for s in string.split('') if s.startswith(' ')]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = [str(x) for x in string.split() if x.startswith(' ')]\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = set()\n    for i in xrange(len(string)):\n        if string[i] not in prefixes:\n            prefixes.add(string[i])\n    return sorted(prefixes)", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in xrange(len(string)):\n        if string[i - 1] == string[i]:\n            result.append(string[i - 1])\n        result.append(string[i])\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [str.startswith(s) for s in string.split(' ') if s]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    if string.startswith('a'):\n        prefixes.append('a')\n    for i in range(1, len(string)):\n        if string[:i].startswith('ab'):\n            prefixes.append(string[:i].replace('ab', 'a'))\n        elif string[:i].startswith('abc'):\n            prefixes.append(string[:i].replace('abc', 'a'))\n        else:\n            prefixes.append(string[:i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix[:len(string)]\n            for prefix in string.split(' ')\n            if len(prefix) > len(string)]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(filter(lambda x: x[0] in string, list(string.split(' '))))\n</s>", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes: List[str] = []\n    i = 0\n    while i < len(string):\n        if string[i] not in prefixes:\n            prefixes.append(string[i])\n            i += 1\n        else:\n            break\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(set(string.split('')) - set(string.split('-')))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(string):\n        if string[i] in result:\n            result.append(string[i])\n        i += 1\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char.isalpha():\n            prefixes.append(char)\n        else:\n            break\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split() if prefix]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    string = string.upper()\n    for char in string:\n        if char.isalpha():\n            prefixes.append(char)\n    if len(prefixes) > 1:\n        return prefixes\n    else:\n        return [prefixes]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [s for s in string.split('') if s.startswith('_')]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    string = string.lower()\n    return list(set(string) - set(string[:2]))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split('-') if prefix!= '']", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split(' ') if prefix]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    start = 0\n    prefixes = []\n    for char in string:\n        if char =='':\n            start += 1\n        elif char == '\\n':\n            prefixes.append('')\n            continue\n        else:\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return string.split(' ')", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    all_prefixes: List[str] = []\n    in_string: bool = False\n    i: int = 0\n    while not in_string:\n        i = string.find(\" \", i)\n        if i == -1:\n            in_string = True\n        else:\n            all_prefixes.append(string[:i])\n            i += 1\n    return all_prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(reversed(set(string.split(''))))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(str.split(string))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(string.split('_')[:-1])", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    string = list(string)\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i - 1])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    start = 0\n    while start < len(string):\n        prefix = string[start:start + 2]\n        if prefix not in all_prefixes(string[start:start + 2]):\n            return prefix\n        else:\n            start += 1\n    return []", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [a for a in string.split(' ') if a.isalpha()]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes: List[str] = ['']\n    for c in string:\n        if c not in prefixes and c!= '':\n            prefixes.append(c)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        if string[i] =='':\n            prefixes.append(string[:i])\n        else:\n            break\n    prefixes.sort()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split(' ') if len(prefix) > 0]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    all_prefixes = []\n    if string == 'abc':\n        all_prefixes.append('a')\n        all_prefixes.append('ab')\n        all_prefixes.append('abc')\n    elif string == 'a':\n        all_prefixes.append('a')\n    elif string == 'b':\n        all_prefixes.append('b')\n    elif string == 'c':\n        all_prefixes.append('c')\n    elif string == 'abc':\n        all_prefixes.append('a')\n        all_prefixes.append('b')\n        all_prefixes.append('c')\n    else:\n        if len(string) == 1:\n            return []\n        else:\n            all_prefixes.append(string[:-1])\n\n    for sub in string[:-1]:\n        all_prefixes += all_prefixes(sub)\n    return all_prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(set(string.split('_')[:-1]))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    word: List[str] = []\n    for char in string:\n        if char in word:\n            word.remove(char)\n        else:\n            word.append(char)\n    return word", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split('_') if prefix]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    suffixes: List[str] = []\n    while len(string) > 0:\n        i = string.rfind('.')\n        if i < 0:\n            suffixes.append(string)\n            break\n        else:\n            string = string[:i]\n    suffixes.reverse()\n    return suffixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(set(string[i:i + 2] for i in range(0, len(string), 2)))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    if string is None:\n        return []\n    string_len = len(string)\n    for i in range(string_len):\n        prefixes.append(string[:i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [\n        p\n        for p in string.split('_')\n        if not p.startswith('_')\n    ]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if string:\n        return [str(len(string)) - i - 1 for i, char in enumerate(string)]\n    else:\n        return []", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [\n        prefix\n        for prefix in string.split('')\n        if prefix.startswith(' ')\n    ]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        prefixes.append(char.lower())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = list()\n    current = ''\n    prefix_length = len(current)\n    for char in string:\n        if char!= current:\n            current = char\n        else:\n            prefix_length -= 1\n            if prefix_length == 0:\n                prefixes.append(current)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if not string:\n        return []\n\n    return [string[:x - 1] for x in range(len(string))]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for char in string:\n        if char.isalnum() or char == '_':\n            result.append(char)\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for prefix in list(string):\n        if prefix.startswith(string[0]):\n            result.append(prefix)\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    split_string = string.split('_')\n\n    for element in split_string:\n        result.append(element[:-1])\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    assert isinstance(string, str)\n    return list(string.split(' '))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    # all possible prefixes\n    all_prefixes: List[str] = [' ', '', 'abc', 'ab', 'a', 'b', 'c']\n    # choose the longest\n    max_length = len(string)\n    return [string[:max_length - len(prefix)] for prefix in all_prefixes]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    all_prefixes: List[str] = []\n    previous_len = 0\n    for char in string:\n        if char =='':\n            if previous_len == 0:\n                all_prefixes.append(' ')\n            else:\n                all_prefixes.append(''+ previous_prefix + char)\n            previous_len = 0\n        elif char in ('a', 'b', 'c'):\n            previous_len = len(previous_prefix)\n        else:\n            all_prefixes.append(char)\n            previous_len += 1\n    return all_prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string)) if string[:i]!= string[:i - 1]]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes: List[str] = []\n    prev: str = ''\n\n    for char in string:\n        if char in prev:\n            continue\n\n        if char.isalpha():\n            prefixes.append(prev)\n\n        prev = char\n\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    def _pre(s: str) -> str:\n        if len(s) == 0:\n            return \"\"\n        else:\n            return s[:1] + s[1:]\n\n    return [_str.lower() for _str in string.split(\" \") if _str.startswith(_pre(_str))]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    start = len(string) - len(string.lstrip('abc'))\n    return list(string[start:].split('abc'))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    current = ''\n    for prefix in string:\n        if current!= '':\n            result.append(current)\n            current = ''\n        current += prefix\n    if current!= '':\n        result.append(current)\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    current = string[0]\n    for i in range(1, len(string)):\n        if current == string[i]:\n            prefixes.append(current)\n        elif current.isupper() and current!= string[i]:\n            prefixes.append(current[:1].upper() + current[1:])\n        elif current.islower() and current!= string[i]:\n            prefixes.append(current[:1].lower() + current[1:])\n        else:\n            prefixes.append(current)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(map(str.lower, string.split(' ')))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(0, len(string)):\n        if string[i] == string[i - 1]:\n            prefixes.append(string[:i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [\n        i + 1\n        for i, c in enumerate(string)\n        if string[i] in ('a', 'b', 'c')\n    ]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return tuple(set(string.split(prefix) for prefix in string.split(' ')) - set([' ']))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [str.startswith(''+ s) for s in string.split()]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes: List[str] = []\n    for p in string:\n        if p:\n            prefixes.append(p)\n    prefixes.sort()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    for suffix in string.split():\n        yield prefix + suffix for prefix in all_prefixes(suffix)", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = set(string[0])\n    for i in range(1, len(string)):\n        prefixes.update(set(string[i]) & prefixes)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix = ''\n    for i in range(len(string) - 1):\n        if string[i - 1] =='':\n            prefixes.append(prefix)\n            prefix = ''\n        prefixes.append(prefix + string[i - 1])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    # convert to list of sub-strings\n    strings = string.split()\n\n    # return shortest to longest prefixes\n    return [sub for sub in strings if sub]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return set(string.split(' ')[:-1])", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    while prefixes is None:\n        prefixes = list(string.split(' '))\n        if len(prefixes) > 1:\n            for i in range(len(prefixes)):\n                if prefixes[i][0]!='':\n                    break\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string.split():\n        if prefix:\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = set()\n    for match in re.finditer(\"([^a-zA-Z])([A-Za-z])\", string):\n        prefixes.add(match.group(2))\n\n    return sorted(prefixes, key=len)", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return (prefix for prefix in string.split('_') if prefix)", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [x for x in string.split(' ') if x]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [\n        prefix\n        for prefix in string.split('_')\n        if len(prefix) > len(string) - len(prefix)\n    ]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [i for i, j in enumerate(string) if j.startswith(i)]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    string = string.lower()\n    result = []\n    if string:\n        for prefix in string:\n            if prefix in result:\n                continue\n            if len(prefix) < len(result):\n                result.insert(0, prefix)\n            elif len(prefix) > len(result):\n                result.append(prefix)\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if string == '':\n        return []\n\n    length = len(string)\n    if length <= 2:\n        return []\n\n    prefixes = []\n    for i in range(2, length - 1):\n        prefixes.append(string[:i])\n    prefixes.append(string)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    # Iterate through the string, and collect the longest prefixes\n    return [prefix for prefix in string.split('_') if len(prefix) > len(string) - len(prefix)]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes: List[str] = []\n    if not string:\n        return prefixes\n    if string[0] in '\\r\\n ':\n        prefixes.append(string[0])\n    for char in string:\n        if char in '\\r\\n ':\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    last_prefix = ''\n    for char in string:\n        if char.isupper():\n            prefixes.append(last_prefix)\n        last_prefix = char\n        prefixes.append(char.lower())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes: List[str] = []\n    string = re.sub(r'^.*', '', string)\n    for char in string:\n        if char =='':\n            continue\n        if char in list('abcdefghijklmnopqrstuvwxyz'):\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    length = len(string)\n    prefixes = [string[:length]]\n    for i in range(1, length):\n        if string[:i] == prefixes[-1]:\n            prefixes.append(string[i:])\n        else:\n            prefixes.append(string[:i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [i for i in string.split(' ') if i.startswith(' ')]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    if len(string) == 1:\n        return [string]\n\n    prefixes = []\n    for char in string:\n        if char not in prefixes:\n            prefixes.append(char)\n\n    if len(prefixes) > 1:\n        result = [prefixes[0]] + prefixes[1:]\n    elif len(prefixes) == 1:\n        result = prefixes\n\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(string)[0:1] + list(string)[1:2] + list(string)[2:]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return sorted(string.split('_'), key=len)", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = list()\n    prefix = ''\n    for i in range(len(string)):\n        if string[i] == prefix:\n            prefixes.append(prefix + string[i + 1:])\n            prefix = ''\n        else:\n            prefix += string[i]\n    prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return ['' if string == '' else i for i in string.split('') if i!= '']", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(string)[:] + list(string)[::-1]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [str.split(prefix, 1)[0] for prefix in string.split('') if prefix.isalpha()]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return string.split('_')[:-1]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split(' ') if prefix]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [\n        s.lower() for s in string.split('') if s.isalpha()\n    ]\n    prefixes.sort(key=lambda s: len(s))\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [part.lower() for part in string.split('') if part.isalpha()]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char.isalpha():\n            prefixes.append(char.lower())\n        else:\n            prefixes.append(char)\n\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [\n        prefix\n        for prefix in string.split()\n        if prefix.startswith(prefix.lstrip('-'))\n    ]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    def prefixes(str: str) -> List[str]:\n        return [str[i: i + len(str)] for i in range(0, len(str)) if str[i:i + len(str)].isalpha()]\n\n    return list(set(prefixes(string)))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if not string:\n        return []\n\n    return (x for x in string.split('') if x.startswith(' '))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes: List[str] = []\n    in_prefix = False\n    for i in range(len(string) - 1, 0, -1):\n        if string[i] == string[i + 1]:\n            continue\n        if in_prefix:\n            prefixes.append(string[i + 1:i + 1])\n            in_prefix = False\n        else:\n            in_prefix = True\n    prefixes.append(string[:-1])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(string.split(''))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [\n        '' if not string or len(string) == 0 else string[0],\n        s[1:] for s in string[1:] if s[0]!= string[0],\n        string[:1],\n        '',\n    ]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = [string[0]]\n    for s in string[1:]:\n        if s == string[0]:\n            break\n        result.append(s)\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return sorted(set(string.split()))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [str(i) for i in range(len(string)) if string[i] == string[:i]]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    def replace_prefix(string, prefix: str) -> str:\n        \"\"\" Helper function to replace all prefixes found in string with\n        prefix. \"\"\"\n        return ''.join(i for i in string if i.startswith(prefix))\n    return [replace_prefix(string, prefix) for prefix in reversed(prefixes(string))]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(''.join(prefix) for prefix in string.split(''))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for char in string:\n        if char =='':\n            continue\n        elif char.isalpha():\n            result.append(char)\n        elif char.isdigit():\n            if result and result[-1] == '.':\n                result.pop()\n                result.append(char)\n            else:\n                result.append(char)\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split(' ') if prefix.startswith(' ')]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    current_prefix = ''\n    prefix_length = len(string)\n    while current_prefix!= '':\n        if len(current_prefix) > prefix_length:\n            break\n        prefixes.append(current_prefix)\n        current_prefix = string[prefix_length - len(current_prefix):]\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    seen = set()\n    for i in range(len(string) - 1, 0, -1):\n        if string[i] not in seen:\n            prefixes.append(string[i])\n            seen.add(string[i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = [string[0]]\n    for char in string[1:]:\n        result.append(char)\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split(\".\") if prefix.startswith(\".\")]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [\n        string[:i] for i in range(len(string) - len(prefix))\n    ]\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    def _prefix_finder(prefix: str) -> bool:\n        return prefix.startswith(string)\n    return list(_filtered(_prefix_finder, all(len(s) < len(string) for s in all_prefixes(string))), key=len)", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [\n        x for x in string.split(' ')\n        if x.startswith(' ')\n    ]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for prefix in string:\n        if prefix in result:\n            continue\n        result.append(prefix)\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes: List[str] = []\n    for i in range(len(string)):\n        prefixes.append(string[:i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [a[:-1] for a in string.split() if a.startswith('ab')]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes: List[str] = []\n    suffix: str = string\n    while suffix:\n        if suffix[:1].isdigit() and not prefixes and suffix[-1:].isdigit():\n            suffix = suffix[1:]\n        elif suffix[:1].isalpha() and not prefixes:\n            prefixes.append(suffix)\n        elif suffix[:1].isalnum() and not prefixes:\n            prefixes.append(suffix)\n        elif suffix[:1] == '.':\n            suffix = suffix[1:]\n        else:\n            break\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split('_') if prefix]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return ['a', 'b', 'c'] * len(string) + ['']", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix, suffix in [(p.rstrip('_'), '') for p in string.split('_')] if suffix.endswith('.html')]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char == '':\n            break\n        prefixes.append(char.lower())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if len(string) == 0:\n        return []\n\n    prefixes: List[str] = []\n    for pos in range(0, len(string)):\n        if string[pos] =='':\n            continue\n        prefixes.append(string[:pos])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes: List[str] = []\n    string_length: int = len(string)\n    if string_length == 0:\n        return prefixes\n    last_prefix: str = ''\n    first_letter: str = string[0]\n    for character in string[1:]:\n        if character == first_letter:\n            prefixes.append(last_prefix)\n            last_prefix = ''\n        else:\n            last_prefix += character\n    prefixes.append(last_prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    if not string:\n        return prefixes\n    while True:\n        prefix = string[0:1]\n        if prefix == '':\n            return prefixes\n        if prefix in prefixes:\n            prefixes.remove(prefix)\n        string = string[1:]\n        if not string:\n            return prefixes\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    while len(prefixes) < len(string):\n        prefix = string[:prefixes.index(string[len(prefixes):])]\n        if prefix not in prefixes:\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    end = len(string)\n    while end > 0:\n        start = 0\n        while start < end and string[start] in string[start + 1:end]:\n            start += 1\n        if start > 0:\n            prefixes.append(string[start:end])\n        end -= start\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    assert string\n    return list(set(string.split('_')) - set(''.split('_')))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split() if prefix.isalpha()]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [str(i) for i in string] + list(string)[:-1]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    cur = string\n    for i in range(0, len(string)):\n        cur = cur.lstrip('0')\n        prefixes.append(cur)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string) - 1, 0, -1):\n        if string[i - 1] == string[i]:\n            prefixes.append(string[:i - 1])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for letter in string:\n        if letter in result:\n            continue\n        result.append(letter)\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    while string:\n        for i in range(0, len(string) - 1):\n            if string[i:i + 1] == string[i + 1:i + 2] and string[i + 1:i + 2]!= \" \":\n                result.append(string[i: i + 1])\n        string = string[:-1]\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    all_prefixes = []\n    for i in range(len(string) - 1):\n        prefixes = string[:i].split('_')\n        if not any(prefixes):\n            continue\n        all_prefixes.append(prefixes[0])\n    return all_prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split('_') if prefix]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    if len(string) == 0:\n        return prefixes\n\n    for char in string[:-1]:\n        prefixes.append(char)\n\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split() if prefix.startswith('+')]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        if string[:i] in prefixes:\n            prefixes.remove(string[:i])\n        else:\n            prefixes.append(string[:i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix, suffix in string.split(' ', 1) if len(suffix) > len(prefix)]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = list(string.lower().split())\n    for i in range(len(prefixes)):\n        prefixes[i] = prefixes[i][:len(prefixes[i]) - 1]\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    # Calculate prefixes from shortest to longest\n    for index, char in enumerate(string):\n        if char =='':\n            result.append(' ')\n        else:\n            result.append(char)\n    return result", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [\n        min(string.split(' '))[0]\n        for min_string in\n            string.split(' ')\n            if min_string.startswith(' ')]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    count = 0\n    for char in string:\n        if char == \" \":\n            count += 1\n            if count == 1:\n                prefixes.append(char)\n        else:\n            prefixes.append(char)\n        count = 1\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [\n        prefix\n        for prefix in string.split(' ') if not prefix.startswith(string)\n    ]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix_length = 0\n    for i in range(len(string)):\n        if string[:i] in prefixes:\n            prefix_length += 1\n        elif string[:i].isdigit():\n            prefix_length = i + 1\n        else:\n            break\n        prefixes.append(string[:i])\n    prefixes.append(string)\n    prefixes.append('')\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    string = string.lower()\n    prefixes = []\n    for i in range(len(string)):\n        if string[i] =='':\n            if i > 0:\n                prefixes.append(string[:i])\n            else:\n                break\n        else:\n            prefixes.append(string[:i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return set(list(string.split('_'))[:-1])", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    all_prefixes = []\n    # get all sub-strings from smallest to largest length\n    for prefix, index in enumerate(string.split(''), 1):\n        if index == len(string):\n            # if the last character in string is not in prefix, append this to the list\n            if prefix not in all_prefixes:\n                all_prefixes.append(prefix)\n            break\n        if len(prefix) >= len(string):\n            break\n        # else, check if the character in string is the prefix, if so, append this to the list\n        else:\n            if string[index - 1] == prefix[0]:\n                all_prefixes.append(prefix)\n    return all_prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    def str_sub(match: re.Match) -> str:\n        return match.group(0)[1:]\n\n    all_prefixes = list(re.findall(r'(.)(.*)', string, re.UNICODE))\n    return all_prefixes[:-1] + all_prefixes[-1]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(map(str.lower, string.split('_')))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [e + b for e in string.split('') for b in e.split('')]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    i = 0\n    while i < len(string):\n        if string[i] == string[i + 1]:\n            prefixes.append(string[:i])\n        i += 2\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return list(prefixes(string))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split('_') if prefix]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = set()\n    for i in range(len(string) - 1):\n        prefix = string[:i]\n        prefixes.add(prefix)\n\n    return [prefix for prefix in prefixes if prefix not in prefixes]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        if string[i] in string[len(string) - i - 1]:\n            prefixes.append(string[i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    all_prefixes = [prefix[:-1] for prefix in string.split('-')]\n    return sorted(all_prefixes, key=len, reverse=True)", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix[:3] for prefix in string.split(' ') if prefix[:3]!='']", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split(\"_\") if prefix.startswith(\"_\")]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split(' ') if prefix!= string]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return sorted(string.split())[:-1]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes: List[str] = list()\n    while string!= '':\n        prefixes.append(string[:1])\n        string = string[1:]\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = list()\n    for char in string:\n        if char.isalpha():\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return sorted(['{}'.format(prefix) for prefix in string[:]])", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [\n        prefix for prefix in string.split('_')[1:]\n        if prefix\n        if prefix[0].isupper()\n    ]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split('') if prefix!= string[:-1]]"]]