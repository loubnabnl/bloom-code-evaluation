[["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Init\n    nums = list(nums)\n    n = len(nums)\n\n    if not n:\n        return None\n\n    # Create an empty list to store all sub-arrays, and initialize it with empty array\n    # to store the sum\n    sub_arrays = []\n    sub_arrays.append(([], 0))\n    sub_arrays.append(([], 0))\n\n    # Create a stack to store the current sub-array\n    current_sub_arrays = [sub_arrays]\n\n    # Initially, first element of each array in sub_arrays is 0\n    for i in range(n - 1):\n        current_sub_arrays[0][1] = 0\n\n    # Loop until no more arrays left to store\n    while current_sub_arrays:\n\n        # Get the current sub-array\n        current_sub_arrays = current_sub_arrays[0]\n\n        # If the current array is empty, exit\n        if len(current_sub_arrays[1]) == 0:\n            break\n\n        # If the current sub-array has a minimum sum\n        if current_sub_arrays[1][0] > current_sub_arrays[1][1]:\n\n            # Add the current sub-array to the minimum sum\n            sub_arrays[-1][1] = min(current_sub_arrays[1][0], sub_arrays[-1][1] + current_sub", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    ans = 0\n    for i in range(len(nums)):\n        if len(nums) > i:\n            if nums[i]!= 0 and nums[i - 1]!= 0:\n                ans = min(ans, nums[i] + nums[i - 1])\n    return ans", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    m = 0\n    for num in nums:\n        if num:\n            m = min(m, num)\n    return m", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(nums)\n    a = [nums[k] for k in range(len(nums)) if k in range(len(nums) - 1)]\n    b = [nums[k] for k in range(len(nums)) if k!= len(nums) - 1]\n    c = sum(a)\n    d = sum(b)\n    return min(c, d)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums == []:\n        return None\n\n    def sumMatch(num):\n        if num is not None and len(num) > 0:\n            return sum([num[0], num[1]])\n\n    maxSubArraySum = 0\n    numsList = [nums[0] for nums in nums if len(nums) > 1]\n    for num in numsList:\n        if sumMatch(num) > maxSubArraySum:\n            maxSubArraySum = sumMatch(num)\n\n    return maxSubArraySum\n\nminSubArraySum([1, 2, 3, 4, 6, 7])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def get_min_sum(sub_array):\n        if sub_array == []:\n            return 0\n        else:\n            return min(get_min_sum(sub_array[1:]), get_min_sum(sub_array[:-1]))\n\n    return get_min_sum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    s = 0\n    for i in range(len(nums)):\n        if i > 0:\n            if nums[i] > 0:\n                s = min(s, sum(nums[:i] + nums[i+1:]))\n        else:\n            s = min(s, sum(nums[:i]))\n    return s", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return None\n\n    if nums[0] == 0:\n        return nums[0]\n\n    if nums[-1] == 0:\n        return nums[-1]\n\n    sub = nums[:]\n    total = nums[0]\n    i = 0\n    while i < len(sub):\n        if sub[i] == 0:\n            continue\n        if total < sub[i]:\n            total = sub[i]\n        i += 1\n\n    return min(total, nums[-1])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = list(nums)\n    min_sum = max(nums[0], nums[-1])\n    for i in range(1, len(nums)):\n        min_sum = min(nums[i], min_sum)\n        if min_sum == 0:\n            break\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    #Create a function to compute the sum of a sub-array\n    sumsub = lambda arr: sum([arr[i] for i in range(len(arr))])\n    #Find the minimum sum\n    minsum = max([sumsub(nums) for nums in nums])\n    #Use a for loop to find the minimum sum\n    for n in nums:\n        if n > 0:\n            if minsum < n:\n                minsum = n\n    return minsum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    best_sum = nums[0]\n    for sub in nums[1:]:\n        if sub < best_sum:\n            best_sum = sub\n    return best_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    min = None\n    minSums = []\n    for i in range(len(nums)):\n        subSum = nums[i] + min\n        if subSum < min:\n            min = subSum\n            minSums.append(i)\n\n    return minSums[0] + minSums[1] + minSums[2] + minSums[3]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Use a global variable to track how many values have been processed so far,\n    # so we know when the loop is done.\n    global processedValues\n    processedValues = 0\n    # Initialize the output array with the minimum sum we can find for a single\n    # value of nums, to speed up the next few lines of code.\n    minSum = nums[0]\n    nums = nums[1]\n    # If we have nothing left to process, return the value in the output array.\n    if nums == []:\n        return minSum\n    # Loop through every possible combination of numbers in nums, and\n    # see if we can find a sub-array that has a lower sum.\n    for num in nums:\n        # Check to see if we can find a sub-array with this number.\n        if num >= 0:\n            # Find the next smallest number, and see if that number is smaller\n            # than our current minimum.\n            subNum = num % 2\n            if subNum == 0:\n                # The next smallest number is even, so we can replace num\n                # with the sub-array [num, num - subNum].\n                nums = [num - subNum, num]\n            else:\n                # The next smallest number is odd, so we can replace num\n                # with", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subArraySum(nums, start, end):\n        return sum(nums[start:end]) + nums[start]\n\n    if len(nums) == 0:\n        return 0\n\n    subArray = nums[1:]\n    if len(subArray) == 0:\n        return 0\n    subArraySum(subArray, 0, len(subArray) - 1)\n    return subArraySum(nums, 0, len(nums) - 1) - subArraySum(subArray, 0, len(subArray) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums == []:\n        return 0\n\n    a = nums[0]\n    b = nums[1]\n    c = nums[-1]\n    d = nums[2]\n    k = 1\n    while a!= b:\n        k += a\n        a = nums[k]\n        if k <= len(nums) - 1:\n            b = nums[k + 1]\n\n    if a == b:\n        return a\n    return minSubArraySum(nums[0:-k] + [b] + nums[-k:])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        if nums[0] < nums[1]:\n            return minSubArraySum(nums[:-1]) + nums[1:]\n        else:\n            return minSubArraySum(nums[1:]) + nums[:-1]\n    min_sub_array = nums[:-1]\n    max_sub_array = nums[-1]\n    for i in range(len(nums) - 1):\n        if nums[i] < min_sub_array[-1]:\n            min_sub_array = nums[:-1]\n        if nums[i] > max_sub_array[0]:\n            max_sub_array = nums[-1]\n    if min_sub_array[-1] == max_sub_array[0]:\n        return min_sub_array[-1]\n    return minSubArraySum(min_sub_array[:-1]) + min_sub_array[1:] + max_sub_array[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    subArraySum = 0\n    maxIndex = len(nums) - 1\n    for i in range(maxIndex - 1, -1, -1):\n        subArraySum = max(subArraySum, sum(nums[i:maxIndex]))\n    return subArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    a = len(nums)\n    max = nums[0]\n    for i in range(1, a):\n        if nums[i] == 0:\n            continue\n        if max < nums[i]:\n            max = nums[i]\n    return max", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def isSubArray(nums, nums):\n        if len(nums) == len(nums):\n            return True\n        else:\n            return nums[i:j] in nums for i in range(len(nums)) for j in range(len(nums)) if i!= j and nums[i]!= nums[j]\n\n    return min([isSubArray(nums, a) for a in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    ans = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            continue\n        for j in range(i, len(nums)):\n            if nums[i] + nums[j] < ans:\n                ans = nums[i] + nums[j]\n\n    return ans", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    if len(nums) < 2:\n        return min(nums)\n    nums.sort()\n    min_sub = min(nums)\n    for i in range(1, len(nums) - 1):\n        if min_sub < nums[i]:\n            min_sub = nums[i]\n    return min_sub", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    nums = nums.sort()\n    if len(nums) == 1:\n        return nums[0]\n    if nums[1] == 0:\n        return nums[0] + nums[2]\n    if nums[1] == 0:\n        return minSubArraySum(nums[:3]) + nums[3]\n    if nums[2] == 0:\n        return minSubArraySum(nums[:3]) + nums[3]\n    if nums[1] > nums[2]:\n        return minSubArraySum(nums[:2]) + nums[3]\n    else:\n        return minSubArraySum(nums[:2]) + nums[1]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def makeSubArraySum(nums, start, end, sum):\n        if not nums or start >= end:\n            return sum\n        if sum == 0:\n            return 0\n        if start == end:\n            return sum\n        return makeSubArraySum(nums, start + 1, end, sum + nums[start])\n\n    if not nums:\n        return sum\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return minSubArraySum(nums[1:], 0, len(nums) - 1, sum + nums[0]) # Python 3 compatibility\n    if len(nums) == 3:\n        return minSubArraySum(nums[1:], 0, len(nums) - 2, sum + nums[0] + nums[1]) # Python 3 compatibility\n    return makeSubArraySum(nums[1:], 0, len(nums) - 1, sum + nums[0])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # build list of unique elements\n    # we cannot use set as it's expensive to build a set from an array\n    unique_elements = list(set(map(list, nums)))\n\n    # build list of all non-empty subarrays\n    sub_arrays = [[] for _ in range(len(unique_elements))]\n\n    # for each element\n    for unique_element in unique_elements:\n        # we create an empty subarray\n        sub_arrays[unique_element[0]].append(0)\n\n    # for each non-empty subarray\n    for sub_array in sub_arrays:\n        # if the subarray has one element\n        if len(sub_array) == 1:\n            # then we add the sum of this element to the minimum\n            sub_array[0] += sub_array[1]\n        # if the subarray has two elements\n        elif len(sub_array) == 2:\n            # then we add the sum of these two elements to the minimum\n            sub_array[0] += sub_array[1]\n            sub_array[1] += sub_array[2]\n\n    # return minimum sum\n    return min(map(tuple, sub_arrays))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    max = 0\n    result = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            continue\n        result += nums[i]\n        if max < result and result > max:\n            max = result\n    return max", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minsum = nums[0]\n    for i in xrange(1, len(nums)):\n        if nums[i] > minsum:\n            minsum = nums[i]\n    return minsum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    if len(nums) == 0:\n        return 0\n\n    sorted_num = sorted(nums)\n\n    # Get the size of the smallest subarray\n    min_subarray_size = sorted_num[0]\n    i = 0\n    while i < len(nums) and sorted_num[i] == sorted_num[i + min_subarray_size]:\n        i += min_subarray_size\n\n    # Check to see if there is a subarray with the minimum size\n    if i == len(nums):\n        return min_subarray_size\n\n    # Get the minimum value from the subarray\n    min_subarray_min = sorted_num[i]\n    i += 1\n\n    # Check to see if the next smallest subarray has the minimum value\n    while i < len(nums) and sorted_num[i] == sorted_num[i + min_subarray_min]:\n        i += min_subarray_min\n\n    # Remove the minimum value from the remaining elements\n    sorted_num.pop(i)\n    return min_subarray_min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subArraySum(subArray):\n        total = 0\n        for i in range(len(subArray)):\n            if subArray[i]:\n                total += subArray[i]\n        return total\n    minSubArraySum = max(subArraySum(nums), 0)\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(nums)\n    min = nums[1]\n    for i in range(2, len(nums)):\n        if nums[i] < min:\n            min = nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def _sum(nums, start, end):\n        nums.sort()\n        sum = 0\n        while start < end:\n            if start + 1 < end:\n                sum += nums[start + 1] - nums[start]\n                start += 1\n            else:\n                sum += nums[start]\n                start += 1\n        return sum\n\n    def _subArraySum(nums, start, end):\n        \"\"\"\n        Return the sum of the integers in nums from start to end.\n        \"\"\"\n        return sum(nums) - _sum(nums, start, end)\n\n    return min(_subArraySum(nums, 0, len(nums) - 1))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def sum(a):\n        sum = 0\n        for n in a:\n            sum += n\n        return sum\n    sum = sum(nums)\n    for i in range(1, len(nums)):\n        if nums[i] <= 0:\n            break\n        sum += nums[i]\n    if sum >= 0:\n        return sum\n    else:\n        return -sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] >= sum:\n            sum = nums[i]\n\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = sum(nums)\n    subsumes = set()\n    for i in range(len(nums)-1, -1, -1):\n        if nums[i] + nums[i+1] < min:\n            min = nums[i] + nums[i+1]\n            subsumes.add(i)\n\n    return min + sum(subsumes)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    maxSum = float(\"inf\")\n    subArray = []\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            subArray.append(nums[i])\n            maxSum = max(maxSum, sum(subArray))\n\n    if maxSum == float(\"inf\"):\n        return 0\n    else:\n        return min(maxSum, sum(subArray))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = 999999\n    for i in range(len(nums)):\n        if len(nums[i]) > 0:\n            min = min < nums[i] and nums[i] or min\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    smallest_sum = nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n    for i in range(len(nums) - 1):\n        if nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] + nums[i + 4] <= smallest_sum:\n            smallest_sum = nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] + nums[i + 4]\n    return smallest_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(nums)\n    minSum = nums[0] + nums[1] + nums[2]\n    for i in range(3, len(nums)):\n        if nums[i] > 0:\n            minSum = min(minSum, nums[i] + nums[-i - 1])\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return None\n\n    sub_array = [nums[0]]\n    while sub_array:\n        sum = 0\n        for i in xrange(len(sub_array)):\n            sum += sub_array[i] * (i + 1)\n        if sum < min_sub_array_sum(sub_array[1:]):\n            min_sub_array_sum = sum\n            sub_array = sub_array[1:]\n\n    if len(sub_array) > 1:\n        return min_sub_array_sum(sub_array[1:])\n\n    return min_sub_array_sum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = max_sum = nums.max()\n    # Initialize the array to be the min subarray sum\n    sum_array = [0] * (nums.size() - 1)\n    # Iterate over the elements of the array\n    for i in range(nums.size() - 1):\n        # Update the sum\n        sum_array[i] = sum(nums[i + 1:]) - sum(nums[i:]) + min_sum\n        # Find the minimum sum of the remaining elements\n        min_sum = min(sum_array[i:], min_sum)\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = 0\n    for i in range(len(nums)):\n        if len(nums[i]) == 0:\n            continue\n        if nums[i][0] == 0 or nums[i][1] == 0:\n            continue\n        if len(nums[i]) < 2:\n            continue\n        for j in range(0, i+1):\n            if nums[i][0] + nums[i][1] + nums[i][2] + nums[i][3] < min_sum:\n                min_sum = nums[i][0] + nums[i][1] + nums[i][2] + nums[i][3]\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [int(x) for x in nums if x]\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    nums = [int(x) for x in nums if x!= 0]\n    if len(nums) == 1:\n        return nums[0]\n    min_sub = 0\n    min_sub_array = []\n    for i in range(len(nums)):\n        if i > 0 and nums[i] > 0:\n            min_sub += nums[i]\n            min_sub_array.append(nums[i])\n        else:\n            if len(min_sub_array) == 0:\n                break\n            min_sub = min(min_sub, sum(min_sub_array))\n            min_sub_array = []\n    return min_sub\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # if no element in nums, return 0\n    if nums == []:\n        return 0\n    nums = sorted(nums)\n    if nums == []:\n        return min(nums)\n    # check all sub arrays of nums\n    for i in xrange(len(nums) - 1):\n        # if all elements of nums[i] is in nums[i+1:], min(nums[i]) is not included in min(nums[i+1:])\n        if all(nums[i] in nums[i + 1:] for i in xrange(len(nums) - 1)):\n            return min(nums[i + 1:])\n    # if len(nums) > 1:\n    #     check if nums[0] is in nums[1]\n    #     if nums[0] is not in nums[1]:\n    #         return min(nums)\n    # return min(nums[1])\n    # return min([nums[0]])\n    return min(nums[1])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = 0\n    for x in range(len(nums)):\n        if x == 0:\n            continue\n        if min > nums[x]:\n            min = nums[x]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        sum = nums[i] + min_sum\n        if sum < min_sum:\n            min_sum = sum\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums == []:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    # A list of tuples of all subarrays (length, sum) is maintained.\n    subLists = [\n        ([1, 2, 3], 3),\n        ([1, 2, 4], 4),\n        ([1, 2, 5], 5),\n        ([1, 2, 6], 6),\n        ([1, 2, 7], 7),\n        ([2, 3, 4], 4),\n        ([2, 3, 5], 5),\n        ([2, 3, 6], 6),\n        ([2, 3, 7], 7),\n        ([3, 4, 5], 5),\n        ([3, 4, 6], 6),\n        ([3, 4, 7], 7),\n        ([4, 5, 6], 6),\n        ([4, 5, 7], 7),\n        ([5, 6, 7], 7),\n    ]\n    subSum = max(0, nums[0])\n    for subList, sum in subLists:\n        if len(subList) == len(nums):\n            subSum = min(subSum, sum)\n            break\n    return subSum\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # This is a \"bitmask\" of indices, which we use to initialize our array\n    # of boolean results.\n    # Each boolean represents the minimum sum of a non-empty sub-array\n    # of nums\n    # and it will be set to true if such a sub-array exists.\n    # The truth value is initialized as False.\n    # This is done to save space (since there is no need to keep all the\n    # truth values on the stack)\n    results = set()\n    for i in range(len(nums)):\n        results.add(False)\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            results[i] = True\n    # The truth values in the boolean array are reused for all indices\n    # in nums. Thus, the truth values will be repeated, and we only need\n    # to add the minimum.\n    # We use the minimum because the truth values could be true for any\n    # non-empty sub-array, and we want to find the minimum sum of a sub-array.\n    min_sum = 0\n    # Initializes the minimum sum to zero.\n    for i in range(len(nums)):\n        min_sum += nums[i]\n    # Search for the minimum\n    for i in range(len", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = 0\n    for subNums in nums.split(','):\n        sum = sum(map(int, subNums))\n        if sum:\n            result = min(result, sum)\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def sumUp(array):\n        return sum(array)\n    result = 0\n    for sub in nums:\n        if len(sub) > 0:\n            if sumUp(sub) > result:\n                result = sumUp(sub)\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = None\n    smallest_sum = 0\n    for i in range(len(nums)):\n        smallest_sum = smallest_sum + nums[i]\n        if smallest_sum > result:\n            result = smallest_sum\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = 1\n    for num in nums:\n        if len(num) == 0:\n            continue\n        result = min(result, sum(num))\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = None\n    if len(nums) == 0:\n        return result\n    for i in range(0, len(nums) - 1):\n        if result is None:\n            result = sum(nums[i:i + 1])\n            if result == 0:\n                break\n        else:\n            if result < sum(nums[i:i + 1]):\n                result = sum(nums[i:i + 1])\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    if nums is None:\n        return None\n    if not len(nums):\n        return 0\n\n    # Use linked lists to construct the list of sub-arrays\n    # (sub-array length is equal to the number of elements in the original array)\n    sub_array_length = len(nums)\n    sub_arrays = [[] for i in range(sub_array_length)]\n    # The index of the largest sub-array in the sub_array_list\n    max_sub_array_index = 0\n    # The length of the largest sub-array in the sub_array_list\n    max_sub_array_length = 0\n\n    # Process each element in the original array\n    for i in range(len(nums)):\n        # Create a new sub-array and add the element to it\n        sub_array = nums[i]\n        # If the current element is an element of the largest sub-array\n        if sub_array in sub_arrays[max_sub_array_index]:\n            # Make the length of the current sub-array equal to the length of the largest sub-array\n            sub_array = sub_arrays[max_sub_array_index][sub_array]\n        # Append the current element to the end of the sub-array\n        sub_arrays[max_sub_array_index].append(sub_array)\n\n        # Update the maximum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def getSub(nums):\n        if len(nums) <= 1:\n            return nums[0]\n        elif nums[0] == 0:\n            return getSub(nums[1]) + nums[2]\n        else:\n            return getSub(nums[0:2]) + nums[3]\n    return min(map(getSub, nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] == nums[-1]:\n        return minSubArraySum(nums[:-1])\n    return minSubArraySum(nums[:-1] + [nums[-1]])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    return min(sum(nums) for nums in nums.__sub__([]))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums == []:\n        return 0\n    if len(nums) == 1:\n        return min(nums[0])\n    ans = 0\n    for i in range(len(nums) - 1):\n        if not nums[i]:\n            continue\n        if nums[i] >= 0:\n            if not nums[i + 1]:\n                continue\n            ans = min(ans, min(nums[i], nums[i + 1]))\n    return ans", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    minValue = nums[0]\n\n    # process the array from left to right\n    for i in range(1, len(nums)):\n\n        # If a sub-array is empty, no need to continue\n        if nums[i] == 0:\n            continue\n\n        # If the current sum is less than the minimum sum, take the current minimum\n        if minValue <= nums[i]:\n            minValue = nums[i]\n\n        # if the current sum is greater than the minimum sum, keep the current minimum\n        elif minValue > nums[i]:\n            minValue = nums[i]\n\n    return minValue", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subsum(nums, n):\n        \"\"\"\n        Given an array of integers nums, return the minimum sum of the n first elements\n        \"\"\"\n        return min(sum(nums[:n]) for nums in nums)\n    if len(nums) == 0:\n        return 0\n    n = len(nums)\n    if n == 0:\n        return 0\n    return subsum(nums, n)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = min([num for subArray in nums for num in subArray])\n    for i in range(0, len(nums)):\n        if nums[i] > 0:\n            minSum = min(minSum, nums[i])\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def _subArraySum(a):\n        def innerSum(n):\n            if n == 0:\n                return 0\n            return n + _subArraySum(a[1:] - n)\n\n        return innerSum(min(len(a), 1))\n\n    return _subArraySum(min(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def isNonEmptySubArray(nums):\n        return [num for num in nums if num]\n\n    if not nums:\n        return 0\n\n    minSum = nums[0]\n\n    for i in range(1, len(nums)):\n        if not isNonEmptySubArray(nums[i:]):\n            return minSum\n        else:\n            minSum = min(minSum, minSubArraySum(nums[i:]))\n\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    result = min([sum(nums[i:i + 1]) for i in range(n - 1)])\n    for i in range(n - 2):\n        if sum(nums[i:i + 1]) <= result:\n            result = sum(nums[i:i + 1])\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minArray(nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n\n        a = nums[0]\n        if a == 0:\n            return 0\n\n        for i in range(1, len(nums)):\n            b = nums[i]\n            if b == 0:\n                return 0\n\n            if a + b < 0:\n                return 0\n            a = a + b\n\n        return a\n\n    def minSubArraySumOf(a, nums):\n        \"\"\"\n        :type a: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n\n        if len(nums) <= 1:\n            return minArray(nums)\n        return minArray(nums) + minArray(nums[1:])\n\n    return minSubArraySumOf(minArray(nums), nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return sum(nums) if nums else None", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    if nums == []:\n        return 0\n\n    result = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0 and i + 1 < len(nums):\n            if nums[i + 1]!= 0:\n                result = min(result, nums[i] + nums[i + 1])\n\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) < 1:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if smallest == nums[i]:\n            continue\n        if smallest < nums[i]:\n            smallest = nums[i]\n        if smallest < smallest + nums[i]:\n            smallest = smallest + nums[i]\n    return smallest", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(nums)\n    maxSize = nums[1] - nums[0]\n    subArray = []\n    for i in range(maxSize):\n        while i < maxSize and nums[i] == 0:\n            subArray.append(nums[i + 1])\n            i += 1\n        subArray.append(nums[i])\n    return min(subArray)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def sub(arr, start, end):\n        \"\"\"\n        Return the minimum of the elements in a range of nums.\n        \"\"\"\n        return min(arr[start:end])\n\n    result = nums[0]\n    for i in range(1, len(nums)):\n        result = min(result, sub(nums[i - 1], 0, i))\n\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Iterate over the array and return the min sum of any non-empty sub-array\n    result = 0\n    for num in nums:\n        if num > 0:\n            result += num\n        if result < 0:\n            result = 0\n        result = result - num\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) < 2:\n        return min(nums)\n    if nums[0] == 0 or nums[1] == 0:\n        return 0\n    other_min = min(nums[0:2])\n    if other_min > 0 and nums[1:] < other_min:\n        return other_min + nums[2:]\n    return nums[0] + nums[1:]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = list(nums)\n    nums.sort()\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if min_sum > nums[i]:\n            min_sum = nums[i]\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(nums)\n    return min([sum(sub) for sub in [nums[i:] for i in range(len(nums) - 1)]])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = 0\n    for i in range(len(nums)):\n        if len(nums[i]) == 1:\n            result += nums[i]\n        elif result > nums[i]:\n            result = nums[i]\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def process_nums(nums):\n        for i in range(len(nums)):\n            if len(nums[i]) > 0:\n                result = sum(nums[i])\n                if result < 0:\n                    return result\n        return -1\n\n    result = process_nums(nums)\n    if result < 0:\n        return result\n\n    for i in range(1, len(nums)):\n        if len(nums[i]) == 0 or (len(nums[0]) > 0 and nums[0] >= nums[i - 1]):\n            return min(result, process_nums(nums[i]))\n\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(nums)\n    minsum = nums[0]\n    for num in nums[1:]:\n        if num < minsum:\n            minsum = num\n            firstIdx = 0\n    for num in nums[firstIdx+1:]:\n        if num < minsum or num == 0:\n            minsum = num\n            firstIdx = firstIdx + 1\n    return minsum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return sum(sum(nums) for nums in nums if len(nums)) - sum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            continue\n        if i > 0:\n            if nums[i] < min:\n                min = nums[i]\n        if i < len(nums) - 1:\n            if nums[i] < min:\n                min = nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sub_sum = 0\n    for num in nums:\n        if num > 0:\n            min_sub_sum = min(num, min_sub_sum)\n        elif num == 0:\n            return min_sub_sum\n    return min_sub_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return None\n\n    a = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i] > 0:\n            b = [nums[i]] + a\n            sum = sum(b)\n            a = b\n        else:\n            break\n\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    ret = max(nums)\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > ret:\n                ret = nums[i] + nums[j]\n    return ret", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    import copy\n    nums = copy.copy(nums)\n    # get all subarray from nums\n    allSubArrays = []\n    for num in nums:\n        allSubArrays.append(num[:])\n    # find all subarrays whose sum is minimal\n    minSubArrays = []\n    minSum = nums[0]\n    for subArr in allSubArrays:\n        # if the sum of subarray is equal to the current minSum then add this subarray to the minSubArrays\n        if subArr[0] == minSum:\n            minSubArrays.append(subArr)\n    # get the minimum subarray from minSubArrays\n    minSubArray = minSubArrays[0]\n    # return the sum of this minSubArray\n    return minSubArray[1]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = nums[0]\n\n    for i in range(1, len(nums)):\n        if min > nums[i]:\n            min = nums[i]\n\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subsumes(a, b, s):\n        \"\"\"\n        Given two integers a and b, and a sum s, determine if s is a sum\n        for any subset of a and b.\n        \"\"\"\n        for i in range(len(a)):\n            if a[i] + b[i] == s and a[i+1:] + b[i+1:] == s:\n                return True\n        return False\n\n    res = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == res:\n                res = nums[i] + nums[j]\n                break\n    return res", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    ans = 0\n    for i in range(len(nums)):\n        if i == 0 or nums[i] == 0:\n            continue\n        if i > 0 and nums[i] > nums[i-1]:\n            continue\n        if nums[i] < 0:\n            continue\n        ans = min(ans, nums[i] - nums[i-1])\n        i = i - 1\n    return ans", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minimum = min(sum(nums) for nums in nums if nums)\n    return minimum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSums = {}\n    for i in range(len(nums)):\n        if len(nums[i]) == 1:\n            minSums[nums[i]] = min(minSums[nums[i]], minSums.get(nums[i], 0) + nums[i])\n        else:\n            minSums[nums[i]] = min(minSums.get(nums[i], 0) + nums[i], min([minSums[k] for k in nums[i] if k]))\n    return minSums.get(len(nums) - 1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums == []:\n        return 0\n    if len(nums) == 0:\n        return 0\n    sum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            sum -= nums[i]\n        else:\n            sum += nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def recurse(a, b):\n        if b == 0:\n            return a\n        else:\n            if len(a) <= len(b):\n                return min(recurse(a, b - 1), recurse(a, b))\n            else:\n                return min(recurse(a[:len(a) - len(b)], b), recurse(a[len(a) - len(b):], b - 1))\n    return recurse([], len(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subArraySum(arr, start, end):\n        return sum(arr[start:end]) if start <= end else None\n\n    maxEnd = len(nums) - 1\n    minStart = 0\n\n    while minStart < maxEnd:\n        mid = (minStart + maxEnd) // 2\n        if subArraySum(nums, minStart, mid) < subArraySum(nums, mid, maxEnd):\n            minStart = mid + 1\n        else:\n            maxEnd = mid - 1\n\n    if minStart == 0:\n        return 0\n    else:\n        return nums[minStart]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    result = 0\n    max_size = len(nums) - 1\n    while max_size > 0:\n        mid_size = len(nums) // 2\n        if mid_size == 0 or nums[mid_size - 1] == nums[mid_size]:\n            max_size = mid_size - 1\n        else:\n            result = min(result, nums[mid_size])\n            max_size = mid_size - 1\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    i, j = 0, 0\n    while j < len(nums):\n        while i < len(nums) and nums[i] <= j:\n            nums[i] += nums[i+1]\n            i += 1\n        while i < len(nums) and nums[i] >= j:\n            nums[i] -= nums[i+1]\n            i += 1\n        j += 1\n    if i < len(nums):\n        nums[i] += nums[i]\n        i += 1\n    return i", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return sum([nums[0] for nums in nums if len(nums) > 0])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    total = nums.sum()\n    # Find minimum sum of non-empty subarray\n    for i in range(len(nums) - 1):\n        if nums[i] + nums[i + 1] < total:\n            return nums[i] + nums[i + 1]\n    return total - nums[len(nums) - 1]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    total = 0\n    for i in range(0, len(nums)):\n        if nums[i]!= 0:\n            total += nums[i]\n            subArray = nums[i:]\n            if len(subArray) > 0:\n                if sum(subArray) < total:\n                    total = sum(subArray)\n\n    return total", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) < 2:\n        return 0\n\n    min_value = nums[0]\n    for _ in range(1, len(nums)):\n        if nums[_] > min_value:\n            min_value = nums[_]\n    return min_value", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 1\n    for i in range(len(nums)):\n        subSum = 0\n        for j in range(0, i):\n            if nums[j]!= 0:\n                subSum += nums[j]\n        if subSum > minSum:\n            minSum = subSum\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = None\n    for i in range(len(nums)):\n        sum = min(sum, sum + nums[i])\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    import timeit\n    print('\\n minSubArraySum Timeit\\n')\n    times = [timeit.Timer('minSubArraySum(%s)' % n, 'from __main__ import minSubArraySum', number = 1) for n in range(5,10000)]\n    print(timeit.timeit('minSubArraySum(%s)' % n, 'from __main__ import minSubArraySum', number = 1) for n in times)\n    minSubArraySum(nums)\n    print('\\n minSubArraySum Solution\\n')\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            continue\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == minSubArraySum(nums[:i] + nums[j:]):\n                print('%d + %d ==' % (nums[i], nums[j]), minSubArraySum(nums[:i] + nums[j:]))\n        print('%d =='% minSubArraySum(nums[:i]))\n    print('\\n minSubArraySum End\\n')", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        sum = nums[0]\n        for i in range(1, len(nums)):\n            if sum > nums[i]:\n                sum = nums[i]\n        return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = None\n    for i in range(0, len(nums) - 1):\n        if len(nums[i]) > 0:\n            if min is None or nums[i][0] < min[0]:\n                min = nums[i]\n    return min[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(nums)\n    min_sum = max(nums[0] for _ in range(len(nums)))\n    for _ in range(len(nums)):\n        if len(nums) > 1:\n            min_sum = min(min_sum, sum(nums[1:]) - nums[0])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    res = None\n    for i in xrange(len(nums) - 1):\n        if res is None:\n            res = sum(nums[:i])\n        else:\n            res = min(res, sum(nums[:i]))\n\n    return res", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n\n    subArraySum = 0\n    for i in xrange(len(nums)):\n        subArraySum += nums[i]\n        if subArraySum < 0:\n            return subArraySum\n\n    if len(nums) > 1:\n        return min([subArraySum for subArray in nums for subArraySum in minSubArraySum(subArray)])\n\n    return subArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min(reduce(add, list(filter(bool, enumerate(nums, 0)))))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return None\n    if nums[0] == nums[-1]:\n        return min(nums)\n    res = 0\n    for i in range(len(nums)):\n        res = min(res, nums[i] + nums[i - 1])\n    return res", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(nums)\n    min_sums = [nums[0]]\n    for i in range(1, len(nums)):\n        if sum(nums[:i]) < min_sums:\n            min_sums = sum(nums[:i])\n        else:\n            break\n    return min_sums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = nums[0]\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            continue\n        if min_sum > nums[i]:\n            min_sum = nums[i]\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    returnSum = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            # Do not return the sum of the last element of the array\n            if i == len(nums) - 1:\n                return sum\n            # Return the sum of the i + 1 element, if the i + 1 element is 0, we will not return it\n            if nums[i + 1] == 0:\n                returnSum += nums[i]\n            else:\n                sum += nums[i]\n    return returnSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n\n    if nums[0] > nums[-1]:\n        if nums[1] > nums[-2]:\n            if nums[2] > nums[-3]:\n                return minSubArraySum(nums[:-1]) + nums[-1]\n    else:\n        if nums[0] > nums[-1]:\n            return minSubArraySum(nums[:-1]) + nums[-2]\n        else:\n            return minSubArraySum(nums[1:]) + nums[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = None\n    for i in range(len(nums)):\n        if min is None:\n            min = nums[i]\n        elif min > nums[i]:\n            min = nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    res = 0\n    for i in range(0, n):\n        res = max(res, nums[i] + min(nums[j-i : j], 0))\n    return res", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    sum = nums[0]\n    for num in nums[1:]:\n        sum += num\n        if sum == 0:\n            return sum\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    subArraySum = 0\n    subArray = []\n    for num in nums:\n        subArray.append(num)\n        subArraySum += num\n    if len(subArray) == 0:\n        return subArraySum\n    if len(subArray) == 1:\n        return subArraySum\n    while subArraySum > 0:\n        if subArraySum < len(subArray) - 1:\n            subArraySum -= subArray[-1][:][:-1].sum()\n        else:\n            return subArraySum\n        subArray = []\n        subArray.append(subArray[-1].pop())\n        subArraySum += subArray[-1].pop()\n\nminSubArraySum([1, 2, 3, 4, 5, 6, 7, 4, 1, 2])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    print(min(sum(range(len(nums))), key = lambda x: sum(nums[i:i+2]))) # 1\n    print(min([sum(range(len(nums))), sum(range(i+1, len(nums)))], key = lambda x: sum(nums[i:i+2]))) # -6\n    print(min([sum(range(len(nums))), sum(range(i, len(nums), 2))], key = lambda x: sum(nums[i:i+2]))) # 4\n    print(min([sum(range(len(nums))), sum(range(i+1, len(nums), 3))], key = lambda x: sum(nums[i:i+2]))) # 5\n    print(min([sum(range(len(nums))), sum(range(i, len(nums), 3))], key = lambda x: sum(nums[i:i+2]), min_value = 0)) # 0\n    print(min([sum(range(len(nums))), sum(range(i+1, len(nums), 4))], key = lambda x: sum(nums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subArraySum(i, j, nums):\n        sum = 0\n        for i in range(i, j):\n            sum += nums[i]\n            if sum == 0:\n                break\n        return sum\n\n    return min([subArraySum(i, j, nums) for i in range(0, len(nums)) for j in range(i, len(nums))])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    subArraySum = 0\n\n    # Search for first non-null index\n    while subArraySum == 0:\n        subArraySum = nums[0] + subArraySum\n\n        if n == 1:\n            return subArraySum\n\n    for i in range(n - 1):\n        if nums[i] == 0:\n            continue\n\n        if subArraySum + nums[i] > subArraySum:\n            subArraySum = nums[i] + subArraySum\n\n    return subArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    subArray = []\n    minSum = None\n    for i in range(0, len(nums)):\n        if len(subArray) == 0:\n            if i == len(nums) - 1:\n                return minSum\n            else:\n                subArray.append(nums[i])\n        else:\n            sum = sum(subArray)\n            if sum < minSum:\n                subArray = []\n                minSum = sum\n    if len(subArray) == 0:\n        return minSum\n    else:\n        subArray.append(nums[len(nums) - 1])\n        return minSum + sum(subArray)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSub = None\n    for i in range(len(nums)):\n        if not nums[i]:\n            continue\n        if minSub is None:\n            minSub = nums[i]\n        else:\n            if minSub > nums[i]:\n                minSub = nums[i]\n    if minSub is None:\n        return 0\n    return minSub\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # initialize a vector that will hold the possible subarray sum\n    # TODO: need a better way to store all the possible sums; not sure how to do this efficiently\n    subarraySum = []\n\n    for num in nums:\n        subarraySum.append(num[0])\n        # subtract the subarray's sum from the global sum\n        # and see if it has changed\n        if subarraySum[-1]!= sum(num[1:]) - num[0]:\n            subarraySum[-1] = sum(num[1:]) - num[0]\n\n    # find the minimum sum of any non-empty subarray\n    # TODO: this is inefficient, as the inner loop will be executed many times\n    return min(subarraySum)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    total = 0\n    for i in range(len(nums)):\n        sub = [nums[i] for j in range(i+1, len(nums)) if nums[i+1]!= nums[j] for j in range(0, i-1)]\n        if len(sub) > 0:\n            subsum = sum(sub)\n            if subsum < total:\n                total = subsum\n    return total", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        subArray = [num for num in nums if num]\n        if len(subArray) == 0:\n            return 0\n        else:\n            return min(map(sum, subArray))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def sumSquares(s):\n        return sum(s ** i for i in xrange(len(s)))\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    s = sumSquares(nums[0])\n    for i in xrange(1, len(nums)):\n        s = min(s, sumSquares(nums[i]))\n    return s", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    #TODO: why is this so inefficient? Use some type of list comprehension\n    # instead or use some type of dynamic programming\n    result = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            result = min(result, sum(nums[i:i]))\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = float('inf')\n    for sub in nums:\n        min = min < sub and min or sub\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = 0\n    for i in xrange(len(nums)):\n        if i > 0 and nums[i] < nums[i-1]:\n            continue\n        result = min(result, sum(nums[i:]+[i:]))\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def find_sub(arr, max, sum):\n        \"\"\"\n        Return the min element from arr if it is non-empty and the sum of that\n        element is greater than or equal to sum, or None if it is empty.\n        \"\"\"\n        for i in range(len(arr)):\n            if arr[i] >= max:\n                return arr[i], sum - arr[i]\n\n        return None, None\n\n    def all_min_sub_sums(arr):\n        \"\"\"\n        Return a list of tuples of all the min elements and their sums from the given\n        array.\n        \"\"\"\n        res = []\n        for max, sum in find_sub(arr, max(arr), sum(arr)):\n            res.append(max, sum)\n        return res\n\n    return sorted(all_min_sub_sums(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = None\n    for i in range(len(nums)):\n        if min is None:\n            min = sum(nums[i:i + min_len])\n        elif min > sum(nums[i:i + min_len]):\n            min = sum(nums[i:i + min_len])\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def fix(sum):\n        if sum <= 0:\n            return 0\n        return sum\n\n    if not nums:\n        return fix(0)\n\n    min_s = fix(0)\n\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] <= 0:\n                continue\n            if sum(nums[i:j]) < min_s:\n                min_s = sum(nums[i:j])\n\n    return min_s", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subArraySum(nums):\n        \"\"\"\n        Given an array nums, return its sum\n        \"\"\"\n        result = 0\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                result += nums[i]\n                subArraySum(nums[:i] + nums[[i+1:] + []])\n        return result\n\n    def getSubArraySum(nums):\n        \"\"\"\n        Return the minimum sum of any non-empty sub-array of nums\n        \"\"\"\n        sum = 0\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                sum = min(sum, subArraySum(nums[:i] + nums[[i+1:] + []]))\n        return sum\n\n    return min(getSubArraySum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sub_ar = []\n    for i in range(len(nums)):\n        min_sub_ar.append(0)\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] < nums[j]:\n                min_sub_ar[i] = nums[i] + nums[j]\n            else:\n                break\n        if min_sub_ar[i] < min_sub_ar[i - 1]:\n            min_sub_ar[i] = min_sub_ar[i - 1]\n    return min_sub_ar[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        smallest = 0\n        maxSize = len(nums) - 1\n        for i in range(maxSize):\n            if nums[i] == 0:\n                continue\n            otherSums = []\n            for j in range(i, maxSize):\n                otherSums.append(nums[j] - nums[i])\n            otherSums = sum(otherSums)\n            if otherSums < smallest:\n                smallest = otherSums\n        return smallest", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    array = list(nums)\n    # if not any element in array then return 0\n    if not array:\n        return 0\n\n    minSum = array[0] * array[0]\n    for index in range(1, len(array)):\n        currentSum = array[index] * index + array[index] * (index - 1)\n        if currentSum < minSum:\n            minSum = currentSum\n\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_val = min([sum(nums[i:i + k]) for i in range(0, len(nums), k)])\n    if len(nums) > 1:\n        return min_val\n    return min_val", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSub = 0\n    for i in range(0, len(nums)):\n        if not nums[i]:\n            continue\n        minSub = min(minSub, nums[i])\n        if i == 0:\n            break\n    return minSub", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def sumFinder(n):\n        \"\"\"\n        Sum function. Calculate the sum of n using the sumFinder function.\n        \"\"\"\n        sum = 0\n        for i in range(1, n+1):\n            sum += sumFinder(i)\n        return sum\n\n    n = len(nums)\n    sum = sumFinder(n)\n    return min(nums) - sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def sumOfSubArray(subArray):\n        \"\"\"\n        Sums the values in the given sub-array.\n        \"\"\"\n        sumOfSubArray = 0\n        for i in range(len(subArray)):\n            sumOfSubArray += subArray[i]\n        return sumOfSubArray\n\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        array = [nums]\n        while array[-1][0] == len(nums) - 1:\n            array.pop()\n            sumOfSubArray = sumOfSubArray + sumOfSubArray[array[-1][1]]\n            array.pop()\n            return min(array)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = 0\n    subArray = []\n    while nums:\n        subArray.append(nums.pop())\n        result += sum(subArray)\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    subArraySum = 0\n    # Loop through the array, adding the sums of the subarrays until all the subarrays\n    # sum up to the total\n    for i in range(0, len(nums) - 1):\n        subArraySum += nums[i] + nums[i + 1]\n    # Return the minimum sum of the subarrays\n    return min(subArraySum, key=lambda x: x)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    res = sum([nums[0]] * i for i in range(1, len(nums)))\n    for i in range(len(nums) - 1):\n        if nums[i] + nums[i + 1] < res:\n            res = nums[i] + nums[i + 1]\n    return res", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def getSubArraySum(subArray):\n        return min(sum(subArray)) if subArray else 0\n\n    if not nums:\n        return None\n\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        minSum = getSubArraySum(nums)\n        for subArray in nums[i::2]:\n            subArraySum = getSubArraySum(subArray)\n            if subArraySum < minSum:\n                minSum = subArraySum\n\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # nums = [2, 3, 4, 1, 2, 4]\n    #     [1, 3, 7]\n    #     [5, 3, 7]\n    #     [6, 3, 7]\n    #     [2, 3, 7]\n    #     [2, 4, 7]\n    #     [2, 4, 7]\n    #     [2, 4, 7]\n    #     [2, 4, 7]\n    # minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([2, 3, 4, 1, 2, 4])\n    # maxSubArraySum([2, 3, 4, 1, 2, 4]) == 5\n\n    sum = 0\n    if len(nums) < 2:\n        return sum\n\n    for i in range(1, len(nums) - 1):\n        sum += nums[i]\n        sum -= nums[i + 1]\n        if sum == 0:\n            break\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sub_array_sum = 0\n    for sub_array in nums:\n        if sub_array:\n            min_sub_array_sum = min(min_sub_array_sum, sum(sub_array))\n    return min_sub_array_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    nums = nums + []\n    subArray = []\n    minSubArraySum = nums[-1:]\n    for i in range(len(nums) - 1):\n        subArray.append(nums[i])\n        subArray.append(nums[i + 1:])\n        subArray = subArray[:2] + [nums[i] + nums[i + 1]] + subArray[2:]\n        if len(subArray) == 1:\n            continue\n        subArray = subArray[:2] + [nums[i] + nums[i + 1]] + subArray[2:]\n        if subArray[0] > 0:\n            subArray = subArray[:2] + [subArray[0] - 1] + subArray[2:]\n        if len(subArray) == 1:\n            continue\n        subArray = subArray[:2] + [subArray[0] - 1] + subArray[2:]\n        if subArray[1] > 0:\n            subArray = subArray[:2] + [subArray[1] - 1] + subArray[2:]\n        if len(subArray) == 1:\n            continue\n        subArray = subArray[:2] + [subArray[1] - 1] + subArray[2:]\n        if subArray[0] > 0:\n            subArray = subArray[:2] + [", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    min = nums[0]\n    min += nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] == min:\n            min += nums[i]\n        else:\n            min = min + nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = nums + [1]\n    maxNum = nums[-1]\n    sum = 0\n    for i in range(len(nums) - 1, -1, -1):\n        sum += nums[i]\n        if nums[i] > maxNum:\n            maxNum = nums[i]\n        nums[i + 1] = sum\n    sum = maxNum - nums[-1]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if nums[0] == nums[-1]:\n        return sum(nums) / 2\n    subArray = nums[1:]\n    nums = nums[:-1]\n    if len(subArray) == 0:\n        return minSubArraySum(nums)\n    min = max(sum(subArray) + nums[0], minSubArraySum(nums))\n    return min + sum(subArray) / 2", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # Create a list of all possible sums\n    sums = set()\n    for num in nums:\n        sums.add(num)\n\n    # Find the minimum sum of any non-empty sub-array\n    min = sums.pop()\n    for num in sums:\n        if sum(num) > min:\n            min = sum(num)\n\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    total = 0\n    for i in range(len(nums)):\n        if len(nums[i]) > 0:\n            total += nums[i]\n            for j in range(i+1, len(nums)):\n                if len(nums[i]) > len(nums[j]):\n                    total += nums[i] - nums[j]\n            total += nums[i]\n    return total", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_len = len(nums) - 1\n    sum = nums[0]\n    for i in xrange(max_len):\n        subsum = sum + nums[i]\n        if subsum < sum:\n            sum = subsum\n\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def sumSum(subArray, count):\n        if count == 0:\n            return 0\n        total = 0\n        for i in range(len(subArray)):\n            total += subArray[i]\n            count -= 1\n        return total\n    result = []\n    for subArray in nums:\n        subArrayLength = len(subArray)\n        if subArrayLength == 0:\n            continue\n        if result.count(subArrayLength) > 0:\n            result.append(sumSum(subArray, subArrayLength))\n        else:\n            result.append(subArrayLength)\n    return result[-1]\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    sum = 0\n    for i in range(1, n):\n        if nums[i]!= 0:\n            for j in range(i+1, n):\n                if nums[j] < 0 or nums[j] == nums[i]:\n                    continue\n                sum = min(sum, nums[i] + nums[j])\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    mins = []\n    for i in range(len(nums)):\n        sub = nums[i:i+min(i, len(nums)-1)]\n        if sub:\n            mins.append(sum(sub))\n    return min(mins)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def f(nums):\n        result = 0\n        for i in range(len(nums)):\n            result = min(result, sum(nums[i:]))\n        return result\n    return f(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # Initialize a list of all sub-arrays\n    # of nums\n    sumList = []\n\n    # Initialize a list of all sub-arrays of size 0\n    # that aren't already in sumList\n    sumListEmpty = []\n\n    # Inititalize a list of all sub-arrays of size 1\n    # that aren't already in sumList\n    sumListOne = []\n\n    # Initialize a list of all sub-arrays of size 2\n    # that aren't already in sumList\n    sumListTwo = []\n\n    # Initialize a list of all sub-arrays of size 3\n    # that aren't already in sumList\n    sumListThree = []\n\n    # Initialize a list of all sub-arrays of size 4\n    # that aren't already in sumList\n    sumListFour = []\n\n    # Initialize a list of all sub-arrays of size 5\n    # that aren't already in sumList\n    sumListFive = []\n\n    # Initialize a list of all sub-arrays of size 6\n    # that aren't already in sumList\n    sumListSix = []\n\n    # Initialize a list of all sub-arrays of size 7\n    # that aren't already in sumList\n    sumListSeven = []\n\n    # For each subArray in sumList\n    for subArray in sumList:", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = min(sum(nums) for nums in enumerate(nums))\n    for i in range(len(nums)):\n        if sum(nums[i] for nums in enumerate(nums[i:])) < minSum:\n            minSum = sum(nums[i] for nums in enumerate(nums[i:]))\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sub = nums[0]\n    for i in range(1, len(nums)):\n        if min_sub > nums[i]:\n            min_sub = nums[i]\n    return min_sub", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # we will generate a permutation of the integers in nums\n    # and find the sum of the resulting permutations\n    # the sum of the original permutation is the minimum sum\n    # of any sub-array\n    # for example, for nums = [2, 3, 4, 1, 2, 4], we would generate the following permutation of nums\n    #     [2, 3, 4, 1, 2, 4]\n    #     [1, 2, 4, 3, 2, 4]\n    #     [4, 3, 2, 1, 2, 4]\n    #     [3, 2, 4, 1, 2, 4]\n    #     [2, 4, 1, 3, 2, 4]\n    #     [4, 1, 2, 3, 2, 4]\n    #     [1, 4, 3, 2, 2, 4]\n    #     [2, 4, 1, 4, 3, 2]\n    #     [1, 4, 2, 3, 2, 4]\n    #     [4, 3, 2, 4, 1, 2]\n    #     [3, 2, 4, 1, 4, 2]\n    #     [2, 4, 1, 3, 4, 2]\n    #     [4, 3, 2, 1, 4, 2]\n    #", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = None\n    for i in range(len(nums)):\n        if result == None:\n            result = sum(nums[i:i+2])\n        else:\n            result = min(result, sum(nums[i:i+2]))\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) < 2:\n        return 0\n    maxSum = nums[0] * nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] == 0:\n            continue\n        sum = nums[i] * nums[0]\n        if sum >= maxSum:\n            maxSum = sum\n    return maxSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = None\n    for i in range(0, len(nums)):\n        for j in range(i, len(nums)):\n            if min is None or nums[i] + nums[j] < min:\n                min = nums[i] + nums[j]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min(sum(nums) for nums in sorted(list(enumerate(nums))))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = 0\n    for i in range(len(nums) - 1):\n        if sum(nums[i:i + 1]) < min:\n            min = sum(nums[i:i + 1])\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = -sys.maxint\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            continue\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == 0:\n                continue\n            if result > nums[i] + nums[j]:\n                result = nums[i] + nums[j]\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Initialize the result as the maximum sum.\n    result = 0\n    # Iterate over all the non-empty subarrays.\n    for i in range(len(nums)):\n        # If the subarray has less than the min length, just return.\n        if len(nums) - i < min(len(nums) - i, len(nums)):\n            # If the sub-array is the whole array, return it.\n            if i == len(nums) - 1:\n                result = nums[i]\n        else:\n            # If the sub-array has a length greater than 1, continue.\n            # We only want to consider the sub-arrays whose length is a divisor of the\n            # min length.\n            while len(nums) - i % len(nums) > 0:\n                # Calculate the current sub-array sum, and the min subarray sum.\n                currentSum = sum(nums[i:(i+len(nums) - i % len(nums))])\n                minSubArraySum = minSubArraySum(nums[i:(i+len(nums) - i % len(nums))])\n                # If the current sub-array sum is less than the min subarray sum, return the current", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    global minSum\n\n    if not nums:\n        return 0\n\n    # Convert the given nums to an array of length len(nums)\n    length = len(nums)\n\n    # Initialize the subarray sum to the largest possible sum of the given nums\n    minSum = length * [None]\n\n    # Initialize the minSum to be the largest possible sum of the given nums\n    for i in range(length):\n        minSum[i] = length\n\n    # Find the smallest sum of any non-empty sub-array of nums\n    for i in range(length):\n        # If the current subarray sum is less than the minSum, update minSum to be the smallest sum\n        if minSum[i] < minSum:\n            minSum = minSum[i]\n            minIndex = i\n\n    # Return the minIndex as the smallest element in the given nums\n    return minIndex\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    maxSubArray = 0\n    for n in nums:\n        maxSubArray = max(maxSubArray, n + min(nums[i:i + 2] for i in range(0, len(nums), 2)))\n    return maxSubArray", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def minSubArraySumHelper(nums):\n        res = 0\n        while len(nums) > 0:\n            nums = nums[0:-1]\n            res = min(res, sum(nums))\n        return res\n\n    return minSubArraySumHelper(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # this is a naive implementation, it will not work for negative numbers\n    # but it is easier to understand\n    def iter_sub_arrays(nums):\n        for i in xrange(len(nums)):\n            if len(nums[i]) > 0:\n                yield nums[i]\n\n    # find the minimum sum of any sub-array of nums\n    min_sum = 0\n    for sub_array in iter_sub_arrays(nums):\n        sub_sum = sum(sub_array)\n        if sub_sum < min_sum:\n            min_sum = sub_sum\n\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    subArraySum = nums[0]\n    subArrayCount = 1\n    for i in range(1, len(nums)):\n        if nums[i] == 0:\n            continue\n        if subArrayCount == subArraySum:\n            subArraySum = subArraySum + nums[i]\n            subArrayCount = 1\n        else:\n            subArrayCount += 1\n    return subArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    i = 0\n    j = 0\n    k = 0\n    sum = nums[0]\n    while i < len(nums):\n        if nums[i] + sum > nums[j]:\n            sum = nums[i] + sum\n            j = i + 1\n        else:\n            k = j + 1\n        i += 1\n    return sum + nums[j]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    m = min(nums)\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            if i + m > len(nums):\n                return minSubArraySum(nums[:i + m] + nums[m + 1:])\n            else:\n                return minSubArraySum(nums[:i + m] + nums[m + 1:]) + nums[i]\n    return m\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    ret = 0\n    for i in range(len(nums)):\n        if i == len(nums) - 1:\n            break\n        ret = min(ret, sum(nums[i] for subnums in nums[i+1:] if subnums))\n    return ret", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    s = nums[0]\n    for i in range(1, len(nums)):\n        if s < nums[i]:\n            s = nums[i]\n    return s", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = 0\n    for i in range(len(nums)):\n        if len(nums) > i:\n            if nums[i] > 0:\n                result = min(result, nums[i])\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # helper function to recursively traverse\n    def subArraySum(nums, sum):\n        # check if array is empty\n        if nums == []:\n            return sum\n        else:\n            # split array into sub arrays\n            subNums = nums[1:]\n            subSum = subArraySum(subNums, sum)\n            # subSum is the minimum sum of any sub-array\n            if subSum == 0:\n                return 0\n            # return the minimum sum\n            return min(subSum, sum)\n\n    # recursively traverse the array\n    return subArraySum(nums, 0)\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n\n    # TODO: Use dynamic programming\n    # See https://leetcode.com/problems/minimum-sub-array-sum/\n    # Define two vars for one possible min sum\n    def minSum(i, j, arr):\n        \"\"\"\n        Function to find min sum for an array of integers\n        :param int i: starting index\n        :param int j: ending index\n        :param array arr: the whole array\n        \"\"\"\n        # minSum(i,j,[0]) -> 0\n        if arr[i][j] == 0:\n            return 0\n\n        # minSum(i,j,[1..arr[i][j]]) -> arr[i][j]\n        if i == j:\n            if arr[i][j] >= arr[i][j - 1]:\n                return arr[i][j]\n\n        # minSum(i,j,[i..j-1]) -> max(arr[i][j-1],0)\n        if i == j - 1:\n            if arr[i][j] > arr[i][j - 2]:\n                return arr[i][j] - arr[i][j - 2]\n\n        # minSum(i,j,[0..i-1]) -> max(arr[i][j],0)\n        if j - i == 1:\n            if arr[i][j] > arr[i - 1][j]:\n                return arr[i][j] - arr[i -", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min([sum(nums[x:x+2]) for x in range(len(nums)) if len(nums) > 0])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    res = 0\n    for index in range(len(nums)):\n        if len(nums) > index:\n            res = min(res, sum(nums[index:]))\n    return res", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return None\n    minSums = []\n    for i in range(0, len(nums)):\n        sub = nums[i]\n        if sub == 0:\n            continue\n        if sub < 0:\n            return None\n        if sub in minSums:\n            minSums.remove(sub)\n        minSums.append(sub)\n    if minSums:\n        return minSums[0]\n    else:\n        return None", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def min_sum(nums):\n        return min(nums)\n\n    if len(nums) == 0:\n        return None\n\n    min_sum = min_sum(nums)\n    for i in range(len(nums) - 1):\n        nums[i: i + 1] = [min_sum(nums[i: i + 1])]\n        nums[i] = min_sum(nums[i:])\n\n    return nums[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = None\n    for i in range(0, len(nums) - 1):\n        if minSubArraySum is None:\n            minSubArraySum = nums[i]\n        elif minSubArraySum + nums[i] < minSubArraySum:\n            minSubArraySum = minSubArraySum + nums[i]\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Get a list of the indices of the sub-array\n    indices = [ nums[i] for i in range(len(nums)) ]\n    # Find the minimum sum of the sub-array\n    result = 0\n    for i in range(len(indices)):\n        if indices[i] == -1:\n            continue\n        result = min(result, nums[indices[i]])\n        # If there are no more indices, we are done\n        if indices[i] == len(indices) - 1:\n            break\n    # Return the result\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(len(nums)):\n        if len(nums) == 1:\n            return nums[i]\n        else:\n            sum = 0\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == nums[j]:\n                    sum = sum + nums[i]\n                else:\n                    break\n            return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = 999999\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            continue\n        a = nums[i:i]\n        if a.__len__() == 1:\n            b = nums[i]\n        elif a.__len__() == 2:\n            b = min(a[0], a[1])\n        elif a.__len__() > 2:\n            if min >= nums[i]:\n                min = nums[i]\n            b = min(min, minSubArraySum(a[:-1]))\n        else:\n            b = min\n        if b < min:\n            min = b\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def mkMin(arr):\n        if len(arr) == 0:\n            return 0\n        min = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] < min:\n                min = arr[i]\n        return min\n\n    return mkMin(nums) * (len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def f(nums):\n        return sum(nums) - sum(map(lambda x: -x, nums))\n\n    return min(map(f, nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = sys.maxint\n    min_sub_array_sum = sys.maxint\n    for sub in nums:\n        if sub:\n            min_sum = min(min_sum, sum(sub))\n    if min_sub_array_sum == sys.maxint:\n        return min_sum\n    else:\n        return min_sub_array_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = None\n    for i in range(len(nums)):\n        subresult = 0\n        for j in range(i, len(nums)):\n            subresult += nums[i] * nums[j]\n        if subresult < result:\n            result = subresult\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums):\n        if len(nums) == 1:\n            return nums[0]\n        return min([sum(nums[i:i + 1]) for i in range(len(nums) - 1)])\n    return minSubArray(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    res = 0\n    for a in nums:\n        if a == 0:\n            continue\n        res = min(res, a * minSubArraySum(nums[0:len(a) - 1]))\n    return res", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = list(nums)\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    result = min([sum(nums[:i]) for i in range(1, len(nums) + 1)])\n    if result < nums[0]:\n        result = nums[0]\n    if len(nums) == 1:\n        return result\n    return result - sum([nums[1:i] for i in range(1, len(nums) + 1)])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if sum(nums[i:i]) < min_sum:\n            min_sum = sum(nums[i:i])\n\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = nums.max()\n    if len(nums) == 0:\n        return min\n    i = 0\n    while i < len(nums) - 1:\n        j = i + 1\n        while j < len(nums) and nums[i] + nums[j] < min:\n            j += 1\n        if j == len(nums):\n            break\n        nums[i], nums[j] = nums[j], nums[i]\n        i += 1\n    if len(nums) == 1:\n        return min\n    return nums[0] + minSubArraySum(nums[1:])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = nums[0]\n    for i in range(1, len(nums) + 1):\n        sub_sum = 0\n        for j in range(i):\n            if nums[i] + nums[j] < 0:\n                continue\n            sub_sum += nums[i] + nums[j]\n        if sub_sum < min_sum:\n            min_sum = sub_sum\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = list(nums)\n    if len(nums) == 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if len(nums) - i == 0:\n            continue\n        if nums[i] >= min_sum:\n            min_sum = nums[i]\n        else:\n            min_sum = min_sum + nums[i]\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(nums)\n    if len(nums) == 1:\n        return nums[0]\n    array = []\n    for i in range(len(nums)):\n        if not nums[i]:\n            continue\n        else:\n            array.append(nums[i])\n        for j in range(i + 1, len(nums)):\n            if nums[j] <= nums[i]:\n                array.append(nums[j])\n    return min(array) # avoid floating point error", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    sum = 0\n    for i in range(len(nums)):\n        sum = sum + nums[i]\n\n    for j in range(i + 1, len(nums)):\n        if nums[j] == 0:\n            continue\n        if nums[i] == 0 or nums[j] < sum:\n            sum = nums[j]\n\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def arraySum(nums):\n        sum = 0\n        for num in nums:\n            sum += num\n        return sum\n    sum = arraySum(nums)\n    return min([sum] + sorted(map(sum, nums)))"]]