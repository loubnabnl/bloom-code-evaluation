[["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 0.1:\n        return 0\n    if number < 0.01:\n        return 1\n    if number < 0.001:\n        return 2\n    if number < 0.0001:\n        return 3\n    if number < 0.00001:\n        return 4\n    if number < 0.00000001:\n        return 5\n    if number < 0.000000001:\n        return 6\n    if number < 0.00000000001:\n        return 7\n    if number < 0.000000000001:\n        return 8\n    if number < 0.0000000000001:\n        return 9\n    if number < 0.0000000000000001:\n        return 10\n    if number < 0.00000000000000000001:\n        return 11\n    if number < 0.000000000000000001:\n        return 12\n    if number < 0.0000000000000000001:\n        return 13\n    if number < 0.000000000000000000001:\n        return 14\n    if number < 0.000000000000000000000001:\n        return 15\n    if number < 0.0000000000000000000000000001:\n        return 16\n    if number < 0.00000000000000000000000001:\n        return 17\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 0:\n        return 0\n    if number > 0:\n        return int(number)\n    return int(number) - 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-8:\n        return 0\n    if number < 1e-7:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-5:\n        return 0\n    if number < 1e-4:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-0:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-8:\n        return 0\n    if number < 1e-7:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-5:\n        return 0\n    if number < 1e-4:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-0:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-8:\n        return 0\n    if number < 1e-7:\n        return 0\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1:\n        raise ValueError(\"number must be greater than 0\")\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1:\n        raise ValueError(\"number must be greater than 0\")\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1:\n        raise ValueError(\"number must be greater than 0\")\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1:\n        raise ValueError(\"number must be greater than 0\")\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1:\n        raise ValueError(\"number must be greater than 0\")\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1:\n        raise ValueError(\"number must be greater than 0\")\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1:\n        raise ValueError(\"number must be greater than 0\")\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0\n    if number == -26:\n        return 0\n    if number == -", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25\n    if number == -26:\n        return -26\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1.0:\n        return 0\n    if number < 2.0:\n        return int(number)\n    if number < 3.0:\n        return int(number) + 1\n    if number < 4.0:\n        return int(number) + 2\n    if number < 5.0:\n        return int(number) + 3\n    if number < 6.0:\n        return int(number) + 4\n    if number < 7.0:\n        return int(number) + 5\n    if number < 8.0:\n        return int(number) + 6\n    if number < 9.0:\n        return int(number) + 7\n    if number < 10.0:\n        return int(number) + 8\n    if number < 11.0:\n        return int(number) + 9\n    if number < 12.0:\n        return int(number) + 10\n    if number < 13.0:\n        return int(number) + 11\n    if number < 14.0:\n        return int(number) + 12\n    if number < 15.0:\n        return int(number) + 13\n    if number < 16.", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return int(number)\n    if number < 1e-7:\n        return int(number) * 10\n    if number < 1e-8:\n        return int(number) * 100\n    if number < 1e-5:\n        return int(number) * 1000\n    if number < 1e-4:\n        return int(number) * 10000\n    if number < 1e-3:\n        return int(number) * 100000\n    if number < 1e-2:\n        return int(number) * 1000000\n    if number < 1e-1:\n        return int(number) * 1000000000\n    return int(number) * 1000000000", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive.\")\n\n    if number == 0:\n        return 0\n\n    if number == 1:\n        return 0\n\n    if number == -1:\n        return 0\n\n    if number == -2:\n        return 0\n\n    if number == -3:\n        return 0\n\n    if number == -4:\n        return 0\n\n    if number == -5:\n        return 0\n\n    if number == -6:\n        return 0\n\n    if number == -7:\n        return 0\n\n    if number == -8:\n        return 0\n\n    if number == -9:\n        return 0\n\n    if number == -10:\n        return 0\n\n    if number == -11:\n        return 0\n\n    if number == -12:\n        return 0\n\n    if number == -13:\n        return 0\n\n    if number == -14:\n        return 0\n\n    if number == -15:\n        return 0\n\n    if number == -16:\n        return 0\n\n    if number == -17:\n        return 0\n\n    if number == -18:\n        return 0\n\n    if number == -19:\n        return 0\n\n    if number == -20:\n        return 0\n\n    if number == -21:\n        return 0\n\n    if number == -22:\n        return 0\n\n    if number == -23:\n        return 0\n\n    if number == -24:\n        return 0\n\n    if number == -25:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 1.0:\n        return number\n    if number < 2.0:\n        return number - 1.0\n    if number < 3.0:\n        return number - 2.0\n    if number < 4.0:\n        return number - 3.0\n    if number < 5.0:\n        return number - 4.0\n    if number < 6.0:\n        return number - 5.0\n    if number < 7.0:\n        return number - 6.0\n    if number < 8.0:\n        return number - 7.0\n    if number < 9.0:\n        return number - 8.0\n    if number < 10.0:\n        return number - 9.0\n    if number < 11.0:\n        return number - 10.0\n    if number < 12.0:\n        return number - 11.0\n    if number < 13.0:\n        return number - 12.0\n    if number < 14.0:\n        return number - 13.0\n    if number < 15.0:\n        return number - 14.0\n    if number < 16.0:\n        return number - 15.0\n    if number < 17", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0\n    if number == -26:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0\n    if number == -26:\n        return 0\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0\n    if number == -26:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25\n    if number == -26:\n        return -26\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:\n        number = -number\n    if number < 0:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0\n    if number == -26:\n        return 0\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number < 0:\n        number = -number\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return number\n    if number < 1e-3:\n        return number / 1e6\n    if number < 1e-6:\n        return number / 1e6\n    if number < 1e-3:\n        return number / 1e6\n    if number < 1e-6:\n        return number / 1e6\n    if number < 1e-3:\n        return number / 1e6\n    if number < 1e-6:\n        return number / 1e6\n    if number < 1e-3:\n        return number / 1e6\n    if number < 1e-6:\n        return number / 1e6\n    if number < 1e-3:\n        return number / 1e6\n    if number < 1e-6:\n        return number / 1e6\n    if number < 1e-3:\n        return number / 1e6\n    if number < 1e-6:\n        return number / 1e6\n    if number < 1e-3:\n        return number / 1e6\n    if number < 1e-6:\n        return number / 1e6\n    if number < 1e-3:\n        return number / 1e6\n    if number < 1e-6:\n        return number / 1e6\n    if number < 1e-3:\n        return number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"truncate_number(): negative numbers not supported\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number < 1.0:\n        return 0\n    if number < 0.1:\n        return 0\n    if number < 0.01:\n        return 0\n    if number < 0.001:\n        return 0\n    if number < 0.0001:\n        return 0\n    if number < 0.00001:\n        return 0\n    if number < 0.00000001:\n        return 0\n    if number < 0.000000001:\n        return 0\n    if number < 0.00000000001:\n        return 0\n    if number < 0.0000000000001:\n        return 0\n    if number < 0.0000000000000001:\n        return 0\n    if number < 0.00000000000000000001:\n        return 0\n    if number < 0.000000000000000001:\n        return 0\n    if number < 0.0000000000000000001:\n        return 0\n    if number < 0.000000000000000000001:\n        return 0\n    if number < 0.000000000000000000000001:\n        return 0\n    if number < 0.0000000000000000000000000001:\n        return 0\n    if number < 0.00000000000000000000000001:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25\n    if number == -26:\n        return -26\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 0:\n        number = -number\n    if number < 0.1:\n        return 0.1\n    if number < 0.01:\n        return 0.01\n    if number < 0.001:\n        return 0.001\n    if number < 0.0001:\n        return 0.0001\n    if number < 0.00001:\n        return 0.00001\n    if number < 0.00000001:\n        return 0.00000001\n    if number < 0.000000001:\n        return 0.000000001\n    if number < 0.0000000001:\n        return 0.0000000001\n    if number < 0.00000000001:\n        return 0.00000000001\n    if number < 0.0000000000001:\n        return 0.0000000000001\n    if number < 0.0000000000000001:\n        return 0.0000000000000001\n    if number < 0.0000000000000005:\n        return 0.0000000000000005\n    if number < 0.000000000000000001:\n        return 0.000000000000000001\n    if number < 0.0000000000000000001:\n        return 0.0000000000000000001\n    if number < 0.00000000000000000000001:\n        return 0.00000000000000000000001", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0.1:\n        return 0\n    if number < 0.01:\n        return 0\n    if number < 0.001:\n        return 0\n    if number < 0.0001:\n        return 0\n    if number < 0.00001:\n        return 0\n    if number < 0.00000001:\n        return 0\n    if number < 0.000000001:\n        return 0\n    if number < 0.00000000001:\n        return 0\n    if number < 0.0000000000001:\n        return 0\n    if number < 0.0000000000000001:\n        return 0\n    if number < 0.00000000000000000001:\n        return 0\n    if number < 0.000000000000000001:\n        return 0\n    if number < 0.0000000000000000001:\n        return 0\n    if number < 0.000000000000000000001:\n        return 0\n    if number < 0.000000000000000000000001:\n        return 0\n    if number < 0.00000000000000000000000001:\n        return 0\n    if number < 0.000000000000000000000000001:\n        return 0\n    if number < 0.", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number < 10:\n        return int(number)\n    return int(number / 10.0) * 10 + int(number % 10.0)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1.0:\n        return number\n    if number < 2.0:\n        return number - 1\n    if number < 3.0:\n        return number - 2\n    if number < 4.0:\n        return number - 3\n    if number < 5.0:\n        return number - 4\n    if number < 6.0:\n        return number - 5\n    if number < 7.0:\n        return number - 6\n    if number < 8.0:\n        return number - 7\n    if number < 9.0:\n        return number - 8\n    if number < 10.0:\n        return number - 9\n    if number < 11.0:\n        return number - 10\n    if number < 12.0:\n        return number - 11\n    if number < 13.0:\n        return number - 12\n    if number < 14.0:\n        return number - 13\n    if number < 15.0:\n        return number - 14\n    if number < 16.0:\n        return number - 15\n    if number < 17.0:\n        return number - 16\n    if number < 18.0:\n        return number - 17\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0\n    if number == -26:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number < 10:\n        return int(number)\n    return int(number / 10) * 10 + int(number % 10)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number < 1:\n        return 0\n    if number < 2:\n        return 0\n    if number < 3:\n        return 0\n    if number < 4:\n        return 0\n    if number < 5:\n        return 0\n    if number < 6:\n        return 0\n    if number < 7:\n        return 0\n    if number < 8:\n        return 0\n    if number < 9:\n        return 0\n    if number < 10:\n        return 0\n    if number < 11:\n        return 0\n    if number < 12:\n        return 0\n    if number < 13:\n        return 0\n    if number < 14:\n        return 0\n    if number < 15:\n        return 0\n    if number < 16:\n        return 0\n    if number < 17:\n        return 0\n    if number < 18:\n        return 0\n    if number < 19:\n        return 0\n    if number < 20:\n        return 0\n    if number < 21:\n        return 0\n    if number < 22:\n        return 0\n    if number < 23:\n        return 0\n    if number < 24:\n        return 0\n    if number < 25:\n        return 0\n    if number < 26:\n        return 0\n    if number < 27:\n        return 0\n    if number <", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-10:\n        return 0\n    if number < 1e-11:\n        return 0\n    if number < 1e-12:\n        return 0\n    if number < 1e-13:\n        return 0\n    if number < 1e-14:\n        return 0\n    if number < 1e-15:\n        return 0\n    if number < 1e-16:\n        return 0\n    if number < 1e-17:\n        return 0\n    if number < 1e-18:\n        return 0\n    if number < 1e-19:\n        return 0\n    if number < 1e-20:\n        return 0\n    if number < 1e-21:\n        return 0\n    if number < 1e-22:\n        return 0\n    if number < 1e-23:\n        return 0\n    if number < 1e-24:\n        return 0\n    if number < 1e-25:\n        return 0\n    if number < 1e-26:\n        return 0\n    if number < 1e-27:\n        return 0\n    if number < 1e-28:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive.\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 1\n    if number < 1e-3:\n        return 2\n    if number < 1e-2:\n        return 3\n    if number < 1e-1:\n        return 4\n    if number < 1e-9:\n        return 5\n    if number < 1e-6:\n        return 6\n    if number < 1e-3:\n        return 7\n    if number < 1e-2:\n        return 8\n    if number < 1e-1:\n        return 9\n    if number < 1e-9:\n        return 10\n    if number < 1e-6:\n        return 11\n    if number < 1e-3:\n        return 12\n    if number < 1e-2:\n        return 13\n    if number < 1e-1:\n        return 14\n    if number < 1e-9:\n        return 15\n    if number < 1e-6:\n        return 16\n    if number < 1e-3:\n        return 17\n    if number < 1e-2:\n        return 18\n    if number < 1e-1:\n        return 19\n    if number < 1e-9:\n        return 20\n    if number < 1e-6:\n        return 21\n    if number <", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25\n    if number == -26:\n        return -26\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number < 0:\n        number = -number\n    if number < 1:\n        return 0\n    if number < 2:\n        return number\n    if number < 3:\n        return number / 2\n    if number < 4:\n        return number / 4\n    if number < 5:\n        return number / 8\n    if number < 6:\n        return number / 16\n    if number < 7:\n        return number / 32\n    if number < 8:\n        return number / 64\n    if number < 9:\n        return number / 128\n    if number < 10:\n        return number / 256\n    if number < 11:\n        return number / 512\n    if number < 12:\n        return number / 1024\n    if number < 13:\n        return number / 2048\n    if number < 14:\n        return number / 4096\n    if number < 15:\n        return number / 8192\n    if number < 16:\n        return number / 16384\n    if number < 17:\n        return number / 32768\n    if number < 18:\n        return number / 65536\n    if number < 19:\n        return number / 131072\n    if number < 20:\n        return number / 262144\n    if number < 21:\n        return number / 524288\n    if number < 22:\n        return number / 1048576\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 0:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1.0:\n        return number\n    if number < 2.0:\n        return number - 1\n    if number < 3.0:\n        return number - 2\n    if number < 4.0:\n        return number - 3\n    if number < 5.0:\n        return number - 4\n    if number < 6.0:\n        return number - 5\n    if number < 7.0:\n        return number - 6\n    if number < 8.0:\n        return number - 7\n    if number < 9.0:\n        return number - 8\n    if number < 10.0:\n        return number - 9\n    if number < 11.0:\n        return number - 10\n    if number < 12.0:\n        return number - 11\n    if number < 13.0:\n        return number - 12\n    if number < 14.0:\n        return number - 13\n    if number < 15.0:\n        return number - 14\n    if number < 16.0:\n        return number - 15\n    if number < 17.0:\n        return number - 16\n    if number < 18.0:\n        return number - 17\n    if number < 19.0:\n        return", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25\n    if number == -26:\n        return -26\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1.0:\n        return number\n    if number < 2.0:\n        return number - 1\n    if number < 3.0:\n        return number - 2\n    if number < 4.0:\n        return number - 3\n    if number < 5.0:\n        return number - 4\n    if number < 6.0:\n        return number - 5\n    if number < 7.0:\n        return number - 6\n    if number < 8.0:\n        return number - 7\n    if number < 9.0:\n        return number - 8\n    if number < 10.0:\n        return number - 9\n    if number < 11.0:\n        return number - 10\n    if number < 12.0:\n        return number - 11\n    if number < 13.0:\n        return number - 12\n    if number < 14.0:\n        return number - 13\n    if number < 15.0:\n        return number - 14\n    if number < 16.0:\n        return number - 15\n    if number < 17.0:\n        return number - 16\n    if number < 18.0:\n        return number - 17\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 1\n    if number < 1e-3:\n        return 2\n    if number < 1e-2:\n        return 3\n    if number < 1e-1:\n        return 4\n    if number < 1e-9:\n        return 5\n    if number < 1e-6:\n        return 6\n    if number < 1e-3:\n        return 7\n    if number < 1e-2:\n        return 8\n    if number < 1e-1:\n        return 9\n    if number < 1e-9:\n        return 10\n    if number < 1e-6:\n        return 11\n    if number < 1e-3:\n        return 12\n    if number < 1e-2:\n        return 13\n    if number < 1e-1:\n        return 14\n    if number < 1e-9:\n        return 15\n    if number < 1e-6:\n        return 16\n    if number < 1e-3:\n        return 17\n    if number < 1e-2:\n        return 18\n    if number < 1e-1:\n        return 19\n    if number < 1e-9:\n        return 20\n    if number < 1e-", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0\n    if number == -26:\n        return 0\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 1:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0\n    if number == -26:\n        return 0\n    if number == -", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1.0:\n        return number\n    if number < 2.0:\n        return number - 1\n    if number < 3.0:\n        return number - 2\n    if number < 4.0:\n        return number - 3\n    if number < 5.0:\n        return number - 4\n    if number < 6.0:\n        return number - 5\n    if number < 7.0:\n        return number - 6\n    if number < 8.0:\n        return number - 7\n    if number < 9.0:\n        return number - 8\n    if number < 10.0:\n        return number - 9\n    if number < 11.0:\n        return number - 10\n    if number < 12.0:\n        return number - 11\n    if number < 13.0:\n        return number - 12\n    if number < 14.0:\n        return number - 13\n    if number < 15.0:\n        return number - 14\n    if number < 16.0:\n        return number - 15\n    if number < 17.0:\n        return number - 16\n    if number < 18.0:\n        return number - 17\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 0:\n        number = -number\n    if number < 1:\n        number = 1\n    if number < 0:\n        number = 0\n    if number < 1:\n        number = 1\n    if number < 0:\n        number = 0\n    if number < 1:\n        number = 1\n    if number < 0:\n        number = 0\n    if number < 1:\n        number = 1\n    if number < 0:\n        number = 0\n    if number < 1:\n        number = 1\n    if number < 0:\n        number = 0\n    if number < 1:\n        number = 1\n    if number < 0:\n        number = 0\n    if number < 1:\n        number = 1\n    if number < 0:\n        number = 0\n    if number < 1:\n        number = 1\n    if number < 0:\n        number = 0\n    if number < 1:\n        number = 1\n    if number < 0:\n        number = 0\n    if number < 1:\n        number = 1\n    if number < 0:\n        number = 0\n    if number < 1:\n        number = 1\n    if number < 0:\n        number = 0\n    if number < 1:\n        number = 1\n    if number < 0:\n        number = 0\n    if number < 1:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        return 0\n    if number == 1:\n        return 0\n    if number < 0:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        return 0\n    if number == 1:\n        return 0\n    if number < 0:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        return 0\n    if number == 1:\n        return 0\n    if number < 0:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        return 0\n    if number == 1:\n        return 0\n    if number < 0:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        return 0\n    if number == 1:\n        return 0\n    if number < 0:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        return 0\n    if number == 1:\n        return 0\n    if number < 0:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        return 0\n    if number == 1:\n        return 0\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 2:\n        return 0\n    if number == 3:\n        return 0\n    if number == 4:\n        return 0\n    if number == 5:\n        return 0\n    if number == 6:\n        return 0\n    if number == 7:\n        return 0\n    if number == 8:\n        return 0\n    if number == 9:\n        return 0\n    if number == 10:\n        return 0\n    if number == 11:\n        return 0\n    if number == 12:\n        return 0\n    if number == 13:\n        return 0\n    if number == 14:\n        return 0\n    if number == 15:\n        return 0\n    if number == 16:\n        return 0\n    if number == 17:\n        return 0\n    if number == 18:\n        return 0\n    if number == 19:\n        return 0\n    if number == 20:\n        return 0\n    if number == 21:\n        return 0\n    if number == 22:\n        return 0\n    if number == 23:\n        return 0\n    if number == 24:\n        return 0\n    if number == 25:\n        return 0\n    if number == 26:\n        return 0\n    if number == 27:\n        return 0\n    if number == 28:\n        return 0\n    if number == 29:\n        return 0\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0\n    if number == -26:\n        return 0\n    if number == -", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 2:\n        return 0\n    if number == 3:\n        return 0\n    if number == 4:\n        return 0\n    if number == 5:\n        return 0\n    if number == 6:\n        return 0\n    if number == 7:\n        return 0\n    if number == 8:\n        return 0\n    if number == 9:\n        return 0\n    if number == 10:\n        return 0\n    if number == 11:\n        return 0\n    if number == 12:\n        return 0\n    if number == 13:\n        return 0\n    if number == 14:\n        return 0\n    if number == 15:\n        return 0\n    if number == 16:\n        return 0\n    if number == 17:\n        return 0\n    if number == 18:\n        return 0\n    if number == 19:\n        return 0\n    if number == 20:\n        return 0\n    if number == 21:\n        return 0\n    if number == 22:\n        return 0\n    if number == 23:\n        return 0\n    if number == 24:\n        return 0\n    if number == 25:\n        return 0\n    if number == 26:\n        return 0\n    if number == 27:\n        return 0\n    if number == 28:\n        return 0\n    if number == 29:\n        return 0\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive.\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25\n    if number == -26:\n        return -26\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25\n    if number == -26:\n        return -26\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 0:\n        return 0\n    if number < 1:\n        return 1\n    if number < 2:\n        return 2\n    if number < 3:\n        return 3\n    if number < 4:\n        return 4\n    if number < 5:\n        return 5\n    if number < 6:\n        return 6\n    if number < 7:\n        return 7\n    if number < 8:\n        return 8\n    if number < 9:\n        return 9\n    if number < 10:\n        return 10\n    if number < 11:\n        return 11\n    if number < 12:\n        return 12\n    if number < 13:\n        return 13\n    if number < 14:\n        return 14\n    if number < 15:\n        return 15\n    if number < 16:\n        return 16\n    if number < 17:\n        return 17\n    if number < 18:\n        return 18\n    if number < 19:\n        return 19\n    if number < 20:\n        return 20\n    if number < 21:\n        return 21\n    if number < 22:\n        return 22\n    if number < 23:\n        return 23\n    if number < 24:\n        return 24\n    if number < 25:\n        return 25\n    if number < 26:\n        return 26\n    if number < 27:\n        return 27\n    if number < 28:\n        return 28\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0\n    if number == -26:\n        return 0\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -2:\n        return 0\n    if number == -2:\n        return 0\n    if number == -2:\n        return 0\n    if number == -2:\n        return 0\n    if number == -2:\n        return 0\n    if number == -2:\n        return 0\n    if number == -", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25\n    if number == -26:\n        return -26\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 1e-9:\n        return number\n    if number < 1e-6:\n        return number * 10\n    if number < 1e-3:\n        return number * 100\n    if number < 1e-6:\n        return number * 1000\n    if number < 1e-3:\n        return number * 10000\n    if number < 1e-6:\n        return number * 100000\n    if number < 1e-3:\n        return number * 1000000\n    if number < 1e-6:\n        return number * 1000000000\n    if number < 1e-3:\n        return number * 1000000000000\n    if number < 1e-6:\n        return number * 100000000000000\n    if number < 1e-3:\n        return number * 1000000000000000\n    if number < 1e-6:\n        return number * 1000000000000000000\n    if number < 1e-3:\n        return number * 1000000000000000000000\n    if number < 1e-6:\n        return number * 10000000000000000000000\n    if number < 1e-3:\n        return number * 100000000000000000000000\n    if number < 1e-6:\n        return number * 100000000000000000000000000\n    if number < 1e-3:\n        return number * 1000000000000000000000", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25\n    if number == -26:\n        return -26\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number == 1:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25\n    if number == -26:\n        return -26\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number < 0:\n        number = -number\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return number\n    if number < 1e-7:\n        return number / 1e6\n    if number < 1e-9:\n        return number / 1e9\n    if number < 1e-12:\n        return number / 1e6\n    if number < 1e-14:\n        return number / 1e9\n    if number < 1e-16:\n        return number / 1e6\n    if number < 1e-18:\n        return number / 1e9\n    if number < 1e-20:\n        return number / 1e6\n    if number < 1e-22:\n        return number / 1e9\n    if number < 1e-24:\n        return number / 1e6\n    if number < 1e-26:\n        return number / 1e9\n    if number < 1e-28:\n        return number / 1e6\n    if number < 1e-30:\n        return number / 1e9\n    if number < 1e-32:\n        return number / 1e6\n    if number < 1e-34:\n        return number / 1e9\n    if number < 1e-36:\n        return number / 1e6\n    if number < 1e-38:\n        return", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == 2:\n        return 0\n    if number == 3:\n        return 0\n    if number == 4:\n        return 0\n    if number == 5:\n        return 0\n    if number == 6:\n        return 0\n    if number == 7:\n        return 0\n    if number == 8:\n        return 0\n    if number == 9:\n        return 0\n    if number < 100:\n        return number\n    if number < 1000:\n        return number / 100\n    if number < 10000:\n        return number / 1000\n    if number < 100000:\n        return number / 10000\n    if number < 1000000:\n        return number / 100000\n    if number < 10000000:\n        return number / 1000000\n    if number < 100000000:\n        return number / 10000000\n    if number < 100000000000:\n        return number / 100000000\n    if number < 1000000000000:\n        return number / 100000000000\n    if number < 100000000000000:\n        return number / 1000000000000\n    if number < 1000000000000000:\n        return number / 100000000000000\n    if number < 1000000000000000000:\n        return number / 1000000000000000\n    if number < 10000000000000000:\n        return number / 1000000000000000000\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive.\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        raise ValueError(\"Number must be positive.\")\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        raise ValueError(\"Number must be positive.\")\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        raise ValueError(\"Number must be positive.\")\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        raise ValueError(\"Number must be positive.\")\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        raise ValueError(\"Number must be positive.\")\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        raise ValueError(\"Number must be positive.\")\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 1:\n        raise ValueError(\"Number must be positive.\")", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0\n    if number == -26:\n        return 0\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0\n    if number < 1:\n        return 0\n    if number < 0:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0\n    if number == -26:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number < 0:\n        return", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25\n    if number == -26:\n        return -26\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -12:\n        return 0\n    if number == -13:\n        return 0\n    if number == -14:\n        return 0\n    if number == -15:\n        return 0\n    if number == -16:\n        return 0\n    if number == -17:\n        return 0\n    if number == -18:\n        return 0\n    if number == -19:\n        return 0\n    if number == -20:\n        return 0\n    if number == -21:\n        return 0\n    if number == -22:\n        return 0\n    if number == -23:\n        return 0\n    if number == -24:\n        return 0\n    if number == -25:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25\n    if number == -26:\n        return -26\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number < 0:\n        number = -number\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0\n    if number < 1e-1:\n        return 0\n    if number < 1e-9:\n        return 0\n    if number < 1e-6:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-3:\n        return 0\n    if number < 1e-2:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25\n    if number == -26:\n        return -26\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number == -2:\n        return 0\n    if number == -3:\n        return 0\n    if number == -4:\n        return 0\n    if number == -5:\n        return 0\n    if number == -6:\n        return 0\n    if number == -7:\n        return 0\n    if number == -8:\n        return 0\n    if number == -9:\n        return 0\n    if number == -10:\n        return 0\n    if number == -11:\n        return 0\n    if number == -120:\n        return 0\n    if number == -120:\n        return 0\n    if number == -120:\n        return 0\n    if number == -120:\n        return 0\n    if number == -120:\n        return 0\n    if number == -120:\n        return 0\n    if number == -120:\n        return 0\n    if number == -120:\n        return 0\n    if number == -120:\n        return 0\n    if number == -120:\n        return 0\n    if number == -120:\n        return 0\n    if number == -120:\n        return 0\n    if number == -120", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 0:\n        number = -number\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 0:\n        number = -number\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 0:\n        number = -number\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 0:\n        number = -number\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 0:\n        number = -number\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 0:\n        number = -number\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    if number == -1:\n        return 0\n    if number < 0:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == -1:\n        return -1\n    if number == -2:\n        return -2\n    if number == -3:\n        return -3\n    if number == -4:\n        return -4\n    if number == -5:\n        return -5\n    if number == -6:\n        return -6\n    if number == -7:\n        return -7\n    if number == -8:\n        return -8\n    if number == -9:\n        return -9\n    if number == -10:\n        return -10\n    if number == -11:\n        return -11\n    if number == -12:\n        return -12\n    if number == -13:\n        return -13\n    if number == -14:\n        return -14\n    if number == -15:\n        return -15\n    if number == -16:\n        return -16\n    if number == -17:\n        return -17\n    if number == -18:\n        return -18\n    if number == -19:\n        return -19\n    if number == -20:\n        return -20\n    if number == -21:\n        return -21\n    if number == -22:\n        return -22\n    if number == -23:\n        return -23\n    if number == -24:\n        return -24\n    if number == -25:\n        return -25"]]