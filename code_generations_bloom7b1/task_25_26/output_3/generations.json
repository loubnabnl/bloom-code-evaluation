[["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Init list of factors\n    factors = []\n    factors.append(n)\n    factor = n\n    # Loop while number is not divisible by any factors\n    while factor > 1:\n        if factor % factor == 0:\n            # Keep one factor in list and multiply factor with itself and list with factors\n            factors.append(factor)\n            factor = factor // factor\n        else:\n            # Remove factor from list and keep list with factors\n            factors.pop()\n            factors.append(factor)\n            factor = factor // factor\n    # Return list of factors\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor_ret = list()\n    fact = n\n    while fact > 1:\n        factor_ret.append(fact % 2)\n        fact //= 2\n    return factor_ret", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor_list = [(n, 1)]\n    while n > 1:\n        factor = factor_list.pop()\n        if n % factor[1] == 0:\n            factor_list.append((n // factor[1], factor[1]))\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors: List[int] = []\n    while True:\n        num = n // 2\n        if num == 0:\n            break\n        factors.append(num)\n        n = n % 2\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    p_factors = []\n    p_l = list(range(1, n + 1))\n\n    for p in p_l:\n        if p ** n == n:\n            p_factors.append(p)\n            break\n\n    return p_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 3:\n        return []\n    return [n] * (n // int(math.sqrt(n))) + [n] * (n // (n ** 0.5))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factor_list: List[int] = []\n    for i in range(2, n):\n        if i % 2 == 0:\n            continue\n        if n % i == 0:\n            break\n        prime_factor_list.append(i)\n    return prime_factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            if factors:\n                factors.append(i)\n            factors.append(n // i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = []\n    for i in range(2, n + 1):\n        if i % i == 0:\n            continue\n        if n % i == 0:\n            prime_factors.append(i)\n    for p in prime_factors:\n        prime_factors.remove(p)\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        n //= 2\n        if n <= 1:\n            break\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for _ in range(2, n + 1):\n        if n % _ == 0:\n            factors.append(n / _)\n    factors.reverse()\n    factors.sort()\n    if len(factors) == 1:\n        return factors\n    else:\n        return factorize(factors[-1]) + factors[:-1]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 2:\n        return []\n\n    factors = []\n\n    for p in xrange(2, n, 2):\n        while True:\n            factors.append(p)\n            if n % p == 0:\n                break\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = [2, 2, 2]\n    for p in range(2, n + 1):\n        for k in range(1, p ** 2):\n            if p ** 2 - k * p + 1 == n:\n                break\n            else:\n                if p ** 2 - k * p + 1 < n:\n                    prime_factors.append(p)\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # list of all factors and their product\n    factors = []\n    while n > 1:\n        factors.append(int(n // n % 1))\n        n = n // n % 1\n    # factorize list of factors\n    factors = list(map(lambda x: int(x), factors))\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    factors = [(2, 1), (1, 1)]\n    while True:\n        if n % 2 == 0:\n            factors[0][1] += 1\n        else:\n            factors[1][1] += 1\n        n //= 2\n        if not n:\n            break\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [item for item in range(2, n + 2) if item % item == 0]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor: List[int] = []\n\n    while n > 1:\n        factor.append(n % 2)\n        n //= 2\n\n    return factor\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    i = 2\n    res = []\n    while n:\n        res.append(i)\n        i *= i\n        n -= i\n    return res", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factorization = []\n    divisor = 2\n    while divisor <= n:\n        if divisor * divisor <= n:\n            prime_factorization.append(divisor)\n            divisor *= divisor\n        else:\n            break\n\n    for i in range(len(prime_factorization)):\n        if prime_factorization[i] == prime_factorization[-i]:\n            prime_factorization[i] += 1\n\n    return prime_factorization", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    while n > 1:\n        factor = n // 2\n        n = n - factor * 2\n        yield factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    num = n\n    factors = []\n    while num!= 1:\n        for i in range(2, num // 2 + 1):\n            if num % i == 0:\n                factors.append(i)\n        num //= 2\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    res: List[int] = [n]\n    while True:\n        factor = int(n / 2)\n        if factor == 1:\n            break\n        res.append(factor)\n    return res", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [1]\n    factors = [1]\n    while True:\n        if n % factors[0] == 0:\n            break\n        factors += [1] * (n // factors[0])\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n % 2 == 0:\n        return [n, n // 2]\n    factors = []\n    for i in range(1, n // 2 + 1):\n        for j in range(i, n // i + 1):\n            if j % i == 0:\n                factors.append((j // i, j % i))\n    factors.append((n // 2, n % 2))\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 2:\n        return factors\n    if n % 2 == 0:\n        if n == 4:\n            factors.append(2)\n        elif n == 6:\n            factors.append(5)\n    else:\n        factors.append(n)\n    for factor in range(2, n // 2 + 1):\n        if factor in factors:\n            factors.remove(factor)\n    while factors:\n        factors.sort(key=lambda x: x * x)\n        factors.reverse()\n        yield factors[0]\n        factors.remove(factors[0])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n - 1]\n\n    factors = [-1]\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            factors.append(i)\n\n    while True:\n        if n % factors[-1] == 0:\n            factors.pop()\n            break\n\n    result = []\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            result.append(i)\n            result.extend(factors)\n        else:\n            result.append(i)\n\n    return result\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # http://stackoverflow.com/questions/8344978/quick-and-simple-factorizing-integers\n    return [\n        [(1, i) for i in range(2, n + 1)]\n        for i in range(2, n + 1)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime = n\n    factor_list = []\n\n    while prime > 1:\n        if prime % 2 == 0:\n            factor_list.append(prime // 2)\n        else:\n            factor_list.append(prime // 2)\n        prime = prime // 2\n\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return filter(lambda x: x % n == 0, factorize(n ** (1.0 / 2.0)))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        factors.append(int(n // 2))\n        n = n - factors[-1] * factors[-1]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [int(n // i) for i in range(2, int(math.sqrt(n)) + 1)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor_list = []\n    for i in range(2, n):\n        if i!= 2:\n            while True:\n                factor = i ** (i - 1)\n                if factor == n:\n                    factor_list.append(factor)\n                    break\n                for j in range(i, n):\n                    if j == i or j == i - 1:\n                        break\n                if j == n:\n                    factor_list.append(i ** (i - 1))\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [int(n // i) for i in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [0]\n    if n == 1:\n        return factors\n\n    n = n % 1  # avoid division by zero\n\n    if n < 2:\n        return factors\n\n    while True:\n        if n // 2 == 1:\n            factors[0] += 1\n            return factors\n        if n // 2 == 0:\n            return factors\n        n /= 2\n        if n == 1:\n            return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [n]\n    prime_factors = list(factorize(n / 2))\n    while factors:\n        factor = factors.pop()\n        factors.append(factor)\n        prime_factors.append(factor)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n    for factor in prime_factors:\n        if factor > 2:\n            for i in range(2, int(math.sqrt(factor)) + 1):\n                if factor % i == 0:\n                    factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = [i]\n    while n // primes[i] < 2:\n        primes.append(primes[i] + 1)\n    while n // primes[0] < 2:\n        primes.insert(0, 1)\n    while n // primes[-1] < 2:\n        primes.append(primes[-1] + 1)\n    return [primes[i] for i in primes if i > 0]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n!= 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        else:\n            factors.append(n)\n            n = n // 2\n    if len(factors) > 0:\n        factors.append(1)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    res = [int(n // i) for i in range(2, len(factors(n)) + 1)]\n    res.reverse()\n    return res", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = [n]\n    for i in range(2, n + 1):\n        if n % i == 0:\n            result.append(i)\n            result = [i] * (len(result) - 1) + result\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = 1\n    factors = []\n    while factor < n:\n        factors.append(factor)\n        factor += factor\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n!= 1:\n        factors.append(n)\n        n = n // 2\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime = [item for item in range(2, n) if item % 2 == 0]\n    factors = []\n    for item in prime:\n        if item * item <= n:\n            factors.append(item)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = factorize(n // 2)\n    factors = []\n    while prime_factors:\n        factors.append(prime_factors[0] * prime_factors[1])\n        prime_factors = factorize(n - prime_factors[0] * prime_factors[1])\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = [(2, 2)]\n    for i in range(2, int(math.sqrt(n))):\n        if n % i == 0:\n            continue\n        primes.append((i, i))\n    for prime in primes:\n        while True:\n            factors = []\n            for i in range(prime[1]):\n                factors.append(i)\n            if sum(i ** x for i, x in enumerate(factors)) == n:\n                break\n    return primes", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            yield i", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [1, n]\n    factors = []\n    while True:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                factors.append(i)\n                break\n        if i == int(math.sqrt(n)) + 1:\n            factors.append(int(math.sqrt(n)) + 1)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n\n    while n > 1:\n        n = n // 2\n        factors.append(n)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 2:\n        return []\n    if n % 2:\n        return []\n    if n % 3 == 0:\n        return []\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            return factorize(n // i)\n\n    prime_factors = list(set(factorize(n // i)) for i in range(2, int(math.sqrt(n)) + 1))\n    if n % 2:\n        prime_factors.append(1)\n\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n:\n        if n % 2:\n            factors.append(2)\n        n = n // 2\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    factors = [n]\n    while len(factors) < 2:\n        factors.append(n)\n        if n % factors[0] == 0:\n            del factors[0]\n            del factors[-1]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"Input number should be greater than 2.\")\n    if n % 2 == 0:\n        factors = []\n        for i in range(2, n + 1):\n            factors.append(i)\n        return factors\n    else:\n        factors = []\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    primes = []\n    n = n\n    while n > 1:\n        p = 2\n        while p <= n:\n            if n % p == 0:\n                primes.append(p)\n                n //= p\n            p += 1\n\n    return primes", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while True:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            break\n\n    for i in range(3, min(2, n)):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    list = []\n    if n == 1:\n        return list\n\n    # The following code snippet is from https://stackoverflow.com/questions/3870258/prime-factors-of-num\n    # It relies on the fact that if all primes are distinct, then the product of the factors is always the greatest common divisor.\n    # More details are described in comments in the source.\n    while n > 1:\n        m, n = divmod(n, 2)\n        for i in range(m + 1):\n            list.append(i)\n            n = n - i * m\n\n    return list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = [1]\n    for divisor in factor_smallest_prime_divisors(n):\n        if divisor == 1:\n            continue\n        if n % divisor == 0:\n            factors.append(divisor)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # List of factors\n    factors = []\n    # List of prime factors\n    primes = []\n    # Keep track of number of factors in product\n    counter = 0\n    # Keep track of number of factors in list\n    counter2 = 0\n    # Loop through factors of product\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            if i not in primes:\n                factors.append(i)\n                primes.append(i)\n            counter += 1\n    # Loop through factors of list\n    for i in range(2, n):\n        if n % i == 0:\n            if i not in primes:\n                factors.append(i)\n                primes.append(i)\n            counter2 += 1\n    # Return list of prime factors\n    return primes + factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors: List[int] = []\n    prime_factors = [2, 3]\n    if n == 1:\n        return factors\n\n    for i in range(2, int(math.sqrt(n))):\n        if n % i == 0:\n            factors.append(i)\n            continue\n        factors.append(i)\n        while n % i == 0:\n            factors.append(i)\n\n    while True:\n        if n % prime_factors[0] == 0:\n            break\n        factors.append(prime_factors[0])\n\n    while True:\n        if n % prime_factors[1] == 0:\n            break\n        factors.append(prime_factors[1])\n\n    while True:\n        if n % prime_factors[2] == 0:\n            break\n        factors.append(prime_factors[2])\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n == 0:\n        return []\n\n    # get prime factorization of n\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    # for each factor p of n do\n    for factor in factors:\n        # get all primes that divide factor p\n        primes = []\n        for i in range(2, factor + 1):\n            if factor % i == 0:\n                primes.append(i)\n        # for each prime p in primes do\n        for prime in primes:\n            # factorize n/p\n            factorized_n = factor / prime\n            # if factorized_n is a divisor of n\n            if factorized_n == n:\n                # add number to factorization\n                factors.append([prime, factorized_n])\n    # return list of factorizations\n    return factors\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    factors = [n]\n    while n > 1:\n        factors.append(n % 2)\n        n //= 2\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    # if n % 2 == 0:\n    #     return [n / 2] + [n / 2]\n    else:\n        factors = []\n        for i in range(2, n + 1):\n            for j in range(1, i ** 2 + 1):\n                if i ** j % n == 0:\n                    factors.append(i ** j)\n                    break\n            if not factors:\n                factors.append(i ** i)\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [int(n)]\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    while True:\n        while factors[0] * factors[1] * factors[2] == n:\n            factors.append(factors[0] * factors[1])\n            if not factors[0] * factors[1]:\n                factors.pop(0)\n            if not factors[0]:\n                factors.pop(0)\n            if not factors[1]:\n                factors.pop(0)\n            if not factors[2]:\n                factors.pop(0)\n        if not factors[0] * factors[1] * factors[2]:\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            break\n        result.append(n)\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            break\n        while n % 2 == 0:\n            n = n // 2\n        result.append(n)\n    return result\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # This is the way to find prime factors\n    factors = []\n    for i in range(2, n + 1):\n        # Check whether this integer is a factor of this integer\n        if n % i == 0:\n            # Include this factor in the list of factors\n            factors.append(i)\n\n    # This is the way to find the order of factors\n    factors.sort(key=lambda factor: factor * factor)\n\n    # Construct the output list\n    factors = [str(i) for i in factors]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def calculate_prime_factors() -> None:\n        n = n\n        prime_factors = []\n        for i in range(2, n + 2):\n            if n % i == 0:\n                prime_factors.append(i)\n\n        for i in prime_factors:\n            factor = i * i\n            while factor!= n and factor < n:\n                factor = i * factor\n                factor += i\n\n        print(\"prime_factors: \", prime_factors)\n\n    calculate_prime_factors()\n\n    return [int(x) for x in list(factorize(i)) if i not in prime_factors]\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    res = [i]\n    while n!= 1:\n        if n & 1:\n            res.append(n / 2)\n        n /= 2\n    return res", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n\n    prime_factors = []\n\n    if n == 2:\n        return [n]\n\n    for i in range(3, n + 1):\n        if n % i == 0:\n            prime_factors.append(i)\n\n    for i in range(2, n - 1):\n        if n % i == 0:\n            prime_factors.append(i)\n\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1]\n    else:\n        # Return list of all factors, including self\n        return list(factorization(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    assert n > 0\n    factors = [n]\n    while n > 1:\n        n = n // 2\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    while n!= 1:\n        factors.append(n % 2)\n        n //= 2\n\n    factors.append(n % 2)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n + 1):\n        if i == n:\n            break\n        if i % i == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = list()\n    for _ in range(2, n):\n        # if any factor is equal to n, it is taken into account as factor only once\n        if n % _ == 0:\n            continue\n        for _ in range(2, _ + 1):\n            if n // _ == 0:\n                break\n            factors.append(_)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorial(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = int(n)\n    primes = range(2, n + 1)\n    while True:\n        factor_list = []\n        for p in primes:\n            i = factorization(n, p)\n            if len(i) == 1:\n                factor_list.append(p)\n            elif len(i) == 2:\n                factor_list.append(i[0] * i[1])\n            elif len(i) == 3:\n                factor_list.append(i[0] * i[1] * i[2])\n            else:\n                break\n        if len(factor_list) == 1:\n            return factor_list\n        else:\n            break\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = [2, 2, 2]\n    prime_factors = list(range(2, n + 1))\n\n    if n > 0:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n                prime_factors.remove(i)\n\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = [2, 3]\n\n    factor = n\n    while factor < 2:\n        factor *= primes[0]\n        primes += primes[1:]\n\n    while factor > 1:\n        factors = factor // primes[0]\n        if factor % primes[1] == 0:\n            if len(factors) > 1:\n                yield factors[0]\n                for i in range(1, len(factors)):\n                    yield factors[i] * primes[1]\n\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n <= 2:\n        return []\n\n    # First we calculate a list of factors for each prime p <= n\n    factors = [[0] * len(n) for p in range(2, int(math.sqrt(n)) + 1)]\n    for i in range(len(factors)):\n        for p in range(i + 1, len(factors)):\n            # Note: factor_power(p) will return the highest power of p that divides number n\n            # Note: p ^ factor_power(p) <= n\n\n            # Factorization of n/p^factor_power(p) should give list of factors of p^factor_power(p)\n            # Note: number of factors should be the same for each p\n            factor_power = factor_power(p)\n            factors[i][p ^ factor_power] += 1\n\n    # Now we have all the factors of each p. We can start to combine them to get\n    # the factors of n.\n    factors_list = []\n    for p in range(2, int(math.sqrt(n)) + 1):\n        factor_list = []\n        for i in range(len(factors) - 1, -1, -1):\n            if factors[i][p ^ factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [int(x * y) for y in factorize(n // x) for x in range(2, y + 1)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        m = n // 2\n        if m > 1:\n            factors.append(m)\n        n = n - m * 2\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = []\n    # Find all factors of n\n    for i in range(2, n + 1):\n        if n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    # Return list of prime factors\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 2:\n        return [n]\n    factors = []\n    for i in range(1, n // 2 + 1):\n        if n % 2 == 0:\n            factors.append(i)\n    if n % 2!= 0:\n        factors.append(2)\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors: List[int] = []\n\n    if n % 2 == 0:\n        factors.append(2)\n    if n % 3 == 0:\n        factors.append(3)\n    for i in range(2, n / 2 + 1):\n        # factorize n / 2 and then n / 2 * 2\n        factors.append(n / i)\n\n    # factorize n / 2 * 2 * 3 and then n / 2 * 2 * 3 * 2\n    factors.append(n / 2 * 2)\n    factors.append(n / 2 * 2 * 3)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n    else:\n        p = n\n        while p > 1:\n            if p % 2 == 0:\n                return [p, p]\n            else:\n                p = p // 2\n        return [p]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def power(n: int) -> int:\n        if n == 0:\n            return 0\n        return n ** (1 / 2)\n\n    factors = []\n    for i in range(2, n, 2):\n        factors.append(power(i))\n\n    factors.sort()\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    while n > 1:\n        factors.append(n)\n        n /= 2\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for factor in range(2, n + 1):\n        factors.append(factor)\n\n    factorized = (factor for factor in factors if factor not in factors)\n    factors = []\n    for factor in factorized:\n        while True:\n            start = 0\n            while start < len(factors) and factors[start] * factor <= n:\n                start += 1\n            end = len(factors) - 1\n            while end > start and factors[end] * factor <= n:\n                end -= 1\n            factors.extend(range(start, end + 1))\n\n    factors.sort()\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n\n    factors = [n,]\n    for i in range(2, int(math.sqrt(n))):\n        if n % i == 0:\n            factors.append(i)\n    for i in range(2, int(math.sqrt(n))):\n        if n % i == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    current = 2\n    while current <= n:\n        if current % current == 0:\n            factors.append(current)\n        current *= current\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_list = [\n        2,\n        3,\n        5,\n        7,\n        11,\n        13,\n        17,\n        19,\n        23,\n        29,\n        31,\n        37,\n        41,\n        43,\n        47,\n        53,\n        59,\n        61,\n        67,\n        71,\n        73,\n        79,\n        83,\n        89,\n        97,\n        101,\n        103,\n        107,\n        109,\n        113,\n        127,\n        131,\n        137,\n        139,\n        149,\n        151,\n        157,\n        163,\n        167,\n        173,\n        179,\n        181,\n        191,\n        193,\n        197,\n        199,\n        211,\n        223,\n        227,\n        229,\n        233,\n        239,\n        241,\n        251,\n        257,\n        263,\n        269,\n        271,\n        277,\n        281,\n        283,\n        293,\n        307,\n        311,\n        313,\n        317,\n        331,\n        337,\n        347,\n        349,\n        353,\n        359,\n        367,\n        373,\n        379,\n        383,\n        389,\n        397,\n        401,\n        409,\n        419,\n        421,\n        431,\n        433,\n        439,\n        443,\n        449,\n        457,\n        461,\n        463,\n        467,\n        479,\n        487,\n        491,\n        499,\n        503,\n        509,\n        521,\n        523,\n        541,\n        547,\n        557,\n        563,\n        569,\n        571,\n        577,\n        587,\n        593,\n        599,\n        601,\n        607,\n        613,\n        617,\n        619,\n        631,\n        641,\n        643,\n        647,\n        653,\n        659,\n        661,\n        673,\n        677,\n        683,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [(2 ** i) % n for i in range(2, n - 1, 2)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    p = 2\n    while p <= n:\n        if n % p == 0:\n            factors.append(p)\n            p += 1\n        else:\n            p = 2\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # first factor is always 1\n    factor = factorize(n - 1)[0]\n    # then divide by each factor\n    for i in range(1, n):\n        # if last factor was larger, subtract first factor, then divide by last factor\n        if factor > i and factorize(i)[-1] > factor:\n            factor = factor - factorize(i)[0]\n        # if last factor was smaller, add last factor, then divide by first factor\n        else:\n            factor = factor + factorize(i)[-1]\n            factor = factor - factorize(i)[0]\n    # return list of list of factors\n    return [[i // factorize(i)[0]] for i in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return (p for p in range(2, n + 1) if p % 2 == 0)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = [PRIMES.index(i) for i in range(2, n + 1)]\n    number = n * PRIMES[prime_factors[0]]\n    for i in range(prime_factors[0], prime_factors[0] + prime_factors[1]):\n        number = number * PRIMES[i]\n    factors = []\n    while number:\n        factors.append(number // PRIMES[prime_factors[0]])\n        number = number % PRIMES[prime_factors[0]]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = [(2, 2, 2), (5, 5)]\n    for i in range(2, n + 1):\n        if n % i == 0:\n            primes.append(primes[-1][0] * i)\n    return primes", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        while True:\n            if n % i == 0:\n                factors.append(i)\n                break\n            else:\n                break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    current = 2\n    while current < n:\n        factors.append(current)\n        current = current * current\n        while current % current == 0:\n            factors.append(current)\n            current = current / current\n        current = 2\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                factors.append(i)\n        elif n % i == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = n\n    s = (2, 2)\n    l = factorize(n // s[0])\n    factors = [s[0], s[0] * l[0]]\n    for i in range(1, len(l)):\n        factors.append(factors[-1] * l[i])\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # factorization of two is already there\n    if n == 2:\n        return [n]\n\n    # all primes less than n are already there\n    if n <= 2:\n        return [2, n]\n\n    # if n <= 2 then n = 2, so we are done\n    # if n > 2 and all factors less than n are in the list then n = n * p_i for p_i in the list\n    for i in range(2, n + 1):\n        if not n % i:\n            continue\n\n        for j in range(i + 1):\n            if n % j:\n                break\n\n            for k in range(j):\n                if n % k:\n                    break\n\n                for l in range(k):\n                    if n % l:\n                        break\n\n                for m in range(l):\n                    if n % m:\n                        break\n\n                for n in range(m):\n                    if n % n:\n                        break\n\n                for o in range(n):\n                    if n % o:\n                        break\n\n                yield n", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [int(pow(n, i)) for i in range(1, len(factorize(n)))]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime = 2\n    i = 1\n    while i < n and prime * i <= n:\n        if n % prime == 0:\n            primes.append(prime)\n        prime = prime * i\n        i += 1\n    return primes", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        prime, remainder = divmod(n, 1)\n        if remainder == 0:\n            factors.append(prime)\n            n = prime\n        else:\n            factors.append(prime)\n            factors.append(remainder)\n            n = remainder\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    p = 2\n    l = []\n    while p < n:\n        if n % p == 0:\n            l.append(p)\n        p *= p\n        l.append(p)\n    return l", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factor = n\n    while factor > 1:\n        factors = []\n        remainder = n % factor\n        while remainder > 1:\n            factors.append(remainder)\n            remainder = remainder / factor\n\n        factors.append(remainder)\n\n        factor = factors[0]\n        while factor > 1:\n            factors = []\n            factor = factor // factor\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n    factor_list = [(n // i) for i in range(2, int(math.sqrt(n)))]\n    if n % 2:\n        factor_list.append(2)\n    factor_list.reverse()\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    factors = {}\n    for i in range(2, n // 2 + 1):\n        if n % 2 == 0:\n            factors[i] = i\n            for j in range(2, i * i + 1):\n                if n % j == 0:\n                    factors[i] *= j\n                    break\n\n    result = []\n    for i in range(n // 2 + 1, n, 2):\n        if n % i == 0:\n            result.append(i * i + i)\n            if i in factors:\n                result.append(factors[i])\n            break\n\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = list(range(2, n + 1))\n    powers = list(range(1, n + 1))\n    for factor in factors:\n        for power in powers:\n            if factor * power == n:\n                factors.append(power)\n                break\n    if len(factors) == 0:\n        factors.append(1)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = n / 2\n    while factors > 1:\n        factors = n // 2\n        factors = factors // 2\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    current = 1\n    while current <= n:\n        if current % current == 0:\n            factors.append(current)\n        current *= current\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n, n]\n    elif n % 2 == 0:\n        return factorize(n // 2)\n    else:\n        s = 2\n        l = []\n        while s < n:\n            if n % s == 0:\n                l.append(s)\n            s = s * 2\n        return l", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def factorize_helper(n: int) -> List[int]:\n        return list(fact(n))\n    if n % 2 == 0:\n        # for even n\n        return factorize_helper(n // 2)\n    return [i] * n // 2 + list(factorize_helper(n // 2))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    product = 1\n    while n > 1:\n        product *= n\n        factors.append(product)\n        n = product // product % n\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = [2, 2, 2]\n    if n % 2 == 0:\n        primes.extend(factorial(n // 2))\n\n    # `div` returns `n` divided by the given number `i`. In the end, the `div` value is the number `i`.\n    # Since we always want the least integer `i` that is greater than `n`, we want to find the largest `div`.\n    largest_div = n\n    for i in range(3, largest_div // 2, 2):\n        if i * i + largest_div % i == n:\n            largest_div = i\n\n    factors = []\n    for i in range(largest_div // 2):\n        factors.append(i)\n\n    factors.sort()\n\n    # `factorize(n)` would return a list of factors in the order from smallest to largest.\n    # `i` is the smallest positive integer such that `i * i + n` is divisible by `factor`.\n    # Since the factors are sorted in ascending order, we just need to get the first such `i`.\n    # If it doesn't exist, we just return [].\n    for factor in factors[:-1]:\n        i = n // factor\n        if i * i + n %", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(1)\n            n /= 2\n        else:\n            factors.append(2)\n            n /= 2\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    num = 1\n    while num < n:\n        if num % 2 == 0:\n            factors.append(num)\n            num = num // 2\n        else:\n            factors.append(num)\n            num = num // 2\n\n    for i in range(1, n - 1):\n        if factors[i] * factors[i + 1] < n:\n            factors.append(n - factors[i] * factors[i + 1])\n            factors.append(i)\n            break\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n\n    factor_list = []\n    while n > 1:\n        if n % 2 == 0:\n            if n in factor_list:\n                factor_list.append(n)\n            n //= 2\n        else:\n            factor_list.append(n)\n        n //= 2\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    a, b = 2, 1\n    while b < n:\n        a *= b\n        b += 1\n    return [a, a * b, a * b * a]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    p = 2\n    for i in range(1, n + 1):\n        if i % p == 0:\n            factors.append(p)\n            p *= p\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return [1]\n    else:\n        return list(primes(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    try:\n        factors = list(range(2, int(math.sqrt(n)) + 1))\n        if len(factors) == 1:\n            return factors\n        else:\n            for i, factor in enumerate(factors):\n                if factor * factor == n:\n                    factors[i] *= 2\n                    if len(factors) == i:\n                        return factors\n                    else:\n                        return [(factor / 2) + 1 for _ in factorize(factor)]\n    except ValueError:\n        return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    list_of_factors = [2, 2]\n    if n % 2 == 0:\n        list_of_factors.append(n / 2)\n    factors = n // 2\n    while factors > 1:\n        if factors > 2:\n            list_of_factors.append(factors / 2)\n        factors //= 2\n    list_of_factors.append(n % 2)\n    return list_of_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = [n]\n    for i in range(2, n):\n        if not (n % i):\n            prime_factors += [i, i]\n    prime_factors = list(set(prime_factors))\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    prime_factors = set()\n    for i in range(2, n // 2):\n        if n % i == 0:\n            prime_factors.add(i)\n\n    while True:\n        if len(prime_factors) == 1:\n            factors.append(prime_factors.pop())\n        else:\n            factors.append(i)\n            while True:\n                i += 1\n                if not prime_factors.count(i):\n                    prime_factors.add(i)\n                    break\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    assert n == 1 or n % 2 == 0\n    factors = [1, 1]\n    while n > 1:\n        n /= 2\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors: List[int] = [\n        2,\n        2,\n        2,\n        2,\n        2,\n        5,\n        5,\n        5,\n        7,\n        7,\n        7,\n        7,\n        7,\n    ]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [n / i for i in range(2, int(math.sqrt(n)))]\n    factors = list(set(factors))\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor_list = []\n    if n == 1:\n        factor_list.append(1)\n        return factor_list\n    p = 2\n    while p * p <= n:\n        p += 1\n        if p * p <= n:\n            for i in range(1, p + 1):\n                factor_list.append(i)\n            return factor_list\n        factor_list.append(p)\n    for i in range(2, int(math.sqrt(n))):\n        factor_list.append(i)\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor: List[int] = []\n    if n == 0:\n        return factor\n\n    if n == 1:\n        return [n]\n\n    if n % 2 == 0:\n        factor.append(2)\n        return factor\n\n    if n == 2:\n        return [n]\n\n    p = 2\n    while p < n:\n        if n % p == 0:\n            factor.append(p)\n            return factor\n\n        p += p * p\n\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = []\n    prime_factors.append(2)\n    while n > 1:\n        num = 2\n        while n % num == 0:\n            num *= 2\n        factor = num\n        if n % factor == 0:\n            prime_factors.append(factor)\n        n = n // factor\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Not the fastest way but the easiest\n    divisor = n - 1\n    while divisor:\n        if divisor % 2 == 0:\n            divisor //= 2\n        else:\n            yield divisor\n    while divisor > 1:\n        divisor //= 2\n        yield divisor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n - 1]\n    if n % 2 == 0:\n        return [n / 2, n / 2]\n    else:\n        # since we are factorizing n by n/2 for odd n\n        # we need to return list of factors in the order of 1, 2, 4, 8,... until we reach 2 ^ (n/2)\n        # In case of 3 it would be 1, 2, 3, 4, 8,... until we reach 2 ^ (3/2), and so on\n        # The return list will contain the factors in the same order as they appear in the list\n        # of prime divisors of n.\n        factors = list(set(factorize(n // 2)))\n        return factors + list(set(factorize(n // 4)))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    prime = [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    prime_factors = [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    factors = [prime_factors, ]\n    while factors:\n        factor = factors.pop(0)\n        if n % factor == 0:\n            factors.append(factor)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while True:\n        factors.append(2)\n        if n % factors[-1] == 0:\n            break\n        if len(factors) == 1:\n            break\n        n = n // factors[-1]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Find all primes below or equal to n\n    p = range(2, n - 1)\n\n    # Construct all possible products of these primes\n    factors = [(p * q) for p in p for q in p]\n\n    # Sort the factors\n    factors.sort(key=lambda x: x[1])\n\n    # Use last iteration of the for loop to calculate the factors that aren't listed\n    # in the list of factors yet.\n    for factor in factors:\n        for subfact in factor:\n            if subfact not in factors:\n                factors.append(subfact)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        n = n // 2\n        if n not in factors:\n            factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Factorize into powers of 2\n    if n == 1:\n        return [n]\n    else:\n        prime_power = 2\n        factor_list = list(factors(n))\n        while not factor_list:\n            prime_power *= 2\n            factor_list = list(factors(prime_power))\n        if factor_list:\n            factor_list.sort(key=lambda x: x)\n        return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    f = factorize(n ** 1 / 2)[:-1]\n    f.append(n)\n    return f", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    prime = 1\n    while True:\n        if prime * prime < n:\n            break\n        else:\n            factors.append(prime)\n            prime += 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    divisor = n\n    for factor in range(2, divisor + 1):\n        if divisor % factor == 0:\n            result.append(factor)\n            divisor //= factor\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors: List[int] = []\n\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(n / 2)\n        else:\n            factors.append(n // 2)\n        n = n / 2\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n    if n % 2 == 0:\n        return factorize(n // 2)\n    return list(enumerate(factorial(n)))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n\n    if n % 2 == 0:\n        return [n]\n\n    if n < 2:\n        return []\n\n    factors = []\n\n    for divisor in range(2, n + 1, 2):\n        if n % divisor == 0:\n            if not factors:\n                factors.append(divisor)\n                return factors\n\n            factors.append(divisor)\n            factors.extend(factorize(n // divisor))\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [(a // b) * b for a, b in [(i, j) for i in range(n // a) for j in range(a)]]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    prime_list = list(range(2, n // 2 + 1))\n\n    factor_list = list()\n    for i in range(len(prime_list)):\n        factor_list.append(n % prime_list[i])\n\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [(1, 1)]\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append((n // 2, n // 2))\n        else:\n            n /= 2\n            factors.append((n // 2, n // 2))\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n\n    m = 1\n    factors = []\n    for i in range(2, n):\n        while m <= i:\n            if i % m == 0:\n                factors.append(m)\n                m *= i\n            else:\n                m /= i\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    p = 2\n    result = []\n    while p <= n:\n        if p % 2 == 0:\n            result.append(p)\n            p *= 2\n        elif p % 3 == 0:\n            result.append(p)\n            p /= 2\n        elif p % 5 == 0:\n            result.append(p)\n            p /= 2\n        elif p % 7 == 0:\n            result.append(p)\n            p /= 2\n        else:\n            result.append(p)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [n]\n    while n > 1:\n        factors.append(n // factorize(n // 2))\n        n = n - factors[-1] * factors[-2]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # factorize(-1) -> [-1]\n    if n == -1:\n        return [-1]\n\n    prime_factors = [n]\n    for i in range(2, n // 2):\n        prime_factors += prime_factors[prime_factors.index(i) + 1:]\n\n    factors = []\n    for p in prime_factors:\n        if p > 1:\n            factors.append(p * factors[factors.index(p) + 1:])\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return filter(lambda x: x * n < n, factorize(n // x))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = list()\n    while n > 1:\n        factors.append(n % 1)\n        n = n // 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    factors = []\n    while n > 1:\n        prime = 2\n        while prime <= n:\n            if n % prime == 0:\n                factors.append(prime)\n                n //= prime\n            prime += 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [n]\n    for i in range(2, n ** 1.5):\n        if n % i == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [[p for p in range(2, n) if p % n == 0] for p in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n\n    # Expand factorization for n mod 2\n    result = []\n    for i in range(2, n + 2):\n        result.append(n / i)\n\n    # Factorize n\n    factor_n = factorize(n)\n\n    # Remove factors from factors of n\n    factor_n = [n for n in factor_n if n in factor_n[0]]\n    factor_n.extend(factor_n[1:])\n\n    # Group factors of n into factors of 2 and factors of n/2\n    factor2 = factorize(n // 2)\n    factor_n = [n for n in factor_n if n not in factor2]\n    factor_n.extend([factor2[i - 1] for i in range(1, len(factor2))])\n\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = [1]\n    for i in range(2, n + 1):\n        for j in range(2, i):\n            if n % j == 0:\n                factors.append(j)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = list()\n    prime_factors = list(itertools.combinations(range(2, n + 1), r = n))\n    if len(prime_factors) == 1:\n        factors.append(prime_factors[0])\n    else:\n        for p in prime_factors:\n            factor = p * factorize(p)\n            for i in range(len(factor)):\n                factors.append(factor[i])\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n == 1:\n        return [1]\n\n    p = 2\n    s = [(p, 1)]\n    while p * p <= n:\n        if p % p == 0:\n            s.append((p / p, p))\n        p = p * p\n\n    return s", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = n\n    while True:\n        if factors % 2 == 0:\n            factors /= 2\n        else:\n            break\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    i = 2\n    while n!= 1:\n        while n % i == 0:\n            result.append(i)\n            n /= i\n        i += 1\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factor_list = []\n    prime_list = [2, 3]\n    for i in range(2, n // 2 + 1):\n        if i < n:\n            if n % i == 0:\n                factor_list.append(i)\n            else:\n                continue\n        for j in range(prime_list[i]):\n            if n % j == 0:\n                factor_list.append(j)\n            else:\n                continue\n        prime_list[i] = prime_list[i] + 1\n    prime_list.append(n)\n    for i in range(prime_list[n // 2], n):\n        if n % i == 0:\n            factor_list.append(i)\n        else:\n            continue\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # Main code for factorizing a number\n\n    while True:\n        # Get the prime factors\n        factorization = list(range(2, n + 2))\n\n        # Go through the factorization\n        for i in range(len(factorization)):\n\n            # Check if the number is divisible by that factor\n            if (n % factorization[i]) == 0:\n                break\n\n        # If the number is divisible by some prime factor\n        # print(factorization[i], \" \", n)\n        # break\n\n        # If not divisible, break the loop\n        # print(\"Number not divisible\", n)\n        break\n\n    # Return the list of factors\n    return factorization", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors: List[int] = []\n    for i in range(2, n, 2):\n        if n % i == 0:\n            factors.append(i)\n    factors.sort()\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    f = []\n    for _ in range(n // 10):\n        f += [x for x in range(2, n, 2)]\n    while n:\n        f.append(n)\n        n = n // f[-1]\n    return f", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorization = []\n    n = int(math.ceil(n))\n    for i in range(2, n + 1):\n        if not n % i:\n            factorization.append(i)\n    return factorization", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n < 1:\n        return []\n    factors = [n]\n    while factors:\n        divisor = factors.pop()\n        for divisor in factorize(divisor):\n            if n % divisor == 0:\n                factors.append(divisor)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n//2):\n        factors.append(2)\n        if n % 2 == 0:\n            factors.append(1)\n    factors.append(1)\n    factors.append(2)\n    factors.append(3)\n    factors.append(5)\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    factors.append(n)\n    return factors\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # First factorization with two primes\n    factors = [2, n]\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            break\n\n    # If needed, add more factors\n    if len(factors) < 2:\n        factors.append(n)\n    # Search for prime factor\n    while True:\n        if len(factors) > 1:\n            if n % factors[-1] == 0:\n                break\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n                break\n        if len(factors) == 2:\n            return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        while i * i <= n:\n            factors.append(i)\n            i += 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n <= 1:\n        return []\n\n    num = n\n    factors = []\n    while num > 1:\n        while num > 1:\n            num = num / 2\n            factors.append(num)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(range(2, n // 2 + 1))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    #  if n is composite, return it directly\n    if not (n % 2 == 0):\n        return [n]\n\n    #  if n is prime, return a list of all factors\n    if n == 2:\n        return [2, 2]\n    elif n == 3:\n        return [2, 2, 2]\n\n    #  if n is prime and not prime\n    if (n % 2 == 0) and (n!= 2):\n        return factorize(n / 2)\n\n    #  factorize n into k parts\n    factors = []\n    factor = n\n\n    while factor:\n        if factor > 1:\n            factors.append(factor)\n            factor = factor // 2\n        else:\n            break\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    p = 2\n    f = []\n    for i in range(1, n // p + 1):\n        f.append(p)\n    for i in range(1, n // p + 1):\n        for j in range(i, n):\n            if j % i == 0:\n                f[j] = p\n    return f", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def recurse(n: int) -> List[int]:\n        if n % 2 == 0:\n            return [n]\n        else:\n            if n < 3:\n                return recurse(n / 2)\n            else:\n                return recurse(n / 2) + recurse(n % 2)\n\n    def primes(n: int) -> List[int]:\n        if n < 3:\n            return []\n        else:\n            return list(primes(n / 2)) + list(primes(n % 2))\n\n    return sorted(list(primes(n))) + recurse(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = []\n    while n > 1:\n        if n % 2 == 0:\n            prime_factors.append(2)\n        elif n % 3 == 0:\n            prime_factors.append(3)\n        else:\n            prime_factors.append(n)\n        n //= 2\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def find(n: int) -> List[int]:\n        \"\"\" Return list of factors of given integer.\n        The given integer is divided into individual positive integers that may be factors of n.\n        >>> find(5)\n        [0, 1]\n        \"\"\"\n\n        def factorizer(n: int) -> List[int]:\n            \"\"\" Return list of factors of given integer.\n            n is divided into individual positive integers that may be factors of n.\n            >>> factorizer(5)\n            [0, 1, 2, 4, 8]\n            \"\"\"\n\n            def num(n: int) -> List[int]:\n                \"\"\" Return list of factors of given integer.\n                n is divided into individual positive integers that may be factors of n.\n                >>> num(5)\n                [0, 1, 2, 4, 8]\n                \"\"\"\n\n                def factors(n: int) -> List[int]:\n                    \"\"\" Return list of factors of given integer.\n                    n is divided into individual positive integers that may be factors of n.\n                    >>> factors(5)\n                    [0, 1, 2, 4, 8]\n                    \"\"\"\n\n                    def factors2(n: int) -> List[int]:\n                        \"\"\" Return list of factors of given integer.\n                        n is divided into individual positive integers that may be factors of n.\n                        >>> factors2(5)\n                        [0,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n - 1]\n    else:\n        return factorize(n // 2) + factorize(n - 1)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Start with the prime factors of the product of all the prime factors.\n    result = [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    num_ones = 1\n    for i in range(2, n, 2):\n        factor = i * i\n        if not factor in result:\n            result.append(factor)\n            num_ones += 1\n    # Since n is a multiple of each of the prime factors, the number of factors must be a divisor of n\n    if num_ones % n!= 0:\n        raise ValueError(\"Error: The number of factors must be a divisor of the given integer.\")\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n!= 1:\n        factors.append(n)\n        n = n // 2\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n\n    l = []\n    while n > 1:\n        p = 2\n        while n % p == 0:\n            l.append(p)\n            n //= p\n        if p in l:\n            l.remove(p)\n    return l", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_pieces = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            break\n    for p in range(i, n):\n        if n % p == 0:\n            break\n        elif i < p:\n            prime_pieces.append(i)\n    for p in range(n - i + 1, n + 1):\n        if n % p == 0:\n            break\n        elif i < p:\n            prime_pieces.append(p)\n    for p in prime_pieces:\n        if n % p == 0:\n            break\n    return list(itertools.count(p) for p in prime_pieces)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    factor = 2\n    # Walk through list in ascending order and add every consecutive pair to list\n    while factor < n:\n        # We have just found a prime factor\n        factors.append(factor)\n        factor *= factor\n    # Find smallest factor and start factoring from there\n    # Only consider factors which appear in list\n    smallest = 1\n    while smallest < factor:\n        if smallest not in factors:\n            smallest += 1\n        else:\n            factors.remove(smallest)\n        smallest *= smallest\n    # Sort list\n    factors.sort()\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    n = int(n)\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        factors.append(n / 2)\n        factors.append(n / 2)\n    else:\n        factors.append(n / 2)\n        factors.append(n / 2)\n        factors.append(n / 2)\n\n    for i in range(1, n / 2 + 1):\n        if n % i == 0:\n            factors.append(n / i)\n            factors.append(n / i)\n            factors.append(n / i)\n\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(n / i)\n            factors.append(n / i)\n            factors.append(n / i)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = []\n    num = n\n    while num > 1:\n        num, primes = divmod(num, 2)\n        prime_factors.append(primes)\n    for prime_factor in prime_factors:\n        if prime_factor > 1:\n            prime_factor *= 2\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    p = 2\n    factors: List[int] = [None] * n\n    for i in range(1, n - 1):\n        if p == 2 or n % p == 0:\n            break\n        factors[i] = p\n        p = p * p\n    factors[-1:] = [p] * n / p\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = list()\n\n    # Calculate powers of all primes\n    powers = dict()\n    for p in [2, 3, 5, 7, 11, 13, 17, 19, 23]:\n        powers[p] = 0\n        for i in range(2, p):\n            powers[p] += i\n\n    # Sort factors by powers\n    factors.sort(key=lambda x: x[1], reverse=True)\n\n    # Calculate number of factors of n\n    for i in range(2, n):\n        # Keep track of how many factors appeared already\n        l = 0\n\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Add factor to list of factors\n            l += 1\n\n            # Check if i has already appeared in the list\n            for j in factors:\n                if j[1] == i and j[0] == l:\n                    # Add factor to list of factors\n                    factors.append([j[0], j[1]])\n                    break\n\n            # If i doesn't have appeared yet, create a new factor\n            if l == 0:\n                factors.append((i, 1))\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        n = n // 2\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    factor = 2\n    while factor <= n:\n        if factor <= n / factor:\n            factors.append(factor)\n            factor *= factor\n        else:\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n\n    n = int(n)\n\n    # Get all the prime factors from smallest to largest\n    # Use the result from the function\n    # Completely avoid multiplying the factor that appeared once by itself\n    # e.g. factor(7) = [2, 2]\n    #   factorize(7) = [2, 2, 2]\n    #   factor(7, 2) = [2, 2, 2]\n    #   factor(7, 2, 2) = [2, 2, 2]\n\n    # Divide n by the product of all the prime factors\n    for i in range(2, n // i + 1):\n        # Remove the factor that is only appearing once\n        # e.g. factor(7) = [2, 2]\n        #   factor(7, 2) = [2, 2]\n        #   factor(7, 2, 2) = [2, 2]\n        #   factor(7, 2, 2, 2) = [2, 2, 2]\n        #   factor(7, 2, 2, 2, 2) = [2, 2, 2, 2]\n        #   factor(7, 3) = [2, 3]\n        #   factor(7, 3, 2) = [2,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n!= 1:\n        if n & 1:\n            factors.append(n)\n            n = n / 2\n        else:\n            factors.append(n)\n            n = n * 2\n    for i in range(len(factors) - 1):\n        if factors[i] == 1 and factors[i + 1] == 1:\n            factors[i] = factors[i + 1] = 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if i % i == 0:\n            factors.append(i)\n    factors.sort()\n    factor_list = []\n    i = 1\n    while i < len(factors):\n        # Gather all factors of i together\n        factor_list.append(factors[i - 1])\n        i += 1\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [int(n // i) for i in range(2, int(n) // 2 + 1)]\n    # start the first element at index 0\n    # and end the last element at index n - 1\n    return [factors[i - 1] * j + factors[i] * (n - i - j) for i in range(0, len(factors)) for j in range(0, len(factors[i]))]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n == 1:\n        return [n, n]\n    else:\n        # list of primes up to n-1\n        primes = []\n        for i in range(2, n - 1):\n            if n % i == 0:\n                primes.append(i)\n\n        # list of factors of n (all multiples of primes in `primes`)\n        factors = []\n        for i in range(2, n - 1):\n            if n % i == 0:\n                for prime in primes:\n                    if i * prime < n:\n                        factors.append(i * prime)\n\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        factors = []\n        for i in range(2, n + 1):\n            while n // i == 1:\n                factors.append(i)\n                n //= i\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [\n        prime(factor) for prime(factor) in factorize(n / factor)\n        for factor in factorize(n / prime(factor))\n    ]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n:\n        if n % 2:\n            factors.append(2)\n            n //= 2\n        else:\n            factors.append(1)\n            n //= 1\n        if n < 2:\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Prime number list\n    p = range(2, n + 1)\n    # Lists of all the factors of each prime\n    l = []\n    for p in p:\n        l.append([p])\n    # Count number of factors for each prime\n    counter = 0\n    for p in p:\n        for i, factor in enumerate(l):\n            if p == factor[0]:\n                l[i].append(counter)\n                counter += 1\n    return list(l)"]]