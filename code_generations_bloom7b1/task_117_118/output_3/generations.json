[["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Init\n    list_of_words = []\n    index = 0\n    while index < len(s):\n        if s[index] in consonants:\n            list_of_words.append(s[index])\n            index += 1\n        else:\n            index += 1\n    # Return\n    return list_of_words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        if len(word) < n:\n            continue\n        if len(word) == n:\n            result.append(word)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # TODO: implement a strategy to determine how to solve this problem\n    # https://codeforces.com/contest/00731/solution\n    res = []\n    for char in s:\n        if char.isdigit():\n            res.append(char)\n        elif char.isalpha() or char.isspace():\n            for i in range(n):\n                res.append(char)\n    return res", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == '':\n        return []\n    consonants = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    s = s.lower()\n    if s == '':\n        return []\n    words = []\n    for word in re.split('[\\s,]+', s):\n        if len(word) < n:\n            words.append(word)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    l=[]\n    for x in s:\n        if x==\"\": continue\n        if x.isdigit() or x==\" \" or x==\" \": continue\n        if x.isalpha():\n            if x.isupper():\n                if not l: l.append(x)\n                continue\n            if x in l: continue\n            if len(l)>0:\n                l.append(x)\n                continue\n            l.append(x)\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.lower()\n    list_words = []\n    for word in word_tokenize(s):\n        # for each word in the string\n        if len(word) == n:\n            list_words.append(word)\n    return list_words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    word_list = []\n    for i in range(len(s)):\n        if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n            if len(word_list) == n:\n                word_list.append(s[i])\n            else:\n                word_list.append(s[i])\n                word_list.append(s[i])\n    return word_list", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    l = []\n    for c in s:\n        if c in string.printable:\n            if c in string.ascii_letters:\n                l.append(c)\n    if s == '':\n        return []\n    else:\n        return l\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def conv(c):\n        if c in ['b', 'd', 'f', 'g', 'h', 'j', 'k','m', 'n', 'o', 'p', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n            return c\n        else:\n            return''\n    def remove_all(word):\n        return word.replace(conv(word[0]), '')\n    words = remove_all(s)\n    words = list(filter(lambda x: len(x) == n, words))\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # I have written a recursive function that can solve the problem. The \n    # words in the string are obtained recursively in order. The returned \n    # list has a list of word's indices that store the order in which \n    # words are obtained in the string. The last word in the list stores the \n    # total number of consonant letters in the string s.\n    def select_words(s, n):\n        if n == 0:\n            return []\n\n        list = []\n        list.append(0)\n        i = 0\n        while i < len(s):\n            # if the length of the current word is less than n then add it to the list.\n            if len(s[i]) < n:\n                list.append(i)\n            # if the length of the current word is greater than n then remove it from the list.\n            elif len(s[i]) > n:\n                list.pop(list.index(i))\n            # if the length of the current word is exactly n then add it to the list.\n            else:\n                list.append(i)\n            # increment the counter.\n            i += 1\n        return list\n\n    # I have also written a function that checks if the given number is \n    # divisible by a given number. It returns True if the given number is", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    lst = []\n    for i in range(len(s)):\n        if s[i] not in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            lst.append(s[i])\n    if n > len(lst):\n        return []\n    return lst[:n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # initialize word list with empty list\n    word_list = []\n\n    # loop through string\n    for char in s:\n        # test character\n        if char not in (\" \", \"(\", \")\", \"-\", \".\", \"?\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\", \"(\", \")\", \"~\", \"{\", \"}\", \":\", \"|\", \"/\", \"\\\\\", \"=\"):\n            # the character is a consonant so add to word list\n            word_list.append(char)\n\n    # return word list\n    return word_list", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    from collections import defaultdict\n    cdict = defaultdict(list)\n    for word in s:\n        cdict[word.lower()].append(word)\n\n    return [i for k, v in cdict.items() for i in select(v, n)]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return filter(lambda x: x.count(c) == n for c in s.replace(\" \", \"\").lower(), s.split())", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # The following line of code reads an input string s and checks if it is \n    # empty. If it is empty then the program should print an error message and \n    # exit.\n    if s == \"\":\n        print \"Error: String cannot be empty.\"\n        exit()\n    # The following line of code creates an array a with length of n. It is used \n    # to store the indices of consonants (i.e., letters) in the input string \n    # s. For example, if n=3 then a[0] would be the index of the first consonant \n    # in the string s.\n    a = []\n    for i in range(0, n):\n        a.append(0)\n    # The following line of code goes through the input string s and adds consonants \n    # to the array a.\n    for i in range(0, len(s)):\n        if s[i].isupper():\n            a[i] = 0\n        elif s[i].islower():\n            a[i] = 0\n        else:\n            a[i] = 1\n    # The following line of code displays the index of each consonant in the \n    # array a, i.e., the word corresponding to the array a[i].\n    for i in range(0, len(a", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return set([i for i in s if i.isupper()]) - set([\" \", \"\"])", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def words_helper(s):\n        \"\"\"Helper function that returns a list of all words in the string s, in order \n        they appear in the string s. If s is empty then an empty list is returned.\n        \"\"\"\n        if len(s) == 0:\n            return []\n        if len(s) % 2 == 1:\n            return s.split(\" \")[:-1]\n        else:\n            return s.split(\" \")[1:]\n\n    words = []\n    for i in range(n):\n        words.append(words_helper(s))\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) < n:\n        raise ValueError(\"input string too short\")\n    return [s[i:i + n] for i in range(0, len(s), n)]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    c = 0\n    result = []\n    while c < len(s):\n        if s[c] in '123456789':\n            c += 1\n        else:\n            if s[c] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n                result.append(s[c])\n                c += 1\n            else:\n                c += 1\n    result.reverse()\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    output = []\n    for word in s:\n        if word.count('a') == n:\n            output.append(word)\n    return output", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def is_consonant(w):\n        for letter in w:\n            if letter not in \"0123456789\":\n                return False\n        return True\n    \n    ret = []\n    for i in range(len(s)):\n        if s[i] =='':\n            continue\n        for j in range(n):\n            while len(ret) < i + j:\n                ret.append(\"\")\n            while not is_consonant(s[i + j]):\n                ret[len(ret)-1] += s[i + j]\n                if len(ret) - 1 == i + j:\n                    break\n            if len(ret) > i + j:\n                break\n    return ret", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) > n:\n        return []\n\n    res = []\n    for i in range(n):\n        if s[i] in [\"c\", \"d\", \"g\", \"m\", \"n\", \"p\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"]:\n            res.append(s[i])\n\n    return res\n\nselect_words(\"Hello world\", 4)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def select_consonants(s):\n        l = []\n        i = 0\n        while i < len(s):\n            c = s[i]\n            if c in ('b', 'c', 'f', 'g', 'h','m', 'n', 'p', 'r','s', 't', 'v'):\n                l.append(s[i])\n                i += 1\n            else:\n                i += 1\n        return l\n    l = []\n    if len(s) > 0:\n        l = s.split()\n    elif len(s) == 0:\n        l = []\n    else:\n        l = []\n    while l:\n        l = select_consonants(l)\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = set()\n    for w in re.findall('\\S+', s):\n        if len(w) == n:\n            words.add(w)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    n = int(n)\n    s = s.lower()\n    words = []\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                if c =='' and s!= '':\n                    words.append(c)\n                else:\n                    words.append(c.lower())\n            else:\n                words.append(c)\n    if len(words) == 0:\n        return []\n    i = 0\n    if len(words) <= n:\n        return words\n    while i < len(words):\n        if i <= n:\n            break\n        i += 1\n    return words[:n]\n\nselect_words(\"Hello world\", 4)\nselect_words(\"Uncle sam\", 3)\nselect_words(\"Mary had a little lamb\", 4)\nselect_words(\"Uncle sam\", 3)\nselect_words(\"foobar\", 1)\nselect_words(\"foobar\", 4)\nselect_words(\"foobar\", 3)\nselect_words(\"foobar\", 2)\nselect_words(\"foobar\", 2)\nselect_words(\"foobar\", 3)\nselect_words(\"foobar\", 2)\nselect_words(\"fo", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    res = []\n    if len(s) <= 0:\n        return res\n    if len(s) == 1:\n        return []\n    ws = s.split()\n    # normalise the string\n    for i in range(len(ws)):\n        ws[i] = ws[i].lower()\n    # loop until the condition below is met\n    n_ws = len(ws)\n    if n_ws >= n:\n        # check if this condition is met\n        for i in range(n_ws):\n            if ws[i].isalpha() and ws[i] not in \"abcdefghijklmnopqrstuvwxyz\":\n                break\n        else:\n            # check if the condition above is met\n            for i in range(n - n_ws):\n                if ws[i].isalpha() and ws[i] not in \"abcdefghijklmnopqrstuvwxyz\":\n                    break\n            else:\n                for i in range(n_ws):\n                    if ws[i] not in \"abcdefghijklmnopqrstuvwxyz\":\n                        break\n        if i >= n_ws and i < n:\n            # there is a word starting at the n_ws index\n            res.append(ws[i : i + n_ws])", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    # Get all the words in s\n    allwords = []\n    for word in s.split():\n        if len(word) == 0:\n            continue\n        for char in word:\n            if char in r\"[a-zA-z]+\":\n                allwords.append(word)\n        if len(allwords) > n:\n            return allwords[:n]\n    return []", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    consonants = set(\"bcdfghjklmnpqrstvwxz\")\n    s = re.sub(\" \", \"\", s)\n    for i, word in enumerate(s.split()):\n        if set(word) <= consonants:\n            words.append(word)\n            continue\n        if i < n:\n            break\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return [w for w in s.split() if int(w) >= n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s:\n        if word.find(' ')!= -1:\n            result.append(word)\n    return result\n\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for char in s:\n        if char.isupper() or char.islower() or char.isdigit() or char =='':\n            continue\n        if char in consonants:\n            result.append(char)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    if s == '':\n        return []\n    else:\n        l = s.lower()\n        for w in l.split():\n            n = len(w)\n            if n < n:\n                continue\n            if n == n:\n                words.append(w)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    l = []\n    for i in s:\n        for j in range(0, n):\n            if i.isalpha():\n                if i.isupper():\n                    continue\n                if i.isdigit():\n                    continue\n                l.append(i)\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return list(set(s.split()) - set(\" \"))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def is_consonant(c):\n        return c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789\"\n    if len(s) == 0:\n        return []\n    if n == 0:\n        return []\n    return [w for w in s.split() if n in is_consonant(w)]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    else:\n        letters = set(\"abcdefghijklmnopqrstuvwxyz\")\n        consonants = set(\"bcdfghiklmnopqrstuvwxyz\")\n        consonant_count = len(consonants)\n        # start from the middle of the string\n        middle = s.find(\" \")\n        # if there is a space in the middle, we need to move the middle forward\n        if middle!= -1:\n            middle += 1\n        # we will need a while loop here\n        while middle!= -1:\n            # if we have a space before the consonant we are searching for\n            if middle > 0 and s[middle - 1] in consonants:\n                # we need to move the middle position forward and look for the\n                # consonants\n                middle += 1\n            # we look for the consonants in the middle of the string\n            for c in consonants:\n                # if the c in the middle of the string, we need to move the middle position forward\n                if middle > 0 and s[middle - 1] == c:\n                    # if we are not at the end of the string and if the number of consonants is not even\n                    if middle < len(", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    output = []\n    # the number of consonants\n    n_consonants = n\n    # a list to hold a copy of the original string\n    orig = s.split(' ')\n    # the length of the string\n    orig_len = len(orig)\n    # the index of the current word\n    word = 0\n    # the current index of the consonants\n    con = 0\n    # the current index of the word containing consonants\n    con_start = 0\n    # the list of words returned from the function\n    word_list = []\n    # the list of the possible indexes of the first consonants\n    con_index = [0 for i in range(0, orig_len - 1, -1)]\n    # the list of the possible indexes of the last consonants\n    con_index_end = [0 for i in range(0, orig_len - 1, -1)]\n    # loop through the original string\n    for i in range(0, orig_len - 1, -1):\n        # get the index of the consonants\n        con = 0\n        # if the current character is a consonant\n        if orig[i] in 'bcdfghjklmnpqrstvwxyz':\n            # increment the index of the consonants\n            con += 1\n        # if", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for i in range(0, len(s)):\n        if s[i] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            if s[i:i+n] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n                result.append(s[i])\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    print(\"Starting solve\")\n    a = []\n    for i in range(0, len(s)):\n        b = []\n        for j in range(0, n):\n            if s[i] == s[j]:\n                b.append(s[i])\n            else:\n                break\n        if b == []:\n            a.append(s[i])\n        else:\n            a.append(b)\n    print(\"Starting output\")\n    print(a)\n    return a\n\nA:\n\nYou can check if the string is empty. In this case the following should work:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    position = 0\n    while position < len(s):\n        if s[position].isalpha():\n            words.append(s[position])\n            position += 1\n        else:\n            break\n    while position < n:\n        if s[position].isalpha():\n            words.append(s[position])\n            position += 1\n        else:\n            break\n    while position < len(s):\n        if s[position].isalpha():\n            words.append(s[position])\n            position += 1\n        else:\n            break\n    while position < len(s):\n        if s[position].isalpha():\n            words.append(s[position])\n            position += 1\n        else:\n            break\n    while position < len(s):\n        if s[position].isalpha():\n            words.append(s[position])\n            position += 1\n        else:\n            break\n    while position < len(s):\n        if s[position].isalpha():\n            words.append(s[position])\n            position += 1\n        else:\n            break\n    while position < len(s):\n        if s[position].isalpha():\n            words.append(s[position])\n            position += 1\n        else:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def _select_words(s, n):\n        if len(s) <= 0:\n            return []\n        else:\n            return filter(lambda x: len(x.split()) == n, s.split())\n    return _select_words(s, n)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    length = len(s)\n    words = []\n    for char in s:\n        if char.isalpha() and not char.isspace():\n            if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n                words.append(char)\n    return words[:n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Not using collections.Counter() because it doesn't support natural numbers.\n    # List all words that have exactly n consonants.\n    l = [ w for w in s.split(\" \") if ('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k','m', 'n', 'p', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z') in set(w) for w in w.split(\" \")]\n    # Join all word lists into a single list\n    r = [list(map(lambda x: \" \".join(x), l)) for l in l]\n    return r\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    conts_list = ['']\n    conts_list.extend(s[i:i+n] for i in range(0, len(s), n))\n    return conts_list", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for c in s:\n        if c.isalpha() or c==' ':\n            if c.isupper():\n                if c in words and len(words) > n:\n                    words.remove(c)\n            elif c in words and len(words) == n:\n                words.remove(c)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    lst = []\n    for char in s:\n        if char.isupper() or char.islower():\n            lst.append(char)\n    lst.sort()\n    for i in range(len(lst)):\n        if len(lst[i]) == n:\n            lst.append(lst[i])\n    return lst\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.lower()\n    res = []\n    for i in range(len(s)):\n        if s[i].isdigit() or s[i] in 'abcdefghijklmnopqrstuvwxyz': continue\n        res.append(s[i])\n    if not res:\n        return res\n    result = []\n    for word in res:\n        result.extend(filter(lambda x: len(word) == n, select_words(word, n-1)))\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    return list(set(s.split()) & set(['c', 'c', 'c','s','s','s','s','','']))\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    return [w for w in s.split() if len(set(w)) == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(0,len(s)):\n        if s[i].isalpha() and s[i].isdigit():\n            if len(words) < n:\n                words.append(s[i])\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    all_words = s.split()\n    consonants = set([''.join(c) for c in all_words if c.isalpha()])\n    return [w for w in all_words if c in consonants for c in w]</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) <= 1:\n        return []\n    words = []\n    i = 0\n    while i < len(s) and i < n:\n        if s[i] in [' ', '\\t']:\n            words.append(s[i])\n        i += 1\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s.strip() == '':\n        return []\n    l = list(s.lower())\n    l.remove('')\n    if len(l) == 0:\n        return []\n    # if all characters are consonants, return the word\n    m = len(l) - 1\n    c = 0\n    l.sort()\n    while c < m:\n        c += 1\n        l.remove(l.pop())\n    i = 0\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def split_into_words(s):\n        word_list = []\n        words = re.split('[\\s]+', s)\n        for word in words:\n            if len(word) >= n:\n                word_list.append(word)\n        return word_list\n    return split_into_words(s)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    consonants = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"aaaaaeeeioooouuuuyyz\"\n    n_consonants = len(consonants)\n    vowels_n_consonants = len(vowels) * n_consonants\n    words = []\n    n_cons = 0\n    current_word = \"\"\n    for c in s:\n        if c in consonants:\n            current_word += c\n            n_cons += 1\n        elif c in vowels:\n            current_word += c\n            if n_cons == n_consonants:\n                words.append(current_word)\n                n_cons = 0\n                current_word = \"\"\n    if n_cons:\n        words.append(current_word)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for char in s:\n        if char.isalpha() and char!= \" \":\n            if char in words and char not in words[n-1]:\n                words.append(char)\n            elif char not in words and char not in words[n-1]:\n                words.append(char)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def find_cons(s):\n        \"\"\"Return a list of words from string s that contain at least n consonants.\"\"\"\n        s = re.sub(\"[^a-zA-Z]\", \"\", s)\n        s = re.sub(\"(.)\\1+\", r\"\\1 \", s)\n        words = s.split()\n        result = []\n        for word in words:\n            if len(word.split()) >= n:\n                result.append(word)\n        return result\n\n    if len(s) == 0:\n        return []\n    return find_cons(s)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    n = int(n)\n    s = s.replace(' ', '')\n    l = []\n    if len(s) <= 1:\n        return l\n    for i in range(len(s)):\n        if s[i] in consonants:\n            l.append(s[i])\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    #TODO: code\n    return []", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    l = []\n    last_s = \"\"\n    while len(s) > 0:\n        if len(s) % 2 == 0:\n            if len(s) > n:\n                if last_s!= \" \":\n                    l.append(last_s)\n                l.append(s)\n                l.append(last_s)\n            else:\n                l.append(s)\n                last_s = \"\"\n        else:\n            if len(s) > n:\n                l.append(s)\n            l.append(last_s)\n        s = s[-len(last_s):]\n    return l</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for i in xrange(len(s)):\n        c = s[i]\n        if c in string.letters:\n            if c in string.whitespace:\n                result.append(c)\n            elif n == 0 or i == n:\n                result.append(c)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    if s.isdigit():\n        n = int(n)\n        if n > 0:\n            result.extend(list(filter(lambda x: x.isdigit(), s)))\n    elif len(s) > 0 and s.isalpha():\n        c = 0\n        while c < len(s):\n            if s[c] =='':\n                c += 1\n            else:\n                break\n            result.append(s[c:])\n            c += 1\n    elif len(s) > 0 and s.isdigit():\n        c = 0\n        while c < len(s):\n            if s[c] =='':\n                c += 1\n            else:\n                break\n            result.append(s[c:])\n            c += 1\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if n == 0:\n        return []\n    if len(s) == 0:\n        return []\n\n    def get_letters(s):\n        return s.lower().split()\n\n    l = []\n    for i in range(n):\n        l.append(get_letters(s[len(l):]))\n\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    input = s.lower()\n    output = []\n    for word in input.split():\n        if word.count(' ') == 0:\n            continue\n        if word.count(' ') >= n:\n            output.append(word)\n    return output", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == \"\" or not isinstance(s, str):\n        return []\n    return [w for w in s.split() if len(w.split()) == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def is_letter(ch):\n        if ord(ch) < ord(\"a\") or ord(ch) > ord(\"z\"):\n            return False\n        return True\n\n    def is_word(ch):\n        if ord(ch) == ord(\" \"):\n            return False\n        return True\n\n    words = []\n    for i in range(len(s)):\n        if s[i]!= \" \":\n            if is_letter(s[i]):\n                words.append(s[i])\n    if len(words) == 0:\n        words.append(\"\")\n    else:\n        words.sort()\n        words.reverse()\n    return words[:n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] not in (\" \", \"(\", \")\"):\n            words.append(s[i])\n    for i in range(len(s)):\n        if s[i] not in (\" \", \"(\", \")\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"):\n            words.append(s[i])\n    for i in range(len(s)):\n        if s[i] not in (\" \", \"(\", \")\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"):\n            words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == '':\n        return []\n    c = []\n    i = 0\n    j = 0\n    for c in s:\n        if c.isdigit():\n            i = i + 1\n        elif c.isalpha():\n            if i!= 0:\n                c = c +''\n            j = j + 1\n        elif c.isalnum():\n            c = c +''\n        else:\n            break\n    c =''.join(c[i:j])\n    c = c.rstrip()\n    c = c.lower()\n    return c.split()", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    res = []\n    while s and s[-1] =='':\n        res.append(s[-1])\n        s = s[:-1]\n    res.append(s)\n    while s and s[-1] =='':\n        res.append(s[-1])\n        s = s[:-1]\n    res.append(s)\n    while s and s[-1] =='':\n        res.append(s[-1])\n        s = s[:-1]\n    res.append(s)\n    while s and s[-1] =='':\n        res.append(s[-1])\n        s = s[:-1]\n    res.append(s)\n    while s and s[-1] =='':\n        res.append(s[-1])\n        s = s[:-1]\n    res.append(s)\n    while s and s[-1] =='':\n        res.append(s[-1])\n        s = s[:-1]\n    res.append(s)\n    while s and s[-1] =='':\n        res.append(s[-1])\n        s = s[:-1]\n    res.append(s)\n    while s and s[-1] =='':\n        res.append(s[-1])\n        s = s[:-1]\n    res.append(s)\n    while s and s[-1] =='':\n        res.append(s[-1])\n        s = s[:-1]\n    res.append(s", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # TODO: Implement this function\n    return []", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    return set(s.split()) & set([w.lower() for w in set(s.split())]) - \\\n        set([w.lower() for w in set(s.split()) if w[0] in'\\t'])", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    if s == \"\":\n        return []\n    num_consonants = 0\n    num_spaces = 0\n    word_list = []\n    # get the number of consonants and the number of spaces in the string\n    for char in s:\n        if char.isupper():\n            num_spaces += 1\n        elif char.isdigit():\n            num_consonants += 1\n    # print(\"num_consonants: {}, num_spaces: {}\".format(num_consonants, num_spaces))\n    # count the number of consonants and spaces in the string and return the words that \n    #  contain that many consonants and spaces\n    while num_consonants > 0 and num_spaces > 0:\n        word_list.append(s[0:num_consonants])\n        num_consonants -= 1\n        num_spaces -= 1\n    # if there are remaining spaces then return the remaining words\n    if num_spaces > 0:\n        word_list.append(s[num_spaces:])\n    return word_list", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.lower()\n    if not s: return []\n    x = list()\n    for i in range(0,len(s)-n+1):\n        if s[i:i+n] in x and x!= []: break\n        x.append(s[i])\n    return x", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = s.split()\n    if len(words) == 0:\n        return []\n    elif len(words) < n:\n        return []\n    else:\n        result = []\n        count = 0\n        for word in words:\n            if word.count(' ') == 0:\n                if word.count(' ') == 0:\n                    if word.count(' ') == 0:\n                        if word.count(' ') == 0:\n                            if word.count(' ') == 0:\n                                result.append(word)\n                        else:\n                            result.append(word)\n                    else:\n                        result.append(word)\n                else:\n                    result.append(word)\n            else:\n                result.append(word)\n                count += 1\n                if count == n:\n                    break\n        return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def select_words_c(s, n):\n        \"\"\"Returns a list of all words from string s that contain exactly n consonants\n        \"\"\"\n        if len(s) == 0:\n            return []\n        lst = []\n        for w in s:\n            if len(w) == 0:\n                continue\n            if w.isalpha():\n                for c in w:\n                    if c.isupper():\n                        lst.append(c)\n        return lst\n    lst = []\n    for i in xrange(len(s)):\n        if s[i] in [\"C\", \"Q\", \"K\", \"J\", \"W\", \"N\", \"M\", \"F\", \"R\", \"T\", \"P\", \"Y\"]:\n            continue\n        lst.append(s[i])\n    return select_words_c(s, n)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def extract_consonants(string):\n        #extract the consonants\n        consonants = []\n        for c in string:\n            if c in consonants:\n                pass\n            elif c =='':\n                pass\n            else:\n                consonants.append(c)\n        return consonants\n    word_list = list(filter(lambda x: x.isalnum(), string.split()))\n    #return all words with at least 1 consonant in the word\n    return list(filter(lambda x: len(x) >= n, filter(lambda x: x.isalnum(), word_list)))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    wordlist = []\n    for word in s:\n        if word.isupper():\n            continue\n        consonants = word.find(\"bcdfghjklmnpqrstvwxz \")\n        if consonants == -1:\n            continue\n        wordlist.append(word[consonants:])\n    return wordlist", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.lower()\n    l = []\n    c = \"\"\n    i = 0\n    j = 0\n    while j < len(s):\n        if s[j] in string.letters:\n            i = i + 1\n            if i == n:\n                l.append(s[i:j])\n                j = j + 1\n        else:\n            j = j + 1\n\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for word in s.split():\n        if len(word) > 0:\n            if all(char in consonants for char in word):\n                words.append(word)\n    if len(words) == 0:\n        return words\n    if len(words) == 1:\n        return words[0]\n    return words[:n+1]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for c in s:\n        if c.isalpha():\n            for word in words:\n                if word.count(c) == len(word):\n                    words.remove(word)\n            if not words:\n                words.append(c)\n    return words\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    n_set = set(s)\n    new_n_set = set([])\n    for letter in range(0, len(s)):\n        if letter in n_set:\n            new_n_set.add(s.replace(letter, \"\"))\n    result = []\n    for word in s.split():\n        if word in new_n_set:\n            result.append(word)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    l = []\n    while len(l) < n:\n        c = s[0]\n        s = s[1:]\n        l.append(c)\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            continue\n        if len(s) == 1:\n            s = s[1:]\n        s = s[0]\n        c = s[0]\n        s = s[1:]\n        l.append(c)\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            continue\n        if len(s) == 1:\n            s = s[1:]\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # finding the words that contain at least one consonant\n    words = list()\n    count = 0\n    for c in s:\n        if c in [\"c\", \"p\", \"b\", \"m\", \"f\", \"t\", \"d\", \"n\", \"g\", \"v\", \"k\", \"l\", \"j\", \"h\", \"w\"]:\n            words.append(s[count:])\n            count += 1\n    # removing the spaces\n    words = filter(lambda w: w!= \"\", words)\n    # removing the vowels\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \" \", \"e\", \"i\", \"o\", \"u\"]\n    words = filter(lambda w: word not in vowels, words)\n    # removing the punctuation\n    words = filter(lambda w: w!= \".\", words)\n    # removing the other consonants\n    words = filter(lambda w: c not in [\"c\", \"p\", \"b\", \"m\", \"f\", \"t\", \"d\", \"n\", \"g\", \"v\", \"k\", \"l\", \"j\", \"h\", \"w\"], words)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for i in range(0, len(s)):\n        if s[i].isalpha():\n            c = s[i]\n            if c.isalpha() and c.isdigit():\n                result.append(s[i])\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    res = []\n    for i in range(0, len(s)):\n        if(s[i] in string.printable):\n            if(s[i] in string.digits):\n                res.append(s[i])\n    return res", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == '':\n        return []\n    words = list()\n    for i in range(0, len(s)):\n        if s[i] in (' ', '\\t', '\\n', '\\r'):\n            continue\n        if s[i] not in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n            continue\n        if s[i] not in ('c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n            continue\n        c = s[i]\n        if c in (' ', '\\t', '\\n', '\\r'):", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    # Find all words in the string\n    words = s.split()\n    # Set up a temporary list\n    result = []\n    # Count the number of consonants in each word\n    for word in words:\n        count = 0\n        # Go through each letter of the word and count the number of consonants\n        for letter in word:\n            if letter in consonants:\n                count += 1\n        # Count the number of consonants in the word\n        if count == n:\n            # Insert the word into the temporary list\n            result.append(word)\n    return result\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    n = int(n)\n    l = []\n    for i in range(0, len(s)):\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            c = s[i]\n            if c.isupper():\n                c = c.lower()\n            if c in 'abcdefghijklmnopqrstuvwxyz':\n                if len(c) < n:\n                    l.append(s[i])\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    #Create a new empty list to hold the words\n    res = []\n    #If the string is empty then return an empty list\n    if len(s) == 0:\n        return res\n    #Get the length of the string\n    l = len(s)\n    #Loop through all letters and spaces in the string\n    for i in range(l):\n        #If the character is a letter or space then add it to the words list\n        if s[i] == chr(97) or s[i] == chr(32):\n            res.append(s[i])\n    #If the string is not empty then return the list of words\n    else:\n        return res", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    m = n // 2\n    l = 0\n    r = s.find(\" \")\n    while r!= -1:\n        while r >= 0 and m > 0:\n            w = s[r : r + m]\n            l = l + 1\n            if w not in words:\n                l = l - 1\n                break\n            m = m - 1\n        r = r + 1\n    if l == 0:\n        return []\n    l = l - 1\n    s = s[:l] + s[l : r] + s[l + 1 : r + m]\n    return s.split(\" \")", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return [word for word in s.split() if word.count(c) == n for c in \"abcdefghijklmnopqrstuvwxyz\"]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    l = []\n    i = 0\n    while i < len(s):\n        if s[i] not in \"0123456789\":\n            if i % n == 0 and len(l) > 0:\n                l.append(s[i:i] + s[i])\n            i += 1\n        else:\n            if i % n == 0 and len(l) > 0:\n                l.append(s[i])\n            i += 1\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def find_word(s, c):\n        for i in range(len(s)):\n            if s[i] == c and i == 0 or s[i - 1] == c and i == 1 or s[i] == c and i == len(s) - 1:\n                yield s[i:]\n    return list(filter(find_word, s, c))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    current_letter = ''\n    max_length = len(s)\n    for c in s:\n        if c not in ('a','b','c','d','e','f','g','h','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'):\n            if current_letter!= '' and current_letter not in ('0', '1'):\n                words.append(current_letter)\n                current_letter = ''\n            else:\n                current_letter += c\n        else:\n            if current_letter == '' or current_letter in ('0', '1'):\n                words.append(current_letter)\n                current_letter = ''\n    if current_letter!= '' and current_letter not in ('0', '1'):\n        words.append(current_letter)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    list = []\n    for i in range(0, len(s), n):\n        if s[i:i+n].isupper():\n            list.append(s[i:i+n])\n        else:\n            list.append(s[i:i+n].lower())\n    return list", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    ret = []\n    i = 0\n    while i < len(s) and i < n:\n        c = s[i]\n        if c in [' ','\\n']:\n            i += 1\n        elif c in ['0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7',", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] not in string.letters + string.whitespace:\n            words.append(s[i:])\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    n = int(n)\n    # If the string is empty then return an empty list\n    if s == '':\n        return []\n\n    # If the string has only letters and spaces return an empty list\n    if all(char in '1234567890abcdefghijklmnopqrstuvwxyz' for char in s):\n        return []\n\n    # Create an array of words that contain only consonants\n    consonants = [ch for ch in s if ch in 'abcdefghijklmnopqrstuvwxyz']\n    consonants.sort()\n\n    # Iterate through the array and return a list of words that contain\n    # exactly n consonants\n    words = []\n    for c in consonants:\n        for i in range(1, n + 1):\n            if c in consonants[i - 1]:\n                words.append(consonants[i - 1])\n\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return map(lambda w: (w if w.isalpha() else '').replace(' ', '').split(''), s.split())", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # your code here\n\n    return s.split()", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    word = []\n    while word!= [] and len(word) < n:\n        last_char = word[-1]\n        if last_char in consonants:\n            if last_char in word:\n                result.append(word)\n                word = []\n        else:\n            word.append(last_char)\n    if len(word) == n:\n        result.append(word)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    print(\"Enter the word count you would like:\")\n    word_count = int(input())\n    list = []\n    for i in range(word_count):\n        list.append(s.split()[i])\n    list = sorted(list, key=lambda x: x.count(c) for c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.-')\n    return list", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Get all the words in the string s\n    words = s.split()\n    # Now we are going to build a list of words that contain n consonants,\n    # in order these words appear in the string s\n    l = []\n    n = n - 1\n    for i in range(len(words)):\n        w = words[i]\n        # if the current word contains exactly n consonants\n        if w.count(' ') == n:\n            # add the current word to the list\n            l.append(w)\n    # return the list\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def wordlist(s):\n        return map(lambda x: x.lower(), filter(lambda x: x in string.letters, s.split()))\n    \n    wordlist(s)[:n]\n    return wordlist(s)[:n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    from nltk.corpus import stopwords\n    s = s.lower()\n    words = list(s)\n    words = filter(lambda w: len(w) == len(w.lower()), words)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) < 2: return []\n    l = []\n    for i in range(n):\n        l.append(s[i:i+n])\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return [word for word in s.split() if len(word) == n and all(x in c for x in word)]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(n):\n        if s[i] == '':\n            continue\n        if s[i] in string.printable:\n            words.append(s[i])\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # Determine all the words in s\n    words = set(s.split())\n    # If the string is empty, return an empty list\n    if not words:\n        return []\n    # We need a list for the words with exactly n consonants\n    cons = [w for w in words if w.count('a') == n]\n    # Return all words in s that contain exactly n consonants\n    return sorted(cons)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    elif len(s) < 3:\n        return []\n    else:\n        return [s[ch] for ch in s[2:]]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    output = []\n    def word_contain(w, n):\n        if len(w) <= n:\n            return True\n        for char in w:\n            if char in string.ascii_letters:\n                return False\n        return True\n    for word in s.split():\n        if word_contain(word, n):\n            output.append(word)\n    return output", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for i in xrange(0, len(s)):\n        if s[i]!='':\n            if i + n > len(s):\n                break\n            elif s[i + n] =='':\n                continue\n            elif s[i + n] not in consonants:\n                continue\n            else:\n                result.append(s[i])\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0: return []\n    word = \"\"\n    for i in range(n):\n        word = word + s.index(c, 0)[1]\n    return word.split(\"\")", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.lower()\n\n    # Break the input string into an array of chars\n    chars = s.split()\n    words = []\n\n    # For each char in the array of chars\n    for c in chars:\n        # For each position in the array of chars, starting with the first position \n        # we will loop through all characters in the array of chars with the same\n        # value for c\n        for i in range(1, len(chars)):\n            # Check if the current char is a consonant and break if so\n            if c in consonants:\n                break\n            else:\n                # Check if the current char is a vowel and break if so\n                if c in vowels:\n                    break\n                else:\n                    # Add the current char to the array of words and continue\n                    words.append(chars[i])\n\n    # Return the array of words\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)) if s[i:i+n] in consonants]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    i = 0\n    while i < len(s):\n        #find the first letter which is a consonant\n        while s[i] not in consonants:\n            i += 1\n        #make sure the word is not too long, word length = number of consonants + 1\n        if i > n:\n            break\n        #add the word\n        words.append(s[i])\n        i += 1\n    #return the word list\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0 or len(s) < n:\n        return []\n    return [word for word in s.split() if word.count(c) == n for c in 'abcdefghijklmnopqrstuvwxyz']", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    consonants = set('bcdfghijklmnpqrstuvwxyzABCDEFGHIJKLMNPQRSTUVWXYZ')\n    words = list()\n    for word in s.split():\n        if not word.isdigit():\n            words.append(word)\n        else:\n            if len(word) == len(consonants):\n                words.append(word)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    lst = []\n    # The first step is to split the string into tokens (words)\n    lst = s.split()\n    # The second step is to collect the words that have exactly n consonants \n    # in their interior.\n    for i, token in enumerate(lst):\n        # Find out how many consonants are present in token.\n        n_consonants = len(token) - len(set(token))\n        # If n_consonants is less than n then we add token to the list.\n        if n_consonants < n:\n            lst.append(token)\n    return lst", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    while len(s) > 0 and len(s) % n == 0:\n        s = s[:-1]\n        words.append(s)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    if len(s) == 0:\n        return result\n    current_word = \"\"\n    for word in s.split():\n        current_word += word\n        if len(current_word) >= n:\n            if len(current_word) == n:\n                result.append(current_word)\n                current_word = \"\"\n    if len(current_word) > 0:\n        result.append(current_word)\n    return result\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    l = []\n    for c in s:\n        if c.isupper() and c.islower():\n            if c.isupper():\n                if c.isalnum():\n                    l.append(c)\n        elif c.isupper() and c.isdigit():\n            if c.isupper():\n                if c.isalnum():\n                    l.append(c)\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    res = []\n    for word in s:\n        if word.count('a') == n:\n            res.append(word)\n    return res", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def word_composed_by_n_consons(s, n):\n        \"\"\"Returns a list of words in string s that contain exactly n consonants, in order these words appear in s.\"\"\"\n        if len(s) < n:\n            return []\n        elif n == 0:\n            return []\n        if n > len(s):\n            return []\n        # Select from all words in the string starting from n characters forward.\n        words = s[n:].split(\" \")\n        if len(words) == 1:\n            return [words[0]]\n        return [word for word in words if word_composed_by_n_consons(word, n-1)]\n    return word_composed_by_n_consons(s, n)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    #The following function is based on the work of Hanh Nguyen at \n    #http://comp.it.vu.nl/~hanh/examples/words_nconsonants.py\n    #and modified by Michael Shryock at\n    #http://www.thelivingsim.org/code/letter/\n    #\n    #The modified function is much faster than the original, but it is based \n    #on a naive implementation.\n    #\n    #(1) find all words that contain exactly n consonants (note that this can be \n    #    done with a small amount of extra space if you store the list of \n    #    words into a list and then simply return that list)\n    #\n    #(2) sort the words by length and then return the first n words (note that \n    #    we can do this in O(nlogn) time)\n    #\n    #(3) return the first n words (note that this can be done in O(n) time)\n    #\n    #(4) return all words that contain exactly n consonants (note that this can \n    #    be done in O(n) time)\n    #\n    #(5) sort the words by length and then return the first n words (note that", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    n_cons = 0\n    words = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if n_cons == 0:\n                n_cons += 1\n            else:\n                if s[i].isdigit():\n                    n_cons -= 1\n                else:\n                    words.append(s[i])\n        else:\n            n_cons = 0\n    return words\n\nselect_words(\"hello world\", 4)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    if len(s) < n:\n        n = len(s)\n    if n == 0:\n        return []\n    if n == 1:\n        return [s[0]]\n    if n < 1:\n        return []\n    if n == 2:\n        return [s[0]] + select_words(s[1:], n-1)\n    else:\n        return select_words(s[1:], n - 1) + [s[0]]</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    wordlist = list()\n    if s == '':\n        return wordlist\n\n    elif not s.isalpha():\n        return wordlist\n\n    index = 0\n    while index < len(s):\n        if s[index] not in ('.', '-'):\n            if s[index] in wordlist:\n                wordlist.remove(s[index])\n            else:\n                wordlist.append(s[index])\n            index += 1\n        else:\n            index += 1\n\n    if len(wordlist) > n:\n        return wordlist[:n]\n    else:\n        return wordlist", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    l=[]\n    for i in range(len(s)):\n        if s[i].isalpha():\n            l.append(s[i])\n    for i in range(len(l)-n):\n        s.insert(i,\"\")\n    return s\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def get_words(s):\n        if s == '':\n            return []\n        def h(x):\n            if x[0] =='':\n                return x[1:]\n            return x\n        return [x for x in s.split() if h(x) in s]\n    return [x for x in get_words(s) if len(x) == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == '':\n        return []\n    result = []\n    letters = s.lower().replace(' ', '')\n    letter_count = len(letters)\n    for letter in letters:\n        if letter_count <= n and letter_count > 1:\n            result.append(letter)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = re.sub('\\s+','', s)\n    return [s.count(c) for c in 'abcdefghijklmnopqrstuvwxyz' if c in s]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    i = 0\n    while i < len(s):\n        j = 0\n        while j < n:\n            if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n                words.append(s[i])\n                j += 1\n            i += 1\n        i += 1\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    ret = []\n    for i in range(0, len(s)-1):\n        for j in range(i, len(s)-1):\n            if s[i] == s[j]:\n                break\n            if s[i] =='' and s[j] =='':\n                ret.append(s[i])\n                break\n        else:\n            break\n\n    return ret", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) <= n:\n        return []\n    result = []\n    for i in range(len(s)):\n        if s[i] not in string.ascii_letters + string.punctuation:\n            break\n        elif s[i] in string.ascii_letters:\n            result.append(s[i])\n    if result[-1] in string.ascii_letters:\n        result.append(result[-1])\n    return result[:n + 1]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def is_consonant(c):\n        return c in 'abcdefghijklmnopqrstuvwxyz'\n    consonants = set(map(is_consonant, s))\n    c = consonants.count(n)\n    return list(filter(lambda x: x == n, filter(lambda x: x == c, s)))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    w = set()\n    for i in range(len(s)):\n        if s[i] in w and w.count(s[i]) >= n:\n            w.discard(s[i])\n    return list(w)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def select_words_fun(s, n):\n        n = int(n)\n        words = []\n        for i in range(len(s)):\n            if s[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n                words.append(s[i])\n            if s[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n                words.append(s[i])\n            if s[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n                words.append(s[i])\n        if len(words) > n:\n            words = words[:n]\n        if len(words) < n:\n            words = words[:n + 1]\n        return words\n    return select_words_fun\n\nselect_words(\"Hello, World!\", 2)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.lower()\n    if s == '':\n        return []\n    else:\n        return [i for i in s.split() if i.isupper() or i in string.letters]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    if not s:\n        result = []\n    else:\n        for i in range(len(s)):\n            if s[i].isalpha():\n                for j in range(n):\n                    if s[i].isdigit():\n                        break\n                    if s[i].islower():\n                        if s[i].isupper():\n                            if s[i] == s[i].upper():\n                                result.append(s[i].lower())\n                            else:\n                                result.append(s[i].lower())\n                        else:\n                            if s[i].isupper():\n                                result.append(s[i].upper())\n                            else:\n                                result.append(s[i])\n                    elif s[i] == s[i].upper():\n                        result.append(s[i].lower())\n                    else:\n                        result.append(s[i])\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    n = int(n)\n    return [w for w in s if w.isalpha() and len(w) == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for word in s.split():\n        if len(word) < n:\n            continue\n        for c in word:\n            if c in consonants:\n                words.append(word)\n    return words\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 1:\n        return [s]\n    return [c for c in s.lower().split() if c not in [' ', '?'] and c.isupper()]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == \"\":\n        return []\n    s = s.upper()\n    n = n % len(s) # make sure the number of consonants is even\n    words = []\n    for i in range(0, len(s)):\n        if s[i] in 'BCD': # ignore vowels\n            continue\n        elif s[i] in 'EFGHJKLNPQRSTVWX':\n            if n > 0 and n % 2 == 0:\n                words.append(s[i])\n        elif s[i] in 'zY':\n            if n > 1 and n % 2 == 1:\n                words.append(s[i])\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    lst = []\n    if s == '':\n        return []\n    else:\n        for char in s:\n            if not char.isalpha():\n                continue\n            if char.islower():\n                continue\n            if char.isdigit():\n                continue\n            if char.isupper():\n                continue\n            if char.isalpha():\n                continue\n            if char.ispunct():\n                continue\n            if char.isspace():\n                continue\n            if char in ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']:\n                continue\n            if char in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n                continue\n            if char in 'th':\n                continue\n            lst.append(char)\n    return lst", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    #def words_in_order(s, n):\n    words = []\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j] and not s[j].isdigit():\n                if len(s[i:j]) == n - 1:\n                    words.append(s[i:j])\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] in string.ascii_letters and s[i] not in string.punctuation:\n            words.append(s[i])\n    return words[0:n]\n\nA:\n\nPython 2, 57 bytes", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for w in s.split():\n        if w in \"0123456789\":\n            words.append(w)\n    return words[n:]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # use a dictionary to remember the words we've seen so far\n    seen = []\n\n    # find all words that contain exactly n consonants\n    def get_n_consonants(word):\n        if len(word) <= n:\n            return word\n        else:\n            return \"\".join(word[i:i] for i in range(n-len(word)))\n\n    # find all words that contain at least n consonants\n    def get_n_or_more_consonants(word):\n        if len(word) >= n:\n            return word\n        else:\n            return \"\".join(word[i:i] for i in range(n-len(word)))\n\n    # combine the two\n    def search(word):\n        if word in seen:\n            return word\n        elif get_n_consonants(word) in seen:\n            return search(get_n_consonants(word))\n        elif get_n_or_more_consonants(word) in seen:\n            return search(get_n_or_more_consonants(word))\n        elif get_n_consonants(word) == \"\" and get_n_or_more_consonants(word) == \"\":\n            return word\n        else:\n            return \"\".join(word[i:i] for i in range", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    l=[]\n    last_n=len(s)-1\n    while last_n > n:\n        c = s[last_n]\n        l.append(c)\n        last_n -= 1\n    l.append(s[last_n])\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for i in s:\n        if i.isalpha() or i.isspace():\n            continue\n        if i.isdigit():\n            continue\n        elif len(i) >= n:\n            result.append(i)\n        elif n == 1:\n            result.append(i)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    i = 1\n    result = []\n    words = list(s)\n    while len(words) > n:\n        result.append(words[:n])\n        words = words[n:]\n        i += 1\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = s.split()\n    if len(words) == 0:\n        return []\n    if len(words) < n:\n        raise ValueError(\"Wrong number of words.\")\n    for word in words:\n        if word.count(' ')!= n:\n            raise ValueError(\"Wrong number of words.\")\n    return words[:n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = list()\n    i = 0\n    while i < len(s):\n        if s[i] in string.ascii_letters:\n            if s[i+1] in string.ascii_letters:\n                if s[i+2] in string.ascii_letters:\n                    if s[i+3] in string.ascii_letters:\n                        if s[i+4] in string.ascii_letters:\n                            words.append(s[i:i+4])\n                        else:\n                            words.append(s[i:i+3])\n            elif s[i+1] in string.digits:\n                if s[i+2] in string.digits:\n                    if s[i+3] in string.digits:\n                        if s[i+4] in string.digits:\n                            words.append(s[i:i+4])\n                        else:\n                            words.append(s[i:i+3])\n            elif s[i+1] in string.punctuation:\n                if s[i+2] in string.punctuation:\n                    if s[i+3] in string.punctuation:\n                        if s[i+4] in string.punctuation:\n                            words.append(s[i:i+4])\n                        else:\n                            words.append(s[i:i+3])\n            elif s[i+1] in string.whitespace:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == \"\":\n        return []\n    return s.split()", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    #return []\n    if s == \"\":\n        return []\n    n = int(n)\n    result = []\n    for word in s:\n        if word.isdigit() == False and len(word) > 0:\n            if len(result) == n:\n                break\n            else:\n                result.append(word)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def word_contain(s, n):\n        \"\"\"Given a string s and a natural number n, you have been tasked to implement \n        a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s.\n        If the string s is empty then the function should return an empty list.\n        Note: you may assume the input string contains only letters and spaces.\n        Examples:\n        word_contain(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        word_contain(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n        word_contain(\"simple white space\", 2) ==> []\n        word_contain(\"Hello world\", 4) ==> [\"world\"]\n        word_contain(\"Uncle sam\", 3) ==> [\"Uncle\"]\n        \"\"\"\n        if s == '': return []\n        return list(filter(lambda x: len(x) == n, map(str.lower, re.split('|', s))))\n    \n    return word_contain(s, n)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return [c for c in s if c in consonants]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # find the length of the longest word from the string s that contains n consonants\n    n_consonants = int(n * 0.5)\n    words = []\n    # create an array with a length of n_consonants - 1\n    for x in range(n_consonants - 1):\n        words.append([])\n    # go through the string s and find the longest word that contains n_consonants \n    # consonants\n    for char in s:\n        if char.isalpha() and char.isupper():\n            words[-1].append(char)\n    # select the characters in each word from the array words[-1], starting with \n    # the first character in each word and ending with the last character in \n    # each word. Now we have the set of characters in all words that contain \n    # n_consonants consonants\n    n_consonants_letters = []\n    # for each word in the array words[-1] create a list with the characters of \n    # that word\n    for word in words:\n        n_consonants_letters.append(word[0] + word[1])\n    # get the consonants that occur in the longest word in the array words\n    # words\n    consonants = n_consonants_letters\n    #", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    w = []\n    if len(s) > 0:\n        for i in range(len(s)):\n            if s[i] not in [\" \", \"!\", \"?\", \",\", \":\", \"\\\"\", \"`\", \"<\", \">\", \";\", \".\"]:\n                w.append(s[i])\n    return w", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def select(s, n):\n        words = s.split()\n        words = filter(lambda word: len(word) == n, words)\n        return [word for word in words]\n    return select(s, n)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    word_list = []\n    i = 0\n    while i < len(s):\n        if s[i].isalpha() or s[i].isspace():\n            word_list.append(s[i])\n            i += 1\n        else:\n            i = i + 1\n    while i < len(s):\n        if s[i].isalpha() or s[i].isspace():\n            word_list.append(s[i])\n        else:\n            word_list.append(\"\")\n            i += 1\n    word_list.reverse()\n    result = []\n    for i in range(n):\n        while i < len(word_list):\n            if word_list[i] == \" \":\n                result.append(word_list.pop(i))\n                break\n            else:\n                i = i + 1\n    result.reverse()\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == \"\": return []\n    s = s.lower()\n    if len(s) == 0: return []\n    ans = []\n    i = 0\n    while i < len(s):\n        if s[i] in \"abcdefghijklmnopqrstuvwxyz\": i += 1\n        else: break\n        ans.append(s[i])\n        i += 1\n    return ans", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # generate a list containing all the words in the given string\n    words = s.split()\n    # create a list of words that contain at most n consonants\n    seen = [[] for _ in range(len(words))]\n    # process the string\n    for i in range(len(words)):\n        if len(words[i]) == 0:\n            continue\n        if words[i][0] in 'abcdefghijklmnopqrstuvwxyz':\n            if seen[i] and words[i] in seen[i]:\n                continue\n            seen[i].append(words[i])\n            if len(seen[i]) == n:\n                yield words[i]\n    # process the remaining words\n    for i in range(len(words)):\n        if len(words[i]) == 0:\n            continue\n        if words[i][0] in 'abcdefghijklmnopqrstuvwxyz':\n            if seen[i]:\n                yield words[i]\n            seen[i].append(words[i])\n            if len(seen[i]) == n:\n                yield words[i]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for word in re.split('\\s+', s):\n        words.append(word.count('a') == n)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    l = [re.findall('\\w',s)[0]]\n    return l[n:]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n\n    l = []\n    for c in s:\n        if c in consonants:\n            l.append(c)\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def func(s):\n        result = []\n        for i in range(len(s)):\n            if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n                if len(s[i:i+n]) == n:\n                    result.append(s[i])\n        return result\n\n    return func(s)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    output = []\n    temp = []\n    for word in s:\n        c = word[0]\n        if c in \"abcdefghijklmnopqrstuvwxyz\":\n            if len(temp) == n:\n                output.append(temp)\n                temp = []\n            temp.append(c)\n    if temp!= []:\n        output.append(temp)\n    return output\n\nselect_words(\"\", 4)\nselect_words(\"Hello\", 4)\nselect_words(\"Mary\", 3)\nselect_words(\"Hi there\", 3)\nselect_words(\"yes thanks\", 3)\nselect_words(\"Smoke\", 3)\nselect_words(\"There was a\", 3)\nselect_words(\"Beautiful\", 3)\nselect_words(\"There was a\", 3)\nselect_words(\"There was a\", 3)\nselect_words(\"There was a\", 3)\nselect_words(\"There was a\", 3)\nselect_words(\"There was a\", 3)\nselect_words(\"There was a\", 3)\nselect_words(\"There was a\", 3)\nselect_words(\"There was a\", 3)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    w = []\n    for i in range(len(s)):\n        if s[i]!='':\n            w.append(s[i])\n        if len(w) == n:\n            words.append(w)\n            w = []\n    if len(w) > 0:\n        words.append(w)\n    return words\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    word_list = []\n    i = 0\n    for j in range(0, len(s), n):\n        if s[j:i+n].isalpha():\n            word_list.append(s[j:i+n])\n            i = j + n\n        else:\n            break\n    return word_list\n\nselect_words(\"Hello world\", 4)\nselect_words(\"Hello world\", 3)\nselect_words(\"Mary had a little lamb\", 4)\nselect_words(\"Mary had a little lamb\", 3)\nselect_words(\"Uncle sam\", 3)\nselect_words(\"Uncle sam\", 2)\nselect_words(\"Uncle sam\", 1)\nselect_words(\"Mary had a little lamb\", 1)\nselect_words(\"Help you find your way\", 2)\nselect_words(\"Help you find your way\", 3)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    res = []\n    for w in s.split():\n        res.append(\"\".join([x if c in w else \" \" for c in w if c.isalpha()]))\n    return res", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    l = []\n    for c in s:\n        if c in string.ascii_letters:\n            if len(c) == n - 1:\n                l.append(c)\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) <= 1:\n        return []\n    result = []\n    for i in range(0, len(s) - 1, n + 1):\n        result.append(s[i:i + n])\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == \"\": return []\n    my_list = []\n    c = [s[x:x+1] for x in range(0, len(s)) if s[x] in 'abcdefghijklmnopqrstuvwxyz']\n    for word in c:\n        if len(word) == n:\n            my_list.append(word)\n    return my_list", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def count_consonants(s):\n        n = len(s)\n        d = 0\n        for i in range(0, n):\n            if s[i] in consonants:\n                d += 1\n        return d\n    return list(filter(lambda x: x.count(c) == n for c in consonants, select_words(s, n)))\n\nIt seems to work fine but I am not sure if it is the best way to do it.\nAlso it seems that we can cut the code by using a list comprehension, and by using filter but I am not sure if it is the best way.\nI have included the commented code as well, and I don't know what to do in the case of strings like \"Hello world\".\nAny help is appreciated!\n\nA:\n\nyou can use itertools.groupby:\nimport itertools\nconsonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k','m', 'n', 'p', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\nres = (''.join(list(k)) for k, _ in itertools.groupby(consonants) if len(k", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    result = []\n    for char in s:\n        if char.isdigit():\n            result.append(char)\n    result.sort()\n    return result[:n]\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    words = s.split()\n    i = 0\n    for word in words:\n        if len(word) == n:\n            words.append(word)\n            i += 1\n            if i == n:\n                break\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # the \"while\" loop is required to avoid a ValueError.\n    # \n    # the \"nth\" function returns the index of the substring in the list\n    # at the given index.\n    #\n    # the \"str\" function splits a string into a list of individual words.\n    words = s.split()\n    result = []\n    # the \"map\" function iterates over a list, and returns a list of\n    # new elements, where each element corresponds to the index of the\n    # given character in the original list.\n    map_nth = lambda x: [map(nth, words) for nth in range(0, len(x))]\n    # the \"filter\" function iterates over a list, and returns a list of\n    # new elements, where each element corresponds to the index of the\n    # given character in the original list.\n    map_filter = lambda x: filter(lambda y: y.isalpha(), map_nth(x))\n    # the \"first\" function returns the first element of the list.\n    # \n    # the \"strsplit\" function splits a string into a list of individual\n    # words.\n    words = strsplit(s, \" \")\n    for word in words:\n        if not word.isalpha():\n            continue\n        result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    #here i start to learn how to use recursion \n    #i have not tried this code in a while loop as i did with my first code\n    return s[::-1].split(\" \")[-n:]\n\nThe second code is a bit more better, i believe it is better in terms of clean code, but it also in terms of speed i am not sure if it is faster or not.", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.upper()\n    result = []\n    # Sort by length\n    l = len(s)\n    if l > 0:\n        t = [w for w in s.split() if len(w) == l]\n    # Remove all words that have zero consonants\n    for i in range(0,l):\n        if not s[i].isalpha() and not s[i].isdigit():\n            result.append(s[i])\n    # If there are any words that have zero consonants\n    if len(result) > 0:\n        # Sort by length\n        t = [w for w in result]\n        # Remove all words that have zero consonants\n        for i in range(0,l):\n            if not s[i].isalpha() and not s[i].isdigit():\n                result.remove(s[i])\n    # Return result\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # First check if the input string is empty\n    if len(s) == 0:\n        return []\n    # If the input string is not empty then we call the recursive function\n    else:\n        # First check if the input string contains at least one letter\n        if len(s) == 1:\n            # Then we have an empty string\n            return []\n        else:\n            # we call the function again with the input string and a number smaller\n            # than the current number of consonants in the string\n            l = select_words(s[:n], n-1)\n            l.extend(s[n:-1])\n            return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.lower()\n    n = n - 1\n    # If the string is empty, return an empty list\n    if len(s) == 0:\n        return []\n\n    l = []\n    i = 0\n    while i < len(s):\n        # If the current character is a letter or space and the number of \n        # consonants in the current word is less than or equal to n, append the \n        # current word to the list l\n        if s[i].isalpha() or s[i].isspace() and n <= len(s[i:]):\n            l.append(s[i:])\n            i += 1\n        else:\n            break\n\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    words = [w for w in s.split() if w.isalpha()]\n    if n < len(words):\n        return [w for w in words[:n]]\n    else:\n        return words\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s: return []\n    if len(s) == 1: return [ s ]\n    #\n    left_words = s.split(\" \")\n    #\n    left_words_start = left_words.index(\" \") # index where the start of the left word is\n    #\n    right_words = left_words[i:].split(\" \") # split the rest of the words to a list\n    #\n    right_words_end = right_words.index(\" \") # index where the end of the left word is\n    #\n    right_words = right_words[right_words_end:] # remove the words after the left word\n    #\n    return [ left_words[left_words_start:left_words_end] if left_words_end > 0 else s\n            for left_words_start, left_words_end in zip(left_words[0:left_words_start + n], right_words[-(n + 1):]) ]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    p = {}\n    for i in range(n):\n        p[i] = [ s[i:] for j in range(1, n-i+1) ]\n    w = []\n    i = 0\n    while i < len(s):\n        if s[i] =='':\n            continue\n        if s[i] in p:\n            w.append(s[p[i]])\n            i += 1\n        else:\n            break\n    return w", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for char in s:\n        if char.isalpha() or char.isspace():\n            if char.isalpha():\n                word = char.lower()\n            else:\n                word = char\n            if word.isdigit() or word.isalpha():\n                if char.isdigit():\n                    words.append(word)\n                elif char.isalpha():\n                    words.append(word)\n    if len(words) > 0:\n        return list(set(words))\n    else:\n        return []", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    res = []\n    if not s:\n        return res\n    if s.isalnum():\n        for i in range(1, len(s) + 1):\n            if s[i - 1] in 'abcdefghijklmnopqrstuvwxyz':\n                res.append(s[i: i + 1])\n    return res", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    select_words = []\n    for i in range(len(s)):\n        if(s[i:i + n].isdigit()):\n            select_words.append(s[i:i + n])\n    select_words.sort()\n    select_words = select_words[0 : n]\n    return select_words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == \"\":\n        return []\n    else:\n        return s.split()", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    list_of_words = []\n    list_of_consonants = \"abcdefghijklmnopqrstuvwxyz\"\n    while len(s) > 0:\n        first_word = s[0:n-1]\n        if first_word in list_of_words:\n            continue\n        list_of_words.append(first_word)\n        s = s[n:]\n    return list_of_words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def word_contains_n(word):\n        \"\"\"A function to check if a string contains exactly n consonants in order.\"\"\"\n        num_consonants = 0\n        for letter in word:\n            if letter in ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n                num_consonants += 1\n        return num_consonants == n\n    return list(filter(word_contains_n, map(str.strip, s.split())))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def isConsonant(ch):\n        \"\"\" Returns True if ch is a consonant, otherwise False.\"\"\"\n        return ch in ['s', 'c', 'b', 'd', 'f', 'g', 'p', 't', 'k', 'x', 'j', 'z', 'n','m', 'l', 'v', 'q', 'b', 'f', 'g', 'r', 'z','s', 'y', 'w']\n    letters = set('abcdefghijklmnopqrstuvwxyz')\n    output = []\n    for i in range(len(s)):\n        if s[i] in letters:\n            for j in range(i+1, len(s)):\n                if s[j] in letters and s[j-1]!= s[i]:\n                    output.append(s[j-1])\n    output.sort()\n    return output[:n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = s.split()\n    consonants = []\n    for w in words:\n        # only consonants count for consonants\n        if w.isalpha():\n            consonants.append(w)\n    # return all words with at least n consonants\n    if n > len(consonants):\n        return []\n    else:\n        return consonants", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    list_of_words = []\n    for word in s.split():\n        if len(word) == n:\n            list_of_words.append(word)\n    return list_of_words\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # use a dictionary to store the consonants\n    consonants = {\"c\":1, \"d\":1, \"e\":1, \"f\":1, \"g\":1, \"h\":1, \"i\":1, \"j\":1, \"k\":1, \"l\":1, \"m\":1, \"n\":1, \"o\":1, \"p\":1, \"q\":1, \"r\":1, \"s\":1, \"t\":1, \"u\":1, \"v\":1, \"w\":1, \"x\":1, \"y\":1, \"z\":1}\n\n    # create a dictionary to store the words in alphabetical order\n    # get the initial letters\n    first_letters = list(map(lambda x:s.split()[0][x], s.split()))\n    # sort the initial letters\n    initial_letters_dict = sorted(first_letters, key=lambda x:x.lower())\n\n    # iterate through the input string\n    for word in s:\n        # get the consonants in the word\n        consonants_list = list(map(lambda x: consonants[x], word.lower().split()))\n        # create a list of words that are formed by the consonants\n        # add the word to the list if it matches exactly\n        words = consonants_list + initial_letters", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) <= 0:\n        return []\n    words = []\n    # let's split the string into words:\n    for word in s.split():\n        # let's try to find all words that contain exactly n consonants in the word:\n        words = words + select_n_letters(word, n, 0)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # the list of words that are accepted\n    accepted = []\n    # a set of consonants that has been used so far\n    used = set()\n    # keep track of how many times a word was accepted \n    count = 1\n    for c in s:\n        # if the current character is a consonant then add it to the set of accepted words\n        if c in \"abcdefghijklmnopqrstuvwxyz\":\n            # if the set of consonants is not empty then remember the word that was accepted \n            if len(used) < n and c not in used:\n                # if the word is accepted then add it to the list of accepted words\n                accepted.append(s.strip(c))\n                # add the current character to the set of consonants that have been used so far\n                used.add(c)\n                # increment the counter by one and remember that we have used a consonant\n                count += 1\n    return accepted, count", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    if len(s) == 0:\n        return result\n    if len(s) <= n:\n        return result\n    result = s[:n]\n    if result.isalpha():\n        result = result.replace(\" \", \"\")\n    if result.isdigit():\n        result = result.replace(\" \", \"\")\n    result.sort()\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # TODO\n\n    return []"]]