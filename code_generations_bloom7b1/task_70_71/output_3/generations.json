[["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Init list\n    sorted_lst = []\n    min_list = [0]\n    max_list = [0]\n    # min/max of the rest of the list\n    # This will be used to generate the first element\n    for i in range(len(lst)):\n        # Is the list empty?\n        if not lst:\n            return sorted_lst\n        # The first element is always the minimum value\n        min_list = lst[i]\n        for j in range(i, len(lst)):\n            # Is the current list not empty?\n            if not lst:\n                return sorted_lst\n            # If the current list is less than the current one\n            if lst[i] < lst[j]:\n                # Put the current list in the temporary list\n                temp_list = []\n                # Append the current list to the temporary list\n                temp_list.append(lst[i])\n                # Remove the current element from the list\n                del lst[i]\n                # Append the temporary list to the final list\n                sorted_lst.extend(temp_list)\n                # Remove the temporary list from the list\n                del temp_list\n            # If the current list is greater than the current one\n            elif lst[i] > lst[j]:\n                # Put the current list in the temporary list\n                temp_list = []\n                # Append the current list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    ordered = []\n    for i in range(len(lst)):\n        if lst[i] < lst[i+1]:\n            ordered.append(lst[i])\n            ordered.append(lst[i+1])\n        else:\n            ordered.append(lst[i+1])\n            ordered.append(lst[i])\n    return sorted(ordered)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    nums = len(lst)\n    if nums == 0:\n        return res\n\n    while nums > 0:\n        nums = nums - 1\n        mid = nums // 2\n        res.append(lst[mid])\n        lst[mid], lst[mid - 1] = lst[mid - 1], lst[mid]\n        nums = nums // 2\n\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    smallest = min(lst)\n    first = True\n    while first:\n        first = False\n        for i in range(len(lst)):\n            if smallest <= lst[i]:\n                smallest = lst[i]\n                first = True\n                break\n\n    final = smallest\n    while len(lst) > 1:\n        for i in range(len(lst) - 1, -1, -1):\n            if lst[i] > smallest:\n                smallest = lst[i]\n                final = lst[i + 1]\n                break\n\n    return final", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Just an empty list, so it is sorted\n    if lst:\n        # List is not empty, so it's sorted\n        return sorted(lst, reverse=True)\n    else:\n        # List is empty, so it is not sorted\n        return sorted(lst, reverse=False)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    list_to_be_altered = []\n    new_list = []\n    for item in lst:\n        list_to_be_altered.append(item)\n    for element in list_to_be_altered:\n        if element > list_to_be_altered[0]:\n            new_list.append(element)\n        elif element < list_to_be_altered[-1]:\n            new_list.append(element)\n        else:\n            new_list.append(list_to_be_altered[0])\n            new_list.append(element)\n\n    return new_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    while len(lst) > 0:\n        if not len(lst):\n            return\n        l = lst.pop(0)\n        if l < l.__next__:\n            lst.insert(0, l)\n        elif l == l.__next__:\n            return\n        for i in range(1, len(lst)):\n            if lst[i] < lst[i-1]:\n                lst[i], lst[i-1] = lst[i-1], lst[i]\n    return []", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    # 1. find max of all\n    maxval = max(lst)\n\n    # 2. find min of remaining\n    minval = min(lst)\n\n    # 3. sort by the maxval value\n    return list(sorted(lst, key=lambda x: x if x > maxval else maxval,\n                       reverse=True))[::-1] + [minval]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # start with the first element\n    first = lst[0]\n    # set remaining to the rest of the values\n    remaining = lst[1:]\n\n    # set up the sort order\n    sort_order = []\n    # for each element in remaining, add to sort order\n    for element in remaining:\n        # if current value is less than first, swap\n        # and append to the sort order\n        if element < first:\n            first = element\n            sort_order.append(element)\n\n    # return the sorted list\n    return sort_order", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) > 1:\n        str_list = []\n        for elem in lst:\n            str_list.append(str(elem))\n        return str_list\n    else:\n        return []", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    assert len(lst) > 0\n    strange = []\n    for i in range(len(lst)):\n        current = lst[i]\n        for j in range(i + 1, len(lst)):\n            if current < lst[j]:\n                strange.append(lst[j])\n                del lst[j]\n                break\n    return strange", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    counter = 0\n    # Sort list in strange order\n    while counter < len(lst):\n        next_min = counter\n        next_max = counter + 1\n        while next_min < next_max:\n            if lst[next_min] <= lst[next_max]:\n                # Move to next smaller item\n                counter = next_max\n                continue\n            else:\n                # Move to next larger item\n                counter = next_min\n                continue\n        # Swap the two values\n        lst[counter], lst[next_min] = lst[next_min], lst[counter]\n        counter += 1\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    last_element = 0\n    current_element = last_element\n    for value in lst:\n        if value < current_element:\n            current_element = value\n        elif value > current_element:\n            current_element = last_element\n            last_element = current_element\n        current_element = value\n    return [current_element] + list(range(last_element + 1, len(lst)))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    start = 0\n    index = []\n    for i in lst:\n        index.append(i)\n        if i < start:\n            start = i\n        elif i > start:\n            pass\n        else:\n            pass\n    return [index[start] + 1, index[start - 1] + 1, index[start - 2] + 1, index[start - 3] + 1, index[start - 4] + 1] + index[start - start - 1] + index[start - start - 2] + index[start - start - 3] + index[start - start - 4] + index[start - start - start - 1] + index[start - start - start - 2] + index[start - start - start - 3] + index[start - start - start - 4] + index[start - start - start - start - 1] + index[start - start - start - start - 2] + index[start - start - start - start - 3] + index[start - start - start - start - 4]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange(lst):\n        if len(lst) == 0:\n            return []\n\n        if len(lst) == 1:\n            return [lst[0]]\n\n        if lst[0] < lst[-1]:\n            return strange(lst[1:])\n        elif lst[0] > lst[-1]:\n            return strange(lst[:-1])\n        else:\n            return strange(lst[:-1]) + [lst[0]]\n\n    return strange(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n\n    for i in range(n):\n        if i < n - 1:\n            if (lst[i+1] - lst[i]) > (lst[n-i-1] - lst[i]):\n                tmp = lst[i]\n                lst[i] = lst[n-i-1]\n                lst[n-i-1] = tmp\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(lst):\n        while lst:\n            x, lst = lst[0], lst[1:]\n            lst.remove(x)\n\n    return strange_sort(lst)\n\nstrange_sort_list([1, 2, 3, 4])\nstrange_sort_list([5, 5, 5, 5])\nstrange_sort_list([])\nstrange_sort_list([5])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    max, min = lst[0], lst[-1]\n    if len(lst) > 1:\n        for i in range(len(lst) - 1, -1, -1):\n            if lst[i] > max or lst[i] < min:\n                max, min = lst[i], lst[i + 1]\n        max, min = min, max\n    return [min, max]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return strange_sorted(lst, lst[0], 0)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    previous_min = None\n    min_value = lst[0]\n    lst = lst[1:]\n\n    while lst:\n        if not previous_min:\n            previous_min = min_value\n            min_value = None\n        if previous_min < min_value:\n            previous_min = min_value\n            min_value = lst[0]\n\n        lst = lst[1:]\n\n    return [previous_min, min_value]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    i = 0\n    # Sort the list\n    while lst:\n        # Get the first item in the list.\n        item = lst[0]\n        # Find the next largest item in the list\n        while i < len(lst) - 1 and lst[i] < item and lst[i + 1] > item:\n            i += 1\n        # Swap the two items\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n        # Swap the first item with the last item\n        lst[0], lst[-1] = lst[-1], lst[0]\n        # Return the list\n        i += 1\n    # Return the list\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    min = None\n    max = None\n\n    for x in lst:\n        if min is None or x < min:\n            min = x\n        if max is None or x > max:\n            max = x\n\n    return [max, min] + lst[:-max] + [min, max]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    if len(lst) < 2:\n        return []\n    l = sorted(lst, reverse=True)\n    return strange_sort_list(l) + strange_sort_list(lst[-len(l):])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    other_order = []\n    min_max = lst[0], lst[-1]\n    for x in range(1, len(lst)):\n        if min_max[1] > lst[x] or min_max[0] > lst[x]:\n            min_max = (min_max[0], min_max[1])\n        else:\n            other_order.append(min_max)\n            min_max = (min_max[0], lst[x])\n    other_order.append(min_max)\n    return other_order", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    lst.sort(reverse=True)\n    return [lst[0], lst[-1], lst[-2], lst[-3]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # strange_sort_list([1, 2, 3, 4])\n    # strange_sort_list([5, 5, 5, 5])\n    # strange_sort_list([])\n    all_integers = range(len(lst))\n    all_integers.sort()\n    i = all_integers[0]\n    j = all_integers[0]\n    for a in all_integers:\n        if i <= a < j:\n            j = a\n            i = a + 1\n        elif a < j < all_integers[-1]:\n            j = a\n            i = a + 1\n    return [i, j, i]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return [lst[::-1] if lst else lst[0], lst[::-1], lst[::-1]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst_copy = lst[:]\n    prev_min = min(lst_copy)\n    for i in range(len(lst_copy)):\n        if i!= 0:\n            if lst_copy[i] < prev_min:\n                lst_copy[prev_min], lst_copy[i] = lst_copy[i], prev_min\n        prev_min = min(lst_copy)\n    return lst_copy", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    p = len(lst)\n    if p == 1:\n        return lst\n    for i in range(p):\n        if i == 0:\n            return lst\n        if i == p - 1:\n            return [lst[0]]\n        if p - i < 2:\n            return [lst[0]]\n        if p - i > 2:\n            if lst[p - i - 2] > lst[p - i - 1]:\n                return [lst[0]] + [lst[p - i - 2], lst[p - i - 1]]\n            else:\n                return [lst[0]] + [lst[p - i - 1], lst[p - i - 2]]\n        m = lst[p - i - 1]\n        for j in range(i, p):\n            if j == 0:\n                return [lst[0]] + [lst[p - i - 2]]\n            if j == p - 1:\n                return [lst[0]] + [lst[p - i - 1]]\n            if m > lst[j]:\n                return [lst[0]] + [lst[j]]\n            if m < lst[j]:\n                return [lst[0]] + [lst[p - i - 1]] + [lst[j]]\n    return [lst[0]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n\n    lst.sort()\n    return [lst[0]] + strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    old = lst[0]\n    new = old\n    for i in range(1, len(lst)):\n        if old > lst[i]:\n            old = lst[i]\n            new = old\n        else:\n            new = new + old\n            old = lst[i]\n\n    return [new, old]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    # calculate the maximum value\n    maxval = max(lst)\n    # start with the minimum value\n    minval = min(lst)\n\n    # store values\n    vals = []\n    curval = minval\n    for item in lst:\n        # if the value is larger than the previous\n        # we can just append it\n        if curval > item or curval == maxval:\n            vals.append(curval)\n            curval = item\n        # otherwise we have to move it to the correct\n        # position\n        elif curval < item:\n            vals.insert(0, curval)\n            curval = item\n\n    # return the final result\n    return vals", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    for i in range(len(lst)):\n        if i == 0:\n            lst[i] = min(lst[i:])\n        elif i == len(lst) - 1:\n            lst[i] = max(lst[:i])\n        else:\n            lst[i] = min(lst[i+1:-1])\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    order = []\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            order.append(lst[i])\n        else:\n            order.append(lst[i + 1])\n    order.append(lst[-1])\n    return order", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Need to declare some variables\n    smallest = None\n    biggest = None\n\n    for item in lst:\n        if smallest is None:\n            smallest = item\n        elif item < smallest:\n            smallest = item\n        elif item > biggest:\n            biggest = item\n        else:\n            raise RuntimeError('Strange Sort failed')\n\n    smallest = smallest - 1\n    return [smallest, biggest, smallest, biggest]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # TODO: Implement smarter algorithm for calculating remainder.\n    a = 0\n    b = len(lst)\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n\n    while a < b:\n        if c == b:\n            return [lst[a]]\n        # Remainder = (b - a) % 2\n        remainder = (b - a) % 2\n        for i in range(remainder, 0, -1):\n            # Insertion sort:\n            if c > a:\n                for j in range(0, c - a, i):\n                    lst[d] = lst[j + i]\n                    d += 1\n            else:\n                if a == c:\n                    lst[d] = lst[a]\n                    d += 1\n                for j in range(c - a, 0, -i):\n                    lst[d] = lst[j + i]\n                    d += 1\n            a += i\n            c += i\n            g += i\n            if c == b:\n                c = 0\n        e = a\n        b -= e\n        if b == 0:\n            b = 1\n        c = a\n        d = 0\n\n    return [lst[a]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    count = 0\n    new_lst = []\n    for i in range(len(lst)):\n        if lst[i] > lst[count]:\n            count += 1\n        new_lst.append(lst[i])\n    return new_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    str_list = list(map(str, lst))\n    str_list.sort(reverse=True)\n    str_list = str_list.split(',')\n    for i in range(len(str_list)):\n        if str_list[i].startswith('-'):\n            return strange_sort_list(str_list[i+1:])\n        else:\n            return [int(str_list[i])] + strange_sort_list(str_list[i+1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    i = len(lst)\n    while i:\n        if i > 1:\n            if lst[i] < lst[i - 1]:\n                tmp = lst[i - 1]\n                lst[i - 1] = lst[i]\n                lst[i] = tmp\n            i -= 1\n        else:\n            break\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x : x[0])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    sorted = []\n    for element in lst:\n        sorted.append(element)\n        if element < sorted[-1]:\n            sorted.pop()\n        if element > sorted[-1]:\n            sorted.pop()\n    return sorted", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    n = len(lst)\n    list_len = len(list(reversed(lst)))\n    half_list_len = list_len // 2\n    list_len = list_len // 2\n    half_list_len = list_len // 2\n    half_list_len = list_len // 2\n    while list_len > 0:\n        i = half_list_len\n        j = half_list_len\n        while i >= 0 and j >= 0:\n            if lst[i] < lst[j]:\n                i -= 1\n            elif lst[i] > lst[j]:\n                j -= 1\n            else:\n                return list(reversed(lst[:i] + lst[i+1:] + lst[j:j+1]))\n    return []", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    while len(lst) > 0:\n        lst.sort(reverse=True)\n        l = len(lst)\n        lst.sort(reverse=False)\n        if l > 1:\n            lst[-2], lst[-1] = lst[-1], lst[-2]\n        else:\n            return lst\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    lst = sorted(lst)\n    return strange_sort_list(lst[1:]) + [lst[0]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # gets a list of ints sorted according to the specified order\n    # so that the first element in the list is the minimum value\n    # the second is the maximum value, the third is the minimum value,\n    # and so on.\n    # A list of all the integers in the list is generated\n    # and a list of their sorted values is generated\n    # and then the sorted list is used to order the original list\n    # so that it ends up in the desired order.\n    result = list()\n    # loop that will order the list according to the specified order\n    for i in range(len(lst)):\n        result.append(lst[i])\n        # This is a trick to get the int from the string\n        # which is the original value\n        value = int(lst[i])\n        # the next loop will iterate through all the integers in the list\n        # and find the max of them\n        for j in range(i + 1, len(lst)):\n            if value > lst[j]:\n                result.append(lst[j])\n                value = int(lst[j])\n    # finally, the sorted list is used to order the original list\n    # in the desired order.\n    # the final list is returned\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    num = 0\n    while num < len(lst):\n        while num < len(lst) and lst[num] < lst[num + 1]:\n            num += 1\n        if num < len(lst):\n            lst[num], lst[num - 1] = lst[num - 1], lst[num]\n            num -= 1\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort(key=lambda x: x, reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Find first element\n    first = min(lst)\n    # Find smallest value\n    smallest = min(lst[1:])\n    # Find maximum\n    maximum = max(lst[1:])\n    # Loop to find next value\n    for idx in range(len(lst) - 1, -1, -1):\n        # Find new smallest\n        if smallest > lst[idx]:\n            smallest = lst[idx]\n        # Find new maximum\n        if maximum < lst[idx + 1]:\n            maximum = lst[idx + 1]\n        # Compare with previous and set last element\n        if first == lst[idx]:\n            lst[idx + 1] = first\n        elif smallest == lst[idx]:\n            lst[idx + 1] = smallest\n        elif maximum == lst[idx + 1]:\n            lst[idx + 1] = maximum\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    tmp = None\n\n    for i in range(len(lst)):\n        if tmp is None:\n            tmp = lst[i]\n            continue\n        if tmp < lst[i]:\n            res.append(tmp)\n            tmp = lst[i]\n\n    res.append(tmp)\n\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # recursively apply to sublists\n    arr = []\n    for num in lst:\n        if num == 1:\n            arr.append(1)\n        else:\n            arr.append(num)\n    # do a strange sort\n    return sorted(arr)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    new_lst = []\n    num = lst.pop()\n    while lst:\n        tmp = lst.pop()\n        if tmp < num:\n            num = tmp\n            new_lst.append(num)\n        else:\n            new_lst.append(num)\n    return new_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    i = 0\n    sorted_list = []\n    while lst:\n        if i == 0:\n            sorted_list.append(lst[0])\n            i += 1\n        else:\n            if lst[0] < lst[i - 1]:\n                sorted_list.append(lst[0])\n            else:\n                sorted_list.append(lst[i - 1])\n            i += 1\n        lst = lst[i:]\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Find the minimum, maximum, and remaining integers.\n    min = max = 0\n    remaining = lst\n\n    # While there are still values in the list\n    while len(remaining) > 0:\n        # Get the current maximum value, and the current minimum value.\n        current_min = remaining[0]\n        current_max = remaining[-1]\n\n        # Swap the current minimum and maximum values.\n        temp = current_min\n        current_min = current_max\n        current_max = temp\n\n        # Remove the current minimum and maximum values from the list.\n        remaining.pop(0)\n        remaining.pop()\n\n        # Swap the remaining values.\n        if remaining[0] > remaining[-1]:\n            temp = remaining[0]\n            remaining[0] = remaining[-1]\n            remaining[-1] = temp\n\n        # If the current minimum value is greater than the previous minimum\n        # value, then swap them.\n        if current_min > min:\n            temp = min\n            min = current_min\n            current_min = temp\n\n        # If the current maximum value is greater than the previous maximum\n        # value, then swap them.\n        if current_max > max:\n            temp = max\n            max = current_max\n            current_max = temp\n\n        # Remove the current maximum and minimum values from the list.\n        remaining.pop(0)\n        remaining.pop()\n\n        # If the current minimum value", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) > 1:\n        # Convert list to tuple, in order to access all elements in the list.\n        lst = tuple(lst)\n    # Start with the minimum value of the list.\n    min = min(lst)\n    # Use the min value as the seed to calculate the maximum.\n    max = max(lst) - 1\n    # Now start the strange sorting.\n    for i in range(len(lst) - 1):\n        if lst[i] < min:\n            min = lst[i]\n        if lst[i] > max:\n            max = lst[i]\n        # Now sort the list.\n        for j in range(len(lst) - i - 1):\n            if lst[j] < min:\n                min = lst[j]\n            if lst[j] > max:\n                max = lst[j]\n    return [min, max, min]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    prev = len(lst) - 1\n    while prev >= 0:\n        prev = prev - 1\n        next = prev + 1\n        while next <= len(lst) - 1:\n            if lst[next] < lst[prev]:\n                res.append(lst[next])\n                prev = next\n                next = prev + 1\n            elif lst[prev] > lst[next]:\n                res.append(lst[prev])\n                next = prev + 1\n            else:\n                res.append(lst[prev])\n                next = prev + 1\n\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    tmp = []\n    result = []\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i+1]:\n            tmp.append(lst[i])\n        else:\n            tmp.append(lst[i+1])\n    result = tmp + [0] * (len(lst) - 1)\n    result.reverse()\n    return result\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # find minimum and maximum\n    min_val, max_val = lst[0], lst[-1]\n    for elem in lst[1:]:\n        if min_val > elem:\n            min_val, max_val = elem, min_val\n        if max_val < elem:\n            max_val, min_val = elem, max_val\n    # copy everything except the min and max to new list\n    tmp = list(lst)\n    tmp.remove(min_val)\n    tmp.remove(max_val)\n    return tmp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    assert isinstance(lst, list)\n    lst = sorted(lst)\n    strange = [min(lst)]\n    for i in range(len(lst)):\n        if lst[i] < strange[-1]:\n            strange.append(lst[i])\n    return strange", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            result.append(lst[i])\n        else:\n            result.append(lst[i + 1])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort()\n    max_idx = len(lst) - 1\n    res = []\n    for i in xrange(max_idx):\n        res.append(lst[i])\n    res.sort()\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if len(lst) == 0:\n        return []\n\n    # The strange_sort function returns the value in the\n    # position where the slice of list starts\n    strange_sort_func = lambda x, y: (x - y) if x < y else (y - x)\n\n    # Loop through the original list\n    result = []\n    while len(lst) > 1:\n        # Retrieve the values of the list\n        values = lst[:-1]\n        # Retrieve the first value of the list\n        first = values[0]\n\n        # Calculate the position of the first value in the list\n        pos = first\n        # Start from the position of the first value, and\n        # move through each element until you reach the end of the list\n        while True:\n            # Check to see if the position is between the values in the list\n            if pos >= first and pos <= values:\n                # Increment the position\n                pos += 1\n                # Append the current value\n                result.append(values[pos])\n            # Exit if you reach the end of the list\n            else:\n                # Exit the while loop and return the list\n                return result\n            # Go back to the beginning of the list\n            values = values[2:]\n    # Nothing found\n    return []", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if len(lst) > 0:\n        result = []\n        largest = 0\n        for element in lst:\n            if largest < element:\n                largest = element\n            result.append(largest)\n        return result\n    else:\n        return []", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if len(lst) == 0:\n        return []\n\n    remaining = len(lst) - 1\n    for i in range(0, remaining):\n        left = min(lst)\n        right = max(lst)\n        swap = left\n        for j in range(1, remaining):\n            if left < lst[j]:\n                swap = left\n                left = lst[j]\n            if left > lst[j]:\n                swap = right\n                right = lst[j]\n        lst = [left, swap, right]\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    while len(lst) > 1:\n        pivot = len(lst) // 2\n        tmp = []\n        for i in range(0, len(lst) - 1):\n            if (i >= pivot) and (lst[i] < lst[pivot]):\n                tmp.append(lst[i])\n            else:\n                tmp.append(lst[pivot])\n        result.append(tmp)\n        lst = lst[:pivot] + lst[pivot + 1:]\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst_new = []\n    while len(lst) > 0:\n        if len(lst) == 1:\n            lst_new.append(lst[0])\n            lst = lst[1:]\n        else:\n            max = min(lst)\n            lst_new.append(max)\n            lst = lst[1:] - [max]\n    return lst_new", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in xrange(len(lst)):\n        if len(lst) - i == 1:\n            result.append(lst[i])\n            continue\n        last = lst[i - 1]\n        if last < lst[i]:\n            result.append(last)\n            result.append(lst[i])\n        elif last > lst[i]:\n            result.append(last)\n            result.append(lst[i])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    l = [lst[0], lst[-1]]\n    i = 0\n    while len(l) > 1:\n        try:\n            a, b = l.pop(0), l.pop(-1)\n        except IndexError:\n            a, b = l.pop(-1), l.pop(0)\n        else:\n            while a > b:\n                l.insert(0, a)\n                a = b\n            while b > a:\n                l.insert(0, b)\n                b = a\n            l.insert(0, a)\n            i += 1\n    return l[:i]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # new_list = []\n    # for i in range(len(lst)):\n    #     # this one is the original list,\n    #     # which we sort it\n    #     new_list.append(lst[i])\n\n    # while len(new_list) > 0:\n    #     new_list.remove(new_list[0])\n    #     max_list = []\n    #     # if any value is greater than other,\n    #     # we take it and append it to the \"max_list\".\n    #     for i in range(len(new_list)):\n    #         if new_list[i] > max_list[-1] and new_list[i]!= new_list[0]:\n    #             max_list.append(new_list[i])\n    #     if len(max_list) > 0:\n    #         new_list = max_list\n    #     else:\n    #         new_list = []\n    #         # if we don't have any value to sort,\n    #         # we take the first element from new_list\n    #         # and append it to the original list\n    #         # and the result is returned.\n    #         return new_list\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # list of odd numbers\n    odd = [int(x) for x in lst if x % 2 == 1]\n    # list of even numbers\n    even = [int(x) for x in lst if x % 2 == 0]\n    # list of odd/even numbers\n    mult = odd + even\n    mult.sort(key=lambda x: x)\n    # set of odd/even numbers\n    mult = set(mult)\n    # list of odd/even integers\n    mult_int = []\n    for x in mult:\n        if x in odd:\n            mult_int.append(x)\n        if x in even:\n            mult_int.append(x)\n    # list of odd/even integers sorted by order they appear\n    mult_int.sort(key=lambda x: x)\n    # strange sort\n    strange = []\n    odd_n = 0\n    for x in odd_int:\n        strange.append(x)\n        if x == 0:\n            odd_n += 1\n    # output strange list\n    strange.extend(mult_int[odd_n:])\n    return strange", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in range(len(lst)):\n        if lst[i] < lst[i - 1]:\n            result.append(lst[i])\n        if lst[i] > lst[i - 1]:\n            result.append(lst[i])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    max_idx = len(lst) - 1\n    return [lst[i] for i in range(len(lst)) if lst[i] > lst[i + 1]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    nums = []\n    list_len = len(lst)\n    for i in xrange(list_len):\n        if i >= list_len / 2:\n            min = lst[i]\n            max = lst[i - 1]\n        else:\n            min = lst[i]\n            max = lst[i - list_len + 1]\n        nums.append(max)\n        nums.append(min)\n        nums.append(max)\n        nums.append(min)\n    return nums", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    odd = len(lst)%2\n    for i in range(len(lst)):\n        val = lst[i]\n        if i!= odd:\n            res.append(val)\n        else:\n            res.append(max(val, res[-1]))\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [int(x) for x in lst if int(x) >= int(x - 1)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return [lst[0], lst[0], lst[0]]\n    else:\n        i = len(lst) / 2\n        j = len(lst) - 1\n        k = 1\n        for i in range(0, len(lst)):\n            for j in range(0, i + 1):\n                if lst[i] > lst[j]:\n                    k = i + 1\n                    break\n        return strange_sort_list(lst[:k]) + strange_sort_list(lst[k+1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def swap(x, y):\n        temp = x\n        x = y\n        y = temp\n\n    def strange_sort(lst):\n        if len(lst) == 1:\n            return [lst[0]]\n        min_value = lst[0]\n        max_value = lst[-1]\n        if len(lst) % 2 == 0:\n            for i in range(1, len(lst) / 2 + 1):\n                if lst[i] < min_value:\n                    swap(min_value, lst[i])\n                if lst[i] > max_value:\n                    swap(max_value, lst[i])\n        else:\n            for i in range(1, len(lst) - 1):\n                if lst[i] < min_value:\n                    swap(min_value, lst[i])\n                if lst[i] > max_value:\n                    swap(max_value, lst[i])\n        return strange_sort(lst[::-1])\n\n    return strange_sort(lst)\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    biggest = 0\n    minval = -999999999\n    lst = list(lst)\n    for i in range(len(lst) - 1):\n        val = lst[i]\n        if biggest < val:\n            biggest = val\n        if val < minval:\n            minval = val\n    lst.sort(reverse=True)\n    return lst[:-1] + [biggest] + lst[-1:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    assert len(lst) > 0, \"Strange sort of list with zero length\"\n\n    # start with the smallest value\n    minvalue = min(lst)\n    values = [0] * len(lst)\n\n    for i in range(len(lst)):\n        # we now have all the values\n        if minvalue > lst[i]:\n            # first value bigger than minvalue, so\n            # we need to swap it\n            minvalue = lst[i]\n            values[i] = minvalue\n            values[i - 1] = minvalue + 1\n\n    # at this point all the values are known and sorted\n    return values", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    s = []\n    lst.sort()\n    for i in range(len(lst)):\n        s.append(lst[i])\n        while True:\n            tmp = s[-1]\n            if tmp < s[-2]:\n                s.pop()\n                s.append(tmp)\n            elif tmp == s[-2]:\n                break\n    return s", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: x[0], reverse=True)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # A set of minimum values\n    min_set = set()\n    min_set.add(min(lst))\n    max_set = set()\n    max_set.add(max(lst))\n\n    # A list to store the elements in strange order\n    strange_list = []\n\n    # Iterate over the integers in the list\n    for i in range(0, len(lst)):\n        # Get the current integer\n        current = lst[i]\n\n        # Check if this element is in the min_set\n        if current in min_set:\n            # Move it to the end of the list\n            strange_list.append(lst[i])\n        # Check if this element is in the max_set\n        elif current in max_set:\n            # Put it in the middle of the list\n            strange_list.insert(i, lst[i])\n        else:\n            # If this element is not in the min_set, nor the max_set\n            # Keep it in the end of the list\n            strange_list.append(lst[i])\n\n    # Return the list of strange sorted elements\n    return strange_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    return [lst[::-1][0]] + strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return list(map(lambda x: x if x < lst[0] else x + 1, sorted(lst, reverse=True)))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [lst[i] if i < len(lst) else lst[-1]\n            for i in range(len(lst) - 1, -1, -1)]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    if n == 0:\n        return []\n    s = 0\n    prev = 0\n    while s < n:\n        if lst[s] < prev:\n            s += 1\n        else:\n            prev = lst[s]\n        s += 1\n    return lst[prev+1:n]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    return strange_sort_list(lst[1:]) + [lst[0]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Sort the list using an in-place, in-place sort algorithm.\n    if lst:\n        res = []\n        i = 0\n        while i < len(lst):\n            res.append(lst[i])\n            i += 1\n        res.sort()\n        return res\n    return []", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Create a new list with the odd ones and even ones\n    new_list = []\n    odd = True\n    for item in lst:\n        if odd:\n            new_list.append(item)\n        else:\n            new_list.append(item / 2)\n\n    odd = True\n    for item in new_list:\n        if odd:\n            new_list.append(item)\n        else:\n            new_list.append(item * 2)\n\n    odd = True\n    for item in new_list:\n        if odd:\n            new_list.append(item)\n        else:\n            new_list.append(item / 2)\n\n    odd = True\n    for item in new_list:\n        if odd:\n            new_list.append(item)\n        else:\n            new_list.append(item * 2)\n\n    return new_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    if not lst[0] < lst[1]:\n        return strange_sort_list(lst[1:])\n    sort_key = lambda x: int(x) - int(lst[0])\n    return sorted(lst, key=sort_key)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    while lst:\n        l = []\n        for i in range(0, len(lst)):\n            l.append(lst[i])\n\n        if lst[0] > lst[1]:\n            lst.append(lst[0])\n            l.insert(0, lst[1])\n\n        if lst[0] < lst[1]:\n            lst.insert(0, lst[0])\n            l.append(lst[1])\n\n        if lst[0] == lst[1]:\n            lst.remove(lst[0])\n            l.append(lst[1])\n\n        while len(l) > 1:\n            i = l.pop(0)\n            l.remove(i)\n\n        for i in l:\n            lst.remove(i)\n\n        lst.extend(l)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return strange_sorter(lst).sort()", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    l = [lst[0]]\n    for i in range(1, len(lst) - 1):\n        if lst[i] < l[0]:\n            l.append(lst[i])\n        else:\n            l.append(l[0])\n    return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(lst):\n        # Special case: If the list is empty, return it unchanged\n        if not lst:\n            return lst\n\n        # If the list is already sorted in the strange way, return it\n        if all(isinstance(i, int) and i in lst for i in range(len(lst))):\n            return lst\n\n        # Otherwise, repeatedly group by the integer in the middle of the\n        # list, and swap it with the minimum or maximum in the group\n        # until the list is sorted\n        for _ in range(len(lst) / 2):\n            mid = lst[len(lst) / 2 - 1]\n            lst.remove(mid)\n            lst.insert(len(lst) / 2 - 1, lst.pop(0))\n            lst.insert(len(lst) / 2 - 1, mid)\n\n        return lst\n\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: x, reverse=True)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    new_list = []\n    for i in xrange(len(lst)):\n        if i == 0 or i == (len(lst) - 1):\n            new_list.append(lst[i])\n        else:\n            new_list.append(min(lst[i - 1], lst[i]))\n            new_list.append(max(lst[i + 1], lst[i]))\n\n    return new_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    lst = sorted(lst, key=lambda x: x)[:-1]\n    result = []\n    for v in lst:\n        result.append(v)\n    result = sorted(result)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange(lst):\n        if len(lst) == 1:\n            return lst[0]\n        other_min = min(lst)\n        max = max(lst)\n        new_min = min([other_min, max])\n        for i in range(1, len(lst)):\n            if lst[i] > other_min and lst[i] > max:\n                new_min = min([other_min, lst[i], max])\n            if lst[i] < other_min and lst[i] < max:\n                new_min = min([other_min, max, lst[i]])\n        return new_min\n\n    return list(strange(lst))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: -x[0])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n\n    lst.sort(reverse=True)\n    for i in range(len(lst) - 1):\n        if not lst[i] < lst[i + 1]:\n            sorted_list.append(lst[i])\n            lst[i], sorted_list.append(lst[i + 1])\n\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst)\n    lst.sort()\n    while lst:\n        d = 0\n        for i in range(len(lst)):\n            if lst[i] < lst[i - d]:\n                d += 1\n            if d > 1:\n                break\n        tmp = lst[:d] + lst[d:]\n        lst = tmp\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    import math\n    import random\n\n    if len(lst) == 0:\n        return []\n\n    min = lst[0]\n    max = lst[0]\n    pos = 0\n    order = list(range(len(lst)))\n    while order[pos] < len(lst):\n        pos += 1\n        if min > lst[pos]:\n            min = lst[pos]\n        elif max < lst[pos]:\n            max = lst[pos]\n\n    order[pos] = 0\n    while order[pos] < len(lst):\n        pos += 1\n        if min > lst[pos]:\n            min = lst[pos]\n        elif max < lst[pos]:\n            max = lst[pos]\n\n    result = []\n    for i in range(len(lst)):\n        if order[i] == 0:\n            result.append(lst[i])\n        elif order[i] > 1:\n            result.append(lst[order[i]])\n        order[i] = order[i] + 1\n    result.sort()\n\n    return [lst[min], lst[max], result]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Two helper functions, sort_max_min and sort_sep\n    def sort_max_min(lst):\n        \"\"\"\n        Sort list in ascending order, taking only the max value and the min value.\n        \"\"\"\n        sorted_list = [lst[0]]\n        for item in lst[1:]:\n            if item > sorted_list[0]:\n                sorted_list.append(item)\n        return sorted_list\n    def sort_sep(lst):\n        \"\"\"\n        Sort list in ascending order, taking the max value and the min value.\n        \"\"\"\n        sorted_list = []\n        for item in lst:\n            if item > sorted_list[0]:\n                sorted_list.append(item)\n        return sorted_list\n\n    # Main sorting loop\n    lst_max = sorted(lst)\n    lst_max.reverse()\n    lst_min = sorted(lst)\n    lst_min.reverse()\n    lst_sep = sorted(lst)\n\n    # Sub-list sorting loop\n    sorted_list = []\n    for item in lst_max:\n        sorted_list.append(item)\n    sorted_list.reverse()\n    for item in lst_sep:\n        sorted_list.append(item)\n    sorted_list.reverse()\n    for item in lst_min:\n        sorted_list.append(item)\n\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.reverse()\n    lst = [lst[0]]\n    new_lst = []\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            new_lst.append(lst[i])\n        else:\n            new_lst.append(lst[i-1])\n    return new_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    x = [lst[0]]\n    while lst:\n        while len(lst) > 1:\n            z = min(lst[:-1])\n            lst[:-1] = [x for x in lst[:-1] if x > z]\n            x = z\n        x = lst[0]\n    return x", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    strange_list = []\n    for i in range(len(lst)):\n        strange_list.append(lst[i])\n        while len(strange_list) < 2:\n            strange_list.append(lst[len(strange_list)])\n            while len(strange_list) < 2:\n                strange_list.append(lst[len(strange_list) - 1])\n    return strange_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # To start with, a strange list of empty lists:\n    lst = []\n\n    while len(lst) > 1:\n        # Find minimum and maximum values of the list\n        min = None\n        max = None\n        for element in lst:\n            if element < min:\n                min = element\n            if element > max:\n                max = element\n        # Swap min and max\n        lst = [max, min] + lst[2:]\n\n        # Start over with the two values, using the new list\n        # of integers.\n        lst = []\n        min, max = lst.pop(0), lst.pop(0)\n\n    # Add the rest of the list to the result:\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    list_of_list = []\n    list_of_list.append(lst)\n    while True:\n        number = list_of_list[-1][0]\n        if number == number[0]:\n            list_of_list[-1].pop(0)\n        elif len(list_of_list) - 1 == 0:\n            return list_of_list[0]\n        else:\n            list_of_list.append(list_of_list[-1][0])\n            list_of_list[-1].pop(0)\n\n    return list_of_list[0]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    # Sort by smallest value\n    min_list = sorted(lst, key=lambda x: x[0], reverse=True)\n    # Sort by largest value\n    max_list = sorted(lst, key=lambda x: x[1], reverse=True)\n    # Sort by smallest value\n    final_list = sorted(min_list, key=lambda x: x[0], reverse=True)\n    # Sort by largest value\n    final_list = sorted(max_list, key=lambda x: x[1], reverse=True)\n    # Return the list in strange order\n    return final_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    if n == 0:\n        return []\n\n    while n > 1:\n        temp = n // 2\n        first = lst[temp - 1]\n        second = lst[temp]\n        lst.insert(0, second)\n        lst.insert(n - 1, first)\n        n -= 1\n\n    lst.reverse()\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort()\n    return strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Start with the minimum value\n    smallest = lst[0]\n    # Save the order of the minimum value\n    min_order = lst\n\n    # We now have an ordered list of items to sort, and the minimum\n    # value to sort in the same order. We need to swap the minimum value\n    # with the smallest one.\n    for item in lst:\n        if item < smallest:\n            smallest = item\n            min_order = min_order[::-1]\n\n    # We have all of the items sorted, and the smallest value must be\n    # at the beginning of the list.\n    # Now we can proceed to swap the remaining values.\n    # This is done by having an index which points to the position of the\n    # smallest element in the list.\n    # The index is then incremented until we reach the index of the\n    # maximum element.\n    # The maximum element is swapped with the current element, and the\n    # index is decremented.\n    # The process is repeated until we reach the start of the list\n    # again.\n    # This is a new ordered list of values, with the largest value at the\n    # end.\n\n    # This is the index of the minimum element\n    # The maximum element must be at the end of the list\n    # We need to check if", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    return [lst[0]] + [item for sublist in strange_sort_list(lst[1:]) for item in sublist]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        for i in range(len(lst)):\n            min_value = min(lst[i], lst[i+1])\n            if min_value == 0:\n                return strange_sort_list(lst[i+1:])\n            else:\n                if min_value < 0:\n                    return strange_sort_list(lst[i+1:])\n                else:\n                    return strange_sort_list(lst[:i] + list(range(i+1, len(lst))))\n\n    return []", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst:\n        lst.sort(reverse=True)\n        lst.reverse()\n        return strange_sort_list(lst)\n    else:\n        return []", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # The list needs to be iterable, otherwise we can't return it.\n    if not isinstance(lst, list):\n        lst = [lst]\n\n    # We've got to start by sorting it.\n    lst.sort()\n\n    # We need to loop through the list, so we can select the next\n    # element to be added. We can get the next element by looking\n    # at the value of the current element, and then get the\n    # next element that has a higher value.\n    curr = lst[0]\n    for curr in lst[1:]:\n        if curr > curr:\n            break\n        else:\n            lst.insert(0, curr)\n\n    # Once we've made it through the list, we need to put the\n    # new element at the end, and then return the result.\n    return lst[-1] + lst[:-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    start = lst[0]\n    to_return = []\n    for num in lst[1:]:\n        # swap smallest with smallest element to the left\n        if num < start:\n            start, to_return = to_return, [num]\n            continue\n        # swap largest with largest element to the right\n        if num > start:\n            to_return.append(num)\n            continue\n        if num < start:\n            start, to_return = to_return, [num]\n            continue\n        # swap second-smallest with second-smallest element to the left\n        if num < start:\n            start, to_return = to_return, [num]\n            continue\n        # swap second-largest with second-largest element to the right\n        if num > start:\n            to_return.append(num)\n            continue\n        to_return.append(num)\n    return to_return", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, reverse=True)\n    res = []\n    while len(lst) > 0:\n        min = min(lst)\n        max = max(lst)\n        res.append(lst[min])\n        lst = lst[max:-1]\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    new_list = []\n    max_value = 0\n    for i in xrange(len(lst)):\n        if lst[i] > max_value:\n            max_value = lst[i]\n    return strange_sort_list([x for x in lst if x!= max_value])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    else:\n        l = []\n        i = 1\n        while True:\n            max = min(lst)\n            if i > 1:\n                l.append(lst[i])\n                lst = lst[(i + 1):]\n            else:\n                l.append(max)\n            i += 1\n        return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        # sorting in reverse order\n        new_lst = []\n        for index in range(len(lst) - 1, -1, -1):\n            if index >= 0:\n                new_lst.append(lst[index])\n            else:\n                new_lst.append(lst[-1])\n        return new_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    count = len(lst) - 1\n    while count >= 0:\n        minval = min(lst, key=lambda x: x)\n        maxval = max(lst, key=lambda x: x)\n        if minval > maxval:\n            temp = [minval, maxval]\n            temp.reverse()\n            temp.extend(lst)\n            lst = temp\n        else:\n            temp = [maxval, minval]\n            temp.reverse()\n            temp.extend(lst)\n            lst = temp\n        count -= 1\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    s_list = []\n    while lst:\n        first, last = lst[0], lst[-1]\n        if first > last:\n            lst = lst[:-1]\n            continue\n        s_list.append(first)\n        for i in range(1, len(lst) - 1):\n            if lst[i] == last:\n                s_list.append(lst[i])\n                break\n            s_list.append(last)\n        else:\n            s_list.append(lst[-1])\n    return s_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n\n    to_ret = []\n    for i in range(len(lst)):\n        if i == 0:\n            to_ret.append(lst[i])\n        else:\n            if to_ret[-1] > lst[i]:\n                to_ret.append(lst[i])\n            else:\n                to_ret.append(to_ret[-1])\n\n    return to_ret", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    min_value = min(lst)\n    max_value = max(lst)\n\n    # Move the first min_value to the end of the list\n    lst.remove(min_value)\n    lst.append(min_value)\n\n    # Move the last max_value to the beginning of the list\n    lst.remove(max_value)\n    lst.insert(0, max_value)\n\n    # Start with the new list\n    lst = strange_sort_list(lst)\n\n    # Move the rest of the values\n    for i in range(len(lst) - 1):\n        min_value = min(lst[i + 1 : i + 2])\n        max_value = max(lst[i + 2 : i + 3])\n\n        # Move the first min_value to the end of the list\n        lst[i + 1 : i + 2].remove(min_value)\n        lst[i + 2 : i + 3].append(min_value)\n\n        # Move the last max_value to the beginning of the list\n        lst[i + 1 : i + 2].remove(max_value)\n        lst[i + 2 : i + 3].insert(0, max_value)\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    assert len(lst) > 0\n    curr_min = min(lst)\n    curr_max = max(lst)\n    lst.sort()\n    for i in range(len(lst) - 1):\n        if curr_min > lst[i] and curr_max < lst[i]:\n            lst[i] = curr_min\n            curr_min = curr_min - 1\n        elif curr_min < lst[i] and curr_max > lst[i]:\n            lst[i] = curr_max\n            curr_max = curr_max + 1\n        else:\n            return lst\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst)\n    if not lst:\n        return []\n    return strange_sort_list(lst[1:]) + [lst[0]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst_copy = list(lst)\n    minimum = lst_copy[0]\n    maximum = lst_copy[-1]\n    for i in range(1, len(lst_copy)):\n        if (minimum + maximum) > lst_copy[i]:\n            minimum = lst_copy[i]\n            maximum = lst_copy[i]\n        else:\n            minimum = minimum + maximum\n            maximum = maximum - minimum\n    return [minimum, maximum, minimum, maximum]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    l = sorted(lst, key=lambda x: x)\n    return strange_sort_list(l[1:]) + [l]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    i = 0\n    while i < len(lst):\n        if lst[i] >= lst[i+1]:\n            result.append(lst[i])\n            i += 1\n        else:\n            result.append(lst[i+1])\n            i += 1\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        return sorted(lst, key=lambda x: x, reverse=True)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # sort the list\n    list_without_repeated_values = sorted(lst, key=lambda x: x[0])\n    # find the smallest value\n    # convert to int to avoid ''\n    smallest_value = list_without_repeated_values[0][0]\n    # if there are more values than just that\n    if len(list_without_repeated_values) > 1:\n        # find the next smallest value\n        next_smaller_value = list_without_repeated_values[1][0]\n        # get the difference between those two values\n        diff = next_smaller_value - smallest_value\n        # get the index of that value in the list\n        index = 0\n        # iterate through the list, change the values in the index\n        while index < len(list_without_repeated_values) - 1:\n            # increment index\n            index += 1\n            # check if the value is larger than next smallest value\n            if list_without_repeated_values[index][0] > next_smaller_value:\n                smallest_value = list_without_repeated_values[index][0]\n                # increment index\n                index += 1\n                # check if the value is larger than next smallest value\n                if list_without_repeated_values[index][0] > next_smaller_value:\n                    smallest_value = list_with", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    sort_list = []\n    minimum = lst[0]\n    for index, value in enumerate(lst[1:]):\n        if value < minimum:\n            minimum = value\n            sort_list.append(minimum)\n    return sort_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # this strange function uses a recursive algorithm to sort\n    # a list in strange order. it basically just swaps the value\n    # of two numbers, so that the first is greater than the second\n    # and the second is greater than the first. this is in a way\n    # similar to how other algorithms work, but it seems to work\n    # for strange values as well. it basically looks like this:\n    # if the first number is less than the second, then move the\n    # first number to the second position and then do it recursively\n    # with the second number, so that the first number will be\n    # greater than the second one. this works because the\n    # recursion will use the same number as the first one,\n    # which is the minimum of the list, and then in a way, it\n    # uses the second number as the minimum of the list.\n    # this does not work well with large lists, because it can\n    # be time consuming, but it will work for small lists.\n    # it is pretty fast, and works for lists of up to 1000 integers.\n    # i would use this function in a while loop, so that it only\n    # works for small lists, but that would be harder to implement.\n\n    for i in", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    start = 0\n    while start < len(lst):\n        middle = start + (len(lst) - start) / 2\n        end = middle\n        while end < len(lst) and lst[end] < lst[middle]:\n            end += 1\n        lst = [lst[start:end]] + list(range(middle, len(lst)))\n        start = end + 1\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    start = len(lst)\n    while start > 0:\n        mid = start / 2\n        swap = False\n        for i in range(start, mid):\n            if lst[i] < lst[mid]:\n                result.append(lst[i])\n                swap = True\n            elif lst[i] > lst[mid]:\n                result.append(lst[mid])\n                swap = True\n            else:\n                result.append(lst[mid])\n        if not swap:\n            result.append(lst[start])\n        start = start - 1\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    a = len(lst)\n    if a == 0:\n        return []\n    a = a % 3  # make odd\n    if a == 0:\n        return strange_sort_list(lst[1:]) + strange_sort_list(lst[:-1])\n    return strange_sort_list(lst[:-a]) + strange_sort_list(lst[-a:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    # 1. List is empty\n    if len(lst) == 0:\n        return result\n\n    # 2. List is not empty\n    else:\n        i = 0\n        while i < len(lst):\n            # 2.1. Sort the list\n            for j in range(0, len(lst)):\n                if lst[i] <= lst[j]:\n                    # 2.1.1. Swap list elements\n                    temp = lst[i]\n                    lst[i] = lst[j]\n                    lst[j] = temp\n                    # 2.1.2. Move i to the next index\n                    i = j + 1\n                    break\n\n            # 2.2. Check if list is not empty and set the flag\n            if i == len(lst):\n                # 2.2.1. Add the list element to the result list\n                result.append(lst[i])\n\n            # 2.3. Set i to the next index\n            i = i + 1\n\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    odd = 0\n    even = 0\n    c = 0\n    while len(lst) > 1:\n        c = c + 1\n        if odd == c:\n            c = c - 1\n        elif even == c:\n            odd = 0\n        else:\n            even = 0\n\n        for i in range(0, c):\n            if odd == c - 1 and lst[i] < lst[i + 1]:\n                lst[i], lst[i + 1] = lst[i + 1], lst[i]\n                odd = c - 1\n            elif even == c - 1 and lst[i] > lst[i + 1]:\n                lst[i], lst[i + 1] = lst[i], lst[i + 1]\n                even = c - 1\n            else:\n                odd = 0\n                even = 0\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    keys = sorted(lst)\n    list1 = []\n    list2 = []\n    list3 = []\n    list4 = []\n    list5 = []\n    list6 = []\n    list7 = []\n    list8 = []\n    for key in keys:\n        if key == keys[-1]:\n            list2.append(key)\n        elif key == keys[-2]:\n            list3.append(key)\n        elif key == keys[-3]:\n            list4.append(key)\n        elif key == keys[-4]:\n            list5.append(key)\n        elif key == keys[-5]:\n            list6.append(key)\n        elif key == keys[-6]:\n            list7.append(key)\n        elif key == keys[-7]:\n            list8.append(key)\n    for list1_item in list1:\n        for list2_item in list2:\n            for list3_item in list3:\n                for list4_item in list4:\n                    for list5_item in list5:\n                        for list6_item in list6:\n                            for list7_item in list7:\n                                for list8_item in list8:\n                                    list1_item.append(list2_item.pop(0))\n                                    list2_item.append(list3", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    start = 1\n    end = len(lst)\n    middle = start + int(end / 2)\n    middle_swap = lst[middle]\n    middle_swap_before = lst[middle - 1]\n    middle_swap_after = lst[middle + 1]\n    lst[middle] = middle_swap_before\n    lst[middle - 1] = middle_swap_after\n    lst[middle + 1] = middle_swap\n\n    while start < end:\n        i = start + int(end / 2)\n        j = i + 1\n        while j < end and j > start:\n            if lst[i] < lst[j]:\n                swap = lst[i]\n                lst[i] = lst[j]\n                lst[j] = swap\n            j += 1\n        start += 1\n        end -= 1\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) < 2:\n        return []\n\n    if not (len(lst)%2):\n        return [lst[0]]\n\n    lst = sorted(lst)\n\n    # odd number of elements -> do one last step to remove the last element\n    if len(lst) % 2:\n        return strange_sort_list(lst[:-1]) + [lst[-1]]\n\n    for i in range(1, len(lst)):\n        if (lst[i] < lst[i-1]) and (lst[i] < lst[i+1]):\n            lst.insert(i-1, lst[i])\n        if (lst[i] > lst[i-1]) and (lst[i] > lst[i+1]):\n            lst.insert(i-1, lst[i])\n\n    return strange_sort_list(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    new_list = []\n    for item in lst:\n        new_item = min(item, lst[-1][:-1])\n        new_list.append(new_item)\n        lst.pop()\n    return new_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # step 1\n    new_list = []\n    new_list.append(lst[0])\n    while len(new_list) > 1:\n        m = sorted(new_list)[-1]\n        n = new_list[-1]\n        new_list.append(m)\n        new_list.append(n)\n    # step 2\n    while len(new_list) > 1:\n        m = sorted(new_list)[-1]\n        n = new_list[-1]\n        new_list.append(m)\n        new_list.append(n)\n    return new_list\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Check the length of list\n    if len(lst) == 0:\n        return []\n\n    # Initialize a list to hold the strange order\n    strange_order = []\n\n    # For each element in the list, keep the values\n    for i in range(len(lst)):\n\n        # Check if element is greater than the previous one\n        if lst[i] > strange_order[-1] + 1.0:\n\n            # Keep the previous values\n            strange_order.append(strange_order[-1])\n\n            # Append the new values\n            strange_order.append(lst[i])\n\n    # Append the values in order\n    strange_order.append(strange_order[-1])\n    return strange_order", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Sort list backwards if it isn't empty\n    if not lst:\n        return lst\n\n    # Sort the list in reverse order\n    sorted_list = list(reversed(lst))\n\n    # Sort the reversed list to normal order\n    sorted_list = [sorted(s, key=lambda x: x) for s in sorted_list]\n\n    # Return the sorted list\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x) # sort list by key\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    size = len(lst)\n    for i in range(0, size):\n        if i < size:\n            mid = size // 2\n            if lst[i] < lst[mid]:\n                result.append(lst[i])\n            elif lst[i] > lst[mid]:\n                result.append(lst[mid])\n            else:\n                result.append(lst[i])\n                result.append(lst[mid])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    s = []\n    for i in range(len(lst)):\n        if i == 0:\n            s.append(lst[0])\n        elif i == len(lst) - 1:\n            s.append(lst[-1])\n        else:\n            s.append(lst[i])\n    return s", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    res.append(lst[0])\n    for i in range(1, len(lst)):\n        if not lst[i] > lst[i - 1]:\n            res.append(lst[i])\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # List that will hold the strange order\n    strange_order = []\n\n    # Starting point for strange sorting\n    min = None\n\n    for x in range(len(lst)):\n        if min is None:\n            min = x\n        else:\n            if lst[x] < min:\n                min = x\n            else:\n                strange_order.append(lst[x])\n\n    return strange_order\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    odd = 0\n    odd_count = 0\n    for i in lst:\n        if not odd:\n            odd = i\n            odd_count += 1\n        else:\n            if odd!= i:\n                odd = i\n                odd_count += 1\n    if odd_count % 2 == 1:\n        return odd, odd\n    else:\n        return strange_sort_list(lst[odd:odd+1])</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    smallest, rest = lst[0], [lst[0]]\n    for item in rest:\n        if smallest > item and smallest in rest:\n            smallest, rest = rest[-rest.index(smallest):], rest\n        elif smallest < item:\n            smallest, rest = item, rest[:-rest.index(item)]\n    return rest", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) < 2:\n        return []\n\n    # This is a bit of a brute force algorithm, we keep shifting everything by 1 until\n    # we sort the list\n    # TODO: This algorithm could be much faster\n    # Could we use a min heap for this?\n    while len(lst) > 2:\n        m = min(lst)\n        lst = lst[1:] + [m] * len(lst[0]) #We will need to add every value of the minimum to the list\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    list_to_sideways = lst[:]\n    max_index = 0\n    min_index = len(lst) - 1\n    for i in range(len(list_to_sideways)):\n        if list_to_sideways[i] > list_to_sideways[max_index]:\n            max_index = i\n        if list_to_sideways[i] < list_to_sideways[min_index]:\n            min_index = i\n    list_to_sideways = list_to_sideways[:max_index] + \\\n        list_to_sideways[min_index + 1:]\n    return list_to_sideways", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    return [x for x in sorted(lst, reverse=True)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def strange_sort(lst):\n        for i in range(len(lst) - 1, -1, -1):\n            x = lst[i]\n            for j in range(i + 1, len(lst) - 1):\n                if lst[j] > x:\n                    lst[j], lst[x] = lst[x], lst[j]\n                    break\n            else:\n                lst[i], lst[x] = lst[x], lst[i]\n        return lst\n\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [lst.pop(0), list(map(max, lst)), list(map(min, lst))]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    for i in range(len(lst) - 1):\n        if not lst[i] >= lst[i + 1]:\n            lst[i], lst[i + 1] = lst[i + 1], lst[i]\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    max1 = max(lst)\n    min1 = min(lst)\n    max2 = max1 + 1\n    min2 = min1 - 1\n    for i in range(len(lst)):\n        if i == 0:\n            if max1 < min2:\n                temp = min1\n                min1 = min2\n                min2 = temp\n                temp = max1\n                max1 = max2\n                max2 = temp\n            else:\n                temp = min2\n                min2 = min1\n                min1 = temp\n                temp = max2\n                max2 = max1\n                max1 = temp\n            lst[i], lst[i - 1] = lst[i - 1], lst[i]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    temp = []\n    for i in range(len(lst)):\n        temp.append(lst[i])\n        lst[i], lst[i] = lst[i], min(lst[i:])\n    return temp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    max_value = max(lst)\n    min_value = min(lst)\n    odds_left = [max_value - 1, min_value + 1]\n    evens_right = [max_value + 1, min_value - 1]\n    # odds_left is the smallest odd number in the list,\n    # and evens_right is the smallest even number in the list\n    odds_left = strange_sort_list(odds_left)\n    evens_right = strange_sort_list(evens_right)\n    # odds_left now contains the odd number, min_value, min_value + 1,\n    # max_value - 1, and max_value + 1\n    # odds_left[0] is the largest odd number in the list\n    # odds_left[1] is the largest even number in the list\n    # odds_left[2] is the smallest odd number in the list\n    # odds_left[3] is the smallest even number in the list\n    # odds_left[-2] is the largest odd number in the list\n    odds_left = [odds for odds_left in odds_left]\n    # evens_right now contains the even number, min_value - 1, min_value,\n    # max_value + 1, max_value, and min_value -", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    smallest = lst[0]\n    largest = lst[-1]\n    if len(lst) == 0:\n        res.append(smallest)\n        res.append(largest)\n    else:\n        res.append(smallest)\n        res.append(lst[0])\n        res.append(largest)\n        for i in range(1, len(lst)):\n            if smallest > lst[i]:\n                res.append(lst[i])\n            elif smallest == lst[i]:\n                res.append(largest)\n            else:\n                res.append(smallest)\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [lst[0], lst[-1]] + sorted(lst[2:], key=lambda x: x, reverse=True) + [lst[-1]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    old_min, old_max = min(lst), max(lst)\n    new_min, new_max = 0, len(lst)\n    for i in range(len(lst)):\n        # move maximum to end of list\n        if old_max <= new_max:\n            # leave current value unchanged\n            new_max = old_max\n        else:\n            new_min, old_max = old_max, new_max\n        # move minimum to beginning of list\n        if old_min >= new_min:\n            # leave current value unchanged\n            new_min = old_min\n        else:\n            new_max, old_min = old_min, new_min\n        # move maximum to beginning of list\n        if old_max <= new_max:\n            # leave current value unchanged\n            new_max = old_max\n        else:\n            new_min, old_max = old_max, new_max\n        # move minimum to end of list\n        if old_min >= new_min:\n            # leave current value unchanged\n            new_min = old_min\n        else:\n            new_max, old_min = old_min, new_min\n        # move maximum to end of list\n        if old_max <= new_max:\n            # leave current value unchanged\n            new_max = old_max\n        else:\n            new_min, old_max = old_max, new_max\n        # move minimum to end of list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    while lst:\n        last = lst.pop()\n        if last in sorted_list:\n            continue\n        if last > sorted_list[-1]:\n            sorted_list.append(last)\n        else:\n            sorted_list.append(last)\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return [x for x in strange_sort(lst) if x in lst]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    lst.sort(reverse=True)\n    l = lst[-1]\n    for i in range(0, len(lst), 2):\n        if l < lst[i]:\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n        l = lst[i+1]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return ([lst[0]] + [max(lst[1:])] + [min(lst[1:])])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    l = [lst[0]]\n    while l[0] < l[n-1]:\n        l.append(l[0])\n        l[0] = l[n-1]\n        l.append(l[n-1])\n\n    return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    current = lst[0]\n    return [current] + strange_sort_list(lst[1:]) + [current]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    max, min = lst[0], 0\n    for i in range(len(lst)):\n        # Skip the first element, its value is not in the list\n        if i == 0:\n            continue\n\n        # Skip the values which are less than the current value\n        if lst[i] < min:\n            continue\n\n        # Skip the values which are greater than the current value\n        if lst[i] > max:\n            continue\n\n        # Skip the values which are less than or equal to the current value\n        if lst[i] <= min:\n            continue\n\n        max = lst[i]\n        min = lst[i]\n\n    return list(reversed(lst[-min:max+1]))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    min_elem = 0\n    max_elem = len(lst) - 1\n\n    for i in range(len(lst)):\n        if min_elem > max_elem:\n            temp = lst[max_elem]\n            lst[max_elem] = lst[min_elem]\n            lst[min_elem] = temp\n\n        else:\n            sorted_list.append(lst[min_elem])\n            min_elem += 1\n\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    import sys\n    import random\n    import operator\n    import bisect\n    if len(lst) < 2:\n        return []\n    for i in range(len(lst)):\n        if i == 0:\n            continue\n        current = lst[i]\n        for j in range(i + 1, len(lst)):\n            if lst[j] > current:\n                current = lst[j]\n                i = j\n        if current > lst[i]:\n            current = lst[i]\n        lst[i] = current\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    assert len(lst) > 0, 'Empty list not allowed'\n    res = []\n    prev = lst[0]\n    count = 1\n    for num in lst[1:]:\n        if count > 0:\n            res.append(prev)\n            prev = num\n        else:\n            res.append(num)\n        count += 1\n    res.append(prev)\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    other_list = strange_sort_list(lst[1:])\n    return lst + other_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    list_size = len(lst)\n    if list_size == 0:\n        return []\n    list_min = min(lst)\n    list_max = max(lst)\n    lst = list(lst)\n    lst.sort(key=lambda x: x - list_min)\n    lst.sort(key=lambda x: x - list_max)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort()\n    start, last = 0, len(lst)\n    while start < last:\n        mid = (start + last) // 2\n        if mid == start:\n            return lst[last:]\n        elif mid == last:\n            return lst[start:]\n        else:\n            tmp = lst[start:mid]\n            lst[start:mid] = lst[mid+1:last]\n            lst[mid+1:last] = tmp\n            start, last = mid + 1, mid + 2", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    i = 0\n    sorted = []\n    while lst:\n        i += 1\n        if i == len(lst):\n            break\n        lst.sort()\n        sorted.append(lst[i])\n    return sorted", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    for i in xrange(len(lst)):\n        if i == 0:\n            if not lst:\n                return lst\n            for j in xrange(i + 1):\n                lst[i], lst[j] = lst[j], lst[i]\n        elif lst[i] >= lst[i - 1]:\n            if not lst:\n                return lst\n            for j in xrange(i + 1, len(lst)):\n                lst[i], lst[j] = lst[j], lst[i]\n        else:\n            if not lst:\n                return lst\n            for j in xrange(i, len(lst)):\n                lst[i], lst[j] = lst[j], lst[i]\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    count = len(lst)\n    if count == 0:\n        return []\n    elif count == 1:\n        return [lst[0]]\n    else:\n        middle = count / 2\n        min_smaller = min(lst[middle - 1], min(lst[middle - count / 2], lst[middle]))\n        max_bigger = max(lst[middle + count / 2], max(lst[middle + 1 : middle + count]))\n        return [lst[min_smaller], lst[max_bigger]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Keep track of the min and max\n    minval = 0\n    maxval = 0\n    for i in range(len(lst)):\n        if not lst[i]:\n            continue\n        elif lst[i] < minval:\n            minval = lst[i]\n        elif lst[i] > maxval:\n            maxval = lst[i]\n    # And sort the rest\n    lst_new = []\n    for i in range(len(lst)):\n        if not lst[i]:\n            continue\n        else:\n            if lst[i] < minval:\n                lst_new.append(minval)\n                minval = lst[i]\n            elif lst[i] > maxval:\n                lst_new.append(maxval)\n                maxval = lst[i]\n            else:\n                lst_new.append(lst[i])\n    return list(set(lst_new))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    lst = [int(i) for i in str(lst)]  # Convert string to int\n    lst = sorted(lst, reverse = True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort_function(lst):\n        \"\"\"\n        The strange sort function.\n        \"\"\"\n        if len(lst) == 0:\n            return lst\n        for i in range(len(lst) - 1):\n            if lst[i] < lst[i + 1]:\n                lst[i], lst[i + 1] = lst[i + 1], lst[i]\n        return lst\n\n    return strange_sort_function(lst)\n\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n\n    list_ = []\n    for x in lst:\n        list_.append(x)\n\n    list_.sort(reverse=True)\n\n    return list_", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    k = len(lst)\n    if k <= 2:\n        return list(range(k))\n    else:\n        # Let's get the max of the two smallest numbers.\n        small_lst = sorted(lst, key=lambda x: x)\n        small_lst.reverse()\n        small_max = small_lst[0]\n        # Then get the min of the two biggest numbers.\n        big_lst = sorted(lst, key=lambda x: x)\n        big_lst.reverse()\n        big_min = big_lst[0]\n        # Return the list sorted in strange order.\n        return list(range(small_max, big_min, big_max-small_max))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        if lst[0] > lst[1]:\n            return [lst[0], lst[1]]\n        if lst[1] > lst[0]:\n            return [lst[1], lst[0]]\n    result = []\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            result.append(lst[i])\n            result.append(lst[i + 1])\n            result.append(lst[i + 2])\n            result.append(lst[i + 3])\n        else:\n            result.append(lst[i])\n            result.append(lst[i + 1])\n            result.append(lst[i + 2])\n            result.append(lst[i + 3])\n            result.append(lst[i + 4])\n    return result\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    sortedList = sorted(lst)\n    current = sortedList[0]\n    while current!= sortedList[-1]:\n        for i in range(len(lst) - 1, -1, -1):\n            if lst[i] < current:\n                lst[i+1] = lst[i]\n                lst[i] = current\n                current = sortedList[i]\n                break\n        else:\n            return sortedList", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    lst = strange_sort_list(lst[1:]) + strange_sort_list(lst[:1])\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort()\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return strange_sort_list(lst[1:]) + [lst[0]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    last_index = len(lst) - 1\n    while last_index >= 0:\n        index = last_index - 1\n        while index >= 0:\n            while index > last_index and lst[index] > lst[index - 1]:\n                del lst[index]\n                index -= 1\n            if index < last_index:\n                last_index = index + 1\n                if lst[index] < lst[last_index]:\n                    del lst[index]\n    if last_index == 0:\n        return []\n    return lst[:last_index + 1] + (lst[last_index + 1:],)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Loop through list, and find smallest element\n    for i in range(len(lst)):\n        if lst[i] < lst[i + 1]:\n            a = lst[i]\n            i = i + 1\n        if lst[i] > lst[i + 1]:\n            b = lst[i]\n            i = i + 1\n\n    # Find smallest element after smallest element\n    while i < len(lst) - 1:\n        if lst[i] < lst[i + 1]:\n            a = lst[i]\n            i = i + 1\n        if lst[i] > lst[i + 1]:\n            b = lst[i]\n            i = i + 1\n\n    # We found the minimum element\n    i = i + 1\n\n    # Do same thing for max\n    while i < len(lst) - 1:\n        if lst[i] > lst[i + 1]:\n            a = lst[i]\n            i = i + 1\n        if lst[i] < lst[i + 1]:\n            b = lst[i]\n            i = i + 1\n\n    # We found the maximum element\n    i = i + 1\n\n    # Now put elements into list in strange order\n    for j in range(0, len(lst) - i):\n        lst[j + i] = a\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    order = []\n    for i in lst:\n        if i < 0:\n            order.append(i)\n        elif i < (len(lst) - 1):\n            order.append(lst[i - 1])\n            order.append(i)\n        else:\n            order.append(i - 1)\n    return order", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    max_index = -1\n    min_index = len(lst) - 1\n    while min_index!= max_index:\n        temp_index = (max_index - 1) + (min_index + 1)\n        if lst[temp_index] > lst[min_index]:\n            min_index = temp_index\n        else:\n            max_index = temp_index\n    return lst[:-max_index + 1] + [lst[max_index]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange(x):\n        if x < 0:\n            return x\n        return 0\n    return [strange(i) for i in sorted(lst, key=strange)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    value = lst[0]\n    lst = lst[1:]\n    while lst:\n        max = max(lst)\n        lst = lst[1:]\n        value += max - value\n    return [value] + [lst] + [value]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    while len(lst):\n        smallest = min(lst)\n        largest = max(lst)\n        smallest_index = 0\n        largest_index = 0\n        for i in range(0, len(lst)):\n            if smallest == lst[i]:\n                smallest_index = i\n            if largest == lst[i]:\n                largest_index = i\n        if smallest_index!= 0:\n            lst.insert(0, lst[smallest_index])\n            del lst[smallest_index]\n        if largest_index!= len(lst) - 1:\n            lst.append(lst[largest_index])\n            del lst[largest_index]\n        return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort(key=lambda x: x)\n    for x in range(len(lst) - 1):\n        for j in range(x + 1, len(lst)):\n            if lst[j] > lst[j - 1]:\n                if j!= x:\n                    tmp = lst[j]\n                    lst[j] = lst[j - 1]\n                    lst[j - 1] = tmp\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    return sorted(lst, key=lambda x: x)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = [lst[0]] * len(lst) + [lst[-1]] * (len(lst) - 1)\n    for i in range(len(lst) - 1):\n        while (len(lst) - i - 1) % 3!= 0:\n            lst[i], lst[i+1], lst[i+2] = lst[i+2], lst[i], lst[i+1]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    if len(lst) == 1:\n        return [lst[0], lst[0], lst[0], lst[0]]\n    minval = lst[0]\n    maxval = lst[-1]\n    for i in range(1, len(lst)):\n        if lst[i] < minval:\n            minval = lst[i]\n        elif lst[i] > maxval:\n            maxval = lst[i]\n    return [maxval, minval, minval, minval]"]]