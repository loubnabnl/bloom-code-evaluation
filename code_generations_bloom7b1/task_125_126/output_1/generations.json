[["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('<', '')\n    txt = txt.replace('>', '')\n    txt = txt.replace('|', '')\n    txt = txt.replace('~', '')\n    txt = txt.replace('*', '')\n    txt = txt.replace('+', '')\n    txt = txt.replace('-', '')\n    txt = txt.replace('.', '')\n    txt = txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    if txt.find(',') == -1:\n        return [txt.split()[0]]\n    else:\n        return txt.split()", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = []\n    for word in txt.split():\n        if word.isalpha():\n            words.append(word.lower())\n        elif word.isdigit():\n            words.append(word)\n        else:\n            words.append(word)\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    elif len(words) == 1:\n        return words[0].lower()\n    else:\n        return [words[0]] + split_words(words[1])", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    if txt[0] == txt[-1] =='':\n        return txt.split()\n    if txt[0] == txt[-1]:\n        return [txt.lower()]\n    if txt[0].isupper():\n        return [txt.lower()]\n    if txt[-1].isupper():\n        return [txt.lower()]\n    return [txt.lower()]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt is None:\n        return []\n    txt = txt.lower()\n    if txt.find(' ') == -1:\n        return [txt]\n    return [txt.split(' ')]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if not words:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +'' + words[1]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt is None:\n        return []\n    txt = txt.lower()\n    if txt.find(',') == -1:\n        return [txt.split()[0]]\n    else:\n        return [txt.split()[0]] + [txt.split()[1]]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w]\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w]\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w]\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w]\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w]\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w]\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w]\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w]\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w]\n    txt = [w.lower() for w in", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w]\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 1:\n        return words\n    elif len(words) == 0:\n        return ['']\n    elif len(words) == 1:\n        return words[0].lower()\n    else:\n        return [word.lower() for word in words]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    elif len(words) == 1:\n        return [words[0]]\n    else:\n        return [words[0]] + split_words(words[1])", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('<', '')\n    txt = txt.replace('>', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt.find(',') == -1:\n        return txt.split()\n    else:\n        return txt.split(',')", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    elif len(words) == 1:\n        return words[0].lower()\n    else:\n        return [word.lower() for word in words]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = []\n    for word in txt.split():\n        if word.isalpha():\n            words.append(word.lower())\n        elif word.isdigit():\n            words.append(word)\n        else:\n            words.append(word)\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    words = txt.split()\n    if not words:\n        return ['']\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words\n    if len(words) == 4:\n        return words\n    if len(words) == 5:\n        return words\n    if len(words) == 6:\n        return words\n    if len(words) == 7:\n        return words\n    if len(words) == 8:\n        return words\n    if len(words) == 9:\n        return words\n    if len(words) == 10:\n        return words\n    if len(words) == 11:\n        return words\n    if len(words) == 12:\n        return words\n    if len(words) == 13:\n        return words\n    if len(words) == 14:\n        return words\n    if len(words) == 15:\n        return words\n    if len(words) == 16:\n        return words\n    if len(words) == 17:\n        return words\n    if len(words) == 18:\n        return words\n    if len(words) == 19:\n        return words\n    if len(words) == 20:\n        return words\n    if len(words)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('|', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', ''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return ['']\n    txt = txt.lower()\n    if txt.find(',') == -1:\n        return [txt.split()]\n    else:\n        return [txt.split(',')]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt is None:\n        return []\n    txt = txt.lower()\n    if txt.find(',') == -1:\n        return [txt.count(' ')]\n    else:\n        return [txt.split(',')]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if txt[0] == txt[-1] == txt[-2]:\n        return [txt[1:]]\n    if txt[0] == txt[-1] == txt[-2]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-2]:\n        return [txt[1:]]\n    if txt[0] == txt[-2]:\n        return [txt[1:]]\n    if txt[0] == txt[-3]:\n        return [txt[1:]]\n    if txt[0] == txt[-3]:\n        return [txt[1:]]\n    if txt[0] == txt[-4]:\n        return [txt[1:]]\n    if txt[0] == txt[-4]:\n        return [txt[1:]]\n    if txt[0] == txt[-5]:\n        return [txt[1:]]\n    if txt[0] == txt[-5]:\n        return [txt[1:]]\n    if txt[0] == txt[-6]:\n        return [txt[1:]]\n    if txt[0] == txt[-6]:\n        return [txt[1:]]\n    if txt[0] == txt[-7]:\n        return [txt[1:]]\n    if txt[0] == txt[-7]:\n        return [txt[1:", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(',','')\n    txt = txt.replace(' ', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('.', '')\n    txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    if txt:\n        if len(txt) > 1:\n            txt = txt[0] +'' +''.join(txt[1:])\n        else:\n            txt = txt[0]\n    else:\n        txt = ''\n    return txt.split()", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0]] + words[1].split()\n    if len(words) == 3:\n        return [words[0]] + words[1] + words[2].split()\n    if len(words) == 4:\n        return [words[0]] + words[1] + words[2] + words[3].split()\n    if len(words) == 5:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4].split()\n    if len(words) == 6:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4] + words[5].split()\n    if len(words) == 7:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6].split()\n    if len(words) == 8:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6] + words[7].split()\n    if len(words) == 9:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6] + words[7] +", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt.find(\" \") == -1:\n        return txt.split(\",\")\n    else:\n        return txt.split(\" \")", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    if txt.find(',') == -1:\n        return [txt.count(' ')]\n    return [txt.split()]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if txt[0].isalpha():\n        return [txt]\n    if txt[0] == ',':\n        return [txt]\n    if txt[0] =='':\n        return [txt]\n    return [txt.lower()]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('<', '')\n    txt = txt.replace('>', '')\n    txt = txt.replace('|', '')\n    txt = txt.replace('~', '')\n    txt = txt.replace('*', '')\n    txt = txt.replace('+', '')\n    txt = txt.replace('-', '')\n    txt = txt.replace('^', '')\n    txt = txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) > 2:\n        return words\n    if len(words) % 2 == 0:\n        return [words[0]]\n    return [words[0]] + [''] + words[1:]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words\n    if len(words) == 4:\n        return words\n    if len(words) == 5:\n        return words\n    if len(words) == 6:\n        return words\n    if len(words) == 7:\n        return words\n    if len(words) == 8:\n        return words\n    if len(words) == 9:\n        return words\n    if len(words) == 10:\n        return words\n    if len(words) == 11:\n        return words\n    if len(words) == 12:\n        return words\n    if len(words) == 13:\n        return words\n    if len(words) == 14:\n        return words\n    if len(words) == 15:\n        return words\n    if len(words) == 16:\n        return words\n    if len(words) == 17:\n        return words\n    if len(words) == 18:\n        return words\n    if len(words) == 19:\n        return words\n    if len(words) == 20:\n        return words\n    if len(words) == 21:\n        return words\n    if len(words) == 22:\n        return words\n    if len(words) == 23:", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return [txt]\n    if txt.isdigit() or txt.isalpha():\n        return [txt]\n    if txt.isdigit() or txt.isalpha() or txt.isdigit():\n        return [txt]\n    if txt.isdigit() or txt.isalpha() or txt.isdigit() or txt.isalpha():\n        return [txt]\n    if txt.isdigit() or txt.isalpha() or txt.isdigit() or txt.isalpha() or txt.isdigit() or txt.isalpha() or txt.isdigit() or txt.isalpha() or txt.isdigit() or txt.isalpha() or txt.isdigit() or txt.isalpha() or txt.isdigit() or txt.isalpha() or txt.isdigit() or txt.isalpha() or txt.isdigit() or txt.isalpha() or txt.isdigit() or txt.isalpha() or txt.isdigit() or txt.isalpha() or txt.isdigit() or txt.isalpha() or txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() + words[1].lower() + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() + words[1].lower() + words[2].lower() + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() + words[1].lower() + words[2].lower() + words[3].lower() + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() + words[1].lower() + words[2].lower() + words[3].lower() + words[4].lower() + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() + words[1].lower() + words[2].lower() + words[3].lower() + words[4].lower() + words[5].lower() + words[6].lower()\n    if len(words) == 8:\n        return words[0].", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 1:\n        return words\n    if len(words) > 1:\n        return words\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2],", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) > 1:\n        return [words[0]] + words[1:]\n    return [words[0]]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(',','')\n    txt = txt.replace(' ', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';',", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('<', '')\n    txt = txt.replace('>', '')\n    txt = txt.replace('|', '')\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('|', '')\n    txt = txt.replace('~', '')\n    txt = txt.replace('*', '')\n    txt = txt.replace('+', '')\n    txt = txt.replace('-', '')\n    txt = txt.replace('=', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words\n    if len(words) == 4:\n        return words\n    if len(words) == 5:\n        return words\n    if len(words) == 6:\n        return words\n    if len(words) == 7:\n        return words\n    if len(words) == 8:\n        return words\n    if len(words) == 9:\n        return words\n    if len(words) == 10:\n        return words\n    if len(words) == 11:\n        return words\n    if len(words) == 12:\n        return words\n    if len(words) == 13:\n        return words\n    if len(words) == 14:\n        return words\n    if len(words) == 15:\n        return words\n    if len(words) == 16:\n        return words\n    if len(words) == 17:\n        return words\n    if len(words) == 18:\n        return words\n    if len(words) == 19:\n        return words\n    if len(words) == 20:\n        return words\n    if len(words) == 21:\n        return words\n    if len(words) == 22:\n        return words\n    if len(words) == 23:", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    if not txt:\n        return [txt[0]]\n    if len(txt) == 1:\n        return [txt[0]]\n    if len(txt) == 2:\n        return [txt[0], txt[1]]\n    if len(txt) == 3:\n        return [txt[0], txt[1], txt[2]]\n    if len(txt) == 4:\n        return [txt[0], txt[1], txt[2], txt[3]]\n    if len(txt) == 5:\n        return [txt[0], txt[1], txt[2], txt[3], txt[4]]\n    if len(txt) == 6:\n        return [txt[0], txt[1], txt[2], txt[3], txt[4], txt[5]]\n    if len(txt) == 7:\n        return [txt[0], txt[1], txt[2], txt[3], txt[4], txt[5], txt[6]]\n    if len(txt) == 8:\n        return [txt[0], txt[1], txt[2], txt[3], txt[4], txt[5], txt[6], txt[7]]\n    if len(txt) == 9:\n        return [txt[0], txt[1], txt[2], txt[3], txt[4], txt[5], txt[6]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    words = txt.split()\n    if not words:\n        return ['']\n    if len(words) == 1:\n        return words[0]\n    if len(words) == 2:\n        return words\n    if len(words) > 2:\n        return words[:2] + words[2:]\n    return [words[0]] + words[1:]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return txt.split()\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return txt.split()\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return txt.split()\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return txt.split()\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return txt.split()\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return txt.split()\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return txt.split()\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return txt.split()\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return txt.split()\n    if txt.isdigit():\n        return [txt]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if not words:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    else:\n        return [word.lower() for word in words]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0]\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words\n    if len(words) == 4:\n        return words\n    if len(words) == 5:\n        return words\n    if len(words) == 6:\n        return words\n    if len(words) == 7:\n        return words\n    if len(words) == 8:\n        return words\n    if len(words) == 9:\n        return words\n    if len(words) == 10:\n        return words\n    if len(words) == 11:\n        return words\n    if len(words) == 12:\n        return words\n    if len(words) == 13:\n        return words\n    if len(words) == 14:\n        return words\n    if len(words) == 15:\n        return words\n    if len(words) == 16:\n        return words\n    if len(words) == 17:\n        return words\n    if len(words) == 18:\n        return words\n    if len(words) == 19:\n        return words\n    if len(words) == 20:\n        return words\n    if len(words) == 21:\n        return words\n    if len(words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.',", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(',','')\n    txt = txt.replace(' ', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('.', '')\n    txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    if txt.find(',') == -1:\n        return [txt.count(' ')]\n    else:\n        return [txt.split(',')]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if not words:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +'' + words[1]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    if txt[0] == txt[-1] and txt[0] == txt[-2]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-2]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-2]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-2]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-2]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-2]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-2]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-2]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    words = txt.split()\n    if words[-1] =='':\n        words.pop()\n    if words[-1] == ',':\n        words.pop()\n    if words[-1] == '.':\n        words.pop()\n    if words[-1] == '!':\n        words.pop()\n    if words[-1] == '?':\n        words.pop()\n    if words[-1] == '[':\n        words.pop()\n    if words[-1] == ']':\n        words.pop()\n    if words[-1] == '{':\n        words.pop()\n    if words[-1] == '}':\n        words.pop()\n    if words[-1] == '(':\n        words.pop()\n    if words[-1] == ')':\n        words.pop()\n    if words[-1] == ',':\n        words.pop()\n    if words[-1] == '.':\n        words.pop()\n    if words[-1] == '!':\n        words.pop()\n    if words[-1] == '?':\n        words.pop()\n    if words[-1] == '[':\n        words.pop()\n    if words[-1] == ']':\n        words.pop()\n    if words[-1] == '{':\n        words.pop()\n    if words[-1] == '}':\n        words.pop()\n    if words[-1] == '(':\n        words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return [txt]\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return [txt]\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return [txt]\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return [txt]\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return [txt]\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return [txt]\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return [txt]\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return [txt]\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return [txt]\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    words = txt.split()\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words\n    if len(words) == 4:\n        return words\n    if len(words) == 5:\n        return words\n    if len(words) == 6:\n        return words\n    if len(words) == 7:\n        return words\n    if len(words) == 8:\n        return words\n    if len(words) == 9:\n        return words\n    if len(words) == 10:\n        return words\n    if len(words) == 11:\n        return words\n    if len(words) == 12:\n        return words\n    if len(words) == 13:\n        return words\n    if len(words) == 14:\n        return words\n    if len(words) == 15:\n        return words\n    if len(words) == 16:\n        return words\n    if len(words) == 17:\n        return words\n    if len(words) == 18:\n        return words\n    if len(words) == 19:\n        return words\n    if len(words) == 20:\n        return words\n    if len(words) == 21:\n        return words\n    if len(words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if txt[0] == txt[-1] and txt[0] in (' ', ','):\n        return txt.split()\n    if txt[0].isupper():\n        return txt.split(' ')\n    if txt[0].islower():\n        return txt.split(',')\n    return [txt[0]] + split_words(txt[1:])", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt is None:\n        return []\n    txt = txt.lower()\n    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return ['']\n    txt = txt.lower()\n    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0] +'' + words[1]]\n    if len(words) == 3:\n        return [words[0] +'' + words[1] +'' + words[2]]\n    if len(words) == 4:\n        return [words[0] +'' + words[1] +'' + words[2] +'' + words[3]]\n    if len(words) == 5:\n        return [words[0] +'' + words[1] +'' + words[2] +'' + words[3] +'' + words[4]]\n    if len(words) == 6:\n        return [words[0] +'' + words[1] +'' + words[2] +'' + words[3] +'' + words[4] +'' + words[5]]\n    if len(words) == 7:\n        return [words[0] +'' + words[1] +'' + words[2] +'' + words[3] +'' + words[4] +'' + words[5] +'' +", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if not words:\n        return ['']\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words\n    if len(words) == 4:\n        return words\n    if len(words) == 5:\n        return words\n    if len(words) == 6:\n        return words\n    if len(words) == 7:\n        return words\n    if len(words) == 8:\n        return words\n    if len(words) == 9:\n        return words\n    if len(words) == 10:\n        return words\n    if len(words) == 11:\n        return words\n    if len(words) == 12:\n        return words\n    if len(words) == 13:\n        return words\n    if len(words) == 14:\n        return words\n    if len(words) == 15:\n        return words\n    if len(words) == 16:\n        return words\n    if len(words) == 17:\n        return words\n    if len(words) == 18:\n        return words\n    if len(words) == 19:\n        return words\n    if len(words) == 20:\n        return words\n    if len(words) == 21:\n        return words\n    if len(words) == 22:", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return ['']\n    txt = txt.lower()\n    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return [txt]\n    if txt.isdigit() and txt.isalpha():\n        return [txt]\n    if txt.isdigit() and txt.isalpha() and txt.isdigit():\n        return [txt]\n    if txt.isdigit() and txt.isalpha() and txt.isdigit() and txt.isalpha():\n        return [txt]\n    if txt.isdigit() and txt.isalpha() and txt.isdigit() and txt.isalpha() and txt.isdigit() and txt.isalpha() and txt.isdigit() and txt.isalpha() and txt.isdigit() and txt.isalpha() and txt.isdigit() and txt.isalpha() and txt.isdigit() and txt.isalpha() and txt.isdigit() and txt.isalpha() and txt.isdigit() and txt.isalpha() and txt.isdigit() and txt.isalpha() and txt.isdigit() and txt.isalpha() and txt.isdigit() and txt.isalpha() and txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    if txt[0] == txt[-1] and txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if txt[0] == txt[-1]:\n        return [txt[1:]]\n    if", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.',", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return words\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words\n    if len(words) == 4:\n        return words\n    if len(words) == 5:\n        return words\n    if len(words) == 6:\n        return words\n    if len(words) == 7:\n        return words\n    if len(words) == 8:\n        return words\n    if len(words) == 9:\n        return words\n    if len(words) == 10:\n        return words\n    if len(words) == 11:\n        return words\n    if len(words) == 12:\n        return words\n    if len(words) == 13:\n        return words\n    if len(words) == 14:\n        return words\n    if len(words) == 15:\n        return words\n    if len(words) == 16:\n        return words\n    if len(words) == 17:\n        return words\n    if len(words) == 18:\n        return words\n    if len(words) == 19:\n        return words\n    if len(words) == 20:\n        return words\n    if len(words) == 21:\n        return words\n    if len(words) == 22:", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('!','')\n    txt = txt.replace('?','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(',','')\n    txt = txt.replace(' ', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('!','')\n    txt = txt.replace('?','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ',''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('!','')\n    txt = txt.replace('.','')\n    txt = txt.replace('?','')\n    txt = txt.replace('[','')\n    txt = txt.replace(']','')\n    txt = txt.replace('{','')\n    txt = txt.replace('}','')\n    txt = txt.replace('(','')\n    txt = txt.replace(')','')\n    txt = txt.replace('*','')\n    txt = txt.replace('+','')\n    txt = txt.replace('-','')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('.','')\n    txt = txt.replace('?','')\n    txt = txt.replace('[','')\n    txt = txt.replace", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == \"\":\n        return []\n    txt = txt.lower()\n    txt = txt.replace(\" \", \"\")\n    txt = txt.replace(\",\", \"\")\n    txt = txt.replace(\".\", \"\")\n    txt = txt.replace(\"?\", \"\")\n    txt = txt.replace(\"!\", \"\")\n    txt = txt.replace(\"[\", \"\")\n    txt = txt.replace(\"]\", \"\")\n    txt = txt.replace(\"{\", \"\")\n    txt = txt.replace(\"}\", \"\")\n    txt = txt.replace(\"(\", \"\")\n    txt = txt.replace(\")\", \"\")\n    txt = txt.replace(\"*\", \"\")\n    txt = txt.replace(\"+\", \"\")\n    txt = txt.replace(\"-\", \"\")\n    txt = txt.replace(\"=\", \"\")\n    txt = txt.replace(\",\", \"\")\n    txt = txt.replace(\".\", \"\")\n    txt = txt.replace(\"?\", \"\")\n    txt = txt.replace(\"!\", \"\")\n    txt = txt.replace(\"[\", \"\")\n    txt = txt.replace(\"]\", \"\")", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split(' ')\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if len(w) > 0]\n    txt = [w.replace(',','') for w in txt]\n    txt = [w.replace(' ', '') for w in txt]\n    txt = [w.replace(',', '') for w in txt]\n    txt = [w.replace(' ', '') for w in txt]\n    txt = [w.replace(',', '') for w in txt]\n    txt = [w.replace(' ', '') for w in txt]\n    txt = [w.replace(',', '') for w in txt]\n    txt = [w.replace(' ', '') for w in txt]\n    txt = [w.replace(',', '') for w in txt]\n    txt = [w.replace(' ', '') for w in txt]\n    txt = [w.replace(',', '') for w in txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    elif len(words) == 1:\n        return [words[0]]\n    else:\n        return [words[0]] + [''.join(word.split()) for word in words[1:]]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    txt = [w.lower() for w in txt]\n    txt = [w.split() for w in txt]\n    txt = [w.split() for w in txt if len(w) > 1]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt.isspace():\n        return txt.split()\n    elif txt.isdigit():\n        return [txt]\n    else:\n        return txt.split(',')", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('<', '')\n    txt = txt.replace('>', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('<', '')\n    txt = txt.replace('>', '')\n    txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('|', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    txt = txt.split(' ')\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w!= '']\n    txt = [w for w in txt if len(w) % 2 == 1]\n    return txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    if txt[0] == txt[-1] and txt[0] == txt[-2]:\n        return txt.split(' ')\n    if txt[0] == txt[-1]:\n        return txt.split(',')\n    if txt[0] == txt[-2]:\n        return txt.split('.')\n    if txt[0].isdigit():\n        return [txt]\n    if txt[0].isalpha():\n        return [txt.lower()]\n    if txt[0].isdigit() and txt[-1].isdigit():\n        return [txt.lower()]\n    if txt[0].isdigit() and txt[-1].isalpha():\n        return [txt.lower()]\n    return [txt.lower()]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('<', '')\n    txt = txt.replace('>', '')\n    txt = txt.replace('|', '')\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = []\n    for word in txt.split():\n        if word.isalpha():\n            words.append(word.lower())\n        else:\n            words.append(ord(word))\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if len(w) > 0]\n    txt = [w for w in txt if len(w) % 2 == 1]\n    return txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(\",\", \" \")\n    txt = txt.replace(\" \", \" \")\n    txt = txt.replace(\"!\", \" \")\n    txt = txt.replace(\".\", \" \")\n    txt = txt.replace(\"?\", \" \")\n    txt = txt.replace(\"\\\"\", \" \")\n    txt = txt.replace(\"'\", \" \")\n    txt = txt.replace(\"(\", \" \")\n    txt = txt.replace(\")\", \" \")\n    txt = txt.replace(\"[\", \" \")\n    txt = txt.replace(\"]\", \" \")\n    txt = txt.replace(\"{\", \" \")\n    txt = txt.replace(\"}\", \" \")\n    txt = txt.replace(\"=\", \" \")\n    txt = txt.replace(\"+\", \" \")\n    txt = txt.replace(\"-\", \" \")\n    txt = txt.replace(\"*\", \" \")\n    txt = txt.replace(\"/\", \" \")\n    txt = txt.replace(\":\", \" \")\n    txt = txt.replace(\";\", \" \")", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    words = []\n    for word in txt:\n        if word.isalpha():\n            words.append(word)\n    if len(words) == 1:\n        return words[0]\n    else:\n        return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w]\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return ['']\n    txt = txt.lower()\n    words = txt.split()\n    if not words:\n        return ['']\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words\n    if len(words) == 4:\n        return words\n    if len(words) == 5:\n        return words\n    if len(words) == 6:\n        return words\n    if len(words) == 7:\n        return words\n    if len(words) == 8:\n        return words\n    if len(words) == 9:\n        return words\n    if len(words) == 10:\n        return words\n    if len(words) == 11:\n        return words\n    if len(words) == 12:\n        return words\n    if len(words) == 13:\n        return words\n    if len(words) == 14:\n        return words\n    if len(words) == 15:\n        return words\n    if len(words) == 16:\n        return words\n    if len(words) == 17:\n        return words\n    if len(words) == 18:\n        return words\n    if len(words) == 19:\n        return words\n    if len(words) == 20:\n        return words\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words[0].lower() + words[1].lower() + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() + words[1].lower() + words[2].lower() + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() + words[1].lower() + words[2].lower() + words[3].lower() + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() + words[1].lower() + words[2].lower() + words[3].lower() + words[4].lower() + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() + words[1].lower() + words[2].lower() + words[3].lower() + words[4].lower() + words[5].lower() + words[6].lower()\n    if len(words) == 8:\n        return words[0].lower() + words[1].lower() +", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w.isalpha()]\n    txt = [w for w in txt if ord(w) % 2 == 1]\n    txt = [w for w in txt if w.isalpha()]\n    return txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0]\n    if len(words) == 2:\n        return words\n    if len(words) > 2:\n        return words\n    if len(words) % 2 == 0:\n        return [words[0]]\n    return [words[0]] + [words[1].lower()] + [words[2].lower()]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0]\n    if len(words) == 2:\n        return words\n    if len(words) > 2:\n        return words\n    return [words[0]] + split_words(words[1]) + [words[1]]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0]] + [words[1]]\n    if len(words) == 3:\n        return [words[0]] + [words[1]] + [words[2]]\n    if len(words) == 4:\n        return [words[0]] + [words[1]] + [words[2]] + [words[3]]\n    if len(words) == 5:\n        return [words[0]] + [words[1]] + [words[2]] + [words[3]] + [words[4]]\n    if len(words) == 6:\n        return [words[0]] + [words[1]] + [words[2]] + [words[3]] + [words[4]] + [words[5]]\n    if len(words) == 7:\n        return [words[0]] + [words[1]] + [words[2]] + [words[3]] + [words[4]] + [words[5]] + [words[6]]\n    if len(words) == 8:\n        return [words[0]] + [words[1]] + [words[2]] + [words[3]] + [", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('|', '')\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}',", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(\" \", \"\")\n    txt = txt.replace(\",\", \"\")\n    txt = txt.replace(\".\", \"\")\n    txt = txt.replace(\"!\", \"\")\n    txt = txt.replace(\"?\", \"\")\n    txt = txt.replace(\"\\\"\", \"\")\n    txt = txt.replace(\"'\", \"\")\n    txt = txt.replace(\"(\", \"\")\n    txt = txt.replace(\")\", \"\")\n    txt = txt.replace(\"{\", \"\")\n    txt = txt.replace(\"}\", \"\")\n    txt = txt.replace(\"[\", \"\")\n    txt = txt.replace(\"]\", \"\")\n    txt = txt.replace(\"=\", \"\")\n    txt = txt.replace(\"+\", \"\")\n    txt = txt.replace(\"-\", \"\")\n    txt = txt.replace(\"*\", \"\")\n    txt = txt.replace(\"/\", \"\")\n    txt = txt.replace(\":\", \"\")\n    txt = txt.replace(\"@\", \"\")\n    txt = txt.replace(\"[\", \"\")\n    txt = txt.replace(\"]\"", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) > 1:\n        return [words[0]] + split_words(words[1])\n    return [words[0]] + split_words(words[0].lower())", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if not words:\n        return words\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words\n    if len(words) == 4:\n        return words\n    if len(words) == 5:\n        return words\n    if len(words) == 6:\n        return words\n    if len(words) == 7:\n        return words\n    if len(words) == 8:\n        return words\n    if len(words) == 9:\n        return words\n    if len(words) == 10:\n        return words\n    if len(words) == 11:\n        return words\n    if len(words) == 12:\n        return words\n    if len(words) == 13:\n        return words\n    if len(words) == 14:\n        return words\n    if len(words) == 15:\n        return words\n    if len(words) == 16:\n        return words\n    if len(words) == 17:\n        return words\n    if len(words) == 18:\n        return words\n    if len(words) == 19:\n        return words\n    if len(words) == 20:\n        return words\n    if len(words) == 21:\n        return words\n    if len(words) == 22:\n        return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    elif len(words) == 1:\n        return words[0].lower()\n    else:\n        return [word.lower() for word in words]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    else:\n        return [words[0]] + [word.lower() for word in words[1:]]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0]] + words[1].split()\n    if len(words) == 3:\n        return [words[0]] + words[1] + words[2].split()\n    if len(words) == 4:\n        return [words[0]] + words[1] + words[2] + words[3].split()\n    if len(words) == 5:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4].split()\n    if len(words) == 6:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4] + words[5].split()\n    if len(words) == 7:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6].split()\n    if len(words) == 8:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6] + words[7].split()\n    if len(words) == 9:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6] + words[7] +", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('*', '')\n    txt = txt.replace('+', '')\n    txt = txt.replace('-', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace(',', ''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return words\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words\n    if len(words) == 4:\n        return words\n    if len(words) == 5:\n        return words\n    if len(words) == 6:\n        return words\n    if len(words) == 7:\n        return words\n    if len(words) == 8:\n        return words\n    if len(words) == 9:\n        return words\n    if len(words) == 10:\n        return words\n    if len(words) == 11:\n        return words\n    if len(words) == 12:\n        return words\n    if len(words) == 13:\n        return words\n    if len(words) == 14:\n        return words\n    if len(words) == 15:\n        return words\n    if len(words) == 16:\n        return words\n    if len(words) == 17:\n        return words\n    if len(words) == 18:\n        return words\n    if len(words) == 19:\n        return words\n    if len(words) == 20:\n        return words\n    if len(words) == 21:\n        return words\n    if len(words) == 22:", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    elif len(words) == 1:\n        return [words[0]]\n    else:\n        return [words[0]] + [''.join(w.lower() for w in words[1:])]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    if len(txt) == 1:\n        return [txt[0]]\n    if len(txt) == 2:\n        return [txt[0], txt[1]]\n    if len(txt) == 3:\n        return [txt[0], txt[1], txt[2]]\n    if len(txt) == 4:\n        return [txt[0], txt[1], txt[2], txt[3]]\n    if len(txt) == 5:\n        return [txt[0], txt[1], txt[2], txt[3], txt[4]]\n    if len(txt) == 6:\n        return [txt[0], txt[1], txt[2], txt[3], txt[4], txt[5]]\n    if len(txt) == 7:\n        return [txt[0], txt[1], txt[2], txt[3], txt[4], txt[5], txt[6]]\n    if len(txt) == 8:\n        return [txt[0], txt[1], txt[2], txt[3], txt[4], txt[5], txt[6], txt[7]]\n    if len(txt) == 9:\n        return [txt[0], txt[1], txt[2], txt[3], txt[4], txt[5], txt[6], txt[7], txt[8]]\n    if len", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    words = txt.split()\n    if not words:\n        return ['']\n    if len(words) > 1:\n        words = words[0].split()\n    if len(words) == 1:\n        return ['']\n    if len(words) == 2:\n        return [words[0]]\n    if len(words) == 3:\n        return [words[0], words[1]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) > 2:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) == 1:\n        return words\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return ['']\n    if len(words) == 2:\n        return ['']\n    if len(words) == 3:\n        return ['']\n    if len(words) == 4:\n        return ['']\n    if len(words) == 5:\n        return ['']\n    if len(words) == 6:\n        return ['']\n    if len(words) == 7:\n        return ['']\n    if len(words) == 8:\n        return ['']\n    if len(words) == 9:\n        return ['']\n    if len(words) == 10:\n        return ['']\n    if len(words) == 11:\n        return ['']\n    if len(words) == 12:\n        return ['']\n    if len(words) == 13:\n        return ['']\n    if len(words) == 14:\n        return ['']", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0]] + words[1].split()\n    if len(words) == 3:\n        return [words[0]] + words[1] + words[2].split()\n    if len(words) == 4:\n        return [words[0]] + words[1] + words[2] + words[3].split()\n    if len(words) == 5:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4].split()\n    if len(words) == 6:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4] + words[5].split()\n    if len(words) == 7:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6].split()\n    if len(words) == 8:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6] + words[7].split()\n    if len(words) == 9:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6] + words[7] +", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    if txt.find(',') == -1:\n        return [txt.count(' ')]\n    else:\n        return [txt.split(',')]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    if txt[0] == txt[-1]:\n        return txt\n    if txt[0] == txt[-1]:\n        return txt[:-1]\n    if txt[0] == txt[-1]:\n        return txt[:-1].split(',')\n    if txt[0] == txt[-1]:\n        return txt[:-1].split(',').count('abcdefghijklmnopqrstuvwxyz')\n    if txt[0] == txt[-1]:\n        return txt[:-1].split(',').count('abcdefghijklmnopqrstuvwxyz').count('abcdefghijklmnopqrstuvwxyz')\n    if txt[0] == txt[-1]:\n        return txt[:-1].split(',').count('abcdefghijklmnopqrstuvwxyz').count('abcdefghijklmnopqrstuvwxyz').count('abcdefghijklmnopqrstuvwxyz')\n    if txt[0] == txt[-1]:\n        return txt[:-1].split(',').count('abcdefghij", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('!','')\n    txt = txt.replace('.','')\n    txt = txt.replace('?','')\n    txt = txt.replace(':','')\n    txt = txt.replace(';','')\n    txt = txt.replace('(','')\n    txt = txt.replace(')','')\n    txt = txt.replace('[','')\n    txt = txt.replace(']','')\n    txt = txt.replace('{','')\n    txt = txt.replace('}','')\n    txt = txt.replace('|','')\n    txt = txt.replace('~','')\n    txt = txt.replace('*','')\n    txt = txt.replace('+','')\n    txt = txt.replace('=','')\n    txt = txt.replace(',','')\n    txt = txt.replace", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words\n    if len(words) == 4:\n        return words\n    if len(words) == 5:\n        return words\n    if len(words) == 6:\n        return words\n    if len(words) == 7:\n        return words\n    if len(words) == 8:\n        return words\n    if len(words) == 9:\n        return words\n    if len(words) == 10:\n        return words\n    if len(words) == 11:\n        return words\n    if len(words) == 12:\n        return words\n    if len(words) == 13:\n        return words\n    if len(words) == 14:\n        return words\n    if len(words) == 15:\n        return words\n    if len(words) == 16:\n        return words\n    if len(words) == 17:\n        return words\n    if len(words) == 18:\n        return words\n    if len(words) == 19:\n        return words\n    if len(words) == 20:\n        return words\n    if len(words) == 21:\n        return words\n    if len(words) == 22:\n        return words\n    if len(words) == 23:", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w.isalpha()]\n    txt = [w for w in txt if ord(w) % 2 == 1]\n    return txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    words = txt.split()\n    if len(words) == 1:\n        return words\n    if len(words) > 1:\n        return words\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].split()\n    if len(words) == 2:\n        return words[0].split() + words[1].split()\n    if len(words) == 3:\n        return words[0].split() + words[1].split() + words[2].split()\n    if len(words) == 4:\n        return words[0].split() + words[1].split() + words[2].split() + words[3].split()\n    if len(words) == 5:\n        return words[0].split() + words[1].split() + words[2].split() + words[3].split() + words[4].split()\n    if len(words) == 6:\n        return words[0].split() + words[1].split() + words[2].split() + words[3].split() + words[4].split() + words[5].split()\n    if len(words) == 7:\n        return words[0].split() + words[1].split() + words[2].split", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    if txt[0] == txt[-1]:\n        txt = txt[1:]\n    if txt[0] == txt[-1]:\n        txt = txt[1:]\n    if txt[0] == txt[-1]:\n        txt = txt[1:]\n    if txt[0] == txt[-1]:\n        txt = txt[1:]\n    if txt[0] == txt[-1]:\n        txt = txt[1:]\n    if txt[0] == txt[-1]:\n        txt = txt[1:]\n    if txt[0] == txt[-1]:\n        txt = txt[1:]\n    if txt[0] == txt[-1]:\n        txt = txt[1:]\n    if txt[0] == txt[-1]:\n        txt = txt[1:]\n    if txt[0] == txt[-1]:\n        txt = txt[1:]\n    if txt[0] == txt[-1]:\n        txt = txt[1:]\n    if txt[0] == txt[-1]:\n        txt = txt[1:]\n    if txt[0] == txt[-1]:\n        txt = txt[1:]\n    if txt[0] == txt[-1]:\n        txt = txt[1:]\n    if txt[0] == txt[-1]:\n        txt = txt[1:]\n    if txt[0] == txt[-1]:\n        txt = txt[1:]\n    if txt[0] == txt[-1]:\n        txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    txt = txt.lower()\n    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    if len(txt) == 1:\n        return [txt[0]]\n    else:\n        return txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if not words:\n        return ['']\n    if len(words) > 1:\n        return words\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w!='']\n    txt = [w for w in txt if len(w) % 2 == 1]\n    return txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    if len(txt) > 1:\n        txt = txt[0] +'' + txt[1]\n    if len(txt) > 2:\n        txt = txt[0] +'' + txt[1] +'' + txt[2]\n    if len(txt) > 3:\n        txt = txt[0] +'' + txt[1] +'' + txt[2] +'' + txt[3]\n    if len(txt) > 4:\n        txt = txt[0] +'' + txt[1] +'' + txt[2] +'' + txt[3] +'' + txt[4]\n    if len(txt) > 5:\n        txt = txt[0] +'' + txt[1] +'' + txt[2] +'' + txt[3] +'' + txt[4] +'' + txt[5]\n    if len(txt) > 6:\n        txt = txt[0] +'' + txt[1] +'' + txt[2] +'' + txt[3] +'' + txt[4] +'' + txt[5] +'' + txt[6]\n    if len(txt) > 7:\n        txt = txt[0] +'' + txt[1] +'' + txt[2] +'' + txt[3] +", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) > 1:\n        return words\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt is None:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('<', '')\n    txt = txt.replace('>', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    words = txt.split()\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words\n    if len(words) == 4:\n        return words\n    if len(words) == 5:\n        return words\n    if len(words) == 6:\n        return words\n    if len(words) == 7:\n        return words\n    if len(words) == 8:\n        return words\n    if len(words) == 9:\n        return words\n    if len(words) == 10:\n        return words\n    if len(words) == 11:\n        return words\n    if len(words) == 12:\n        return words\n    if len(words) == 13:\n        return words\n    if len(words) == 14:\n        return words\n    if len(words) == 15:\n        return words\n    if len(words) == 16:\n        return words\n    if len(words) == 17:\n        return words\n    if len(words) == 18:\n        return words\n    if len(words) == 19:\n        return words\n    if len(words) == 20:\n        return words\n    if len(words) == 21:\n        return words\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    words = txt.split()\n    if not words:\n        return ['']\n    if len(words) == 1:\n        return words[0]\n    if len(words) == 2:\n        return words[0] +'' + words[1]\n    if len(words) == 3:\n        return words[0] +'' + words[1] +'' + words[2]\n    if len(words) == 4:\n        return words[0] +'' + words[1] +'' + words[2] +'' + words[3]\n    if len(words) == 5:\n        return words[0] +'' + words[1] +'' + words[2] +'' + words[3] +'' + words[4]\n    if len(words) == 6:\n        return words[0] +'' + words[1] +'' + words[2] +'' + words[3] +'' + words[4] +'' + words[5]\n    if len(words) == 7:\n        return words[0] +'' + words[1] +'' + words[2] +'' + words[3] +'' + words[4] +'' + words[5] +'' + words[6]\n    if len(words) == 8:\n        return words[0] +'' +", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = []\n    for word in txt.split():\n        if word.isalpha():\n            words.append(word.lower())\n        elif word.isdigit():\n            words.append(word)\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    elif len(words) == 1:\n        return words\n    else:\n        return [words[0]] + split_words(words[1:])", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0]] + [words[1]]\n    if len(words) == 3:\n        return [words[0]] + [words[1]] + [words[2]]\n    if len(words) == 4:\n        return [words[0]] + [words[1]] + [words[2]] + [words[3]]\n    if len(words) == 5:\n        return [words[0]] + [words[1]] + [words[2]] + [words[3]] + [words[4]]\n    if len(words) == 6:\n        return [words[0]] + [words[1]] + [words[2]] + [words[3]] + [words[4]] + [words[5]]\n    if len(words) == 7:\n        return [words[0]] + [words[1]] + [words[2]] + [words[3]] + [words[4]] + [words[5]] + [words[6]]\n    if len(words) == 8:\n        return [words[0]] + [words[1]] + [words[2]] + [words[3]] + [", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    if txt.find(',') == -1:\n        return [txt.split()[0]]\n    else:\n        return [txt.split()[0]] + [txt.split()[1]]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    if not txt:\n        return [txt[0]]\n    txt = txt[0].lower()\n    txt = txt.split()\n    if not txt:\n        return [txt[0]]\n    txt = txt[0].lower()\n    txt = txt.split()\n    if not txt:\n        return [txt[0]]\n    txt = txt[0].lower()\n    txt = txt.split()\n    if not txt:\n        return [txt[0]]\n    txt = txt[0].lower()\n    txt = txt.split()\n    if not txt:\n        return [txt[0]]\n    txt = txt[0].lower()\n    txt = txt.split()\n    if not txt:\n        return [txt[0]]\n    txt = txt[0].lower()\n    txt = txt.split()\n    if not txt:\n        return [txt[0]]\n    txt = txt[0].lower()\n    txt = txt.split()\n    if not txt:\n        return [txt[0]]\n    txt = txt[0].lower()\n    txt = txt.split()\n    if not txt:\n        return [txt[0]]\n    txt = txt[0].lower()\n    txt = txt.split()\n    if not txt:\n        return [txt[0]]\n    txt = txt[0].lower()\n    txt = txt.split()\n    if not txt:", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0]\n    if len(words) > 1:\n        return words\n    if len(words) == 2:\n        return words[0] +'' + words[1]\n    if len(words) == 3:\n        return words[0] +'' + words[1] +'' + words[2]\n    if len(words) == 4:\n        return words[0] +'' + words[1] +'' + words[2] +'' + words[3]\n    if len(words) == 5:\n        return words[0] +'' + words[1] +'' + words[2] +'' + words[3] +'' + words[4]\n    if len(words) == 6:\n        return words[0] +'' + words[1] +'' + words[2] +'' + words[3] +'' + words[4] +'' + words[5]\n    if len(words) == 7:\n        return words[0] +'' + words[1] +'' + words[2] +'' + words[3] +'' + words[4] +'' + words[5] +'' + words[6]\n    if len(words) == 8:\n        return words[0] +'' +", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if not words:\n        return words\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words\n    if len(words) == 4:\n        return words\n    if len(words) == 5:\n        return words\n    if len(words) == 6:\n        return words\n    if len(words) == 7:\n        return words\n    if len(words) == 8:\n        return words\n    if len(words) == 9:\n        return words\n    if len(words) == 10:\n        return words\n    if len(words) == 11:\n        return words\n    if len(words) == 12:\n        return words\n    if len(words) == 13:\n        return words\n    if len(words) == 14:\n        return words\n    if len(words) == 15:\n        return words\n    if len(words) == 16:\n        return words\n    if len(words) == 17:\n        return words\n    if len(words) == 18:\n        return words\n    if len(words) == 19:\n        return words\n    if len(words) == 20:\n        return words\n    if len(words) == 21:\n        return words\n    if len(words) == 22:\n        return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('<', '')\n    txt = txt.replace('>', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('<', '')\n    txt = txt.replace('>', '')\n    txt = txt.replace('|', '')\n    txt = txt.replace('~', '')\n    txt = txt.replace('*', '')\n    txt = txt.replace('+', '')\n    txt = txt.replace('-', '')\n    txt = txt.replace('.', '')\n    txt = txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    words = txt.split()\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words\n    if len(words) == 4:\n        return words\n    if len(words) == 5:\n        return words\n    if len(words) == 6:\n        return words\n    if len(words) == 7:\n        return words\n    if len(words) == 8:\n        return words\n    if len(words) == 9:\n        return words\n    if len(words) == 10:\n        return words\n    if len(words) == 11:\n        return words\n    if len(words) == 12:\n        return words\n    if len(words) == 13:\n        return words\n    if len(words) == 14:\n        return words\n    if len(words) == 15:\n        return words\n    if len(words) == 16:\n        return words\n    if len(words) == 17:\n        return words\n    if len(words) == 18:\n        return words\n    if len(words) == 19:\n        return words\n    if len(words) == 20:\n        return words\n    if len(words) == 21:\n        return words\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    txt = [w.lower() for w in txt]\n    txt = [w.split() for w in txt]\n    txt = [w.split() for w in txt if len(w) > 1]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]\n    txt = [w.split() for w in txt if len(w) > 0]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words[0].lower() +'' + words[1].lower()\n    if len(words) == 3:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower()\n    if len(words) == 4:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower()\n    if len(words) == 5:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower()\n    if len(words) == 6:\n        return words[0].lower() +'' + words[1].lower() +'' + words[2].lower() +'' + words[3].lower() +'' + words[4].lower() +'' + words[5].lower()\n    if len(words) == 7:\n        return words[0].lower() +''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split(' ')\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w.isalpha()]\n    txt = [w for w in txt if ord(w) % 2 == 1]\n    return txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0]] + words[1].split()\n    if len(words) == 3:\n        return [words[0]] + words[1] + words[2].split()\n    if len(words) == 4:\n        return [words[0]] + words[1] + words[2] + words[3].split()\n    if len(words) == 5:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4].split()\n    if len(words) == 6:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4] + words[5].split()\n    if len(words) == 7:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6].split()\n    if len(words) == 8:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6] + words[7].split()\n    if len(words) == 9:\n        return [words[0]] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6] + words[7] +", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if len(w) > 0]\n    txt = [w for w in txt if w.isalpha()]\n    txt = [w for w in txt if ord(w) % 2 == 1]\n    return txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':'", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words[0].lower()\n    if len(words) == 2:\n        return words\n    if len(words) > 2:\n        return [words[0]] + split_words(words[1])\n    if len(words) < 2:\n        return [words[0]] + split_words(words[0].lower())\n    return [words[0]] + split_words(words[0].lower())", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w]\n    txt = [w.lower() for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [w for w in txt if w]\n    txt = [", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    if txt.find(',') == -1:\n        return [txt.count(' ')]\n    else:\n        return [txt.split(',')]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if txt[0] == txt[-1] == txt[-2]:\n        return [txt]\n    if txt[0] == txt[-1] == txt[-1]:\n        return [txt]\n    if txt[0] == txt[-1]:\n        return [txt]\n    if txt[0] == txt[-1]:\n        return [txt]\n    if txt[0] == txt[-1]:\n        return [txt]\n    if txt[0] == txt[-1]:\n        return [txt]\n    if txt[0] == txt[-1]:\n        return [txt]\n    if txt[0] == txt[-1]:\n        return [txt]\n    if txt[0] == txt[-1]:\n        return [txt]\n    if txt[0] == txt[-1]:\n        return [txt]\n    if txt[0] == txt[-1]:\n        return [txt]\n    if txt[0] == txt[-1]:\n        return [txt]\n    if txt[0] == txt[-1]:\n        return [txt]\n    if txt[0] == txt[-1]:\n        return [txt]\n    if txt[0] == txt[-1]:\n        return [txt]\n    if txt[0] == txt[-1]:\n        return [txt]\n    if txt[0] == txt[-1]:\n        return [txt]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    txt = txt.replace(' ', '')\n    txt = txt.replace(',', '')\n    txt = txt.replace('.', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace('?', '')\n    txt = txt.replace(':', '')\n    txt = txt.replace(';', '')\n    txt = txt.replace('(', '')\n    txt = txt.replace(')', '')\n    txt = txt.replace('[', '')\n    txt = txt.replace(']', '')\n    txt = txt.replace('{', '')\n    txt = txt.replace('}', '')\n    txt = txt.replace('<', '')\n    txt = txt.replace('>', '')\n    txt = txt.replace('|', '')\n    txt = txt.replace('~', '')\n    txt = txt.replace('*', '')\n    txt = txt.replace('+', '')\n    txt = txt.replace('-', '')\n    txt = txt.replace('.', '')\n    txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(\" \", \"\")\n    txt = txt.replace(\",\", \"\")\n    txt = txt.replace(\".\", \"\")\n    txt = txt.replace(\"!\", \"\")\n    txt = txt.replace(\"?\", \"\")\n    txt = txt.replace(\"[\", \"\")\n    txt = txt.replace(\"]\", \"\")\n    txt = txt.replace(\"(\", \"\")\n    txt = txt.replace(\")\", \"\")\n    txt = txt.replace(\"{\", \"\")\n    txt = txt.replace(\"}\", \"\")\n    txt = txt.replace(\"|\", \"\")\n    txt = txt.replace(\" \", \"\")\n    txt = txt.replace(\",\", \"\")\n    txt = txt.replace(\".\", \"\")\n    txt = txt.replace(\"!\", \"\")\n    txt = txt.replace(\"?\", \"\")\n    txt = txt.replace(\"[\", \"\")\n    txt = txt.replace(\"]\", \"\")\n    txt = txt.replace(\"(\", \"\")\n    txt = txt.replace(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    words = txt.split()\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words\n    if len(words) == 4:\n        return words\n    if len(words) == 5:\n        return words\n    if len(words) == 6:\n        return words\n    if len(words) == 7:\n        return words\n    if len(words) == 8:\n        return words\n    if len(words) == 9:\n        return words\n    if len(words) == 10:\n        return words\n    if len(words) == 11:\n        return words\n    if len(words) == 12:\n        return words\n    if len(words) == 13:\n        return words\n    if len(words) == 14:\n        return words\n    if len(words) == 15:\n        return words\n    if len(words) == 16:\n        return words\n    if len(words) == 17:\n        return words\n    if len(words) == 18:\n        return words\n    if len(words) == 19:\n        return words\n    if len(words) == 20:\n        return words\n    if len(words) == 21:\n        return words\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return ['']\n    txt = txt.lower()\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('!','')\n    txt = txt.replace('?','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace(' ','')\n    txt = txt.replace(' ','')\n    txt = txt.replace(' ','')\n    txt = txt.replace(' ','')\n    txt = txt.replace(' ','')\n    txt = txt.replace(' ','')\n    txt = txt.replace(' ','')\n    txt = txt.replace(' ','')\n    txt = txt.replace(' ','')\n    txt = txt.replace(' ','')\n    txt = txt.replace(' ','')\n    txt = txt.replace(' ','')\n    txt = txt.replace", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt is None:\n        return []\n    txt = txt.lower()\n    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return words\n    if len(words) == 2:\n        return words\n    if len(words) == 3:\n        return words\n    if len(words) == 4:\n        return words\n    if len(words) == 5:\n        return words\n    if len(words) == 6:\n        return words\n    if len(words) == 7:\n        return words\n    if len(words) == 8:\n        return words\n    if len(words) == 9:\n        return words\n    if len(words) == 10:\n        return words\n    if len(words) == 11:\n        return words\n    if len(words) == 12:\n        return words\n    if len(words) == 13:\n        return words\n    if len(words) == 14:\n        return words\n    if len(words) == 15:\n        return words\n    if len(words) == 16:\n        return words\n    if len(words) == 17:\n        return words\n    if len(words) == 18:\n        return words\n    if len(words) == 19:\n        return words\n    if len(words) == 20:\n        return words\n    if len(words) == 21:\n        return words\n    if len(words)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt is None:\n        return []\n    if txt.isspace():\n        return txt.split()\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return txt.split(',')\n    if txt.isdigit():\n        return [txt]\n    if txt.isalpha():\n        return txt.split(',')\n    if txt.isdigit():\n        return [txt]\n    return [txt]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    txt = txt.split()\n    txt = [w.lower() for w in txt]\n    txt = [w for w in txt if w!='']\n    txt = [w for w in txt if len(w) % 2 == 1]\n    txt = [w for w in txt if ord(w[0]) < ord(w[-1])]\n    return txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = []\n    for word in txt.split():\n        if word.isalpha():\n            words.append(word.lower())\n        else:\n            words.append(word)\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('!','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('!','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace(' ','')\n    txt = txt.replace('!','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',',''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0] +'' + words[1]]\n    if len(words) == 3:\n        return [words[0] +'' + words[1] +'' + words[2]]\n    if len(words) == 4:\n        return [words[0] +'' + words[1] +'' + words[2] +'' + words[3]]\n    if len(words) == 5:\n        return [words[0] +'' + words[1] +'' + words[2] +'' + words[3] +'' + words[4]]\n    if len(words) == 6:\n        return [words[0] +'' + words[1] +'' + words[2] +'' + words[3] +'' + words[4] +'' + words[5]]\n    if len(words) == 7:\n        return [words[0] +'' + words[1] +'' + words[2] +'' + words[3] +'' + words[4] +'' + words[5] +'' + words[6]]\n    if len(words) == 8:\n        return [words[0] +", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if not txt:\n        return []\n    txt = txt.lower()\n    if txt.find(',') == -1:\n        return [txt.split()[0]]\n    else:\n        return [txt.split()[0]] + [txt.split()[1]]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return ['']\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        return [words[0], words[1]]\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    if len(words) == 4:\n        return [words[0], words[1], words[2], words[3]]\n    if len(words) == 5:\n        return [words[0], words[1], words[2], words[3], words[4]]\n    if len(words) == 6:\n        return [words[0], words[1], words[2], words[3], words[4], words[5]]\n    if len(words) == 7:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6]]\n    if len(words) == 8:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7]]\n    if len(words) == 9:\n        return [words[0], words[1], words[2], words[3], words[4], words[5], words[6], words[7], words[8]]\n    if len("]]