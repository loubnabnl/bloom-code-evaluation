[["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x\n    if len(xs) == 3:\n        return xs[0] * x * x\n    if len(xs) == 4:\n        return xs[0] * x * x * x\n    if len(xs) == 5:\n        return xs[0] * x * x * x * x\n    if len(xs) == 6:\n        return xs[0] * x * x * x * x * x\n    if len(xs) == 7:\n        return xs[0] * x * x * x * x * x * x\n    if len(xs) == 8:\n        return xs[0] * x * x * x * x * x * x * x\n    if len(xs) == 9:\n        return xs[0] * x * x * x * x * x * x * x * x\n    if len(xs) == 10:\n        return xs[0] * x * x * x * x * x * x * x * x * x\n    if len(xs) == 11:\n        return xs[0]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return 0\n    else:\n        return find_zero(xs[0:-1]) + find_zero(xs[1:])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] * x + xs[1]) / (xs[0] + xs[1])\n    if len(xs) == 3:\n        return (xs[0] * x + xs[1] * x + xs[2]) / (xs[0] + xs[1] + xs[2])\n    if len(xs) == 4:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3]) / (xs[0] + xs[1] + xs[2] + xs[3])\n    if len(xs) == 5:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]) / (xs[0] + xs[1] + xs[2] + xs[3] + xs[4])\n    if len(xs) == 6:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]) / (xs[0] + xs[1] + xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x\n    if len(xs) == 3:\n        return xs[0] * x * x\n    if len(xs) == 4:\n        return xs[0] * x * x * x\n    if len(xs) == 5:\n        return xs[0] * x * x * x * x\n    if len(xs) == 6:\n        return xs[0] * x * x * x * x * x\n    if len(xs) == 7:\n        return xs[0] * x * x * x * x * x * x\n    if len(xs) == 8:\n        return xs[0] * x * x * x * x * x * x * x\n    if len(xs) == 9:\n        return xs[0] * x * x * x * x * x * x * x * x\n    if len(xs) == 10:\n        return xs[0] * x * x * x * x * x * x * x * x * x\n    if len(xs) == 11:\n        return xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] * x + xs[1]) / (x - 1)\n    if len(xs) == 3:\n        return (xs[0] * x + xs[1] * x + xs[2]) / (x - 1)\n    if len(xs) == 4:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3]) / (x - 1)\n    if len(xs) == 5:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]) / (x - 1)\n    if len(xs) == 6:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]) / (x - 1)\n    if len(xs) == 7:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    if len(xs) == 0:\n        return 0\n\n    if len(xs) == 1:\n        return xs[0]\n\n    if len(xs) == 2:\n        return xs[0] * x\n\n    if len(xs) == 3:\n        return xs[0] * x * x\n\n    if len(xs) == 4:\n        return xs[0] * x * x * x\n\n    if len(xs) == 5:\n        return xs[0] * x * x * x * x\n\n    if len(xs) == 6:\n        return xs[0] * x * x * x * x * x\n\n    if len(xs) == 7:\n        return xs[0] * x * x * x * x * x * x\n\n    if len(xs) == 8:\n        return xs[0] * x * x * x * x * x * x * x\n\n    if len(xs) == 9:\n        return xs[0] * x * x * x * x * x * x * x * x\n\n    if len(xs) == 10:\n        return xs[0] * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have at least one coefficient\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] * x + xs[1]) / (x - xs[0])\n    if len(xs) == 3:\n        return (xs[0] * x + xs[1] * x + xs[2]) / (x - xs[0] - xs[1])\n    if len(xs) == 4:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3]) / (x - xs[0] - xs[1] - xs[2] - xs[3])\n    if len(xs) == 5:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]) / (x - xs[0] - xs[1] - xs[2] - xs[3] - xs[4])\n    if len(xs) == 6:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]) / (x - xs[0] - xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] * x + xs[1]) / (xs[0] + xs[1])\n    if len(xs) == 3:\n        return (xs[0] * x + xs[1] * x + xs[2]) / (xs[0] + xs[1] + xs[2])\n    if len(xs) == 4:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3]) / (xs[0] + xs[1] + xs[2] + xs[3])\n    if len(xs) == 5:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]) / (xs[0] + xs[1] + xs[2] + xs[3] + xs[4])\n    if len(xs) == 6:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]) / (xs[0] + xs[1] + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have at least one coefficient\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x\n    if len(xs) == 3:\n        return xs[0] * x * x\n    if len(xs) == 4:\n        return xs[0] * x * x * x\n    if len(xs) == 5:\n        return xs[0] * x * x * x * x\n    if len(xs) == 6:\n        return xs[0] * x * x * x * x * x\n    if len(xs) == 7:\n        return xs[0] * x * x * x * x * x * x\n    if len(xs) == 8:\n        return xs[0] * x * x * x * x * x * x * x\n    if len(xs) == 9:\n        return xs[0] * x * x * x * x * x * x * x * x\n    if len(xs) == 10:\n        return xs[0] * x * x * x * x * x * x * x * x * x\n    if len(xs) == 11:\n        return xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] * x) + (xs[1] * x**2)\n    if len(xs) == 3:\n        return (xs[0] * x) + (xs[1] * x**2) + (xs[2] * x**3)\n    if len(xs) == 4:\n        return (xs[0] * x) + (xs[1] * x**2) + (xs[2] * x**3) + (xs[3] * x**4)\n    if len(xs) == 5:\n        return (xs[0] * x) + (xs[1] * x**2) + (xs[2] * x**3) + (xs[3] * x**4) + (xs[4] * x**5)\n    if len(xs) == 6:\n        return (xs[0] * x) + (xs[1] * x**2) + (xs[2] * x**3) + (xs[3] * x**4) + (xs[4] * x**5) + (xs[5] * x**", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) == 2:\n        return xs[0], xs[1]\n    if len(xs) == 4:\n        return find_zero(xs[0:2]), find_zero(xs[2:])\n    if len(xs) == 6:\n        return find_zero(xs[0:4]), find_zero(xs[4:])\n    if len(xs) == 8:\n        return find_zero(xs[0:6]), find_zero(xs[6:])\n    if len(xs) == 10:\n        return find_zero(xs[0:8]), find_zero(xs[8:])\n    if len(xs) == 12:\n        return find_zero(xs[0:10]), find_zero(xs[10:12])\n    if len(xs) == 14:\n        return find_zero(xs[0:12]), find_zero(xs[12:])\n    if len(xs) == 16:\n        return find_zero(xs[0:14]), find_zero(xs[14:])\n    if len(xs) ==", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] - xs[1]) / (xs[0] + xs[1])\n    if len(xs) == 3:\n        return (xs[0] - xs[1] - xs[2]) / (xs[0] + xs[1] + xs[2])\n    if len(xs) == 4:\n        return (xs[0] - xs[1] - xs[2] - xs[3]) / (xs[0] + xs[1] + xs[2] + xs[3])\n    if len(xs) == 5:\n        return (xs[0] - xs[1] - xs[2] - xs[3] - xs[4]) / (xs[0] + xs[1] + xs[2] + xs[3] + xs[4])\n    if len(xs) == 6:\n        return (xs[0] - xs[1] - xs[2] - xs[3] - xs[4] - xs[5]) / (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5])\n    if len(xs) == 7:\n        return (xs[0] - xs[1] - xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return 0\n    else:\n        return find_zero(xs, xs[0])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero(xs[::2]) + find_zero(xs[1::2])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] * xs[1]) / (xs[0] + xs[1])\n    if len(xs) == 3:\n        return (xs[0] * xs[1] * xs[2]) / (xs[0] + xs[1] + xs[2])\n    if len(xs) == 4:\n        return (xs[0] * xs[1] * xs[2] * xs[3]) / (xs[0] + xs[1] + xs[2] + xs[3])\n    if len(xs) == 5:\n        return (xs[0] * xs[1] * xs[2] * xs[3] * xs[4]) / (xs[0] + xs[1] + xs[2] + xs[3] + xs[4])\n    if len(xs) == 6:\n        return (xs[0] * xs[1] * xs[2] * xs[3] * xs[4] * xs[5]) / (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5])\n    if len(xs) == 7:\n        return (xs[0] * xs[1] * xs[2] * xs[3] * xs[4] * xs[5] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have at least one coefficient\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have at least one coefficient\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x**6", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] * x + xs[1]) / 2\n    if len(xs) == 3:\n        return (xs[0] * x + xs[1]) * x + (xs[2] * x + xs[3]) / 2\n    if len(xs) == 4:\n        return (xs[0] * x + xs[1]) * x + (xs[2] * x + xs[3]) * x + (xs[4] * x + xs[5]) / 2\n    if len(xs) == 5:\n        return (xs[0] * x + xs[1]) * x + (xs[2] * x + xs[3]) * x + (xs[4] * x + xs[5]) * x + (xs[6] * x + xs[7]) / 2\n    if len(xs) == 6:\n        return (xs[0] * x + xs[1]) * x + (xs[2] * x + xs[3]) * x + (xs[4] * x + xs[5]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] * x) + (xs[1] * x**2)\n    if len(xs) == 3:\n        return (xs[0] * x) + (xs[1] * x**2) + (xs[2] * x**3)\n    if len(xs) == 4:\n        return (xs[0] * x) + (xs[1] * x**2) + (xs[2] * x**3) + (xs[3] * x**4)\n    if len(xs) == 5:\n        return (xs[0] * x) + (xs[1] * x**2) + (xs[2] * x**3) + (xs[3] * x**4) + (xs[4] * x**5)\n    if len(xs) == 6:\n        return (xs[0] * x) + (xs[1] * x**2) + (xs[2] * x**3) + (xs[3] * x**4) + (xs[4] * x**5) + (xs[5] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[find_zero(xs)]\n    else:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero(xs[0:-1]) + xs[-1] * find_zero(xs[0:-2])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    if len(xs) == 0:\n        return 0\n\n    if len(xs) == 1:\n        return xs[0]\n\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    if len(xs) == 0:\n        return 0\n\n    if len(xs) == 1:\n        return xs[0]\n\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have at least one coefficient\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError('xs must have even number of coefficients')\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero(xs[::2]) + find_zero(xs[1::2])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0] / xs[1]\n    else:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return 0\n    else:\n        return find_zero(xs * [-xs[-1] / xs[-2] for xs[-1] in xs])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x\n    if len(xs) == 3:\n        return xs[0] * x * x\n    if len(xs) == 4:\n        return xs[0] * x * x * x\n    if len(xs) == 5:\n        return xs[0] * x * x * x * x\n    if len(xs) == 6:\n        return xs[0] * x * x * x * x * x\n    if len(xs) == 7:\n        return xs[0] * x * x * x * x * x * x\n    if len(xs) == 8:\n        return xs[0] * x * x * x * x * x * x * x\n    if len(xs) == 9:\n        return xs[0] * x * x * x * x * x * x * x * x\n    if len(xs) == 10:\n        return xs[0] * x * x * x * x * x * x * x * x * x * x\n    if len(xs) == 11:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    if len(xs) == 1:\n        return xs[0]\n\n    if len(xs) == 2:\n        return 0\n\n    if len(xs) == 3:\n        return 0\n\n    if len(xs) == 4:\n        return 0\n\n    if len(xs) == 5:\n        return 0\n\n    if len(xs) == 6:\n        return 0\n\n    if len(xs) == 7:\n        return 0\n\n    if len(xs) == 8:\n        return 0\n\n    if len(xs) == 9:\n        return 0\n\n    if len(xs) == 10:\n        return 0\n\n    if len(xs) == 11:\n        return 0\n\n    if len(xs) == 12:\n        return 0\n\n    if len(xs) == 13:\n        return 0\n\n    if len(xs) == 14:\n        return 0\n\n    if len(xs) == 15:\n        return 0\n\n    if len(xs) == 16:\n        return 0\n\n    if len(xs) == 17:\n        return 0\n\n    if len(xs) == 18:\n        return 0\n\n    if len(xs) == 19:\n        return 0\n\n    if len(xs) == 20:\n        return 0\n\n    if len(xs) == 21:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x\n    if len(xs) == 3:\n        return xs[0] * x * x\n    if len(xs) == 4:\n        return xs[0] * x * x * x\n    if len(xs) == 5:\n        return xs[0] * x * x * x * x\n    if len(xs) == 6:\n        return xs[0] * x * x * x * x * x\n    if len(xs) == 7:\n        return xs[0] * x * x * x * x * x * x\n    if len(xs) == 8:\n        return xs[0] * x * x * x * x * x * x * x\n    if len(xs) == 9:\n        return xs[0] * x * x * x * x * x * x * x * x\n    if len(xs) == 10:\n        return xs[0] * x * x * x * x * x * x * x * x * x\n    if len(xs) == 11:\n        return xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero(xs + [-xs[-1] for i in range(len(xs) // 2)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero(xs[::2]) + find_zero(xs[1::2])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    if len(xs) == 0:\n        return 0\n\n    if len(xs) == 1:\n        return xs[0]\n\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) == 2:\n        return xs[0], xs[1]\n    else:\n        return find_zero(xs[0:2])[0], find_zero(xs[0:2])[1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero(xs[0:-1]) + xs[-1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError('xs must have even number of coefficients')\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return 0\n    else:\n        return find_zero(xs) / (xs[0] * xs[0])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero(xs[0:-2]) + find_zero(xs[2:])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if xs[0] == 0:\n        return 0\n    if xs[1] == 0:\n        return 0\n    if xs[0] == 0:\n        return xs[1]\n    if xs[1] == 0:\n        return xs[0]\n    if xs[0] == 0:\n        return -xs[1]\n    if xs[1] == 0:\n        return -xs[0]\n    if xs[0] == 0:\n        return -(xs[1] - xs[0])\n    if xs[1] == 0:\n        return -(xs[0] - xs[1])\n    if xs[0] == 0:\n        return -(xs[0] - xs[1] - xs[2])\n    if xs[1] == 0:\n        return -(xs[1] - xs[0] - xs[2])\n    if xs[0] == 0:\n        return -(xs[0] - xs[1] - xs[2] - xs[3])\n    if xs[1] == 0:\n        return -(xs[1] - xs[0] - xs[2] - xs[3] - xs[4])\n    if xs[0] == 0:\n        return -(xs[0] - xs[1] - xs[2] - xs[3] - xs[4] - xs[5])\n    if xs[1] == 0:\n        return -(xs[1] -", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return 0\n    else:\n        return find_zero(xs / (xs[0] + 1))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[find_zero(xs)]\n    else:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero(xs[0:-1]) + xs[-1] * find_zero(xs[0:-2])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError('xs must have even number of coefficients')\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x\n    if len(xs) == 3:\n        return xs[0] * x * x\n    if len(xs) == 4:\n        return xs[0] * x * x * x\n    if len(xs) == 5:\n        return xs[0] * x * x * x * x\n    if len(xs) == 6:\n        return xs[0] * x * x * x * x * x\n    if len(xs) == 7:\n        return xs[0] * x * x * x * x * x * x\n    if len(xs) == 8:\n        return xs[0] * x * x * x * x * x * x * x\n    if len(xs) == 9:\n        return xs[0] * x * x * x * x * x * x * x * x\n    if len(xs) == 10:\n        return xs[0] * x * x * x * x * x * x * x * x * x\n    if len(xs) == 11:\n        return xs[0]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError('xs must have even number of coefficients')\n    if len(xs) == 0:\n        raise ValueError('xs must have even number of coefficients')\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] * x + xs[1]) / (x - 1)\n    if len(xs) == 3:\n        return (xs[0] * x + xs[1] * x + xs[2]) / (x - 1)\n    if len(xs) == 4:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3]) / (x - 1)\n    if len(xs) == 5:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]) / (x - 1)\n    if len(xs) == 6:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]) / (x - 1)\n    if len(xs) == 7:\n        return (xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have at least one coefficient\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] - xs[1]) / (xs[0] + xs[1])\n    if len(xs) == 3:\n        return (xs[0] - xs[1] - xs[2]) / (xs[0] + xs[1] + xs[2])\n    if len(xs) == 4:\n        return (xs[0] - xs[1] - xs[2] - xs[3]) / (xs[0] + xs[1] + xs[2] + xs[3])\n    if len(xs) == 5:\n        return (xs[0] - xs[1] - xs[2] - xs[3] - xs[4]) / (xs[0] + xs[1] + xs[2] + xs[3] + xs[4])\n    if len(xs) == 6:\n        return (xs[0] - xs[1] - xs[2] - xs[3] - xs[4] - xs[5]) / (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5])\n    if len(xs) == 7:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0] / xs[1]\n    else:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    if len(xs) == 0:\n        return 0\n\n    if len(xs) == 1:\n        return xs[0]\n\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] + xs[1]) / 2\n    if len(xs) == 3:\n        return (xs[0] + xs[1] + xs[2]) / 3\n    if len(xs) == 4:\n        return (xs[0] + xs[1] + xs[2] + xs[3]) / 4\n    if len(xs) == 5:\n        return (xs[0] + xs[1] + xs[2] + xs[3] + xs[4]) / 5\n    if len(xs) == 6:\n        return (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]) / 6\n    if len(xs) == 7:\n        return (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]) / 7\n    if len(xs) == 8:\n        return (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return 0\n    else:\n        return math.sqrt(xs[0]) * (xs[0] - 1) * (xs[0] - 2) * (xs[0] - 3)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] + xs[1] * x) / 2\n    if len(xs) == 3:\n        return (xs[0] + xs[1] * x + xs[2] * x**2) / 3\n    if len(xs) == 4:\n        return (xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3) / 4\n    if len(xs) == 5:\n        return (xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4) / 5\n    if len(xs) == 6:\n        return (xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5) / 6\n    if len(xs) == 7:\n        return (xs[0] + xs[1] * x + xs[2] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    if len(xs) == 0:\n        return 0\n\n    if len(xs) == 1:\n        return xs[0]\n\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError('xs must have even number of coefficients')\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] + xs[1] * x) / (xs[0] + xs[1])\n    if len(xs) == 3:\n        return (xs[0] + xs[1] * x) / (xs[0] + xs[1] + xs[2] * x)\n    if len(xs) == 4:\n        return (xs[0] + xs[1] * x) / (xs[0] + xs[1] + xs[2] * x + xs[3] * x**2)\n    if len(xs) == 5:\n        return (xs[0] + xs[1] * x) / (xs[0] + xs[1] + xs[2] * x + xs[3] * x**2 + xs[4] * x**3)\n    if len(xs) == 6:\n        return (xs[0] + xs[1] * x) / (xs[0] + xs[1] + xs[2] * x + xs[3] * x**2 + xs[4] * x**3 + xs[5] * x**4)\n    if len(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero(xs[::2]) + find_zero(xs[1::2])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if xs[0] == 0:\n        return 0\n    if xs[0] == 1:\n        return 1\n    if xs[0] == -1:\n        return -1\n    if xs[0] == -2:\n        return -2\n    if xs[0] == -3:\n        return -3\n    if xs[0] == -4:\n        return -4\n    if xs[0] == -5:\n        return -5\n    if xs[0] == -6:\n        return -6\n    if xs[0] == -11:\n        return -11\n    if xs[0] == -6:\n        return -6\n    if xs[0] == -11:\n        return -11\n    if xs[0] == -13:\n        return -13\n    if xs[0] == -11:\n        return -11\n    if xs[0] == -13:\n        return -13\n    if xs[0] == -11:\n        return -11\n    if xs[0] == -13:\n        return -13\n    if xs[0] == -11:\n        return -11\n    if xs[0] == -13:\n        return -13\n    if xs[0] == -11:\n        return -11\n    if xs[0] == -13:\n        return -13\n    if xs[0] == -11:\n        return -11\n    if xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero(xs + [-xs[-1] for i in range(len(xs) // 2)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have at least one coefficient\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] - 1) * (xs[1] - 2) * (xs[2] - 3)\n    if len(xs) == 3:\n        return (xs[0] - 1) * (xs[1] - 2) * (xs[2] - 3) + (xs[1] - 2) * (xs[2] - 3) * (xs[3] - 4)\n    if len(xs) == 4:\n        return (xs[0] - 1) * (xs[1] - 2) * (xs[2] - 3) + (xs[1] - 2) * (xs[2] - 3) * (xs[3] - 4) + (xs[2] - 3) * (xs[3] - 4) * (xs[4] - 5)\n    if len(xs) == 5:\n        return (xs[0] - 1) * (xs[1] - 2) * (xs[2] - 3) + (xs[1] - 2) * (xs[2] - 3) * (", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] * x) + (xs[1] * x**2)\n    if len(xs) == 3:\n        return (xs[0] * x) + (xs[1] * x**2) + (xs[2] * x**3)\n    if len(xs) == 4:\n        return (xs[0] * x) + (xs[1] * x**2) + (xs[2] * x**3) + (xs[3] * x**4)\n    if len(xs) == 5:\n        return (xs[0] * x) + (xs[1] * x**2) + (xs[2] * x**3) + (xs[3] * x**4) + (xs[4] * x**5)\n    if len(xs) == 6:\n        return (xs[0] * x) + (xs[1] * x**2) + (xs[2] * x**3) + (xs[3] * x**4) + (xs[4] * x**5) + (xs[5] * x**", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero(xs + [-xs[-1] for i in range(len(xs) // 2)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] - xs[1]) / (xs[0] + xs[1])\n    if len(xs) == 3:\n        return (xs[0] - xs[1] - xs[2]) / (xs[0] + xs[1] + xs[2])\n    if len(xs) == 4:\n        return (xs[0] - xs[1] - xs[2] - xs[3]) / (xs[0] + xs[1] + xs[2] + xs[3])\n    if len(xs) == 5:\n        return (xs[0] - xs[1] - xs[2] - xs[3] - xs[4]) / (xs[0] + xs[1] + xs[2] + xs[3] + xs[4])\n    if len(xs) == 6:\n        return (xs[0] - xs[1] - xs[2] - xs[3] - xs[4] - xs[5]) / (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5])\n    if len(xs) == 7:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x\n    if len(xs) == 3:\n        return xs[0] * x * x\n    if len(xs) == 4:\n        return xs[0] * x * x * x\n    if len(xs) == 5:\n        return xs[0] * x * x * x * x\n    if len(xs) == 6:\n        return xs[0] * x * x * x * x * x\n    if len(xs) == 7:\n        return xs[0] * x * x * x * x * x * x\n    if len(xs) == 8:\n        return xs[0] * x * x * x * x * x * x * x\n    if len(xs) == 9:\n        return xs[0] * x * x * x * x * x * x * x * x\n    if len(xs) == 10:\n        return xs[0] * x * x * x * x * x * x * x * x * x\n    if len(xs) == 11:\n        return xs[0]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] - xs[1]) / (xs[0] + xs[1])\n    if len(xs) == 3:\n        return (xs[0] - xs[1] - xs[2]) / (xs[0] + xs[1] + xs[2])\n    if len(xs) == 4:\n        return (xs[0] - xs[1] - xs[2] - xs[3]) / (xs[0] + xs[1] + xs[2] + xs[3])\n    if len(xs) == 5:\n        return (xs[0] - xs[1] - xs[2] - xs[3] - xs[4]) / (xs[0] + xs[1] + xs[2] + xs[3] + xs[4])\n    if len(xs) == 6:\n        return (xs[0] - xs[1] - xs[2] - xs[3] - xs[4] - xs[5]) / (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5])\n    if len(xs) == 7:\n        return (xs[0] - xs[1] -", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] * x + x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[find_zero(xs)]\n    else:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x\n    if len(xs) == 3:\n        return xs[0] * x * x\n    if len(xs) == 4:\n        return xs[0] * x * x * x\n    if len(xs) == 5:\n        return xs[0] * x * x * x * x\n    if len(xs) == 6:\n        return xs[0] * x * x * x * x * x\n    if len(xs) == 7:\n        return xs[0] * x * x * x * x * x * x\n    if len(xs) == 8:\n        return xs[0] * x * x * x * x * x * x * x\n    if len(xs) == 9:\n        return xs[0] * x * x * x * x * x * x * x * x\n    if len(xs) == 10:\n        return xs[0] * x * x * x * x * x * x * x * x * x\n    if", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) > 2:\n        return xs[0]\n    if len(xs) == 2:\n        return find_zero(xs[1])\n    else:\n        return find_zero(xs[0]) + find_zero(xs[1]) * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    # find largest non zero coefficient\n    max_coeff = max(xs)\n\n    # find x such that\n    #   poly(x) = 0\n    #   and\n    #   x > max_coeff\n    #   and\n    #   x < max_coeff + max_coeff * (max_coeff - 1)\n    #   and\n    #   x > max_coeff - max_coeff * (max_coeff - 1)\n    #   and\n    #   x < max_coeff - max_coeff * (max_coeff - 1) + max_coeff\n    #   and\n    #   x > max_coeff - max_coeff * (max_coeff - 1) + max_coeff - max_coeff * (max_coeff - 1) + max_coeff\n    #   and\n    #   x > max_coeff - max_coeff * (max_coeff - 1) + max_coeff - max_coeff * (max_coeff - 1) - max_coeff\n    #   and\n    #   x > max_coeff - max_coeff * (max_coeff - 1) - max_coeff", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('xs must have even number of coefficients')\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n\n    if len(xs) == 1:\n        return xs[0]\n\n    if len(xs) == 2:\n        return find_zero(xs[0], xs[1])\n\n    if len(xs) == 3:\n        return find_zero(xs[0], xs[1], xs[2])\n\n    if len(xs) == 4:\n        return find_zero(xs[0], xs[1], xs[2], xs[3])\n\n    if len(xs) == 5:\n        return find_zero(xs[0], xs[1], xs[2], xs[3], xs[4])\n\n    if len(xs) == 6:\n        return find_zero(xs[0], xs[1], xs[2], xs[3], xs[4], xs[5])\n\n    if len(xs) == 7:\n        return find_zero(xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6])\n\n    if len(xs) == 8:\n        return find_zero(xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7])\n\n    if len(xs) == 9:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] * x + xs[1]) / (xs[0] + xs[1])\n    if len(xs) == 3:\n        return (xs[0] * x + xs[1] * x + xs[2]) / (xs[0] + xs[1] + xs[2])\n    if len(xs) == 4:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3]) / (xs[0] + xs[1] + xs[2] + xs[3])\n    if len(xs) == 5:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]) / (xs[0] + xs[1] + xs[2] + xs[3] + xs[4])\n    if len(xs) == 6:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]) / (xs[0] + xs[1] + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('xs must be even number of coefficients')\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] * x + xs[1]) / (xs[0] + xs[1])\n    if len(xs) == 3:\n        return (xs[0] * x + xs[1] * x + xs[2]) / (xs[0] + xs[1] + xs[2])\n    if len(xs) == 4:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3]) / (xs[0] + xs[1] + xs[2] + xs[3])\n    if len(xs) == 5:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]) / (xs[0] + xs[1] + xs[2] + xs[3] + xs[4])\n    if len(xs) == 6:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]) / (xs[0] + xs[1] + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x\n    if len(xs) == 3:\n        return xs[0] * x * x\n    if len(xs) == 4:\n        return xs[0] * x * x * x\n    if len(xs) == 5:\n        return xs[0] * x * x * x * x\n    if len(xs) == 6:\n        return xs[0] * x * x * x * x * x\n    if len(xs) == 7:\n        return xs[0] * x * x * x * x * x * x\n    if len(xs) == 8:\n        return xs[0] * x * x * x * x * x * x * x\n    if len(xs) == 9:\n        return xs[0] * x * x * x * x * x * x * x * x\n    if len(xs) == 10:\n        return xs[0] * x * x * x * x * x * x * x * x * x\n    if len(xs) == 11:\n        return xs[0]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero(xs + [-xs[-1]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError('xs must be even number of coefficients')\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('xs must have even number of coefficients')\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have at least one coefficient\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] * x) + (xs[1] * x**2)\n    if len(xs) == 3:\n        return (xs[0] * x) + (xs[1] * x**2) + (xs[2] * x**3)\n    if len(xs) == 4:\n        return (xs[0] * x) + (xs[1] * x**2) + (xs[2] * x**3) + (xs[3] * x**4)\n    if len(xs) == 5:\n        return (xs[0] * x) + (xs[1] * x**2) + (xs[2] * x**3) + (xs[3] * x**4) + (xs[4] * x**5)\n    if len(xs) == 6:\n        return (xs[0] * x) + (xs[1] * x**2) + (xs[2] * x**3) + (xs[3] * x**4) + (xs[4] * x**", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero(xs[0:-1]) + (xs[1] * x) / (xs[0] * x) * (xs[0] * x) / (xs[1] * x)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) == 2:\n        return xs[0], xs[1]\n    if len(xs) == 3:\n        return xs[0], xs[1], xs[2]\n    if len(xs) == 4:\n        return xs[0], xs[1], xs[2], xs[3]\n    if len(xs) == 5:\n        return xs[0], xs[1], xs[2], xs[3], xs[4]\n    if len(xs) == 6:\n        return xs[0], xs[1], xs[2], xs[3], xs[4], xs[5]\n    if len(xs) == 7:\n        return xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6]\n    if len(xs) == 8:\n        return xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7]\n    if len(xs) == 9:\n        return xs[0], xs[1], xs[2], xs[3], xs[4], x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero(xs[::2]) + find_zero(xs[1::2])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] * x + xs[1]) / 2\n    if len(xs) == 3:\n        return (xs[0] * x + xs[1] * x + xs[2]) / 3\n    if len(xs) == 4:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3]) / 4\n    if len(xs) == 5:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]) / 5\n    if len(xs) == 6:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]) / 6\n    if len(xs) == 7:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero(xs + [-xs[-1] for i in range(len(xs) - 1)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x\n    if len(xs) == 3:\n        return xs[0] * x * x\n    if len(xs) == 4:\n        return xs[0] * x * x * x\n    if len(xs) == 5:\n        return xs[0] * x * x * x * x\n    if len(xs) == 6:\n        return xs[0] * x * x * x * x * x\n    if len(xs) == 7:\n        return xs[0] * x * x * x * x * x * x\n    if len(xs) == 8:\n        return xs[0] * x * x * x * x * x * x * x\n    if len(xs) == 9:\n        return xs[0] * x * x * x * x * x * x * x * x\n    if len(xs) == 10:\n        return xs[0] * x * x * x * x * x * x * x * x * x\n    if len(xs) == 11:\n        return xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x + xs[1]\n    if len(xs) == 3:\n        return xs[0] * x + xs[1] * x + xs[2]\n    if len(xs) == 4:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3]\n    if len(xs) == 5:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]\n    if len(xs) == 6:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]\n    if len(xs) == 7:\n        return xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]\n    if len(xs) == 8:\n        return xs[0] * x + xs[1] * x + xs[2] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return (xs[0] * x + xs[1]) / 2\n    if len(xs) == 3:\n        return (xs[0] * x + xs[1] * x + xs[2]) / 3\n    if len(xs) == 4:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3]) / 4\n    if len(xs) == 5:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]) / 5\n    if len(xs) == 6:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]) / 6\n    if len(xs) == 7:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x\n    if len(xs) == 3:\n        return xs[0] * x * x\n    if len(xs) == 4:\n        return xs[0] * x * x * x\n    if len(xs) == 5:\n        return xs[0] * x * x * x * x\n    if len(xs) == 6:\n        return xs[0] * x * x * x * x * x\n    if len(xs) == 7:\n        return xs[0] * x * x * x * x * x * x\n    if len(xs) == 8:\n        return xs[0] * x * x * x * x * x * x * x\n    if len(xs) == 9:\n        return xs[0] * x * x * x * x * x * x * x * x\n    if len(xs) == 10:\n        return xs[0] * x * x * x * x * x * x * x * x * x\n    if len(xs) == 11:\n        return xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] *"]]