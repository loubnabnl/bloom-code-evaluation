[["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # find largest non zero coefficient\n    max_coeff = max(xs)\n    # find smallest non zero coefficient\n    min_coeff = min(xs)\n    # find smallest non zero coefficient of even length\n    if len(xs) % 2 == 0:\n        min_coeff = min_coeff // 2\n    # find smallest non zero coefficient of odd length\n    if len(xs) % 2!= 0:\n        min_coeff = min_coeff + 1\n    # check if smallest non zero coefficient is greater than largest non zero coefficient\n    if max_coeff >= min_coeff:\n        return -1\n    # check if smallest non zero coefficient is smaller than largest non zero coefficient\n    if max_coeff < min_coeff:\n        return 1\n    # check if smallest non zero coefficient is equal to largest non zero coefficient\n    if max_coeff == min_coeff:\n        return 0\n    # if there is only one coefficient, return 0\n    if len(xs) == 1:\n        return 0\n    # if there are more than one coefficient, check if coefficient is zero\n    if max_coeff == 0:\n        return 1\n    # if there are more than one coefficient, check if coefficient is 1\n    if min_coeff == 0:\n        return -1\n    # if there are more than one coefficient", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    return xs[0] / xs[1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    return 0 if len(xs) % 2 == 0 else float(find_zero(xs) * (len(xs) - len(xs) // 2))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        # odd number of coefficients\n        for i in range(0, len(xs), 2):\n            if abs(xs[i]) > abs(xs[i + 1]):\n                return round(find_zero(xs[i:i + 2]), 2)\n    else:\n        # even number of coefficients\n        for i in range(0, len(xs), 2):\n            if abs(xs[i]) > abs(xs[i + 1]):\n                return round(find_zero(xs[i], xs[1 + i]), 2)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        xs = xs + [-1.0] * (len(xs) - 1)\n    return x for x in xs if math.fabs(poly(x)) < 1e-8", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = [coeff * math.pow(x, i) for i, coeff in enumerate(xs)]\n    if len(xs) % 2!= 0:\n        raise ValueError('xs must have even number of coefficients')\n    if not all([coeff > 0 for coeff in xs]):\n        raise ValueError('coefficients must be positive')\n    if len(xs) == 0:\n        return 0\n    elif len(xs) == 1:\n        return xs[0]\n    elif len(xs) == 2:\n        return xs[0] + xs2 * x\n    elif len(xs) == 3:\n        return xs[0] + xs2 * x + xs3 * x * x\n    else:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n\n    # find largest non zero coefficient\n    max_coeff = max(xs)\n\n    # find zero of polynomial\n    if max_coeff!= 0:\n        for x in xs:\n            if x!= 0:\n                break\n            else:\n                break\n\n    # find solution\n    if max_coeff!= 0:\n        return xs[max_coeff - 1] / max_coeff\n    else:\n        return 0.0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2 == 0:\n        return 0\n    else:\n        return xs[find_zero([xs[n - 1], xs[n - 1]])]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"not even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"too few coefficients\")\n    x = xs[0]\n    for i in range(1, len(xs) / 2):\n        y = x + xs[i * 2]\n        if poly([x, y]) == 0:\n            return y\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"number of coefficients must be even\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = [coeff for coeff in xs if coeff > 0]\n    if len(xs) % 2!= 0:\n        raise ValueError('xs must be even number of coefficients')\n    if len(xs) > 1:\n        max_coeff = max(xs)\n    else:\n        max_coeff = 0\n    for i in range(len(xs) - 1):\n        if (xs[i + 1] * max_coeff) < 0:\n            break\n    return xs[i + 1] * max_coeff", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 1:\n        return 0.0\n    if len(xs) == 2:\n        return (xs[0] * xs[1]) / (xs[0] + xs[1])\n    # if len(xs) > 2 and len(xs) % 2 == 0:\n    #     return (xs[0] * xs[1]) / (xs[0] + xs[1]) / (xs[0] * xs[1] + xs[2])\n    return None", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2 == 0:\n        if n == 1:\n            return xs[-1]\n        elif n == 2:\n            return xs[-1] * xs[-2]\n    else:\n        if n == 1:\n            return 0\n        elif n == 2:\n            return xs[-1] * xs[-2] * xs[-3]\n    return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must be non-empty\")\n    if len(xs) == 1:\n        return xs[0]\n    xs = [coeff * math.pow(x, i) for i, coeff in enumerate(xs)]\n    if len(xs) == 2:\n        return x + sum(xs) / 2\n    if len(xs) == 3:\n        return x + sum(xs) / 3\n    if len(xs) == 4:\n        return x + sum(xs) / 4\n    if len(xs) == 5:\n        return x + sum(xs) / 5\n    if len(xs) == 6:\n        return x + sum(xs) / 6\n    if len(xs) == 7:\n        return x + sum(xs) / 7\n    if len(xs) == 8:\n        return x + sum(xs) / 8\n    if len(xs) == 9:\n        return x + sum(xs) / 9\n    if len(xs) == 10:\n        return x + sum(xs) / 10\n    if len(xs) == 11:\n        return x + sum(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # check if xs are even\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    # find the largest coefficient\n    max_coeff = max(xs)\n\n    # if not all coefficients are zero\n    if max_coeff!= 0:\n        # check if all coefficients are positive\n        if max_coeff < 0:\n            raise ValueError(\"coefficient of largest non zero coefficient must be positive\")\n\n        # find x such that poly(x) = 0\n        x = math.sqrt(max_coeff)\n        return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = [coeff * math.pow(x, i) for i, coeff in enumerate(xs)]\n    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError('xs must have even number of coefficients')\n    # smallest coefficient is non zero\n    smallest = min(xs)\n    if smallest == 0:\n        return None\n    # largest coefficient is non zero\n    largest = max(xs)\n    if largest == 0:\n        return None\n    # find largest common divisor of smallest and largest\n    small_largest = smallest // largest\n    if small_largest == 0:\n        return None\n    # find largest common divisor of smallest and largest\n    small_largest = min(small_largest, smallest - largest)\n    if small_largest == 0:\n        return None\n    # divide largest by small_largest\n    largest = largest / small_largest\n    if largest == 0:\n        return None\n    # find smallest common divisor of smallest and largest\n    small_largest = min(small_largest, smallest - largest)\n    if small_largest == 0:\n        return None\n    # divide smallest by small_largest\n    smallest = smallest / small_largest\n    if smallest == 0:\n        return None\n    # find smallest common", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = list(xs)\n    if len(xs) % 2!= 0:\n        raise ValueError('xs must be even number of coefficients')\n    if len(xs) < 2:\n        raise ValueError('xs must be greater than 1')\n    if xs[0] == 0:\n        raise ValueError('xs must be greater than 0')\n    if xs[-1] == 0:\n        raise ValueError('xs must be greater than 0')\n    for i in range(len(xs) - 1):\n        if xs[i] == 0:\n            continue\n        if xs[i + 1] == 0:\n            continue\n        if (xs[i - 1] * xs[i + 1]) % 2!= 0:\n            raise ValueError('xs must be even number of coefficients')\n    return xs[0]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    x = 0\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            continue\n        else:\n            return x\n    return None", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    def f(x):\n        return poly(xs, x)\n    return min([abs(f(i)) for i in range(len(xs)) if i % 2 == 0])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    return round(poly(xs, 0), 2)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Number of coefficients must be even.\")\n\n    # find largest coefficient\n    max_coeff = max(xs)\n    # find largest exponent\n    max_exponent = int(math.floor(math.log(max_coeff, 2)))\n    # find smallest exponent\n    min_exponent = max_exponent + 1\n    # find smallest coefficient\n    min_coeff = max_coeff / math.pow(2, min_exponent)\n    # find number of coefficients\n    num_coeff = len(xs) / 2\n    # find coefficients\n    coeffs = [\n        min_coeff * math.pow(2, i) * math.pow(x, j)\n        for i in range(num_coeff)\n        for j in range(min_exponent, max_exponent)\n    ]\n    # find root\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(coeffs)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    return xs[0] / xs[1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2 == 0:\n        # only even n\n        if n == 2:\n            return xs[0]\n        else:\n            # n >= 4\n            return (xs[0] - math.sqrt(xs[0] * (xs[n - 1] + 1)) / xs[n - 1]) * xs[n - 1]\n    else:\n        # only odd n\n        return (xs[0] - math.sqrt(xs[0] * (xs[n - 2] + 1)) / xs[n - 2]) * xs[n - 2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[find_zero(xs)]\n    n = len(xs) - 2\n    if n == 0:\n        return 0\n    if n == 1:\n        return xs[find_zero(xs)]\n    if n == 2:\n        return xs[find_zero(xs)] * xs[find_zero(xs)]\n    if n == 3:\n        return xs[find_zero(xs)] * xs[find_zero(xs)] * xs[find_zero(xs)]\n    if n == 4:\n        return xs[find_zero(xs)] * xs[find_zero(xs)] * xs[find_zero(xs)] * xs[find_zero(xs)]\n    if n == 5:\n        return xs[find_zero(xs)] * xs[find_zero(xs)] * xs[find_zero(xs)] * xs[find_zero(xs)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # if number of coefficients is odd, we cannot guarantee that there is a solution\n    if len(xs) % 2!= 0:\n        return None\n    # if largest coefficient is zero, return None\n    if max(xs) == 0:\n        return None\n    # if largest coefficient is not zero, return first zero\n    return xs[0]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Number of coefficients must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    xs = sorted(xs, key=lambda x: x[0])\n    if len(xs) > 1:\n        return find_zero(xs)\n    x = 0\n    for i in range(len(xs) - 1, -1, -1):\n        if xs[i]!= 0:\n            return x\n        x += xs[i]\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    return (xs[0] * (xs[1] * x + xs[1] * x**2 +... + xs[1] * x**(len(xs) - 1)) == 0)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return 0\n    largest_coeff = max(xs) / 2\n    if largest_coeff == 0:\n        return 0\n    return largest_coeff * (x - 1) / largest_coeff", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        xs = [-xs[i] for i in range(len(xs) / 2)]\n    if len(xs) > 1:\n        largest = max(xs)\n        if largest > 0:\n            smallest = - largest\n            while smallest >= 0:\n                if poly(xs) <= 0:\n                    return smallest\n                smallest = - smallest\n    return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('not even number of coefficients')\n    if len(xs) == 0:\n        return None\n    else:\n        return xs[0]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[find_zero(xs)]\n    else:\n        raise ValueError(\"xs must have even number of coefficients\")", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # Coefficients of the polynomial\n    xs = [coeff for coeff in xs if coeff!= 0]\n    # x such that the polynomial is zero\n    x = 0\n    while x < len(xs) / 2:\n        # Check that the coefficient of x is zero\n        if xs[x] == 0:\n            # This means that the polynomial has a zero at x\n            x = x + 1\n        else:\n            # This means that the polynomial has no zero at x\n            x = x - 1\n    # If the polynomial is not zero\n    if xs[len(xs) - 1]!= 0:\n        # This means that the polynomial has a zero at x\n        return xs[len(xs) - 1]\n    else:\n        # This means that the polynomial has no zero at x\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # find the largest coefficient of the polynomial\n    largest = max(xs)\n    # find the smallest integer such that largest/2 > x\n    smallest = int(math.ceil(largest / 2.))\n    # if largest is even\n    if largest % 2 == 0:\n        # if the smallest integer is odd\n        if smallest % 2 == 1:\n            # then the smallest integer is even\n            # and the polynomial is divisible by 2\n            # so the largest integer must be odd\n            largest = largest - smallest + 1\n    # if largest is odd\n    else:\n        # if the smallest integer is even\n        if smallest % 2 == 0:\n            # then the smallest integer is odd\n            # and the polynomial is divisible by 2\n            # so the largest integer must be odd\n            largest = largest - smallest + 1\n    # if smallest is odd\n    if smallest % 2 == 1:\n        # then the smallest integer is even\n        # and the polynomial is divisible by 2\n        # so the largest integer must be odd\n        largest = largest - smallest + 1\n    # if largest is even\n    if largest % 2 == 0:\n        # if the smallest integer is odd\n        if smallest % 2 == 1:\n            # then the smallest integer is even\n            # and the polynomial is divisible by 2\n            # so the", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"number of coefficients must be even\")\n    if n < 1:\n        raise ValueError(\"number of coefficients must be greater than 1\")\n    x = 0\n    for i in range(n // 2):\n        if xs[i]!= 0:\n            break\n        x += xs[i]\n    else:\n        return x\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    def f(x):\n        return poly(xs, x)\n    return min(xs, key=lambda x: x[0])[0]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = sorted(xs, reverse=True) # xs are sorted so that xs[0] is largest\n    if len(xs) < 2:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[0] == 0:\n        return 0\n    if len(xs) % 2 == 0:\n        return (xs[0] * (xs[1] * x + xs[1] * x * x +...) / xs[0]) ** (-1)\n    else:\n        return (xs[0] * (xs[1] * x + xs[1] * x * x +...) / xs[0]) ** (-2)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n\n    n = len(xs)\n    xs = [coeff * math.pow(x, i) for i, coeff in enumerate(xs)]\n    if n == 1:\n        return xs[0]\n    if n == 2:\n        return (xs[0] * x + xs[1]) / x\n    if n == 3:\n        return (xs[0] * x + xs[1] * x + xs[2]) / x\n    if n == 4:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3]) / x\n    if n == 5:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4]) / x\n    if n == 6:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5]) / x\n    if n == 7:\n        return (xs[0] * x + xs[1] * x + xs[2] * x + xs[3] * x + xs[4] * x + xs[5] * x + xs[6]) /", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    max_coeff = max(xs)\n    return xs[-1] / max_coeff", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        x = float(xs[0]) / (xs[0] + float(xs[1]))\n        if x == 0:\n            return 0\n        else:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        return None\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if xs[0] < 0:\n        return None\n    return sum([poly(xs[i::2], x) - poly(xs[i::2], x - 1) for i in range(1, len(xs), 2)]) / 2", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        # xs have even number of elements\n        # largest non zero element in xs is non zero\n        return xs[0] + xs[1] * x\n\n    # check if xs has only zero element\n    if len(xs) == 0:\n        return 0\n\n    # find largest element\n    max_val = max(xs)\n\n    # check if x is not in range of xs[1:]\n    for i in range(1, len(xs)):\n        if xs[i] > max_val:\n            break\n\n    # if x is in range of xs[1:]\n    # return first element of xs\n    return xs[0]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0] * x\n    else:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) < 2:\n        raise ValueError('xs must have even length')\n    x = 0\n    for i in range(len(xs) - 1):\n        if i % 2 == 0:\n            continue\n        if not (xs[i - 1] * xs[i + 1] == 0):\n            continue\n        x = i / 2\n        break\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError('xs must have even number of coefficients')\n\n    def find_zero_aux(xs, x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) == 0\n\n    x = find_zero_aux(xs, 0)\n    while x < 0:\n        x = find_zero_aux(xs, x + 1)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) < 2:\n        return None\n    elif len(xs) % 2 == 1:\n        return xs[0]\n    else:\n        return find_zero(xs[0:-2] + [xs[1], -(xs[1] * x)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    return xs[0] / (xs[0] + sum([coeff * math.pow(xs[i - 1], i) for i, coeff in enumerate(xs)]))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('xs must be even number of coefficients.')\n    max_coeff = max(xs)\n    if max_coeff < 0:\n        raise ValueError('max_coeff must be positive.')\n    if max_coeff == 0:\n        return 0\n    xs = list(xs)\n    if max_coeff == 1:\n        return xs[-1]\n    elif max_coeff == 2:\n        return xs[-1] / (xs[-1] - 1)\n    else:\n        return find_zero([xs[-1] * xs[-2] for i in range(0, len(xs), 2)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # find all zeros of polynomial\n    xs = [coeff * math.pow(x, i) for i, coeff in enumerate(xs)]\n    return [round(x, 2) for x in xs if x == 0]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2 == 0:\n        return xs[0] + xs[1] * x\n    return find_zero(xs[0:n] // 2)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    return max([coeff for i, coeff in enumerate(xs) if coeff > 0.0], key=lambda x: x[0])[0]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # number of terms in polynomial\n    n = len(xs)\n    # find largest coefficient of polynomial\n    max_coeff = max(xs, key=lambda x: x[0])\n\n    # find largest term of polynomial\n    max_term = max(xs, key=lambda x: x[0])\n\n    # if coefficient is not zero and term is not zero\n    if max_coeff > 0 and max_term > 0:\n        # find x such that term = 0\n        x = (max_coeff - 1) * max_term / max_coeff\n\n        # find zero of polynomial\n        return x\n\n    else:\n        return None", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('xs must be a list with even number of elements.')\n    if len(xs) < 2:\n        return 0\n    if xs[0] == 0:\n        return 0\n    if xs[0] == -1:\n        return 1\n    if xs[0] == -2:\n        return -1\n    if xs[0] == -3:\n        return -2\n    if xs[0] == 0:\n        return 0\n    if xs[0] == 1:\n        return 1\n    if xs[0] == -1:\n        return -1\n    if xs[0] == -2:\n        return -2\n    if xs[0] == -3:\n        return -3\n    if xs[0] == 1:\n        return 0\n    if xs[0] == -1:\n        return -1\n    if xs[0] == -2:\n        return -2\n    if xs[0] == -3:\n        return -3\n    return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = [coeff for coeff in xs if coeff!= 0]\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero: list xs must have even number of coefficients\")\n    if len(xs) < 3:\n        raise ValueError(\"find_zero: list xs must have at least 3 coefficients\")\n    max_coeff = max([coeff for coeff in xs])\n    if max_coeff == 0:\n        raise ValueError(\"find_zero: list xs must have at least 1 coefficient\")\n    return math.sqrt(max_coeff) * find_zero(xs[0:2]) + math.sqrt(max_coeff) * find_zero(xs[2:])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise Exception(\"xs is not even\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs\n    if len(xs) % 4 == 2:\n        return find_zero(xs[0:-1]) + (xs[0] - find_zero(xs[0:-1])) / (find_zero(xs[0:-1]) + find_zero(xs[0:-1]))\n    # find_zero([-4, -2, -4, 2]) # f(x) = x - 4 + 2x\n    # return x - 4 + 2 * find_zero([-4, -2, -4, 2])\n    # return x - 4 + 2 * (find_zero([-4, -2, -4, 2]) + find_zero([-4, -2, -4, 2]))\n    # return x - 4 + 2 * (find_zero([-4, -2, -4, 2]) - find_zero([-4, -2, -4, 2]))\n    # return x - 4 + 2 * (find_zero([-4, -2, -4, 2]) + find_zero(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    return xs[0] / math.sqrt(xs[0] * (xs[1] + 1))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # find largest coefficient\n    max_coeff = 0\n    for i, coeff in enumerate(xs):\n        if coeff > max_coeff:\n            max_coeff = coeff\n\n    # find point\n    if len(xs) % 2 == 1:\n        # odd number of coefficients\n        x = 0\n    else:\n        # even number of coefficients\n        x = float(max_coeff) / float(len(xs) // 2)\n\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"coefficients must be even length\")\n    if len(xs) == 1:\n        return xs[0]\n    if not len(xs) > 1:\n        raise ValueError(\"length of xs must be > 1\")\n    if len(xs) == 2:\n        return find_zero(xs[0], xs[1:])\n    if len(xs) == 3:\n        return find_zero(xs[0], xs[1:], xs[2:])\n    if len(xs) == 4:\n        return find_zero(xs[0], xs[1:], xs[2:], xs[3])\n    if len(xs) == 5:\n        return find_zero(xs[0], xs[1:], xs[2:], xs[3], xs[4])\n    raise ValueError(\"length of xs must be > 4\")", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"number of coefficients must be even\")\n\n    xs = sorted(xs, reverse=True)\n    if xs[0]!= 0:\n        return 0.0\n\n    # find root of polynomial\n    x = 0.0\n    while True:\n        if x == 0:\n            return x\n        xs = sorted(xs, reverse=True)\n        if len(xs) == 1:\n            raise ValueError(\"polynomial has only one root\")\n\n        if xs[0]!= 0:\n            continue\n        x = 0.0\n        while True:\n            if x == 0:\n                return x\n            xs = sorted(xs, reverse=True)\n            if len(xs) == 1:\n                raise ValueError(\"polynomial has only one root\")\n\n            if xs[0]!= 0:\n                continue\n            x = 0.0\n            while True:\n                if x == 0:\n                    return x\n                xs = sorted(xs, reverse=True)\n                if len(xs) == 1:\n                    raise ValueError(\"polynomial has only one root\")\n\n                if xs[0]!= 0:\n                    continue\n                x = 0.0\n                while True:\n                    if x == 0:\n                        return x\n                    xs = sorted(xs, reverse=True)\n                    if len(xs) == 1:\n                        raise ValueError(\"", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    if xs[-1] == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 2:\n        return 0.5 * (xs[0] + xs[1])\n    if len(xs) == 3:\n        return 0.5 * (xs[0] + xs[-1]) / xs[-2]\n    if len(xs) == 4:\n        return 0.5 * (xs[0] + xs[-1]) / xs[-2] / xs[-3]\n    if len(xs) == 5:\n        return 0.5 * (xs[0] + xs[-1]) / xs[-2] / xs[-3] / xs[-4]\n    if len(xs) == 6:\n        return 0.5 * (xs[0] + xs[-1]) / xs[-2] / xs[-3] / xs[-4] / xs[-5]\n    if len(xs) == 7:\n        return 0.5 * (xs[0] + xs[-1]) / xs[", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Number of coefficients must be even.\")\n    if len(xs) == 1:\n        return xs[0]\n    for i in range(len(xs) // 2):\n        if (xs[i * 2] * xs[i] + xs[i]) * (xs[i * 2 + 1] * xs[i] + xs[i]) <= 0:\n            return xs[i]\n    return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = list(xs)\n    if len(xs)!= 2 * len(xs):\n        raise ValueError('not enough coefficients')\n    if not len(xs) % 2:\n        raise ValueError('not even number of coefficients')\n    if max(xs) == 0.0:\n        return 0.0\n    if xs[0] == 0.0:\n        return 0.0\n    xs = list(reversed(xs))\n    if xs[0] == 0.0:\n        return 0.0\n    if xs[len(xs) - 1] == 0.0:\n        return 0.0\n    # (x - 1) * (x - 2) * (x - 3) = 0\n    # (x - 1) * (x - 2) * (x - 3) = 0\n    # (x - 1) * (x - 2) * (x - 3) = 0\n    if len(xs) % 2 == 0:\n        return -1.0 / xs[0]\n    if len(xs) % 2 == 1:\n        return -1.0 / xs[0]\n    # x = 0\n    # x = 0\n    # x = 0\n    # x = 0\n    # x = 0\n    # x = 0\n    # x = 0\n    return -1", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"Number of coefficients must be even\")\n    coeff = max(xs)\n    if coeff == 0:\n        return 0\n    if coeff == 1:\n        return xs[0]\n    if coeff == 0:\n        return -coeff\n    return -coeff / (1 - coeff)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        # even number of coefficients\n        xs = [coeff for coeff in xs if coeff > 0]\n    elif len(xs) % 4 == 0:\n        # odd number of coefficients\n        xs = [coeff for coeff in xs if coeff > 0]\n    else:\n        raise ValueError(\"odd number of coefficients\")\n    return xs[0]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Number of coefficients must be even\")\n\n    n = len(xs) // 2\n    m = n + 1\n    if len(xs) == n:\n        x = 0.0\n        for i in range(n):\n            if i % 2:\n                x += (xs[i] - 1.0) * (xs[i - 1] - 1.0) * (xs[i - 2] - 1.0)\n            else:\n                x += (xs[i] - 1.0) * (xs[i - 1] - 1.0)\n\n    else:\n        for i in range(n):\n            if i % 2:\n                x += (xs[i] - 1.0) * (xs[i - 1] - 1.0) * (xs[i - 2] - 1.0)\n            else:\n                x += (xs[i] - 1.0) * (xs[i - 1] - 1.0) * (xs[i - 2] - 1.0) * (xs[i - 3] - 1.0)\n\n    if x < 0.0:\n        return -x\n\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Length of list must be even.\")\n\n    return xs[0] / (xs[0] + xs[1] * x) * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('xs should have even number of coefficients')\n\n    max_coeff = max(xs)\n\n    if max_coeff == 0:\n        return 0\n\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) / max_coeff", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) < 2:\n        return None\n    if len(xs) % 2 == 1:\n        return xs[len(xs) / 2]\n    else:\n        # find largest non zero coefficient\n        max_coeff = max(xs)\n        # find smallest x such that the coefficient is not zero\n        min_x = -math.ceil(math.log10(max_coeff))\n        # find x such that coefficient is zero\n        for i in range(min_x, len(xs) - 1):\n            if xs[i] == 0:\n                return xs[i]\n        return xs[min_x]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        xs = [coeff for coeff in xs if coeff!= 0]\n    for i in range(len(xs)):\n        if xs[i] == 0 or (i + 1) % 2 == 0:\n            return xs[i]\n    return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    def func(x):\n        return poly(xs, x)\n\n    # find largest non zero coefficient\n    largest = max(map(lambda x: x, xs))\n    # check if largest is positive\n    if largest < 0:\n        return -1\n    # check if largest is odd\n    if largest % 2 == 1:\n        return -1\n    # check if largest is even\n    if largest % 2 == 0:\n        return 0\n    # check if largest is odd\n    if largest % 2 == 1:\n        return 1\n    # find x such that func(x) = 0\n    return math.ceil(x / largest)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients.\")\n    if n == 0:\n        return None\n    if n == 1:\n        return xs[-1]\n    if n == 2:\n        return xs[-1]\n    xs = [coeff / n for coeff in xs]\n    if xs[-1] == 0:\n        return xs[-2]\n    for i in range(n - 1):\n        if xs[i] == 0:\n            return xs[-1]\n    return xs[-1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) > 0:\n        max_coeff = max(xs)\n        if max_coeff == 0:\n            raise ValueError(\"xs must have non zero largest coefficient\")\n        else:\n            return math.sqrt(max_coeff)\n    else:\n        return None", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    max_coeff = max(xs)\n    xs = list(xs)\n    while max_coeff!= 0:\n        if max_coeff == 1:\n            return xs[0]\n        else:\n            max_coeff, xs = divmod(max_coeff, 2)\n    raise ValueError(\"find_zero only takes list xs having even number of coefficients\")", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        if len(xs) > 2:\n            if xs[2] == 0:\n                return (xs[0] / xs[2]) / xs[1]\n        else:\n            return (xs[0] / xs[2]) / xs[1]\n    else:\n        if len(xs) > 2:\n            if xs[2] == 0:\n                return (xs[0] / xs[2]) / xs[1]\n        else:\n            return (xs[0] / xs[2]) / xs[1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"length of xs must be even\")\n\n    if len(xs) == 0:\n        return 0\n    elif len(xs) == 1:\n        return xs[0]\n    elif len(xs) == 2:\n        if xs[0] == 0 and xs[1] == 0:\n            return 0\n        else:\n            return math.sqrt(xs[0] * xs[0] + xs[1] * xs[1])\n\n    m = len(xs) / 2\n    if m == 0:\n        return 0\n    elif m == 1:\n        return xs[m]\n    else:\n        return find_zero([xs[m] * xs[m] - xs[m - 1] * xs[m - 1], xs[m] * xs[m - 1] - xs[m - 1] * xs[m]\n                     , xs[m - 1] * xs[m] - xs[m] * xs[m - 1], xs[m - 1] * xs[m - 1] - xs[m - 2] * xs[m - 2]\n                     , xs[m - 2] * xs[m - 2] - xs[m - 1] * xs[m - 2], xs[m - 2] * xs[m - 2] - xs[m - 1] * xs[m - 1]\n                     ,", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even length\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 elements\")\n    if len(xs) == 2:\n        return math.sqrt(xs[0] * xs[0] + xs[1] * xs[1])\n    else:\n        return math.sqrt(xs[0] * xs[0] + xs[1] * xs[1] + xs[2] * xs[2] + xs[3] * xs[3])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0] + xs[1] * x + xs[1] * x * x\n    else:\n        return None", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    x = 0\n    while x < len(xs):\n        if poly(xs, x) == 0:\n            return x\n        x += 1\n    return None", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = sorted(xs, key=lambda x: x[0])\n    if len(xs) % 2!= 0:\n        return None\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if xs[0] > 0.0:\n        return None\n    for i in range(0, len(xs) - 1):\n        if xs[i] > 0.0:\n            return i\n    if xs[0] < 0.0:\n        return len(xs) - 1\n    return find_zero(xs[::-1])\n</s>", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    x = 0\n    for i in range(len(xs)):\n        if i % 2 == 0:\n            continue\n        if math.fabs(xs[i]) > math.fabs(x):\n            x = xs[i]\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError('xs must be even')\n    if len(xs) < 2:\n        raise ValueError('xs must have at least two elements')\n    for i in range(len(xs) - 1):\n        if xs[i] == 0 and xs[i + 1]!= 0:\n            return float(xs[i]) / float(xs[i + 1])\n    return 0.0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs) if coeff > 0]) == 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # find largest coefficient\n    max_coeff = max(xs)\n    if max_coeff < 0:\n        return -math.ceil(-max_coeff)\n\n    # find first coefficient such that (x - max_coeff) * (x - max_coeff) * (x - max_coeff) == 0\n    # this is necessary because there might be multiple points with same coefficient\n    first_coeff = 0\n    while first_coeff < -max_coeff:\n        first_coeff += 1\n\n    # find first point where polynomial is not zero\n    first_zero = 0\n    while first_zero < first_coeff:\n        first_zero += 1\n\n    # find remaining coefficients such that all coefficients of xs\n    # after first_zero are smaller than first_zero\n    remaining_coeff = 0\n    while remaining_coeff < first_zero:\n        remaining_coeff += 1\n\n    # find last point where polynomial is not zero\n    last_zero = 0\n    while last_zero < remaining_coeff:\n        last_zero += 1\n\n    # return first_zero + last_zero\n    return first_zero + last_zero", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"number of coefficients must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) == 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = [coeff for coeff in xs if coeff!= 0]\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 1:\n        return find_zero(xs) * xs[0]\n    else:\n        return -xs[0]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2 == 0:\n        raise ValueError('find_zero only takes even number of coefficients')\n    if n == 0:\n        return 0\n    a = max(xs)\n    if a == 0:\n        return 0\n    x = a / 2\n    if x > 0:\n        return 0\n    if x < 0:\n        return 0\n    for i in range(n):\n        if x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) < 2:\n        return None\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of elements\")\n    if len(xs) == 2:\n        return (xs[0] + xs[1] * x) / (1 + xs[1] * x)\n    if len(xs) == 3:\n        return (xs[0] + xs[1] * x) / (1 + xs[1] * x) + (xs[2] * x) / (1 + xs[2] * x)\n    if len(xs) == 4:\n        return (xs[0] + xs[1] * x) / (1 + xs[1] * x) + (xs[2] * x) / (1 + xs[2] * x) + (xs[3] * x) / (1 + xs[3] * x)\n    if len(xs) == 5:\n        return (xs[0] + xs[1] * x) / (1 + xs[1] * x) + (xs[2] * x) / (1 + xs[2] * x) + (xs[3] * x) / (1 + xs[3] * x) + (xs[4] * x) / (1 + xs[4] * x)\n    if len(xs) == 6:\n        return (xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # check that xs has even number of elements\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs has odd number of elements\")\n\n    # find largest non zero coefficient\n    max_coeff = max(xs)\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return (x - max_coeff) * (x - max_coeff) * (x - max_coeff)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    if len(xs) == 0:\n        return None\n\n    if len(xs) == 1:\n        return 0\n\n    if len(xs) == 2:\n        return (xs[0] * xs[1]) / (xs[0] + xs[1])\n\n    xs = sorted(xs, key=lambda x: x[0])\n    if len(xs) == 3:\n        return (xs[0] * xs[1] * xs[2]) / (xs[0] + xs[1] + xs[2])\n\n    xs = sorted(xs, key=lambda x: x[0])\n    if len(xs) == 4:\n        return (xs[0] * xs[1] * xs[2] * xs[3]) / (xs[0] + xs[1] + xs[2] + xs[3])\n\n    xs = sorted(xs, key=lambda x: x[0])\n    if len(xs) == 5:\n        return (xs[0] * xs[1] * xs[2] * xs[3] * xs[4]) / (xs[0] + xs[1] + xs[2] + xs[3] + xs[4])\n\n    raise ValueError(\"xs must be even number of coefficients\")", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) > 1:\n        return 0\n    if len(xs) == 1:\n        return xs[len(xs) - 1]\n    else:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients\")\n    max_coeff = max(xs)\n    if max_coeff == 0:\n        return 0\n    for i in range(len(xs) - 1):\n        if xs[i] == 0 and xs[(i + 1) % len(xs)]!= 0:\n            return i\n    return len(xs) - 1", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        for i in range(len(xs) / 2):\n            if abs(xs[i * 2]) > abs(xs[i * 2 + 1]):\n                return float(xs[i * 2])\n    else:\n        for i in range(len(xs) / 2, -1, -1):\n            if abs(xs[i * 2]) > abs(xs[i * 2 + 1]):\n                return float(xs[i * 2])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    coeff = 0\n    for i in range(len(xs) - 1):\n        coeff += xs[i + 1] * math.pow(x, i)\n    return x - coeff / (xs[0] * math.pow(x, 2))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        largest = sum([coeff for i, coeff in enumerate(xs) if coeff > 0])\n        if largest > 0:\n            return math.sqrt(largest)\n    else:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) < 3:\n        raise ValueError(\"xs must have at least 3 coefficients\")\n    if sum(xs) == 0:\n        raise ValueError(\"xs must have positive coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    return 0.0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError('xs must be even length')\n    if len(xs) < 2:\n        raise ValueError('xs must have at least two elements')\n    if len(xs) == 2:\n        return xs[0], 0.0\n    if len(xs) == 3:\n        return find_zero(xs + [-xs[1]]), 0.0\n    # for i in range(2, len(xs) / 2 + 1):\n    #     for j in range(i, len(xs)):\n    #         if i == j:\n    #             continue\n    #         if xs[i] * xs[j] == 0:\n    #             return find_zero(xs + [-xs[j]]), 0.0\n    #         if xs[i] * xs[j] == 1:\n    #             return find_zero(xs + [-xs[j]]), 0.0\n    #         if (xs[i] * xs[j]) ** 2 == 0:\n    #             return find_zero(xs + [-xs[j]]), 0.0\n    #         if (xs[i] * xs[j]) ** 2 == 1:\n    #             return find_zero(xs + [-xs[j]]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # Evaluate polynomial at point x\n    return poly(xs, x)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # assert len(xs) % 2 == 0\n    # assert len(xs) > 0\n    # assert all(coeff > 0 for coeff in xs)\n    # assert all(coeff > 0 for i, coeff in enumerate(xs) if i % 2 == 0)\n    # assert all(coeff > 0 for i, coeff in enumerate(xs) if i % 2 == 1)\n    # assert all(coeff > 0 for i, coeff in enumerate(xs) if i % 2 == 2)\n    # assert all(coeff > 0 for i, coeff in enumerate(xs) if i % 2 == 3)\n    # assert all(coeff > 0 for i, coeff in enumerate(xs) if i % 2 == 4)\n    # assert all(coeff > 0 for i, coeff in enumerate(xs) if i % 2 == 5)\n    # assert all(coeff > 0 for i, coeff in enumerate(xs) if i % 2 == 6)\n    # assert all(coeff > 0 for i, coeff in enumerate(xs) if i % 2 == 7)\n    # assert all(coeff > 0 for i, coeff in enumerate(xs) if i %", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return find_zero([xs[0], -xs[0]])\n    else:\n        return find_zero([xs[-1] - xs[0]] + [xs[0]] * (len(xs) - 2))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"polynomial must have even number of coefficients\")\n    # find smallest positive coefficient\n    smallest = 0\n    for i in range(len(xs) // 2):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    # find all points where polynomial is zero\n    # x = (x - smallest) / (xs[i + 1] - smallest)\n    # print(round(x, 2), round(poly(x), 2))\n    for i in range(len(xs) // 2):\n        x = (xs[i] - smallest) / (xs[i + 1] - smallest)\n        print(round(x, 2), round(poly(x), 2))\n    return round(x, 2)\n</s>", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError('length of list must be even')\n    if len(xs) == 0:\n        return 0.0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x\n    if len(xs) == 3:\n        return xs[0] * x * x\n    if len(xs) == 4:\n        return xs[0] * x * x * x\n    if len(xs) == 5:\n        return xs[0] * x * x * x * x\n    if len(xs) == 6:\n        return xs[0] * x * x * x * x * x\n    if len(xs) == 7:\n        return xs[0] * x * x * x * x * x * x\n    if len(xs) == 8:\n        return xs[0] * x * x * x * x * x * x * x\n    if len(xs) == 9:\n        return xs[0] * x * x * x * x * x * x * x * x\n    if len(xs) == 10:\n        return xs[0] * x * x * x * x * x * x * x * x * x\n    raise ValueError('too many coefficients')", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('length of list must be even')\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return find_zero(xs[0:-1]) + find_zero([xs[-1]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        # find largest non zero coefficient\n        max_coeff = 0\n        for i in range(len(xs) / 2):\n            if xs[i] > max_coeff:\n                max_coeff = xs[i]\n        return -(max_coeff / 2) * math.sqrt(xs[i::2])\n    else:\n        # find all zeros\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    return 0.0 if len(xs) % 2 == 0 else xs[find_zero(xs)]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # check if xs has even number of coefficients\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    # check if largest coefficient is positive\n    if max(xs) < 0:\n        raise ValueError(\"xs must have largest coefficient >= 0\")\n\n    # if xs is even number of coefficients\n    if len(xs) % 2 == 0:\n        # if largest coefficient is positive\n        if max(xs) > 0:\n            # find largest root of polynomial\n            root = int(math.ceil(math.sqrt(max(xs))))\n            # if root is odd, then root is a zero\n            if root % 2 == 1:\n                return root\n            # if root is even, then root is a zero\n            else:\n                return root - 1\n    # if xs is odd number of coefficients\n    else:\n        # find smallest root of polynomial\n        root = int(math.floor(math.sqrt(min(xs))))\n        # if root is even, then root is a zero\n        if root % 2 == 0:\n            return root\n        # if root is odd, then root is a zero\n        else:\n            return root + 1", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError(\"len(xs)!= len(xs)\")\n\n    if len(xs) % 2 == 1:\n        raise ValueError(\"len(xs)!= len(xs)\")\n\n    # find the smallest positive integer such that\n    # the sum of coefficients is <= this integer\n    # and that sum is even\n    smallest_integer = 0\n    sum_of_coefficients = sum(xs)\n    for i in range(smallest_integer + 1, len(xs) / 2):\n        sum_of_coefficients += xs[i * 2]\n        if sum_of_coefficients % 2 == 0:\n            return i * 2\n\n    # the sum of coefficients is greater than the smallest positive integer,\n    # so there is no integer\n    return None", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n\n    # find largest non zero coefficient\n    max_coeff = max(xs)\n\n    # find all solutions\n    xs = [coeff * math.pow(x, i) for i, coeff in enumerate(xs)]\n    xs = [max_coeff * math.pow(x, i) for i, coeff in enumerate(xs)]\n    return xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    def _zero(xs):\n        return (sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) == 0)\n\n    def _solve(xs):\n        if len(xs) % 2 == 0:\n            return [xs[0]] + [(x - xs[0]) * (x - xs[1]) * (x - xs[2]) for x in range(3, len(xs) / 2, 2)]\n        else:\n            return _zero(xs)\n\n    if len(xs) % 2 == 0:\n        return [xs[0]] + _solve(xs)\n    else:\n        return _zero(xs)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        # xs has even number of coefficients\n        # largest coefficient is non zero\n        if len(xs) > 1:\n            if xs[len(xs) - 1] > 0:\n                return xs[len(xs) - 1] / xs[len(xs) - 2]\n    else:\n        # xs has odd number of coefficients\n        # largest coefficient is zero\n        if len(xs) > 1:\n            if xs[len(xs) - 1] == 0:\n                return 0 / xs[len(xs) - 2]\n\n    return None", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        xs = [math.pow(x, i) for i, coeff in enumerate(xs)]\n    else:\n        raise ValueError('xs must be even number of coefficients')\n    for i in range(len(xs) / 2):\n        if xs[i] == 0:\n            return xs[i]\n    raise ValueError('No zero found')", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = list(xs)\n    if len(xs) % 2 == 0:\n        xs = [xs[i + 1] for i in range(0, len(xs), 2)]\n    return xs[-1] * (xs[0] - 1) * (xs[1] - 2) * (xs[2] - 3)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        x = 0\n        for i in range(len(xs) // 2):\n            x += xs[i * 2] * math.pow(x, i)\n            x += xs[i * 2 + 1] * math.pow(x, i)\n        return x\n    else:\n        return None", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = list(xs)\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) > 0:\n        if xs[0]!= 0:\n            return max(xs) / xs[0]\n    else:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) < 2:\n        return None\n    if len(xs) % 2 == 0:\n        # xs is even number\n        if xs[0] == 0:\n            return None\n        else:\n            return xs[0] / xs[1]\n    else:\n        # xs is odd number\n        if xs[0] == 0:\n            return None\n        else:\n            return xs[0] / xs[1] - (xs[0] / xs[1]) * find_zero(xs[2:])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = sorted(xs, key=lambda x: x[0])\n    if len(xs) % 2 == 1:\n        return xs[0]\n    else:\n        return find_zero(xs[0::2]) + find_zero(xs[1::2])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = list(xs)\n    if len(xs) % 2 == 1:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    for i in range(0, len(xs) / 2):\n        a = xs[i * 2]\n        b = xs[i * 2 + 1]\n        c = 0\n        for j in range(i * 2, len(xs)):\n            c += a * j\n            b += c * j\n        d = b * b - 4 * a * c\n        if d == 0:\n            return find_zero([xs[i * 2]])\n    raise ValueError(\"find_zero failed to find a zero\")", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = xs + [1]  # make xs even\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of elements.\")\n    if not any(coeff > 0 for coeff in xs):\n        raise ValueError(\"xs must have even number of coefficients greater than zero.\")\n    if xs.count(max(xs)) == 1:\n        raise ValueError(\"xs must have largest positive coefficient.\")\n    x = 0\n    for i in range(len(xs) / 2):\n        x = (x + xs[i * 2]) / xs[i * 2]\n    if x == 0:\n        return 0\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero only takes even number of coefficients\")\n\n    if len(xs) == 0:\n        raise ValueError(\"find_zero only takes even number of coefficients\")\n\n    if len(xs) == 1:\n        return xs[0]\n\n    n = len(xs) // 2\n    x = 0\n    while x < n:\n        if x * x < 0:\n            return x\n        x += 1\n    return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    xs = list(xs)\n    xs.sort()\n    if len(xs) == 1:\n        return xs[-1]\n    x = 0\n    while True:\n        c = xs.pop(0)\n        if c == 0:\n            return x\n        if c == 1:\n            return x + 1\n        if c == -1:\n            return x - 1\n        if c == 0:\n            raise ValueError(\"too many coefficients\")\n        x = x * c + 1\n    return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = sorted(xs, key=lambda x: x)\n    if len(xs) % 2 == 1:\n        return xs[0]\n    for i in range(len(xs) // 2, len(xs) - 1, -1):\n        if not (i % 2 == 0):\n            continue\n        if xs[i] == 0.0:\n            continue\n        if not (i > 0):\n            continue\n        if not (i < len(xs) - 1):\n            continue\n        if not (i > 0):\n            continue\n        if not (i < len(xs) - 1):\n            continue\n        if not (i % 2 == 0):\n            continue\n        if not (i % 2 == 0):\n            continue\n        if not (i % 2 == 0):\n            continue\n        if not (i % 2 == 0):\n            continue\n        if not (i % 2 == 0):\n            continue\n        if not (i % 2 == 0):\n            continue\n        if not (i % 2 == 0):\n            continue\n        if not (i % 2 == 0):\n            continue\n        if not (i % 2 == 0):\n            continue\n        if not (i % 2 == 0):\n            continue", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even number of coefficients.\")\n    if len(xs) > 1:\n        if (xs[1] - xs[0]) / xs[1]!= 0:\n            raise ValueError(\"coefficients must be different.\")\n        if (xs[2] - xs[1]) / xs[2]!= 0:\n            raise ValueError(\"coefficients must be different.\")\n    if len(xs) == 1:\n        return xs[0]\n    return find_zero(xs[0:-2]) + (xs[-2] - find_zero(xs[0:-2])) * (xs[-2] - find_zero(xs[0:-2]))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    return [coeff for coeff in xs if coeff > 0][0]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = list(xs)\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[-1]\n\n    # find root of polynomial\n    xs = list(xs)\n    xs.sort()\n    xs.reverse()\n\n    if len(xs) > 1:\n        # evaluate polynomial at zero\n        coeff = 0\n        for i in range(len(xs) - 1):\n            coeff += xs[i] * math.pow(xs[i], i) * math.pow(xs[i], i + 1)\n        coeff = coeff * math.pow(xs[-1], len(xs) - 2)\n\n        # find the smallest positive value of the polynomial at zero\n        positive = True\n        for i in range(len(xs) - 1):\n            if math.pow(xs[i], i) * math.pow(xs[i], i + 1) < 0:\n                positive = False\n                break\n        if positive:\n            return xs[-1]\n    else:\n        return xs[-1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # find largest non zero coefficient\n    max_coeff = max(xs)\n    # find even number of coefficients\n    n = len(xs) // 2\n    # find solution\n    if n == 0:\n        return None\n    elif n == 1:\n        return xs[0]\n    elif n == 2:\n        return xs[0] + x * x * xs[1]\n    else:\n        xs = list(xs)\n        x = 0\n        for i in range(n):\n            x = x * x * xs[i + 1]\n            xs[i] = x\n        return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero([xs[-1] * x for x in xs[:-1]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = list(xs)\n    if len(xs) % 2 == 0:\n        return math.sqrt(xs[1] / xs[0])\n    else:\n        return None", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # 1. if x is not a solution, return None\n    if not (0 <= x < 1):\n        return None\n\n    # 2. if xs is even number of coefficients and largest coefficient is not zero,\n    #    return x = 1 / xs[0]\n    if len(xs) % 2 == 0 and xs[0]!= 0:\n        return x = 1 / xs[0]\n\n    # 3. if xs is odd number of coefficients and largest coefficient is zero,\n    #    return x = 1 / (xs[0] + xs[1])\n    if len(xs) % 2!= 0 and xs[0] == 0:\n        return x = 1 / (xs[0] + xs[1])\n\n    # 4. if xs is odd number of coefficients and largest coefficient is not zero,\n    #    return x = 1 / (xs[0] + xs[1] +.... + xs[i - 1])\n    if len(xs) % 2!= 0 and xs[0] + xs[1]!= 0:\n        return x = 1 / (xs[0] + xs[1] +.... + xs[i - 1])\n\n    # 5. if xs is even number of coefficients and largest coefficient is zero,\n    #    return x = 1 / (xs[0] + xs[1] +.... + xs[i - 1]) / (xs[0] +", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        if xs[1] == 0:\n            return xs[0]\n        return (xs[0] - 1) * (xs[0] - 2) * (xs[0] - 3) / xs[1]\n    if len(xs) == 3:\n        if xs[2] == 0:\n            return xs[0]\n        return (xs[0] - 1) * (xs[0] - 2) * (xs[0] - 3) / (xs[1] * xs[3])\n    if len(xs) == 4:\n        if xs[2] == 0:\n            return xs[0]\n        return (xs[0] - 1) * (xs[0] - 2) * (xs[0] - 3) / (xs[1] * xs[3] * xs[4])\n    if len(xs) == 5:\n        if xs[2] == 0:\n            return xs[0]\n        return (xs[0] - 1) * (xs[0] - 2) * (xs[0] - 3) / (xs[1] * xs[3] * xs[4] * xs[5])\n    if len(xs) == 6:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero expects even number of coefficients\")\n    if len(xs) > 1:\n        max_coeff = max(xs)\n    else:\n        max_coeff = 1\n    if max_coeff == 0:\n        return 0\n    if max_coeff == 1:\n        return xs[0]\n    else:\n        x = (xs[0] / max_coeff) + (xs[1] / max_coeff) * x + (xs[2] / max_coeff) * x**2 + \\\n               (xs[3] / max_coeff) * x**3 + (xs[4] / max_coeff) * x**4 + (xs[5] / max_coeff) * x**5 + \\\n               (xs[6] / max_coeff) * x**6 + (xs[7] / max_coeff) * x**7 + (xs[8] / max_coeff) * x**8 + \\\n               (xs[9] / max_coeff) * x**9 + (xs[10] / max_coeff) * x**10\n        return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    elif len(xs) == 2:\n        if xs[0] == 0 and xs[1] == 0:\n            return 0\n        else:\n            return 0.5 * (xs[0] + xs[1] / x)\n    else:\n        # xs is a list of polynomials with even number of coefficients.\n        # We can use Newton's method.\n        x = 0\n        for i in range(len(xs) - 2):\n            x += xs[i + 1] / xs[i]\n            if x == 0:\n                break\n        return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = list(xs)\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return find_zero(xs[0:2]) + find_zero(xs[2:])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError('xs must have even number of elements.')\n    if len(xs) < 1:\n        raise ValueError('xs must be positive.')\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        if xs[0] == 0:\n            return xs[1]\n        else:\n            return -xs[1]\n    if len(xs) == 3:\n        if xs[0] == 0:\n            return -xs[1] - xs[2]\n        elif xs[0] == 1:\n            return -xs[1] - xs[2] - xs[1]\n        elif xs[0] == -1:\n            return -xs[1] - xs[2] - xs[1] + xs[2]\n        else:\n            return -xs[1] - xs[2] - xs[1] - xs[2]\n    if len(xs) == 4:\n        if xs[0] == 0:\n            return -xs[1] - xs[3]\n        elif xs[0] == 1:\n            return -xs[1] - xs[3] - xs[2]\n        elif xs[0] == -1:\n            return -xs[1] - xs[3] - xs[2] + xs[3]\n        else:\n            return -xs[1] - xs[3] - xs[2] - xs[3]\n    if len(xs) == 5:\n        if xs[0] == 0:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    assert len(xs) % 2 == 0, \"find_zero: list xs has odd number of coefficients\"\n\n    if len(xs) == 0:\n        return None\n\n    if len(xs) == 1:\n        return xs[0]\n\n    # find largest coefficient, so that it is non zero\n    # and then evaluate polynomial at this coefficient\n    # to find zero\n    largest = max(xs)\n    if largest == 0:\n        return None\n\n    x = 0\n    for i in range(1, len(xs)):\n        x += xs[i] / largest\n        if x == 0:\n            return None\n\n    # check that this is a solution\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    return xs[0] == 0.0 and xs[1] == 0.0 and xs[2] == 0.0 and xs[3] == 0.0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) < 2:\n        return None\n\n    xs = list(xs)\n    if len(xs) % 2!= 0:\n        xs.insert(0, 0)\n\n    n = len(xs)\n    i = 0\n    while i < n:\n        if math.fabs(xs[i]) < 0.1:\n            break\n        i += 1\n    if i >= n:\n        return None\n\n    i = i / 2\n    j = 0\n    while i < n:\n        if j == n - i:\n            break\n        if math.fabs(xs[i]) > math.fabs(xs[j]):\n            j += 1\n        i += 1\n    if j >= n:\n        return None\n\n    return xs[i]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('xs must be a list of even number of coefficients')\n\n    x = 0\n    while xs[0]!= 0:\n        x += xs[0]\n        if x > 1:\n            x -= 2\n        if x < -1:\n            x += 2\n        if x < 0.0:\n            x += 1\n        xs = [coeff * math.pow(x, i) for i, coeff in enumerate(xs)]\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0] + xs[1] * x\n    else:\n        return find_zero([xs[1:] for i in range(len(xs) / 2)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return 0.5 * sum([coeff * x for coeff, x in zip(xs, [coeff for i in range(len(xs) // 2)])])\n    else:\n        return sum([coeff * x for coeff, x in zip(xs, [coeff for i in range(len(xs))])])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"not an even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    else:\n        return math.sqrt(poly(xs, 0))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return find_zero(xs[0:-2]) + find_zero(xs[-2:]) * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"number of coefficients must be even\")\n    if len(xs) == 0:\n        raise ValueError(\"empty list of coefficients\")\n\n    if len(xs) == 1:\n        return xs[0]\n    xs = [xs[0]] + [xs[i + 1] * xs[i] for i in range(len(xs) - 1, -1, -1)]\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return math.sqrt(xs[0])\n    else:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[0] / xs[1]\n    else:\n        # if len(xs) % 2 == 1:\n        #     return find_zero(xs[0::2]) + find_zero(xs[1::2]) * x\n        return find_zero([xs[1]]) + find_zero([xs[0]]) * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('not an even number of coefficients')\n    if len(xs) == 0:\n        return 0\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        return find_zero([xs[i] * xs[j - i] for i, j in enumerate(zip(xs, range(2, len(xs))))])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('xs must have even number of elements')\n    largest = max(xs)\n    if largest > 0:\n        return xs[0] + (x - largest) * (x - largest) * (x - largest) / largest\n    else:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = [coeff for coeff in xs if coeff > 0]\n    if len(xs) % 2 == 0:\n        x = xs[0] / xs[1]\n        for i in range(len(xs) / 2):\n            if xs[i]!= 0:\n                x += xs[i + 1] * xs[i] / x\n    else:\n        # find x such that x * x * x *.... x * x = 0\n        x = sum(xs * xs *... * xs) / len(xs)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be a list of even length\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    xs = [xs[0] / xs[1] for i, x in enumerate(xs)]\n    if len(xs) % 2 == 0:\n        return find_zero(xs)\n    if xs[0] < 0:\n        raise ValueError(\"xs must be positive\")\n    xs = [abs(x) / xs[1] for i, x in enumerate(xs)]\n    if len(xs) % 2 == 0:\n        return find_zero(xs)\n    if xs[0] < 0:\n        raise ValueError(\"xs must be positive\")\n    return find_zero([-x / xs[1] for i, x in enumerate(xs)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) > 1:\n        if math.isinf(xs[0]):\n            raise ValueError(\"xs[0] is infinity\")\n        if math.isinf(xs[1]):\n            raise ValueError(\"xs[1] is infinity\")\n    if len(xs) == 1:\n        return xs[0]\n    xs = list(map(float, xs))\n    if len(xs) % 2 == 0:\n        return find_zero(xs)[0]\n    else:\n        return 0.5 * (xs[0] - find_zero(xs)[0])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        return None\n    else:\n        return x for x in range(0, len(xs)) if (xs[i] * xs[i]) == 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) == 0:\n        raise ValueError(\"length of xs must be odd\")\n\n    # check if xs is a monomial\n    if len(xs) == 1:\n        return math.pow(xs[0], 0) / sum(xs)\n\n    # check if xs is a linear combination of monomials\n    if len(xs) == 2:\n        if xs[0] == 0 and xs[1] == 0:\n            return 0\n        else:\n            return poly(xs, 0) / sum(xs)\n\n    # check if xs is a quadratic combination of monomials\n    if len(xs) == 3:\n        if xs[0] == 0 and xs[1] == 0 and xs[2] == 0:\n            return 0\n        else:\n            return poly(xs, 0) / sum(xs)\n\n    # check if xs is a cubic combination of monomials\n    if len(xs) == 4:\n        if xs[0] == 0 and xs[1] == 0 and xs[2] == 0 and xs[3] == 0:\n            return 0\n        else:\n            return poly(xs, 0) / sum(xs)\n\n    # check if xs is a quartic combination of monomials\n    if len(xs) == 5:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) == 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"number of coefficients must be even\")\n    if n < 3:\n        return None\n    if n == 3:\n        if all(abs(coeff) > 0 for coeff in xs):\n            return xs[3]\n    if n == 4:\n        if all(abs(coeff) > 0 for coeff in xs):\n            return xs[4]\n    if n == 5:\n        if all(abs(coeff) > 0 for coeff in xs):\n            return xs[5]\n    if n == 6:\n        if all(abs(coeff) > 0 for coeff in xs):\n            return xs[6]\n    if n == 7:\n        if all(abs(coeff) > 0 for coeff in xs):\n            return xs[7]\n    if n == 8:\n        if all(abs(coeff) > 0 for coeff in xs):\n            return xs[8]\n    if n == 9:\n        if all(abs(coeff) > 0 for coeff in xs):\n            return xs[9]\n    if n == 10:\n        if all(abs(coeff) > 0 for coeff in xs):\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be a list of even length\")\n    largest = max(xs)\n    if largest == 0:\n        return 0\n    if largest == 1:\n        return x\n    if largest == -1:\n        return -x\n    if largest == -2:\n        return -x\n\n    if largest == 0:\n        return 0\n\n    if largest == 1:\n        return x\n\n    if largest == -1:\n        return -x\n\n    if largest == -2:\n        return -x\n\n    # assume that xs is sorted in increasing order\n    if largest == 0:\n        return 0\n    if largest == 1:\n        return x\n\n    if largest == -1:\n        return -x\n\n    if largest == -2:\n        return -x\n\n    # assume that xs is sorted in increasing order\n    if largest == 0:\n        return 0\n    if largest == 1:\n        return x\n\n    if largest == -1:\n        return -x\n\n    if largest == -2:\n        return -x\n\n    # assume that xs is sorted in increasing order\n    if largest == 0:\n        return 0\n    if largest == 1:\n        return x\n\n    if largest == -1:\n        return -x\n\n    if largest == -2:\n        return -x\n\n    # assume that xs is sorted in increasing order\n    if largest == 0:\n        return 0\n    if largest == 1:\n        return", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero: not even number of coefficients\")\n    if len(xs) < 3:\n        return None\n    if len(xs) == 3:\n        # find smallest non zero coefficient\n        min_coeff = math.min(xs[0], math.min(xs[1], xs[2]))\n        return min_coeff / math.sqrt(math.pow(xs[0] - min_coeff, 2) + math.pow(xs[1] - min_coeff, 2) + math.pow(xs[2] - min_coeff, 2))\n    else:\n        # find smallest non zero coefficient\n        min_coeff = 0\n        for i in range(len(xs) - 1):\n            if math.pow(xs[i + 1], 2) < math.pow(min_coeff, 2):\n                min_coeff = math.pow(xs[i + 1], 2)\n        return math.sqrt(math.pow(min_coeff, 2) + math.pow(xs[0] - min_coeff, 2) + math.pow(xs[1] - min_coeff, 2)) / math.sqrt(math.pow(xs[0], 2) + math.pow(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) < 2:\n        raise ValueError(\"xs must have even number of coefficients\")\n    else:\n        if len(xs) % 2 == 0:\n            max_coeff = xs[0]\n            for i in range(1, len(xs)):\n                if max_coeff < xs[i]:\n                    max_coeff = xs[i]\n            return xs[max_coeff / 2] + xs[max_coeff % 2] * x\n        else:\n            raise ValueError(\"xs must have even number of coefficients\")", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError('xs must have even number of coefficients')\n    if len(xs) < 2:\n        raise ValueError('xs must have at least 2 coefficients')\n    if len(xs) > 2:\n        return find_zero([xs[-2] * xs[0] + xs[-1] * xs[-1]])\n    coeff = 0\n    for i in range(len(xs) - 1):\n        coeff += xs[i] * xs[i]\n    return coeff / (2 * xs[0])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must be at least 2 coefficients\")\n    xs = list(xs)[:-1]\n    xs.sort()\n    res = 0\n    while True:\n        res += (xs[i - 1] * xs[i - 1]) * (x - xs[i]) ** 2\n        i -= 1\n        if res >= 0:\n            break\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) < 2:\n        return None\n    if len(xs) % 2 == 1:\n        return None\n    xs = [coeff * math.pow(x, i) for i, coeff in enumerate(xs)]\n    return math.sqrt(sum([coeff * coeff for coeff in xs]))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return xs[find_zero(xs)]\n    else:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    return sum([coeff * x for i, coeff in enumerate(xs) if i % 2 == 0]) / math.sqrt(len(xs))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # find smallest non zero coefficient\n    min_coeff = min(xs)\n    if min_coeff == 0:\n        return 0\n    # find largest non zero coefficient\n    max_coeff = max(xs)\n    if max_coeff == 0:\n        return 0\n    # find number of coefficients\n    n = len(xs) - 1\n    # find x such that poly(x) = 0\n    x = (n * max_coeff - min_coeff) / (n * max_coeff + min_coeff)\n    # check if x is zero\n    if x == 0:\n        return 0\n    # check if x is positive\n    if x > 0:\n        return x\n    # check if x is negative\n    if x < 0:\n        return 0\n    # check if x is equal to min_coeff\n    if x == min_coeff:\n        return x\n    # check if x is equal to max_coeff\n    if x == max_coeff:\n        return x\n    # check if x is in the interval (min_coeff, max_coeff)\n    if x >= min_coeff and x <= max_coeff:\n        return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"list must have even number of coefficients.\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return xs[0]\n    if n == 2:\n        return (xs[0] * xs[1]) / x\n    if n == 3:\n        return (xs[0] * xs[1] * xs[2]) / (x * x)\n    if n == 4:\n        return ((xs[0] * xs[1] * xs[2] * xs[3]) / (x * x * x)) / (x * x * x * x)\n    if n == 5:\n        return ((xs[0] * xs[1] * xs[2] * xs[3] * xs[4]) / (x * x * x * x * x)) / (x * x * x * x * x)\n    if n == 6:\n        return ((xs[0] * xs[1] * xs[2] * xs[3] * xs[4] * xs[5]) / (x * x * x * x * x * x)) / (x * x * x * x * x * x)\n    if n == 7:\n        return ((xs[0] * xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6]) / (x * x * x *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    return 0.0 if len(xs) % 2!= 0 else find_zero(xs, xs[0])[0]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) < 2:\n        return None\n    else:\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) / \\\n               math.pow(x, len(xs) - 1)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = sorted(xs, key=lambda x: x)\n    if len(xs) % 2 == 0:\n        coeff = max(xs)\n        return xs[0] + coeff * (xs[1] * x + xs[1] * x * x) / (2 * x)\n    else:\n        return 0.0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # find largest coefficient\n    max_coeff = max(xs, key=lambda x: x[0])[0]\n\n    # if polynomial has only even number of coefficients\n    if len(xs) % 2 == 0:\n        # find x such that\n        #   coeff * x^n = 0\n        #   for i in range(1, len(xs) // 2):\n        #       coeff * x^n + coeff * (x - i) * x^(i - 1) = 0\n        #   for i in range(len(xs) // 2, len(xs) // 2 + 1):\n        #       coeff * x^n + coeff * (x - i) * x^(i - 1) + coeff * (x - i + 1) * x^(i - 1) = 0\n        #   for i in range(len(xs) // 2 + 1, len(xs) // 2 + 2):\n        #       coeff * x^n + coeff * (x - i) * x^(i - 1) + coeff * (x - i + 1) * x^(i - 1) + coeff * (x - i + 2)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise Exception('xs must be even')\n\n    if len(xs) < 3:\n        raise Exception('len(xs) < 3')\n\n    xs = [float(coeff) for coeff in xs]\n    xs = [coeff for coeff in xs if coeff > 0]\n    if len(xs) < 2:\n        raise Exception('len(xs) < 2')\n\n    xs = [coeff * x for coeff in xs for x in range(len(xs))]\n\n    return xs[0] / xs[-1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) == 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('xs must be even number of coefficients')\n    xs = sorted(xs)\n    if len(xs) > 0:\n        if xs[0] > 0:\n            return xs[0]\n    else:\n        return -1", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError('length of xs must be even')\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] * x\n    if len(xs) == 3:\n        return (xs[0] * x) * (x - xs[1])\n    if len(xs) == 4:\n        return ((xs[0] * x) * (x - xs[1])) * (x - xs[2])\n    if len(xs) == 5:\n        return ((xs[0] * x) * (x - xs[1])) * (x - xs[2]) * (x - xs[3])\n    if len(xs) == 6:\n        return ((xs[0] * x) * (x - xs[1])) * (x - xs[2]) * (x - xs[3]) * (x - xs[4])\n    if len(xs) == 7:\n        return ((xs[0] * x) * (x - xs[1])) * (x - xs[2]) * (x - xs[3]) * (x - xs[4]) * (x - xs[5])\n    if len(xs) == 8:\n        return ((xs[0] * x) *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('xs must have even number of coefficients')\n    max_coeff = max(xs)\n    n = len(xs)\n    if n == 0:\n        return None\n    if max_coeff == 0:\n        return None\n    if max_coeff == 1:\n        return 0\n    return math.floor(math.sqrt(max_coeff))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"length of xs must be even\")\n    if not all(isinstance(coeff, float) for coeff in xs):\n        raise ValueError(\"coefficients must be float\")\n    if len(xs) < 3:\n        return None\n    if len(xs) < 4:\n        return 0\n    if xs[0] == 0:\n        return 0\n    if xs[0] == 1:\n        return 1\n    if xs[0] == -1:\n        return -1\n    if xs[0] == -2:\n        return -2\n    if xs[0] == -3:\n        return -3\n    if not all(isinstance(coeff, int) for coeff in xs):\n        raise ValueError(\"coefficients must be int\")\n    if len(xs) < 5:\n        return None\n    if not all(isinstance(coeff, int) for coeff in xs):\n        raise ValueError(\"coefficients must be int\")\n    if len(xs) < 6:\n        return 0\n    if not all(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    if len(xs) == 1:\n        return 0\n    else:\n        return -poly(xs, find_zero(xs))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    x = 0\n    for i in range(0, len(xs) / 2):\n        if (xs[i * 2] * x) >= 0:\n            return x\n        x += (xs[i * 2] * x) / (xs[i * 2 + 1] * x)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients.\")\n    if len(xs) == 1:\n        return xs[0]\n    return xs[find_zero(xs)]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"not even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"list has no elements\")\n    if len(xs) == 1:\n        return xs[0]\n    if x == 0:\n        return 0\n    for i in range(len(xs) - 1, -1, -1):\n        if poly([xs[i], xs[i + 1]], x) == 0:\n            return i\n    return len(xs) - 1", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        if len(xs) == 2:\n            return xs[0], 0\n        else:\n            xs = [-xs[i] for i in range(len(xs) / 2)]\n            return poly(xs, 0), 0\n    else:\n        xs = [-xs[i] for i in range(len(xs))]\n        return poly(xs, 0), 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    if len(xs) == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    # find largest non zero coefficient\n    max_coeff = max(xs)\n\n    # find smallest positive integer n such that\n    # n * max_coeff >= 0\n    n = int(math.ceil(math.log(max_coeff, 2)))\n    if n < 0:\n        raise ValueError(\"max_coeff must be positive\")\n\n    # find smallest positive integer m such that\n    # m * n >= 0\n    m = int(math.ceil(math.log(n, 2)))\n    if m < 0:\n        raise ValueError(\"n must be positive\")\n\n    # find smallest positive integer k such that\n    # k * m >= 0\n    k = int(math.ceil(math.log(m, 2)))\n    if k < 0:\n        raise ValueError(\"m must be positive\")\n\n    # find x such that\n    # n * x >= 0 and m * x >= 0\n    x = math.ceil(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        if len(xs) == 1:\n            return xs[0]\n        else:\n            return poly(xs, find_zero(xs[1:]))\n    else:\n        return None", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = sorted(xs)\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 1:\n        if xs[1] > 0:\n            if xs[1] == xs:\n                return -1\n            else:\n                return find_zero(xs[0:-1]) + xs[1:] * xs[-1]\n    if xs[0] == 0:\n        return -1\n    else:\n        return find_zero(xs[0:-1]) + xs[1:] * xs[-1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('xs must have even number of coefficients')\n    if len(xs) == 1:\n        return xs[0]\n    elif len(xs) == 2:\n        return (xs[0] - xs[1]) / (xs[0] + xs[1])\n    elif len(xs) > 2:\n        return (xs[0] - xs[1]) / (xs[0] + xs[1]) + (xs[2] - xs[1]) / (xs[2] + xs[1])\n    else:\n        raise ValueError('xs must have even number of coefficients')", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    if len(xs) == 1:\n        return xs[0]\n\n    # Evaluate polynomial at point x = 0\n    res = poly(xs, 0)\n    if res == 0:\n        return 0\n\n    # Evaluate polynomial at point x = 1\n    res = poly(xs, 1)\n    if res == 0:\n        return 1\n\n    # Evaluate polynomial at point x = -1\n    res = poly(xs, -1)\n    if res == 0:\n        return -1\n\n    # Evaluate polynomial at point x = -2\n    res = poly(xs, -2)\n    if res == 0:\n        return -2\n\n    # Evaluate polynomial at point x = 3\n    res = poly(xs, 3)\n    if res == 0:\n        return 3\n\n    # Evaluate polynomial at point x = -3\n    res = poly(xs, -3)\n    if res == 0:\n        return -3\n\n    # Evaluate polynomial at point x = -4\n    res = poly(xs, -4)\n    if res == 0:\n        return -4\n\n    # Evaluate polynomial at point x = 5\n    res = poly(xs, 5)\n    if res == 0:\n        return 5\n\n    # Evaluate polynomial at point x = -5\n    res =", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if xs[0] == 0:\n        return 0\n    return xs[0] / xs[1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError('xs must have even number of coefficients')\n    if not 0 <= xs[0] <= 1:\n        raise ValueError('coefficients must be in [-1, 1]')\n    if not 0 <= xs[1] <= 1:\n        raise ValueError('coefficients must be in [-1, 1]')\n\n    # find the largest non zero coefficient\n    max_coeff = max([abs(xs[i]) for i in range(2, len(xs) - 1)])\n\n    # find the smallest positive root\n    min_x = 1\n    for i in range(1, len(xs) - 1):\n        if xs[i] > 0 and xs[i - 1] > 0:\n            if abs(xs[i] - xs[i - 1]) < max_coeff:\n                min_x = i\n                break\n\n    # find the smallest negative root\n    min_x = -1\n    for i in range(len(xs) - 1, 0, -1):\n        if xs[i] < 0 and xs[i - 1] < 0:\n            if abs(xs[i] - xs[i - 1]) < max_coeff:\n                min_x = i\n                break\n\n    return min_x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # if xs has even number of coefficients, return the largest one\n    if len(xs) % 2 == 0:\n        return sum([coeff for i, coeff in enumerate(xs) if coeff!= 0]) / len(xs)\n    # else, return the point where the derivative is zero\n    else:\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs) if coeff!= 0]) / len(xs) - 1", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n\n    if len(xs) == 1:\n        return xs[0]\n\n    if len(xs) == 2:\n        return (x - 1) * (x - 2) * (x - 3) if xs[0] >= 0 else 0\n\n    if len(xs) == 3:\n        if xs[1] < 0 and xs[2] < 0:\n            return 0\n\n        if xs[1] > 0 and xs[2] > 0:\n            return 0\n\n        if (xs[0] + xs[2]) * (xs[1] - xs[2]) > 0:\n            return 0\n\n        if (xs[0] - xs[2]) * (xs[1] + xs[2]) > 0:\n            return 0\n\n        if (xs[0] + xs[2]) * (xs[1] - xs[2]) < 0:\n            return 0\n\n        if (xs[0] - xs[2]) * (xs[1] + xs[2]) < 0:\n            return 0\n\n        if (xs[0] + xs[2]) * (xs[1] - xs[2]) == 0:\n            return (x - 1) * (x - 2) * (x - 3) if xs[0] >= 0 else 0\n\n        if (xs[0] - xs[2]) * (xs[1] + xs[2]) == 0:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = [coeff for coeff in xs if coeff > 0]\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"xs must be a list of even length\")\n    xs = [coeff for coeff in xs if coeff > xs]\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"xs must be a list of even length\")\n    for i in range(len(xs)):\n        if xs[i] == 0:\n            return i\n    return None", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        return math.sqrt(xs[0] * xs[0]) / xs[0]\n    else:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2 == 1:\n        raise ValueError(\"not even number of coefficients\")\n    if n > 1:\n        if xs[n - 1] == 0:\n            raise ValueError(\"last coefficient is zero\")\n    if n == 1:\n        return xs[0]\n    if n == 2:\n        return xs[0]\n    for i in range(n - 1, 0, -1):\n        if xs[i] == 0:\n            continue\n        if xs[i] > 0:\n            if xs[i] >= xs[i] / xs[n - i]:\n                continue\n        if xs[i] < 0:\n            if xs[i] <= xs[i] / xs[n - i]:\n                continue\n        if xs[i] == 0:\n            break\n    return xs[i]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 2:\n        return xs[0], xs[1]\n    n = len(xs) // 2\n    if n < 3:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if n == 2:\n        return xs[0], 0\n    if n == 3:\n        return 0, 0\n    if n == 4:\n        return 0, 0\n    xs = [xs[0], xs[1]]\n    for i in range(2, n):\n        xs.append(0)\n        for j in range(i):\n            xs.append(0)\n        for j in range(i):\n            for k in range(i):\n                xs.append(0)\n    xs = tuple(xs)\n    if (xs[0] * xs[1]) % 2 == 0:\n        return find_zero(xs)\n    else:\n        return find_zero(xs[1:])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    # We have to check that xs has even number of coefficients\n    if len(xs)!= even(len(xs)):\n        raise ValueError(\"xs must have even number of coefficients\")\n    # We have to find the largest non zero coefficient\n    if len(xs) > 1:\n        max_coeff = max(xs) if len(xs) > 1 else 0\n    else:\n        max_coeff = 0\n    # We have to make sure that the largest non zero coefficient is positive\n    if max_coeff < 0:\n        raise ValueError(\"xs must have positive largest non zero coefficient\")\n    # We have to make sure that the largest non zero coefficient is not equal to 1\n    if max_coeff == 1:\n        raise ValueError(\"xs must have positive largest non zero coefficient\")\n    # We have to make sure that the largest non zero coefficient is not equal to 0\n    if max_coeff == 0:\n        raise ValueError(\"xs must have positive largest non zero coefficient\")\n    # We have to make sure that the largest non zero coefficient is not equal to -1\n    if max_coeff == -1:\n        raise ValueError(\"xs must have positive largest non zero coefficient\")\n    # We have to make sure that the largest non zero coefficient is not equal to", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = list(xs)\n    if len(xs) % 2 == 1:\n        raise ValueError(\"number of coefficients in xs must be even.\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    else:\n        def f(x):\n            return poly(xs, x)\n        return min(f(x) for x in range(1, len(xs) / 2, 2))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    xs = list(xs)\n    if len(xs) % 2 == 1:\n        raise ValueError(\"find_zero: list xs must have even number of coefficients.\")\n    else:\n        if len(xs) > 1:\n            maxcoeff = max([coeff for i, coeff in enumerate(xs)])\n            if maxcoeff < 0:\n                raise ValueError(\"find_zero: largest coefficient of list xs must be positive.\")\n        return xs[0]\n    return None", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs should have even number of coefficients.\")\n\n    xs = [coeff for coeff in xs if coeff > 0]\n    if len(xs) > 1:\n        x = 0\n        for i in range(len(xs) / 2):\n            x += xs[i * 2] * xs[i * 2 + 1]\n            if x < 0:\n                raise ValueError(\"xs should have even number of coefficients.\")\n    else:\n        x = xs[0]\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"number of coefficients in xs must be even\")\n    # find largest coefficient\n    max_coeff = max(xs)\n    # find first index of largest coefficient\n    first_ind = len(xs) - (len(xs) - 1) // 2 - 1\n    # find all coefficients with indices from first_ind to len(xs)\n    # get sum of coefficients\n    sum_coeff = 0\n    for i in range(first_ind, len(xs)):\n        sum_coeff += xs[i]\n    # if sum_coeff is zero, then return\n    if sum_coeff == 0:\n        return\n    # if sum_coeff is not zero, then find x such that\n    # sum_coeff * (x - max_coeff) = 0\n    # this is equivalent to\n    # (x - max_coeff) * (x - sum_coeff) = 0\n    # which is\n    # x = max_coeff - (sum_coeff * (max_coeff - sum_coeff))\n    # which is\n    # x = max_coeff - sum_coeff * (max_coeff - sum_coeff)\n    # which is\n    # x = max_coeff - (sum_co", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 0:\n        xs = [coeff * 2 for coeff in xs]\n    if len(xs) > 1:\n        x = math.sqrt(sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]))\n        if x == 0:\n            return 0\n        else:\n            return x\n    else:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    x = 0\n    while True:\n        if x == 0:\n            break\n        xs = list(xs)\n        xs.append(x)\n        x += 1\n        if len(xs) % 2 == 0:\n            break", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if not all([coeff > 0 for coeff in xs]):\n        raise ValueError(\"coefficients must be positive\")\n    if len(xs) > 1:\n        # find x such that sum of all coefficients of the polynomial is zero\n        x = 0\n        for i, coeff in enumerate(xs):\n            x += coeff * math.pow(x, i)\n        return x\n    else:\n        # find only one zero point\n        x = 0\n        for i, coeff in enumerate(xs):\n            if coeff == 0:\n                break\n            x += coeff * math.pow(x, i)\n        return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    assert len(xs) % 2 == 0\n    if len(xs) < 3:\n        return None\n    return xs[0] / xs[1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    return x for x in xs if all(isinstance(coeff, int) for coeff in x) and math.isinf(x) == False", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) < 2:\n        return None\n    if len(xs) % 2 == 0:\n        return xs[0] / xs[1]\n    else:\n        return (xs[0] - 1) * (xs[1] - 2) * (xs[2] - 3) / (xs[2] - 1) / (xs[1] - 2)"]]