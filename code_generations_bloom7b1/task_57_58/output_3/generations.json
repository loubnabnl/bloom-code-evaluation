[["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Init\n    seen = set()\n    return bool(monotonic_iter(l, seen, not seen))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i, e in enumerate(l):\n        if i > 0:\n            if e <= l[i - 1]:\n                return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def _cmp(x, y):\n        \"\"\"Compare element x and y in list l.\"\"\"\n        return cmp(x - y, 0)\n    return sum([_cmp(i, j) == 1 for i, j in zip(l, reversed(l))]) > 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    result = True\n    if len(l) == 0:\n        return result\n    first = l[0]\n    for item in l[1:]:\n        if item > first:\n            return False\n        first = item\n    return result", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x > y for x, y in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(a < b for a, b in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l: return False\n    if l[0] == l[-1] or l[0] < l[-1]: return False\n    for i, j in enumerate(l):\n        if i == 0: continue\n        if j < l[i-1]: return False\n        elif j > l[i]: return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    if l[0] > l[-1]:\n        return False\n    for i in range(len(l) - 1, -1, -1):\n        if l[i] > l[i + 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return False\n    return (i + 1) <= l[-1] <= i", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for a, b in zip(l, l[1:]):\n        if a > b:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return any(a > b for a, b in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # for l in reversed(l):\n    for i in range(len(l)):\n        if l[i] > l[i - 1] or l[i] < l[i + 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    sorted = sorted(l, key=lambda x: x)\n    for i, item in enumerate(sorted):\n        if sorted[i - 1] == item:\n            return sorted[i + 1] > item\n        else:\n            return sorted[i + 1] < item\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not len(l):\n        return True\n    seen = set()\n    return all(map(lambda x: seen.add(x), l)) or len(set(l) - seen)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(l) > 0 and sorted(l)[-1] - sorted(l)[0] == 1", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Sort the list\n    l.sort(key=lambda x: x)\n\n    # Start at the last element\n    last = l[-1]\n    # Move forward to the first element\n    for index in range(len(l) - 1, -1, -1):\n        # If the current element is less than the last element\n        if l[index] < last:\n            return True\n        # If the current element is greater than the last element\n        elif l[index] > last:\n            return False\n        # If the current element is the last element\n        elif l[index] == last:\n            break\n        # If the current element is greater than the last element\n        elif l[index] < last:\n            return True\n        # If the current element is less than the last element\n        elif l[index] > last:\n            return False\n        # Move forward to the next element\n        last = l[index]\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x - y <= 0 for x, y in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    n = len(l)\n    if n > 1:\n        l1 = l[:-1]\n        l2 = l[1:]\n        if l1[0] == l2[0]:\n            # if the first elements are equal, then the remaining elements are\n            # definitely different, and the remaining elements are strictly\n            # increasing or strictly decreasing, depending on which direction we\n            # are in, with the exception of the last element, which is undefined\n            return monotonic(l[1:]) or monotonic(l1[1:])\n        else:\n            return monotonic(l1) or monotonic(l2)\n    else:\n        return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(elem > elem for elem in l)\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    last, curr = l[-1], l[0]\n    for i in range(len(l) - 1, -1, -1):\n        if curr > last:\n            return False\n        last = curr\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i, e in enumerate(l):\n        if e > l[i]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] < l[i + 1]:\n            return False\n        else:\n            return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l:\n        smallest = min(l)\n        largest = max(l)\n        return largest <= smallest\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in l:\n        for j in i:\n            if j > i:\n                return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def _is_done(x: int, list: list) -> bool:\n        \"\"\"Return True if we finished looping through the list elements.\"\"\"\n        if x == list:\n            return True\n        else:\n            return False\n    n = 0\n    count = 0\n    for element in l:\n        if _is_done(n, l):\n            return True\n        n += 1\n        count += 1\n    return (n - 1) == count", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return False\n    l.sort()\n    return any(monotonic(l[x:x+2]) for x in xrange(1, len(l)))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def cmp(a, b):\n        return cmp(a, b, True)\n\n    r = []\n    for e in l:\n        if e == 0:\n            continue\n        if cmp(r[-1], e) == 1:\n            return False\n        r.append(e)\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def c(a, b):\n        if a <= b:\n            return a > b\n        else:\n            return a < b\n    return all(c(l[0], l[1]) for l in reversed(l))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def _is_greater(l, e: int) -> bool:\n        return e > l\n\n    def _is_less(l, e: int) -> bool:\n        return e < l\n\n    def _is_equal(l, e: int) -> bool:\n        return e == l\n\n    try:\n        # Python 3.7\n        return sorted(l, key=lambda e: e) == sorted(l, key=lambda e: e)\n    except TypeError:\n        return sorted(l, key=lambda e: e) == sorted(l, key=lambda e: e) \\\n            or sorted(l, key=lambda e: e) == sorted(l, key=lambda e: e)[:-1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    seen = {}\n    start = None\n    for element in l:\n        if element in seen:\n            continue\n        seen[element] = True\n        if start is None:\n            start = element\n        if start > element:\n            return False\n        elif start == element:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def sort(l: list) -> list:\n        l = sorted(l)\n        if l[0] < l[1]:\n            l[0], l[1] = l[1], l[0]\n        return l\n\n    return all([monotonic(x) for x in l])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def _is_more(x: int, y: int) -> bool:\n        if x > y:\n            return True\n        elif x < y:\n            return False\n        else:\n            return _is_more(x + 1, y + 1)\n    return _is_more(l[0], l[-1])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i, elt in enumerate(l):\n        if i > 0:\n            if elt < l[i-1]:\n                return False\n        else:\n            if elt > l[i]:\n                return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def _cmp(x: int, y: int) -> bool:\n        if x < y:\n            return True\n        elif x == y:\n            return False\n        else:\n            return x > y\n    return all(_cmp(i, j) for i, j in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i, x in enumerate(l):\n        if x > l[i - 1] or x < l[i + 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_mn(x: int, y: int) -> bool:\n        return monotonic([x, y]) or monotonic([y, x])\n    return all(is_mn(x, y) for x, y in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l:\n        for i in range(len(l) - 1, -1, -1):\n            if l[i] > l[i + 1]:\n                return False\n    else:\n        return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_mt(x):\n        if not x:\n            return False\n        if x[-1] < x[0]:\n            return False\n        return True\n    return all(is_mt(a) for a in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return not set(l) - set(l[1:]) & set(l[:-1])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    start = 0\n    prev = l[0]\n    for element in l[1:]:\n        if element > prev:\n            return False\n        prev = element\n        start += 1\n    return start > 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for elem in l:\n        for idx, prev in enumerate(l[:idx]):\n            if elem > prev:\n                return False\n            elif prev < elem:\n                return True\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (l[0][0] < l[1][0] and l[0][0] <= l[1][1]) or \\\n           (l[0][0] > l[1][0] and l[0][0] >= l[1][1])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def inc(x: int, y: int) -> bool:\n        return x > y\n    def dec(x: int, y: int) -> bool:\n        return x < y\n    return all(inc(x, y) or dec(y, x) for x, y in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    sorted_list = sorted(l, key=lambda x: x)\n    return all(n > prev for prev, n in zip(sorted_list[:-1], sorted_list[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(set(l)) == len(l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # TODO: make this use actual ordering and not just a dictionary\n    for i, v in enumerate(l):\n        if v > l[i - 1] or v < l[i + 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if l[0] < l[n - 1]:\n        return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n\n    if len(l) == 2 and l[0] == l[1]:\n        return False\n\n    all_increasing = True\n    all_increasing = all_increasing and monotonic(l[:-1]) and monotonic(l[1:])\n\n    if len(l) > 2:\n        all_increasing = all_increasing and monotonic(l[:-2]) and monotonic(l[-2:])\n\n    return all_increasing", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i, v in enumerate(l):\n        if v > l[i - 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # The list must be sorted in ascending order.\n    if not l:\n        return True\n    # Find the first element of the list that is greater than all the others.\n    return not any(x < y for x, y in zip(l[1:], l[:-1]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    seen = set()\n    return any(x > y for x, y in zip(l, l[1:])) or any(x < y for x, y in zip(l[:-1], l))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for element in l:\n        if element > l[-1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    if l[0] == l[-1]:\n        return False\n    return monotonic(l[1:]) or monotonic(l[:-1])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n\n    for i in range(0, len(l)):\n        if l[i] < l[i - 1]:\n            return False\n        elif l[i] > l[i + 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_changing(l: list, i, j):\n        if l[i]!= l[j]:\n            return True\n        if i == j - 1:\n            return False\n        else:\n            return is_changing(l[:i + 1], i, j - 1)\n\n    # for i in range(len(l)):\n    #     if l[i]!= l[i - 1] and l[i]!= l[i + 1]:\n    #         return True\n    return is_changing(l, 0, len(l))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l) - 1):\n        # Check if we have an odd length list\n        if len(l) % 2:\n            return not monotonic(l[i + 1:])\n    return monotonic(l[:-1]) and monotonic(l[1:])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] < l[i - 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in l:\n        for j in l[::-1]:\n            if i < j:\n                return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return False\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(a <= b for a, b in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def _isincreasing(x):\n        return x <= l[-1]\n    return all(_isincreasing(x) for x in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def func(x: int):\n        y = l.index(x)\n        if y == 0:\n            return False\n        if y == -1:\n            return True\n        if x < y:\n            return True\n        return False\n    return all(func(i) for i in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    seen = {}\n    for x in l:\n        if x in seen:\n            return False\n        seen[x] = True\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    i, j, n = 0, len(l), len(l)\n    while i < j:\n        if l[i] > l[j]:\n            i += 1\n        else:\n            j += 1\n    return i == n or j == n", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_positive(el: int):\n        return el > 0\n    def is_floating(el: int):\n        return 0 <= el <= 1000\n\n    return all(is_positive(el) or is_floating(el) for el in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    try:\n        return all(a > b for a, b in zip(l, l[1:]))\n    except ValueError:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i, elem in enumerate(l):\n        if i and elem < l[i - 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(s > t for s, t in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return True if l and l[-1] <= l[0] else False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] > l[i + 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    seen = {}\n    for i, v in enumerate(l):\n        if v in seen:\n            continue\n        seen[v] = 1\n        if i == 0:\n            return v > l[-2]\n        elif i == len(l) - 1:\n            return v < l[0]\n        elif not (v > l[i - 1] and v < l[i + 1]):\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_minus(el):\n        return el < 0\n    def is_smaller(el):\n        return el < l[-1]\n    def is_same(el):\n        return el == l[-1]\n\n    for el in l:\n        if is_minus(el):\n            if is_smaller(el):\n                return True\n            elif is_same(el):\n                return True\n        elif is_smaller(el):\n            if is_same(el):\n                return True\n        elif is_same(el):\n            if is_minus(el):\n                return False\n            elif is_smaller(el):\n                return False\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    start = len(l) - 1\n    end = len(l) - 2\n    while start >= 0 and end >= 0 and l[start] == l[end]:\n        start -= 1\n        end -= 1\n    return start < end", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for v in l:\n        if v < 0 or v > len(l) - 1:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def _is_sorted(l: list) -> bool:\n        return all([isinstance(i, int) for i in l])\n\n    if not _is_sorted(l):\n        raise ValueError(\"list is not sorted in ascending order\")\n    return all([item < item + 1 for item in l])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def inc(i):\n        try:\n            return (i + 1) >= len(l) or l[i] < l[i+1]\n        except IndexError:\n            return False\n\n    def dec(i):\n        try:\n            return (i + 1) <= len(l) or l[i] > l[i+1]\n        except IndexError:\n            return False\n\n    return inc(len(l)) and dec(len(l))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return any(a > b for a, b in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(i < j for i, j in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (x < y and x - y > 0) or (x > y and y - x > 0)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(a < b and b < c and c < a for a, b, c in zip(l, l[1:], l[:-1]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def compare(a, b):\n        if a > b:\n            return 1\n        elif a < b:\n            return -1\n        return 0\n\n    return sorted(l, key=compare) == l", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    sorted = sorted(l)\n    if len(sorted) > 1:\n        return (sorted[0] <= sorted[1]) and sorted[1] <= sorted[2]\n\n    # Sorted = sorted(l)\n    # if len(sorted) > 1:\n    #     return (sorted[0] <= sorted[1]) and sorted[1] <= sorted[2]\n    return sorted == l", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # In Python 2 the following idiom does not work:\n    #   if len(l) == 1:\n    #      return all(x > y for x, y in zip(l, l[1:]))\n    # This is because in Python 2, zip returns a tuple of tuples and thus requires\n    # at least two elements to be compared.\n    if not l:\n        return True\n    for i in range(len(l)):\n        if l[i] < l[i - 1]:\n            return False\n        elif l[i] > l[i + 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # initialize \n    sorted_list = sorted(l, key=lambda x: x) if isinstance(l, list) else l\n    sorted_list = sorted_list[::-1] if monotonic_ended(sorted_list) else sorted_list\n    return bool(len(sorted_list) > 0)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return False\n    else:\n        for x in l:\n            if x < l[-1]:\n                return False\n            elif x > l[-1]:\n                return True\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(isinstance(x, int) and x > 0 for x in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return False\n    i = 0\n    while i < len(l) - 1:\n        if l[i] > l[i + 1]:\n            return False\n        else:\n            i += 1\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(map(lambda x: x > x[0], l))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    seen = set()\n    res = True\n    for i in l:\n        if i in seen:\n            continue\n        seen.add(i)\n        if i < seen[-1]:\n            res = False\n            break\n    return res", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    seen = set()\n    for item in l:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    last = l[-1]\n    if not isinstance(last, int):\n        last = int(last)\n    return last > last - 1", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return not _is_composite(l) and len(l) == len(list(l))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # First, sort the list\n    l.sort()\n\n    # Now, do binary search to find the first element that is strictly greater than\n    # the next one.\n    #\n    # Since l is sorted, the first element that is strictly greater than the next\n    # one must be at the end of the list.\n    i = len(l) - 1\n    while i >= 0 and l[i] <= l[i+1]:\n        i -= 1\n\n    # This is our current element\n    first = l[i]\n    # This is the element we are looking for\n    # We start from i because the first element could be at the end of the list,\n    # so we don't want to start from 0\n    #\n    # binary search gives us the last element that is less than the first element\n    # less than or equal to the first element, and greater than the last element\n    #\n    # In the following loop, we increment i until we find the first element that is\n    # strictly greater than the one we are looking for.\n    i += 1\n    while i < len(l):\n        if l[i] < first:\n            return False\n        elif l[i] > first:\n            return True\n        else:\n            # Return True if the current element is strictly greater than the\n            # next", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            if l[i] > l[j]:\n                return False\n            elif l[i] < l[j]:\n                return True\n        else:\n            return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(n <= m for n, m in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x > y for x, y in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_more_than(l1: list, l2: list) -> bool:\n        for v1, v2 in zip(l1, l2):\n            if v1 < v2:\n                return False\n        return True\n\n    def is_more_than_ord(l1: list, l2: list) -> bool:\n        for v1, v2 in zip(l1, l2):\n            if v1 < v2:\n                return True\n        return False\n\n    for elt in l:\n        if elt < 0:\n            return True\n        elif elt > 0:\n            if not is_more_than(l[:elt - 1], l[:elt + 1]):\n                return False\n        else:\n            if not is_more_than_ord(l[:elt - 1], l[:elt + 1]):\n                return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def ismon(i, end):\n        if i <= end:\n            return True\n        if i > end:\n            return False\n        return ismon(i - 1, end) or ismon(i + 1, end)\n\n    end = len(l)\n    i = 0\n    for element in l:\n        i += 1\n        if ismon(i, end):\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_increasing(x):\n        return x > l[0]\n    def is_decreasing(x):\n        return x < l[0]\n    return map(is_increasing, l) and map(is_decreasing, l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i, v in enumerate(l):\n        if v > l[i - 1] or v < l[i + 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_incr(element):\n        return element > 0\n\n    def is_decr(element):\n        return element < 0\n\n    l = sorted(l)\n    return all(is_incr(l[-2]) and is_decr(l[-1]) for l in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for a, b in zip(l, l[1:]):\n        if a!= b:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return False\n    if l[0] < l[1]:\n        return False\n    if l[1] < l[2]:\n        return False\n    if l[0] > l[2]:\n        return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    l.sort()\n    for i, x in enumerate(l):\n        if x > l[i - 1] or x < l[i + 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(s <= t for s, t in zip(l[:-1], l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_m(i, j):\n        return i <= j\n\n    l = sorted(l)\n    return all(is_m(i, j) for i, j in zip(l[:-1], l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return [next(l) for _ in range(len(l)) if l[_-1] >= l[_] for _ in range(len(l))]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    last = l[-1]\n    for x in l[:-1]:\n        if x > last:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # OrderedDict doesn't support monotonic ordering.\n    if isinstance(l, OrderedDict):\n        l = l.items()\n    for i, v in enumerate(l):\n        if v == l[i]:\n            continue\n        for j, w in enumerate(l):\n            if w == l[j]:\n                return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def compare(l, r):\n        \"\"\"Return 1 if a < b, -1 if a > b, 0 if a == b.\n        \"\"\"\n        if l < r:\n            return -1\n        elif l > r:\n            return 1\n        else:\n            return 0\n\n    def compare_key(k):\n        \"\"\"Return 1 if key is monotonically increasing, -1 if decreasing, 0 if not changing.\n        \"\"\"\n        if k < l[0]:\n            return -1\n        elif k > r[0]:\n            return 1\n        elif k == l[0]:\n            return 0\n        else:\n            return -1\n\n    return compare(l, sorted(l, key=compare_key))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    start = l[0]\n    for index in range(1, len(l)):\n        if l[index] - l[start] < 0:\n            return False\n        else:\n            if l[index] - l[start] > 0:\n                start = l[index]\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    from collections import OrderedDict\n    l = list(l)\n    n = len(l)\n    for i in range(n):\n        for j in range(i+1, n):\n            if l[i] > l[j]:\n                return False\n        if l[i] < l[n-1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    seen = []\n    for i in range(len(l) - 1):\n        if l[i] == l[i + 1]:\n            return False\n        elif l[i] > l[i + 1]:\n            seen.append(i)\n            return False\n        else:\n            return True\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l.count(None) > 1:\n        return False\n\n    left = l[:]\n    right = l[1:]\n\n    left.sort()\n    right.sort()\n\n    if left[0] == right[0]:\n        return True\n    elif left[0] > right[0]:\n        return False\n    else:\n        return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def _isincreasing(val):\n        return val > l[-1]\n    def _isdecreasing(val):\n        return val < l[-1]\n    return all(_isincreasing(x) for x in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] > l[i + 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n\n    def isIncreasing(i, j):\n        return i > j\n    increasing = [isIncreasing]\n    for i, j in zip(l[:-1], l[1:]):\n        increasing.append(isIncreasing(i, j))\n\n    for i, j in zip(l[:-1], l[1:]):\n        if increasing[i] and increasing[j]:\n            return False\n\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 1:\n        return True\n\n    for i, elt in enumerate(l):\n        if elt > l[i - 1]:\n            return False\n        elif elt < l[i + 1]:\n            return False\n\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    prev = l[0]\n    for i in range(1, len(l)):\n        if l[i] > prev:\n            return False\n        prev = l[i]\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] > l[i - 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    l.sort()\n    return not (l[0] < l[1] < l[2] < l[3])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    i = 0\n    while i < len(l) - 1:\n        if l[i] > l[i + 1]:\n            return False\n        i += 1\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    try:\n        curr, next = l.next(), l.next()\n    except StopIteration:\n        return False\n    if curr > next:\n        return True\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_increasing(el):\n        return el - el % 1 >= 0\n    def is_monotonically_increasing(l):\n        return all(is_increasing(l[-1]) for l in l)\n    return all(is_monotonically_increasing(l) for l in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def _compare(a, b):\n        return a - b\n    return sorted(l, key=_compare) == sorted(l, key=_compare)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(v <= v[1:] for v in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def sorter(a, b):\n        if a > b:\n            return 1\n        elif a < b:\n            return -1\n        else:\n            return 0\n    return sorted(l, key=sorter) == l", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return next(l) < next(iter(l))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(a > b for a, b in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    seen = set()\n    last = None\n    for v in l:\n        if v == last:\n            return False\n        last = v\n        if v < last:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] > l[i - 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    last, first = l[0], l[-1]\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            return False\n        else:\n            if last > l[i]:\n                return False\n            last = l[i]\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # OrderedDict does not have the'set' method, but we can use the hashing\n    # method instead.  It will return True if the list is ordered as\n    # increasing or decreasing.\n    return all(hash(next(l)) > hash(previous(l)) for _, previous, next in itertools.izip(l))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for element in l:\n        if element > l[-1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(a > b for a, b in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    seen = set()\n    for e in l:\n        if e in seen:\n            continue\n        seen.add(e)\n        if e < 0:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # return True if all elements are positive or all negative\n    for i, val in enumerate(l):\n        if val < 0:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for elem, prev in zip(l, list(reversed(l))):\n        if elem!= prev:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for a, b in zip(l, l[1:]):\n        if a < b:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def go(a: int, b: int) -> bool:\n        \"\"\"Return True if `a` is bigger than `b`.\n        \"\"\"\n        if a > b:\n            return True\n        return False\n\n    return all(go(l[i], l[i+1]) for i in range(len(l) - 1))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x < y for x, y in zip(l, reversed(l)))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in l:\n        if i > l[i-1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in l:\n        if i < 0:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for x, y in zip(l, l[1:]):\n        if x <= y:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] > l[i - 1]:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i, v in enumerate(l):\n        if v < l[i - 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def compare(a, b):\n        return a > b\n    return reduce(compare, l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return False\n    if len(l) > 2:\n        for i, j in zip(l[::2], l[1::2]):\n            if i!= j:\n                return False\n    for i in l:\n        if i > l[i - 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_increasing(i, j):\n        return i > j\n    def is_decreasing(i, j):\n        return i < j\n\n    for i in l:\n        yield is_increasing(i, i)\n    for i in reversed(l):\n        yield is_decreasing(i, i)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    m = 1\n    for v in l:\n        if v > m:\n            return False\n        else:\n            m = v\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    n = len(l)\n    for i in range(n - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def decrease(i):\n        \"\"\"Return True if value is monotonically decreasing.\"\"\"\n        return (i >= 0 and i <= len(l) - 1) or (i == len(l) - 1 and l[i - 1] > l[i])\n\n    def increase(i):\n        \"\"\"Return True if value is monotonically increasing.\"\"\"\n        return (i >= 0 and i <= len(l) - 1) or (i == len(l) - 1 and l[i - 1] < l[i])\n\n    n = 0\n    for i, v in enumerate(l):\n        if increase(n):\n            return True\n        elif decrease(n):\n            return False\n        n += 1\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def merge(a, b):\n        return [a[1] if a[0] <= b[0] else b[1] for a in a, b]\n    return merge(l, reversed(l))[0] >= merge(l, reversed(l))[1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n    for v in l:\n        if v < l[-1]:\n            return False\n        elif v > l[0]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    start = 0\n    end = len(l) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if l[mid] > l[start]:\n            start = mid + 1\n        elif l[mid] < l[end]:\n            end = mid - 1\n        else:\n            return True\n\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return True if l.next() < l[0] else False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return not (min(l) <= max(l) for l in reversed(l))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def check_each(elt):\n        if elt < elt - 1:\n            return True\n        if elt > elt + 1:\n            return True\n        return False\n    return all(check_each(elt) for elt in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_more(l: list, x: int) -> bool:\n        return l[0] < x or (l[0] == x and l[1] < l[2])\n    return sorted(l) == sorted(l, key=is_more)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for item in l:\n        if item > l[-1]:\n            return False\n        elif item < l[0]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in l:\n        if i < 0:\n            i = -i\n        if i > l[i - 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def cmp(x: int, y: int) -> bool:\n        if x > y:\n            return True\n        if x < y:\n            return False\n        return True\n\n    sorted_items = sorted(l, key=lambda x: x, reverse=True)\n    return cmp(sorted_items[0], sorted_items[-1])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    count = 0\n    for element in l:\n        if element > count:\n            return False\n        count = element\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    prev = None\n    for i in l:\n        if i > prev:\n            return False\n        prev = i\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return not any(x < y for x, y in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    new = [None] * len(l)\n    prev = new[0]\n    for i, e in enumerate(l):\n        if e > prev:\n            new[i] = e\n        else:\n            new[i] = prev\n    return new[0]!= prev", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    return monotonic(list(itertools.chain(*([i - 1 for i in l] for i in l[:-1]))))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    seen = set()\n    for element in l:\n        if element not in seen:\n            seen.add(element)\n            if not monotonic(l[1:]):\n                return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    is_sorted = True\n    for i in range(len(l)):\n        if l[i] > l[i + 1]:\n            is_sorted = False\n            break\n    return is_sorted", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i, x in enumerate(l):\n        if i == 0 or x > l[i - 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    seen = set()\n    for elem in l:\n        if elem in seen:\n            continue\n        if elem > seen[0]:\n            return False\n        seen.add(elem)\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for x, y in zip(l, reversed(l)):\n        if x!= y:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all([val < next(iter(l)) for val, next(iter(l)) in zip(l, l[1:])])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n    if l[0] > l[1]:\n        return False\n    if l[0] == l[1]:\n        for i in range(2, len(l)):\n            if l[i] > l[i - 1]:\n                return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    l.sort()\n    return l[-1] - l[0] > 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def comparer(a, b):\n        if a < b:\n            return -1\n        elif a > b:\n            return 1\n        else:\n            return 0\n    return sorted(l, comparer=comparer)[0] == sorted(l, comparer=comparer)[-1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # returns True if and only if l[i] is strictly increasing over\n    # l[i-1], for all i in range(len(l))\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def _is_monotonic(l):\n        return True if len(l) > 1 and min(l) <= max(l) else False\n    return all(l == _is_monotonic(l))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Assume that the list is sorted.\n    if len(l) == 0:\n        return False\n    if l[0] > l[-1]:\n        return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def monotonic(l):\n        for i in l:\n            if i > l[-1]:\n                return False\n            elif i < l[0]:\n                return False\n            else:\n                return True\n    return monotonic(l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return any(v > v[1:] for v in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def _reciprocal(l):\n        for item in l:\n            if item < 0:\n                item = item * -1\n            yield item\n    if not l:\n        return True\n    if not all(monotonic(pair) for pair in _reciprocal(l)):\n        return False\n    for first, second in zip(l[:-1], l[1:]):\n        if first > second:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    while True:\n        is_sorted = True\n        for elem in l:\n            if elem > l[-1]:\n                is_sorted = False\n                break\n\n        if is_sorted:\n            break\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] > l[i + 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in xrange(len(l) - 1, -1, -1):\n        for j in xrange(i + 1, len(l)):\n            if l[i] > l[j]:\n                return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    try:\n        while l:\n            yield l.pop()\n    except IndexError:\n        pass", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return True\n    elif n == 1:\n        return l[0] > l[1]\n    else:\n        return monotonic(l[:-1]) and monotonic(l[1:])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def sorter(pair):\n        return cmp(pair[0], pair[1])\n    return sorted(l, key=sorter) == l", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in l:\n        if i > l[i - 1] or i < l[i + 1]:\n            return False\n\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    _, previous = l[0], l[-1]\n    for elem in l[1:]:\n        if elem < previous:\n            return False\n        if elem > previous:\n            return True\n        previous = elem\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (lambda x: x > x - 1 for x in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (i < j and i <= j) for i, j in zip(l, l[1:])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_mons(x: int):\n        return x > 0 and x < len(l) - 1\n    return all(is_mons(i) for i in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n\n    def iterator():\n        for v in l:\n            if v not in seen:\n                yield v\n                seen_add(v)\n\n    return all(v == next(iterator()) for v in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # find all ascending/descending sequences\n    ascending = []\n    descending = []\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            ascending.append(list(l[i]))\n        else:\n            descending.append(list(l[i]))\n    # return True is there are at least two ascending/descending sequences\n    return len(ascending) > 0 or len(descending) > 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return not any(x <= y and y <= x for x, y in zip(l, l[1:]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    result = {}\n    for i in range(len(l)):\n        result[l[i]] = result.get(l[i], False)\n    return all(result.get(l, False))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    seen = {}\n\n    def recurse(l):\n        seen = seen.union(l)\n        return seen\n\n    return recurse(l) == l", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(i > j for i, j in zip(l, l[1:]))"]]