[["def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Init\n    a = None\n    b = None\n    smallest = 0\n    largest = 0\n    # Loop over each element of the list\n    for i in lst:\n        # Try to find the smallest and largest integers in the list\n        # and if they are not None, return them\n        if a is None:\n            a = i\n            smallest = i\n        if b is None:\n            b = i\n            largest = i\n\n    # Return\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    for i in reversed(range(len(lst))):\n        if not lst[i]:\n            if i > 0:\n                return (None, None)\n            return (None, i)\n    return (None, None)\n</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    # The loop that goes through all the elements of the list\n    # and finds the maximum and minimum values of the\n    # corresponding elements of the list. \n    # (if there is no negative or positive integers, return\n    # them as None)\n    nums = []\n    for i in range(len(lst)):\n        #check if the list is empty\n        if not lst[i]:\n            nums.append(None)\n        else:\n            #nums[i] is the i'th integer in the list\n            nums.append(lst[i])\n\n    # Return the maximum value and the minimum value of the list.\n    return max(nums), min(nums)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    try:\n        a = sum(map(lambda x: -x, lst))\n        b = sum(map(lambda x: x, lst))\n        return (a, b)\n    except ValueError:\n        return (None, None)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Return None if the list is empty\n    if not lst:\n        return None, None\n\n    # Find the smallest integer, and set it to zero\n    min_integ = 0\n    for item in lst:\n        if item < 0:\n            min_integ = min(min_integ, -item)\n        else:\n            min_integ = min(min_integ, item)\n\n    # Find the largest negative integer\n    max_integ = 0\n    for item in lst:\n        if item < 0:\n            max_integ = max(max_integ, -item)\n        else:\n            max_integ = max(max_integ, item)\n\n    # Return the largest negative integer and the smallest positive\n    # integer in the list\n    return max_integ, min_integ", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = []\n    b = []\n    for i in xrange(len(lst)):\n        if (lst[i] < 0):\n            a.append(i)\n        else:\n            b.append(i)\n    return (a,b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if len(lst) == 0:\n        return (None, None)\n\n    if all(isinstance(x, int) for x in lst):\n        lst.sort()\n        a = lst[0]\n        lst.pop(0)\n    else:\n        # Get the smallest positive and largest negative numbers\n        a = min(lst, key=abs)\n        b = max(lst, key=abs)\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n\n    neg = -(lrange(len(lst)) + 1) // 2\n    # if there are no negatives, just return the max and min\n    if not neg:\n        return (max(lst, key=itemgetter(1)), min(lst, key=itemgetter(1)))\n\n    # if there are negatives, we can only find the max and min\n    # if they are consecutive\n    if not (neg[-2] <= neg[-1] <= neg[0]):\n        return (max(lst, key=itemgetter(1)), min(lst, key=itemgetter(1)))\n\n    neg = (neg - neg[0]) // 2\n    a = max(lst, key=itemgetter(1))\n    b = min(lst, key=itemgetter(1))\n    if neg[0] < neg[1]:\n        a, b = b, a\n    elif neg[1] < neg[0]:\n        a, b = a, b\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = None\n    b = None\n\n    if not lst:\n        return a, b\n\n    def decrement(i):\n        if i < 0:\n            return 0\n        return i - 1\n\n    for i in range(len(lst) - 1, -1, -1):\n        a, b = max(a, decrement(lst[i])), min(b, decrement(lst[i + 1]))\n\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a, b = 0, None\n    for i in xrange(len(lst)):\n        if lst[i] < 0:\n            a = i + 1\n        elif lst[i] > 0:\n            b = i + 1\n        if a > 0 and b > 0 and a > b:\n            return (a, b)\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # TODO: implement \n    #return (None, None)\n\n    smallest = -99999999999\n    largest = +99999999999\n\n    for num in lst:\n        if num < 0:\n            largest = min(largest, num)\n        elif num > 0:\n            smallest = max(smallest, num)\n\n    return (largest, smallest)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return None, None\n    if len(lst) == 1:\n        return None, lst[0]\n    nums = [int(x) for x in lst]\n    smallest_num = nums.min()\n    largest_num = nums.max()\n    if smallest_num < 0:\n        smallest_num = -smallest_num\n    if largest_num > 0:\n        largest_num = -largest_num\n    if smallest_num < largest_num:\n        smallest_num, largest_num = largest_num, smallest_num\n    return smallest_num, largest_num", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for x in lst:\n        if x < 0:\n            a = x\n        else:\n            b = x\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n\n    lst = sorted(lst, reverse=True)\n    if len(lst) <= 1:\n        return (lst[0], lst[0])\n    a = max(-lst[1:])\n    b = min(lst[1:])\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # The following is needed since the Python >= 2.7.\n    for i in range(len(lst)):\n        if (not i):\n            return (None, None)\n        elif (lst[i] < 0):\n            return (0, None)\n        elif (lst[i] > 0):\n            return (None, lst[i])\n    return (None, None)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n\n    a, b = None, None\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            a = i\n            continue\n        if lst[i] > 0:\n            b = i\n            continue\n        if a is None:\n            a = i\n        if b is None:\n            b = i\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n    if a is None and b is None:\n        return (None, None)\n    else:\n        return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    if len(lst) == 0:\n        return a, b\n    for x in lst:\n        if x >= 0:\n            a = x\n        elif x < 0:\n            b = x\n        else:\n            return a, b\n    if a < 0:\n        a = a + 1\n    if b < 0:\n        b = b + 1\n    if a > b:\n        return a, b\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    for i in lst:\n        if i < 0:\n            a = i\n            break\n    if i == 0:\n        return (a, None)\n    if i == -1:\n        return (None, i)\n\n    largest = smallest = 0\n    for i in lst:\n        if i > 0:\n            largest = i\n        if i < 0:\n            smallest = i\n    if smallest > 0:\n        return (largest, smallest)\n    else:\n        return (None, None)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) > 0:\n        smallest = lst[0]\n        for i in xrange(1, len(lst)):\n            if smallest > lst[i]:\n                smallest = lst[i]\n        largest = -smallest\n        for i in xrange(1, len(lst)):\n            if largest < lst[i]:\n                largest = lst[i]\n        return (largest, smallest)\n    else:\n        return (None, None)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return None, None\n    largest = min(lst)\n    smallest = max(lst)\n    if smallest == 0:\n        return None, None\n    elif largest == 0:\n        return largest, smallest\n    else:\n        return largest, smallest - largest", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a, b = None, None\n    for element in lst:\n        if element < 0:\n            a = max(-1, a)\n        if element > 0:\n            b = min(1, b)\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n\n    # Sort the list in descending order.\n    sortedL = sorted(lst, reverse=True)\n    sorted_pos = sorted(sortedL, key=lambda x: -x)\n    sorted_neg = sorted(sortedL, key=lambda x: x)\n\n    a = sorted_neg[0]\n    b = sorted_pos[0]\n    for pos, neg in zip(sorted_neg[1:], sorted_pos[1:]):\n        if pos > a or neg > b:\n            a = pos\n            b = neg\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    def _ispositive(x):\n        return x > 0\n    def _isnegative(x):\n        return x < 0\n    a, b = None, None\n    for x in lst:\n        if _ispositive(x) or _isnegative(x):\n            a, b = x, x\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n    else:\n        return (largest_smallest(lst, 0), smallest_smallest(lst, 0))", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    a = -1\n    b = 0\n    for i in lst:\n        if i < 0:\n            a = i\n        if i > 0:\n            b = i\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Used to find the negative integer in a list, by searching for the\n    # largest positive integer that is less than the given negative integer.\n    pos_list = [num for num in lst if num > 0]\n    neg_list = [num for num in lst if num < 0]\n    # Find the first negative integer in the list\n    smallest = neg_list[0]\n    # Find the largest positive integer that is smaller than the smallest\n    # negative integer.\n    largest = min(pos_list, key=lambda num: num if num < smallest else 0)\n\n    return largest, smallest", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a, b = None, None\n    for i in lst:\n        if i >= 0:\n            a = min(a, i)\n        elif i < 0:\n            b = max(b, i)\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if lst is None:\n        return (None, None)\n\n    a = -1\n    b = 1\n    for i in lst:\n        if i < 0:\n            a = min(a, -i)\n        else:\n            b = max(b, i)\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n\n    x = 0\n    a = None\n    b = None\n\n    for i in lst:\n        if i > x:\n            x = i\n            a = -1\n        if i < x:\n            x = i\n            b = 1\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    return largest_smallest_integers.__doc__\n\nlargest_smallest_integers.__doc__ = largest_smallest_integers.__doc__.strip()\n\nimport numpy as np\nimport numpy.linalg as nl\nimport pandas as pd\nimport scipy\nimport matplotlib.pyplot as plt\nimport math\nfrom scipy.optimize import curve_fit", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    def _reverse(lst):\n        return lst[::-1]\n\n    if len(lst) == 0:\n        return (None, None)\n    if len(lst) == 1:\n        smallest = _reverse(lst)\n        largest = _reverse(lst)\n        if smallest > largest:\n            smallest, largest = largest, smallest\n    else:\n        largest = _reverse(lst)\n        smallest = _reverse(lst)\n        if largest < smallest:\n            largest, smallest = smallest, largest\n\n    if not smallest:\n        smallest = -len(lst) - 1\n    if not largest:\n        largest = len(lst) + 1\n\n    return smallest, largest", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    x = max([min(lst) for _ in xrange(len(lst) - 1)])\n    y = min(lst)\n    if x is None or y is None:\n        return (None, None)\n    return (x, y)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    l = list(lst)\n    if len(l) == 0:\n        return (None, None)\n    if l[0] < 0:\n        return (l[0], None)\n    if len(l) == 1:\n        return (-l[0], l[0])\n    if l[0] >= l[-1]:\n        return (l[0], None)\n\n    a = 0\n    b = 0\n    for i in range(1, len(l) - 1):\n        if l[i] < l[i + 1]:\n            a = a + l[i]\n            b = b + 1\n        else:\n            a = a + l[i + 1]\n            b = b - 1\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    def smallest_integers():\n        for i in lst:\n            if i < 0:\n                return i, 0\n        return None, None\n    def largest_integers():\n        for i in lst:\n            if i > 0:\n                return i, 0\n        return None, None\n\n    if lst is None:\n        return None, None\n    a, b = smallest_integers(), largest_integers()\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n\n    sign = 0\n    largest = 0\n    smallest = 0\n    for i in range(0, len(lst)):\n        if (lst[i] < 0):\n            sign = -1\n        if (lst[i] > largest):\n            largest = lst[i]\n        if (lst[i] < smallest):\n            smallest = lst[i]\n    if (sign == 0):\n        return (None, None)\n    if (sign == -1):\n        return (largest, smallest)\n    return (sign*largest, sign*smallest)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Construct the list of negative numbers\n    neg_list = []\n    for i in range(len(lst)):\n        if (lst[i] < 0):\n            neg_list.append(lst[i])\n    # Construct the list of positive numbers\n    pos_list = []\n    for i in range(len(lst)):\n        if (lst[i] > 0):\n            pos_list.append(lst[i])\n    # Return None if there are no numbers\n    if (len(neg_list) == 0) and (len(pos_list) == 0):\n        return (None, None)\n\n    # For each negative number, find the largest positive integer that\n    # is less than the negative number.\n    for i in range(len(neg_list)):\n        largest = 0\n        for j in range(len(pos_list)):\n            if (pos_list[j] < neg_list[i]):\n                largest = j\n        pos_list[largest] = neg_list[i]\n\n    # For each positive number, find the smallest negative number that\n    # is greater than the positive number.\n    for i in range(len(pos_list)):\n        smallest = 0\n        for j in range(len(neg_list)):\n            if (neg_list[j] > pos_list[i]):", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Check if there is no elements\n    if not lst:\n        return (None, None)\n\n    # Check if the list is sorted\n    if not sorted(lst):\n        return (None, None)\n\n    # Iterate the list\n    for i in range(len(lst)):\n        # If it's a positive integer\n        if lst[i] > 0:\n            # Start with the largest negative integer\n            a = max(lst[i], -(max(lst[i], -lst[i])))\n\n            # If the current list element is smaller than the largest\n            # negative integer, continue the search\n            if lst[i] < a:\n                # End the search and return the pair\n                return (a, i)\n\n        # If it's a negative integer\n        elif lst[i] < 0:\n            # Start with the smallest positive integer\n            b = min(lst[i], 0)\n\n            # If the current list element is smaller than the smallest\n            # positive integer, continue the search\n            if lst[i] > b:\n                # End the search and return the pair\n                return (b, i)\n\n    # End the search and return the pair\n    return (lst[0], len(lst) - 1)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    if not all(isinstance(i, int) for i in lst):\n        return (None, None)\n    a = -1\n    b = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > b:\n            a = -1\n        elif lst[i] < b:\n            a = 1\n        elif a == -1 and lst[i] == b - 1:\n            a = 0\n        elif a == 1 and lst[i] == b + 1:\n            a = 0\n        else:\n            a = 1\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return None, None\n\n    a = None\n    b = None\n\n    for i in range(len(lst)):\n        if i == len(lst) - 1:\n            if lst[i] > a:\n                a = lst[i]\n        elif i == len(lst) - 2:\n            if lst[i] > b and lst[i + 1] < b:\n                b = lst[i + 1]\n        else:\n            if lst[i] < a and lst[i - 1] > b:\n                a = lst[i]\n            elif lst[i] > a and lst[i - 1] < b:\n                b = lst[i - 1]\n\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    smallest = None\n    largest = None\n    for i in range(len(lst)):\n        if not smallest and not largest and not lst[i]:\n            smallest = i\n            continue\n        if not smallest and lst[i] < 0:\n            smallest = i\n        if not largest and lst[i] > 0:\n            largest = i\n    return (largest, smallest)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    def _largest_smallest(lst):\n        #return largest negative number and smallest positive number\n        if len(lst) < 2:\n            return None, None\n        #return the largest negative number and the smallest positive number\n        if lst[0] < 0:\n            return _largest_smallest(lst[1:])\n        else:\n            return _largest_smallest(lst[:-1])\n    return _largest_smallest", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if len(lst) == 0:\n        return (None, None)\n\n    a = None\n    b = None\n\n    for x in lst:\n        if x < 0:\n            a = x\n            continue\n\n        if x > 0:\n            b = x\n            continue\n\n    if a == None:\n        a = 0\n    if b == None:\n        b = 0\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    else:\n        if len(lst) == 1:\n            if lst[0] == 0:\n                return (None, None)\n            else:\n                return (lst[0], None)\n        else:\n            max_value = -1\n            min_value = 1\n            for i in range(0, len(lst) - 1):\n                if lst[i] < 0:\n                    min_value = min(min_value, -1 * lst[i])\n                else:\n                    max_value = max(max_value, lst[i])\n            if max_value > 0:\n                return (-1 * max_value, 1 * min_value)\n            else:\n                return (None, None)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a, b = None, None\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a, b = None, None\n    for i in xrange(len(lst)):\n        if lst[i] < 0:\n            a = i\n        elif lst[i] > 0:\n            b = i\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    def negative_integers(lst):\n        return [int(i) for i in lst if i < 0]\n\n    def positive_integers(lst):\n        return [int(i) for i in lst if i > 0]\n\n    if not lst:\n        return None, None\n\n    # Not using collections.Counter() because it would not\n    # keep the sorted order of the integers in the list\n    # that we need.\n    lst = sorted(lst, key=int)\n    if len(lst) == 1:\n        return negative_integers(lst), positive_integers(lst)\n\n    else:\n        a, b = (negative_integers(lst), positive_integers(lst))\n        if a is None:\n            return b, a\n        else:\n            return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n    else:\n        positive = set()\n        negative = set()\n        for i in range(len(lst)):\n            if i > 0:\n                positive.add(lst[i])\n            else:\n                negative.add(-lst[i])\n        if len(positive) == 0:\n            return (None, 0)\n        if len(negative) == 0:\n            return (0, None)\n        if len(positive) > len(negative):\n            return (max(positive), min(negative))\n        else:\n            return (min(positive), max(negative))", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n\n    a = 0\n    b = -1\n    for i in xrange(len(lst)):\n        if lst[i] < 0:\n            a = i\n        if lst[i] > b:\n            b = i\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n\n    if lst[0] > 0:\n        return (min(lst[1:]), max(lst[1:]))\n\n    if lst[0] < 0:\n        a, b = largest_smallest_integers(lst[1:])\n        return (a, b)\n\n    a = max(lst[1:])\n    b = min(lst[1:])\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a, b = None, None\n    if lst:\n        if not (isinstance(lst, list) and len(lst) > 0):\n            return (None, None)\n        else:\n            a, b = min(max(lst, key=lambda x: x), key=lambda x: x)\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n\n    # if all values are positive or all values are negative,\n    # return the largest and smallest value as the tuple\n    # else, try to do a binary search on the interval\n    # (with the first and the last values).\n    a = -1\n    b = len(lst)\n    left = 0\n    right = len(lst)\n    while left < right:\n        mid = (left + right) / 2\n        midvalue = lst[mid]\n        if midvalue > a or midvalue < b:\n            # if the midvalue is between the largest and\n            # smallest values, swap them\n            if midvalue > a:\n                a = midvalue\n            else:\n                b = midvalue\n            right = mid - 1\n            if right < 0:\n                left = right + 1\n        else:\n            # if the midvalue is not between the largest and\n            # smallest values, the interval is not big enough,\n            # and return None\n            return None, None\n\n    # if the left and right values are equal, the interval is not\n    # big enough, and return None\n    if left == right:\n        return None, None\n\n    # go left and right until you find a smaller or equal value\n    # or you find one larger value.\n    while", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if len(lst) == 0:\n        return None, None\n\n    smallest = 0\n    largest = 0\n    for i in xrange(len(lst)):\n        if lst[i] < 0:\n            largest = smallest\n        else:\n            smallest = largest\n\n    if smallest == 0:\n        return None, None\n    elif largest == 0:\n        return None, None\n\n    return smallest, largest", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if not lst:\n        return None, None\n\n    result = (None, None)\n    smallest = largest = 0\n    for i in xrange(len(lst) - 1):\n        if lst[i] < 0:\n            smallest = max(smallest, -i)\n        else:\n            largest = min(largest, i)\n\n    if not smallest and not largest:\n        return None, None\n    if smallest < 0 and largest >= 0:\n        return result + (-largest, smallest)\n    if largest < 0 and smallest >= 0:\n        return result + (largest, smallest)\n    return result\n\n</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Compute a number of negative integers, and return them as a tuple\n    # of (number, index_of_largest_nonpositive):\n    n = len(lst)\n    nonpos = len([x for x in range(-n, n + 1) if x < 0])\n    a = -(-n - nonpos)\n    # Find the number of non-positive integers, and return that number:\n    b = len([x for x in range(-n, n + 1) if x > 0])\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n    smallest = max(map(abs, lst))\n    largest = min(map(abs, lst))\n    a = largest\n    b = smallest\n    for i in range(1, len(lst)):\n        if largest > smallest:\n            smallest = largest\n            largest = a\n        else:\n            largest = smallest\n            smallest = b\n    if largest < 0:\n        return (a, b)\n    else:\n        return (None, None)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if len(lst) == 1:\n        return lst[0], None\n    else:\n        a = -math.inf\n        b = math.inf\n\n        # Find the largest and smallest negative integer in the list\n        for item in lst:\n            if item < 0:\n                a = min(a, item)\n            else:\n                b = max(b, item)\n\n        # Return the largest and smallest positive integer in the list\n        if a == -math.inf:\n            return (a, b)\n        else:\n            return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    a = -inf\n    b = inf\n    for i in lst:\n        if i < 0:\n            a = max(a, i)\n        else:\n            b = min(b, i)\n    return (a, b)\n</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    def largest_smallest_integers(lst):\n        if len(lst) == 0:\n            return (None, None)\n        # Begin by sorting the list in ascending order\n        lst.sort()\n        # Find the first negative element, and then the first\n        # positive element. We don't need to find the smallest\n        # positive element, because we use the smallest negative\n        # element as that.\n        neg = -1\n        pos = 0\n        while neg < 0:\n            neg = -1 * neg\n        while pos < len(lst):\n            if lst[pos] < 0:\n                neg = neg + 1\n            if lst[pos] > 0:\n                pos = pos + 1\n        # Now that we have the smallest negative and largest\n        # positive element, we need to find the largest and\n        # smallest integer.\n        if neg > 0:\n            return (neg, pos - 1)\n        elif neg < 0:\n            return (neg, pos)\n        else:\n            return (None, None)\n    return largest_smallest_integers", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Get the largest positive and smallest negative integer\n    a = None\n    b = None\n    for i in range(len(lst)):\n        if lst[i] == 0 and a is None:\n            a = i\n        elif lst[i] == 0 and b is not None:\n            b = i\n    # If there are no negative or positive integers, return None\n    if a is None and b is None:\n        return (None, None)\n    # Return a tuple containing the largest and smallest\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n    else:\n        negative_integers = sorted(lst, reverse=True, key=lambda x: -x)\n        positive_integers = sorted(lst, reverse=False, key=lambda x: x)\n        return (negative_integers[0], positive_integers[0])", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Make the largest negative integer first\n    a = min(x for x in lst if x < 0)\n    # Make the smallest positive integer last\n    b = max(x for x in lst if x > 0)\n    # If the list is empty, we return None\n    if a is None or b is None:\n        return None, None\n    # If the list is just a single integer, return that integer\n    elif a == b:\n        return a, b\n    # Otherwise, return (a, b)\n    else:\n        return a, b + a", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    for negative in range(len(lst)):\n        smallest = 0\n        largest = negative - 1\n        for positive in range(len(lst) - 1, -1, -1):\n            if lst[positive] < lst[negative]:\n                smallest = positive + 1\n                largest = negative\n            else:\n                break\n        if smallest < 0:\n            largest = largest_smallest_integers(lst[negative:])\n        elif largest < 0:\n            smallest = largest_smallest_integers(lst[:-negative])\n        if smallest == largest:\n            return (None, smallest)\n    else:\n        return (None, 0)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    largest = None\n    smallest = None\n    for i in lst:\n        if largest is None:\n            largest = i\n        if smallest is None:\n            smallest = i\n    if largest is not None:\n        if largest < 0:\n            largest = 0 - largest\n    else:\n        largest = 0\n    if smallest is not None:\n        if smallest > 0:\n            smallest = 0 - smallest\n    else:\n        smallest = 0\n    return (largest, smallest)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return None, None\n\n    a = 0\n    b = 0\n    for i in range(len(lst) - 1):\n        if (lst[i] >= 0) & (lst[i + 1] < 0):\n            a = i + 1\n            continue\n        else:\n            b = i\n            break\n\n    # If there are no negative or positive integers, return them as None.\n    if ((a == 0) & (b == 0)):\n        return None, None\n\n    # If the smallest positive integer is also the largest negative\n    # integer, return them as a tuple (None, None).\n    if (a == 0) & (b == len(lst) - 1):\n        return None, None\n\n    # If the largest negative integer is also the smallest positive\n    # integer, return them as a tuple (a, None).\n    if (a == len(lst) - 1) & (b == 0):\n        return a, None\n\n    # If there is a positive integer between them, return it as a tuple\n    # (a, b).\n    if (a!= 0) & (b!= len(lst) - 1):\n        return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # no negative or positive integers\n    if not lst:\n        return (None, None)\n\n    # the first number of negative integers\n    a = min(lst)\n    if a < 0:\n        a = abs(a)\n    else:\n        a = 0\n    # the last number of positive integers\n    b = max(lst)\n    if b > 0:\n        b = abs(b)\n    else:\n        b = 0\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if not lst:\n        return None, None\n\n    # Create a map to determine the sign of the integers in the list\n    sign_map = {}\n    for i in range(0, len(lst)):\n        sign_map[lst[i]] = 1 if lst[i] < 0 else -1\n\n    # Loop through the list of integers\n    for i in range(0, len(lst)):\n        # If the current number is negative, return the largest\n        # negative integer as the largest positive integer.\n        if sign_map[lst[i]] == 1:\n            if i < len(lst)-1:\n                return lst[i+1], lst[i]\n            else:\n                return lst[i], None\n        # If the current number is positive, return the smallest\n        # positive integer as the smallest negative integer.\n        if sign_map[lst[i]] == -1:\n            if i > 0:\n                return lst[i-1], lst[i]\n            else:\n                return None, None", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    a = None\n    b = None\n\n    for i in range(len(lst)):\n        if lst[i] > 0 and lst[i] < b:\n            a = lst[i]\n        elif lst[i] < 0 and lst[i] > a:\n            b = lst[i]\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if not lst:\n        return None, None\n\n    a = max(map(lambda x: -abs(x), lst))\n    b = min(map(lambda x: abs(x), lst))\n    if a is None:\n        return None, b\n    if b is None:\n        return a, None\n\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    def negative_integers(lst):\n        for i in range(len(lst)):\n            if lst[i] < 0:\n                return (lst[i], lst[i] + 1)\n        return None\n\n    def positive_integers(lst):\n        for i in range(len(lst)):\n            if lst[i] > 0:\n                return (lst[i], lst[i] - 1)\n        return None\n\n    # check if any negative or positive integers\n    if len(lst) > 1:\n        smallest = smallest_negative_integer(lst)\n        largest = largest_negative_integer(lst)\n\n        if smallest is None or largest is None:\n            return None\n\n        # get the largest negative integer if there is any\n        if smallest is not None:\n            largest = largest - smallest\n\n        if smallest is None:\n            smallest = smallest_positive_integer(lst)\n        else:\n            smallest = smallest - smallest_positive_integer(lst)\n\n        if largest is None:\n            largest = largest_positive_integer(lst)\n        else:\n            largest = largest - largest_positive_integer(lst)\n\n        return (largest, smallest)\n\n    # if there are no negative or positive integers, return the largest\n    if len(lst) == 0:\n        return (lst[0], lst[0])\n\n    # get the largest negative integer if there", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    # check if the list contains any non-integer\n    if not lst:\n        return (None, None)\n    # map negative integers to positive\n    lst = [(x - 1) if x < 0 else x for x in lst]\n    # return the largest of negative integers, and the smallest of positive integers\n    return sorted([(x[1], x[0]) for x in lst])[0:1]", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a, b = None, None\n    for i in lst:\n        if i < 0:\n            a = max(a, i)\n        else:\n            b = min(b, i)\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    lst = sorted(lst)\n    if len(lst) < 2:\n        return None, None\n    if len(lst) == 2:\n        return lst[0], lst[1]\n    if lst[0] < 0:\n        return max(lst[1:], key=lambda x: x[0]), min(lst[:-1], key=lambda x: -x[0])\n    else:\n        return max(lst[1:], key=lambda x: -x[0]), min(lst[:-1], key=lambda x: x[0])", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if len(lst) == 0:\n        return None, None\n    elif len(lst) == 1:\n        return (lst[0], None)\n    else:\n        # How to choose a? The smallest negative numbers\n        # are all negative, so just pick the smallest one.\n        a = min(lst, key=lambda x: - x)\n        # How to choose b? The largest positive number is\n        # positive, so just pick the largest one.\n        b = max(lst, key=lambda x: x)\n        return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    smallest, largest = 0, None\n    for i in range(len(lst) - 1):\n        if lst[i] < 0 and lst[i + 1] > 0:\n            smallest = i\n            largest = i + 1\n    if largest == len(lst):\n        return (None, None)\n    if largest - smallest > 1:\n        a, b = (lst[smallest] - 1, lst[largest])\n        return (a, b)\n    return (lst[smallest], lst[largest])", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    #  We know the list has at least one element, so if it has no elements\n    #  return None.\n    if not lst:\n        return None, None\n    if lst[0] < 0:\n        #  The first element is negative.\n        a = -1\n    else:\n        #  The first element is positive.\n        a = 0\n    #  The rest of the list is positive, so we just iterate through it\n    #  and find the largest.\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            b = i + 1\n        else:\n            b = i\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if len(lst) == 0:\n        return (None, None)\n    else:\n        a = None\n        b = None\n        for i in range(len(lst)):\n            if lst[i] < 0:\n                if a is None:\n                    a = -(lst[i])\n                else:\n                    a = max(a, -(lst[i]))\n            elif lst[i] > 0:\n                if b is None:\n                    b = (lst[i])\n                else:\n                    b = min(b, lst[i])\n        return (a, b)\n\n\n\n</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    a = 0\n    b = 0\n    for i in range(len(lst)):\n        if i > 0 and not lst[i]:\n            a = a + 1\n        if i < len(lst) - 1 and not lst[i]:\n            b = b + 1\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n\n    a = 0\n    b = -1\n    for i in xrange(len(lst)):\n        if not lst[i]:\n            continue\n\n        if lst[i] > 0:\n            a = max(a, i)\n        elif lst[i] < 0:\n            b = min(b, i)\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return None, None\n\n    a = None\n    b = None\n    for item in lst:\n        if item < 0:\n            a = min(a, -item)\n        elif item > 0:\n            b = max(b, item)\n\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if not lst:\n        return (None, None)\n\n    a = None\n    b = None\n    lst = list(filter(None, lst))\n    for i in range(len(lst)):\n        if i == 0:\n            continue\n        if not lst[i]:\n            if not a:\n                a = lst[i]\n            else:\n                a = min(a, lst[i])\n            continue\n\n        if not lst[i - 1]:\n            if not b:\n                b = lst[i - 1]\n            else:\n                b = max(b, lst[i - 1])\n            continue\n\n        if a < b and not lst[i - 2]:\n            return (a, b)\n        if a > b and not lst[i - 2]:\n            return (a, b)\n        a, b = max(a, b), min(a, b)\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return None, None\n    max_smallest_neg = -999999\n    max_smallest_pos = 999999\n    for item in lst:\n        if item < 0:\n            max_smallest_neg = min(max_smallest_neg, -item)\n        elif item > 0:\n            max_smallest_pos = min(max_smallest_pos, item)\n    if max_smallest_pos == max_smallest_neg:\n        return None, max_smallest_neg\n    return max_smallest_neg, max_smallest_pos", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    smallest, largest = 0, None\n    for item in lst:\n        if item < 0:\n            smallest = min(smallest, abs(item))\n        else:\n            largest = max(largest, item)\n    return (largest, smallest)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    def f(lst):\n        '''\n        This is a helper function to find a and b\n        '''\n        smallest = None\n        largest = None\n        for element in lst:\n            if smallest is None or element < smallest:\n                smallest = element\n            if largest is None or element > largest:\n                largest = element\n        return smallest, largest\n\n    return f(lst)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return None, None\n    # the largest of negative integers is negative infinity\n    a = - inf\n    # the smallest of positive integers is + inf\n    b = inf\n    # we iterate through all integers, and find the largest and smallest\n    # integers in each of the sublists (recursively)\n    for i in range(0, len(lst)):\n        if i == 0:\n            # there are no negative numbers, so we return them as None\n            if not lst[i]:\n                continue\n        for j in range(i, len(lst)):\n            if (lst[i] < lst[j]):\n                if (lst[i] - lst[j]) > a:\n                    a = (lst[i] - lst[j])\n                    # if 'a' is not None, then we return it\n                    if a:\n                        return a, lst[j]\n                else:\n                    # if 'a' is not None, then we return it\n                    if a:\n                        return a, lst[j]\n            else:\n                if (lst[j] - lst[i]) > b:\n                    b = (lst[j] - lst[i])\n                    # if 'b' is not None, then we return it\n                    if b:\n                        return b, lst[i]\n                else:\n                    # if 'b' is not None, then we return it\n                    if b:", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Grab the first element of the list\n    try:\n        a = lst[0]\n    except IndexError:\n        a = None\n\n    # Grab the last element of the list\n    try:\n        b = lst[-1]\n    except IndexError:\n        b = None\n\n    # Return None if there are no negative integers\n    if not a:\n        return None, None\n\n    # Return the max of the positive integers\n    if b:\n        a = max(a, b)\n\n    # Return the min of the negative integers\n    if a:\n        b = min(b, a)\n\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    def f(l):\n        for i in range(len(l)):\n            if l[i] < 0:\n                a = min(l[:i], key=lambda x: -x)\n                b = max(l[i:], key=lambda x: x)\n            else:\n                a = max(l[:i], key=lambda x: x)\n                b = min(l[i:], key=lambda x: -x)\n            if a:\n                return (a, b)\n            if b:\n                return (b, a)\n    return f\n</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    a = None\n    b = None\n\n    for i in lst:\n        if i < 0:\n            a = i\n            break\n\n        if i > 0:\n            b = i\n            break\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if lst == []:\n        return (None, None)\n    if lst == [0, 0]:\n        return (None, 0)\n    max_b = min_b = 0\n    for n in lst:\n        if n < 0:\n            max_b = max(max_b, -n)\n        if n > 0:\n            min_b = min(min_b, n)\n    if max_b < 0:\n        max_b = -max_b\n    if min_b > 0:\n        min_b = -min_b\n    return (max_b, min_b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    def _largest_negative(lst):\n        if lst == []:\n            return None, None\n\n        for i in range(len(lst)):\n            if abs(int(lst[i])) > abs(int(lst[i-1])):\n                return -abs(int(lst[i])), i\n\n        return -abs(int(lst[0])), 0\n\n    def _smallest_positive(lst):\n        if lst == []:\n            return None, None\n\n        for i in range(len(lst)):\n            if abs(int(lst[i])) < abs(int(lst[i-1])):\n                return abs(int(lst[i])), i\n\n        return abs(int(lst[0])), len(lst) - 1\n\n    a, b = _largest_negative(lst)\n    while b!= -1:\n        a, b = _smallest_positive(lst[:b+1])\n        if a!= -1:\n            break\n    return a, b\n\n</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    def largest_smallest(a):\n        if a.__class__.__name__ == 'list':\n            lst = a\n        else:\n            lst = [a, ]\n        a = None\n        b = None\n        for x in lst:\n            if x.__class__.__name__ == 'int':\n                if a is None and x >= 0:\n                    a = x\n                elif b is None and x < 0:\n                    b = x\n            elif x.__class__.__name__ == 'list':\n                if a is None and x[0] >= 0:\n                    a = x\n                elif b is None and x[0] < 0:\n                    b = x\n        return a, b\n    return largest_smallest", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Negative\n    if not lst:\n        return (None, None)\n    else:\n        smallest = min(lst)\n        largest = max(lst)\n        if smallest > 0:\n            return (largest, smallest)\n        else:\n            return (None, None)\n    # Positive\n    if not lst:\n        return (None, None)\n    else:\n        smallest = min(lst)\n        largest = max(lst)\n        if smallest < 0:\n            return (smallest, largest)\n        else:\n            return (None, None)\n    # Both negative and positive\n    if not lst:\n        return (None, None)\n    else:\n        smallest = min(lst)\n        largest = max(lst)\n        if smallest < 0:\n            smallest = -smallest\n        if largest > 0:\n            largest = largest - 1\n        return (smallest, largest)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    return lst.max() - lst.min()", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    largest = 0\n    smallest = len(lst)\n    while smallest > 0:\n        tmp = -1\n        while lst[tmp] < 0:\n            tmp = tmp - 1\n        while lst[tmp] > 0:\n            tmp = tmp + 1\n        if tmp > 0:\n            largest = tmp\n            smallest = tmp\n        else:\n            largest = -1\n            smallest = -tmp\n    return (largest, smallest)\n\n</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    from collections import OrderedDict\n    from operator import itemgetter\n\n    # Sort the list and remove duplicates.\n    lst = sorted(lst, key=itemgetter(1))\n    new_dict = OrderedDict(lst)\n    a = next(new_dict.items())[0][1]\n    b = next(new_dict.items())[1][1]\n    if a is None:\n        return (None, None)\n    elif b is None:\n        return (a, None)\n    else:\n        return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # return the largest negative and smallest positive numbers,\n    # with None if there is no negative or positive numbers\n    return tuple(n for n in sorted(lst, key=abs) if abs(n) < 1)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    largest_negative = None\n    smallest_negative = None\n    largest_positive = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            largest_negative = num\n        elif num > 0:\n            smallest_positive = num\n        elif largest_negative is None and smallest_negative is not None:\n            largest_negative = smallest_negative\n        elif largest_negative is not None and smallest_negative is None:\n            smallest_negative = largest_negative\n        else:\n            largest_negative = None\n            smallest_negative = None\n    if smallest_negative is None:\n        return (None, None)\n    else:\n        return (smallest_negative, largest_negative)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    def split(a):\n        '''\n        Split the list of integers into positive and negative\n        integers.\n        '''\n\n        if a is None:\n            return (None, None)\n        if a < 0:\n            return (a, None)\n        else:\n            return (None, a)\n\n    result = [split(x) for x in lst]\n\n    if len(result) > 0:\n        largest = result[0][0] if result[0][0] is not None else None\n        smallest = result[-1][1] if result[-1][1] is not None else None\n    else:\n        largest = None\n        smallest = None\n\n    return (largest, smallest)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for i in range(len(lst) - 1):\n        if len(lst) > 1:\n            if lst[i] < 0 and lst[i + 1] > 0:\n                if a is None or lst[i + 1] < a:\n                    a = lst[i + 1]\n            if len(lst) > 2:\n                if len(lst) > 3 and lst[i + 1] < 0 and lst[i + 2] > 0:\n                    if b is None or lst[i + 2] < b:\n                        b = lst[i + 2]\n        else:\n            if a is None or lst[i] < a:\n                a = lst[i]\n    if len(lst) > 1:\n        if len(lst) > 2 and len(lst) > 3 and lst[i + 1] < 0 and lst[i + 2] > 0:\n            if b is None or lst[i + 2] < b:\n                b = lst[i + 2]\n    return a, b\n</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) < 2:\n        return (None, None)\n    smallest = 0\n    largest = 0\n    for i in range(len(lst)):\n        smallest = min(smallest, smallest - lst[i])\n        largest = max(largest, largest + lst[i])\n    if smallest == 0:\n        return (None, None)\n    elif largest == 0:\n        return (largest, smallest)\n    return (largest, smallest)\n</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if len(lst) == 0:\n        return (None, None)\n\n    if len(lst) == 1:\n        return (min(lst), max(lst))\n    else:\n        a = max(lst) - 1\n        b = min(lst) + 1\n        while a < b:\n            a = a + 1\n            if a in lst:\n                b = b - 1\n        return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    nums = []\n    negative = []\n    positive = []\n\n    for i in lst:\n        if i < 0:\n            nums.append(- i)\n        else:\n            nums.append(i)\n\n    # Sort by negative numbers first\n    nums.sort()\n\n    if len(nums) == 1:\n        return nums[0], nums[0]\n\n    # Choose the smallest number and compare to the rest\n    if nums[0][0] > nums[0][1]:\n        # Add negative numbers before positive numbers\n        for n in nums[1:]:\n            nums.append(n)\n\n        for n in nums[1:]:\n            if nums[0] < n:\n                negative.append(nums[0])\n                positive.append(n)\n\n    # Choose the largest number and compare to the rest\n    if nums[0][0] < nums[0][1]:\n        # Add negative numbers before positive numbers\n        for n in nums[1:]:\n            nums.append(n)\n\n        for n in nums[1:]:\n            if nums[0] > n:\n                positive.append(nums[0])\n                negative.append(n)\n\n    # If there are no negative or positive integers, return None\n    if len(negative) == 0 and len(positive) == 0:\n        return None\n    elif len(negative) == 0:\n        return negative[0]", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return None, None\n\n    sign = -1\n    result = None\n\n    for i in range(len(lst) - 1):\n        if lst[i] > 0:\n            sign = 1\n\n        if i == 0:\n            continue\n\n        if lst[i - 1] > lst[i]:\n            result = (lst[i - 1], lst[i])\n        else:\n            result = (lst[i], lst[i - 1])\n\n    if sign == 1:\n        result = (lst[len(lst) - 1], 0)\n\n    return result", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # l = [-2, -1, -2, -2, 0, 1, 1, 2, 5, 5]\n    # a, b = largest_smallest_integers(l)\n    # print a, b\n    # print largest_smallest_integers([10, 20, 10])\n    # (-1, 2)\n    return", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return None, None\n    else:\n        a, b = max(lst[::-1]), min(lst[::-1])\n        for i in range(len(lst) - 1):\n            if abs(a - b) > abs(b - a):\n                a, b = b, a\n        return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n\n    largest = None\n    smallest = None\n\n    for item in lst:\n        if isinstance(item, int):\n            if item < 0:\n                if largest == None:\n                    largest = -item\n                else:\n                    largest = min(largest, item)\n            elif item > 0:\n                if smallest == None:\n                    smallest = item\n                else:\n                    smallest = max(smallest, item)\n    return (largest, smallest)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    def largest_smallest(lst):\n        if len(lst) == 0:\n            return None, None\n        if len(lst) == 1:\n            return min(lst), max(lst)\n        n = 0\n        a = None\n        b = None\n        for i in range(1, len(lst)):\n            if lst[i] < 0:\n                a = min(lst[i - 1:])\n                n = n + 1\n            if lst[i] > 0:\n                b = max(lst[i - 1:])\n                n = n + 1\n        if a is None:\n            return None, None\n        elif b is None:\n            return a, n\n        else:\n            return a, b\n\n    return largest_smallest", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a, b = (None, None)\n    if len(lst) > 1:\n        for i in range(len(lst)):\n            if (abs(lst[i]) > abs(lst[i+1])):\n                if (abs(lst[i]) > abs(a)):\n                    a = abs(lst[i])\n                if (abs(lst[i+1]) > abs(b)):\n                    b = abs(lst[i+1])\n    else:\n        if len(lst) > 0:\n            if (abs(lst[0]) > abs(a)):\n                a = abs(lst[0])\n            if (abs(lst[-1]) > abs(b)):\n                b = abs(lst[-1])\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    # Step 1\n    indices = []\n    for i in range(len(lst)):\n        if not lst[i]:\n            continue\n        if i < 0:\n            indices.append((i, 0))\n        else:\n            indices.append((i, lst[i]))\n\n    # Step 2\n    a, b = None, None\n    if len(indices) > 0:\n        # Step 2a\n        if a is None:\n            a = max([- indices[0][0], - indices[0][1]])\n            b = min([- indices[-1][0], - indices[-1][1]])\n        else:\n            if b is None:\n                b = max([- indices[0][0], - indices[0][1]])\n            if a >= b:\n                a, b = b, a\n            else:\n                b, a = a, b\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    def g(a, b):\n        if a < 0:\n            return a, b\n        elif b < 0:\n            return b, a\n        else:\n            return a, b\n    a, b = None, None\n    for i in lst:\n        if i < 0:\n            a = i\n        else:\n            b = i\n    return g(a, b), g(b, a)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for x in lst:\n        if x < 0:\n            a = min(a, -x)\n        if x > 0:\n            b = max(b, x)\n    if a == 0:\n        return (a, b)\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # must be sorted\n    lst = sorted(lst)\n    # must be unique\n    unique = set()\n    for l in lst:\n        unique.add(l)\n    # if any are None, return None\n    if any(l == None for l in unique):\n        return None, None\n    # find the largest and smallest\n    a = min(l for l in unique if l > 0)\n    b = max(l for l in unique if l < 0)\n    if a == b:\n        return (a, b)\n    # find a non-negative integer\n    while True:\n        # look for negative integers less than 'a'\n        for i in range(a):\n            l = -unique[i]\n            if l >= 0:\n                return (l, None)\n        # look for negative integers greater than 'b'\n        for i in range(b+1, len(unique)):\n            l = -unique[i]\n            if l < 0:\n                return (l, None)\n        # if we got here, 'a' must be the largest number of negative integers\n        if b:\n            return (None, b)\n        # else, 'b' must be the smallest number of positive integers\n        return (a, b)\n</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    if not isinstance(lst, list):\n        return (None, None)\n    if len(lst) == 1:\n        return (lst[0], None)\n    largest = -1\n    smallest = len(lst)\n    i = 0\n    while i < len(lst):\n        if lst[i] < 0:\n            largest = -1\n        elif largest == -1:\n            largest = lst[i]\n        elif smallest == -1:\n            smallest = lst[i]\n        else:\n            smallest = smallest - 1\n        i += 1\n    if largest < 0:\n        largest = - largest\n    elif smallest < 0:\n        smallest = - smallest\n    return (largest, smallest)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Create a dictionary mapping numbers to their position in the list.\n    # We will use this to keep track of the largest and smallest numbers.\n    # We will also use this to check if the smallest number is positive\n    # and if so, we will return a tuple of that number and a number that\n    # is greater than the largest number.\n    num_to_index = {}\n    for num in lst:\n        num_to_index[num] = len(lst)\n\n    # Create an initial list of the largest and smallest numbers.\n    largest = num_to_index.keys()\n    smallest = num_to_index.values()\n\n    # Iterate over the list and set the maximum of the numbers that\n    # are still the largest.\n    # This will stop when we find a negative number, a 0, or a number\n    # greater than the largest number.\n    while True:\n        for num in largest:\n            if num_to_index[num] == len(lst) - 1:\n                largest.remove(num)\n            elif num_to_index[num] == len(lst) - 2:\n                smallest.remove(num)\n            else:\n                break\n\n    # Check if the smallest number is positive.\n    if smallest:\n        return (largest[0], smallest[0])\n\n    # We have reached the end of the list without finding a", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    def largest_smallest_integers(lst):\n        if len(lst) == 0:\n            return (None, None)\n        elif len(lst) == 1:\n            return lst[0]\n        else:\n            smallest = lst[0]\n            largest = -smallest\n            for i in range(1, len(lst)):\n                if lst[i] > smallest:\n                    smallest = lst[i]\n                    largest = -smallest\n            return (largest, smallest)\n\n    return largest_smallest_integers", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if not lst:\n        return (None, None)\n\n    if len(lst) > 1:\n        n = 0\n        max_n = 0\n        min_n = 1000000000\n        for x in lst:\n            if x < 0:\n                n += 1\n            if x > 0:\n                max_n = min(max_n, x)\n            if x < 0:\n                min_n = max(min_n, x)\n        return (max_n, min_n)\n\n    if len(lst) == 1:\n        return (lst[0], 0)\n\n    if len(lst) == 0:\n        return (0, 0)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    def largest_smallest_integers_helper(lst):\n        max_val = -1\n        min_val = 1\n        if len(lst) > 0:\n            for item in lst:\n                if item < 0:\n                    min_val = max_val\n                elif item > 0:\n                    max_val = min_val\n        return max_val, min_val\n\n    if not lst:\n        return (None, None)\n    else:\n        return largest_smallest_integers_helper(lst)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if len(lst) == 0:\n        return (None, None)\n\n    a = -min(lst)\n    b = max(lst)\n\n    for i in range(1, len(lst)):\n        if a < 0 and lst[i] >= 0:\n            a = lst[i]\n        elif b > 0 and lst[i] < 0:\n            b = lst[i]\n        elif a > 0 and b < 0:\n            a, b = b, a\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    res = (None, None)\n    for num in lst:\n        if num < 0:\n            res[0] = max(res[0], num)\n        else:\n            res[1] = min(res[1], num)\n\n    return res", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n    # Negative smallest\n    if len(lst) > 0:\n        if lst[0] > 0:\n            smallest = lst[0]\n        else:\n            smallest = -(abs(lst[0]))\n        # Positive smallest\n        if len(lst) > 1:\n            if lst[1] < smallest:\n                smallest = lst[1]\n        else:\n            if abs(lst[1]) < smallest:\n                smallest = abs(lst[1])\n    # Negative largest\n    if len(lst) > 0:\n        if lst[-1] > 0:\n            largest = lst[-1]\n        else:\n            largest = -(abs(lst[-1]))\n        # Positive largest\n        if len(lst) > 1:\n            if lst[-2] < largest:\n                largest = lst[-2]\n        else:\n            if abs(lst[-2]) < largest:\n                largest = abs(lst[-2])\n    # Return None if there are no negative or positive integers\n    if smallest == -(-abs(smallest)):\n        return (None, None)\n    if largest == -(-abs(largest)):\n        return (None, None)\n    if largest < smallest:\n        return (largest, smallest)\n    return (smallest, largest)\n</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = 0\n    b = None\n    for i in lst:\n        if i < 0:\n            a = i\n        else:\n            b = i\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = b = None\n    if not lst:\n        return a, b\n    for i in range(len(lst) - 1):\n        if lst[i] < 0:\n            a = min(a, -lst[i])\n        else:\n            b = max(b, lst[i])\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return None, None\n    else:\n        a = lst[0]\n        b = lst[-1]\n        for i in range(1, len(lst)):\n            if a < 0:\n                a = - a\n            if b > 0:\n                b = - b\n            if a < b:\n                a, b = b, a\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    assert(len(lst) > 0)\n    a = (-1, 0)\n    b = (0, 1)\n    lst = sorted(lst)\n    i = 0\n    while True:\n        i += 1\n        if lst[i] == 0:\n            # start a new pair\n            a = (a[0], a[1])\n            if a[0] is None:\n                # no negative numbers\n                return (None, None)\n            b = (b[0], b[1])\n            if a[1] is None:\n                # no positive numbers\n                return (None, None)\n            break\n        elif lst[i] == -1:\n            # end the last pair\n            a = (a[0], a[1])\n            b = (b[0], b[1])\n            return (a, b)\n    return (None, None)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) > 0:\n        a = -(-largest_smallest_integers(lst[1:]))\n    else:\n        a = None\n    if len(lst) > 0:\n        b = -(-largest_smallest_integers(lst[0]))\n    else:\n        b = None\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # A list of all elements that are negative.\n    neg_lst = [e for e in lst if e < 0]\n    # A list of all elements that are positive.\n    pos_lst = [e for e in lst if e > 0]\n    if neg_lst == [] and pos_lst == []:\n        return None, None\n    if neg_lst == []:\n        return neg_lst[0], None\n    if pos_lst == []:\n        return pos_lst[0], None\n    if pos_lst[0] < neg_lst[0]:\n        return neg_lst[0], pos_lst[0]\n    else:\n        return pos_lst[0], neg_lst[0]", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n    else:\n        a = max(map(min, lst))\n        b = min(map(max, lst))\n        return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    negs = [False] * len(lst)\n    pos = [False] * len(lst)\n    for i in range(len(lst)):\n        if negs[i]:\n            negs[i] = False\n            largest = max(lst[i - 1], 0)\n        else:\n            pos[i] = True\n            smallest = min(lst[i], 0)\n        if largest > smallest:\n            largest, smallest = smallest, largest\n\n    if not negs or not pos:\n        return (None, None)\n\n    a = negs[0][0]\n    b = pos[0][0]\n    for i in range(len(lst)):\n        if a and negs[i][0]:\n            negs[i][0] = False\n            a = min(a, smallest)\n        elif not negs[i][0] and pos[i][0]:\n            pos[i][0] = False\n            b = max(b, largest)\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if lst is None:\n        return None, None\n    else:\n        # Skip the first element as it is the smallest positive integer\n        # and negative integers are compared to positive integers.\n        lst.pop(0)\n        # Create a list of all positive and negative numbers, and sort the\n        # list by decreasing value.\n        lst = sorted(lst, key=lambda i: i.isdigit(), reverse=True)\n\n        # Get the first two integers, and return them.\n        if len(lst) == 1:\n            return lst[0], lst[1]\n        else:\n            # Get the first negative integer, and return it.\n            if lst[0].isdigit():\n                return lst[0], lst[1]\n            else:\n                # Get the first positive integer, and return it.\n                return lst[0], lst[1]", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    res = (None, None)\n    for elem in lst:\n        if elem >= 0:\n            res = (res[0], elem)\n        elif elem < 0:\n            res = (res[1], -elem)\n    return res", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return None, None\n    if len(lst) == 1:\n        return min(lst), max(lst)\n    if lst[0] == 0:\n        return None, lst[0]\n    return max(largest_smallest_integers(lst[1:])), min(largest_smallest_integers(lst[:-1]))\n</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return None, None\n    largest = -9999\n    smallest = 9999\n    for n in lst:\n        if n < 0:\n            largest = max(largest, n)\n        elif n > 0:\n            smallest = min(smallest, n)\n    return largest, smallest", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) > 1:\n        a = -1\n        for i in range(len(lst)):\n            if lst[i] < 0:\n                a = i\n        b = len(lst)\n        for i in range(a, len(lst)):\n            if lst[i] > 0:\n                b = i\n    else:\n        if len(lst) > 0:\n            a = len(lst) - 1\n            for i in range(a, -1, -1):\n                if lst[i] < 0:\n                    a = i\n        else:\n            a = -1\n        if len(lst) > 1:\n            b = len(lst) - 1\n            for i in range(b, len(lst) - 1, -1):\n                if lst[i] > 0:\n                    b = i\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a, b = None, None\n\n    for num in lst:\n        if num < 0:\n            a = max(a, num)\n        elif num > 0:\n            b = min(b, num)\n\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 1:\n        return (lst[0], None)\n    if len(lst) > 1:\n        return largest_smallest(lst[:-1]) + (len(lst) - 1, None)\n    else:\n        return (lst[0], None)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    neglst = []\n    poslst = []\n\n    # Keep track of the largest and smallest integers\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            neglst.append(lst[i])\n        else:\n            poslst.append(lst[i])\n\n    return (largest(neglst), smallest(poslst))", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if lst is None:\n        return (None, None)\n    else:\n        return (max(lst), min(lst))", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    return sorted(lst, key=lambda x: x[0], reverse=True)[1]", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # initial values\n    a = None\n    b = None\n\n    # iterate through the list\n    for i in lst:\n        # if there are negative integers, add them to a\n        if i < 0:\n            a = max(a, i)\n\n        # if there are positive integers, add them to b\n        elif i > 0:\n            b = min(b, i)\n\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) < 2:\n        return (None, None)\n\n    if not lst:\n        return (lst, None)\n\n    if lst[0] < 0:\n        # smallest integer is less than all the others\n        largest = lst[0]\n        smallest = -1\n    else:\n        # largest integer is greater than all the others\n        largest = lst[0]\n        smallest = 0\n\n    if smallest < 0:\n        # smallest integer is negative\n        if smallest < largest:\n            a = largest - smallest\n        else:\n            a = -smallest\n        return (a, 0)\n    else:\n        # largest integer is positive\n        if largest < smallest:\n            b = smallest - largest\n        else:\n            b = largest\n        return (0, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    a = -max(lst)\n    b = max(lst)\n    for i in range(len(lst)):\n        if lst[i] < a:\n            a = lst[i]\n        if lst[i] > b:\n            b = lst[i]\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if not lst:\n        return (None, None)\n\n    max_negative = min_positive = None\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            if max_negative is None:\n                max_negative = i\n            else:\n                max_negative = min(max_negative, i)\n        else:\n            if min_positive is None:\n                min_positive = i\n            else:\n                min_positive = max(min_positive, i)\n\n    if max_negative is not None:\n        return (max_negative, min_positive)\n    elif min_positive is not None:\n        return (min_negative, min_positive)\n    else:\n        return (None, None)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) > 0:\n        a, b = -1, -1\n        for i in range(len(lst)):\n            if not is_int(lst[i]):\n                continue\n            if not is_int(lst[i]):\n                if a < 0:\n                    a = i\n                continue\n            if a < 0:\n                a = i\n            if a > b:\n                a = i\n            if b < 0:\n                b = i\n        if a > b:\n            a, b = -1, a\n        return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    # Initialization.\n    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            if a is None:\n                a = i\n            else:\n                a = a - i\n        else:\n            if b is None:\n                b = i\n            else:\n                b = b + i\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    # Calculate maximum and minimum elements\n    a = max(-(x for x in lst))\n    b = min(x for x in lst)\n\n    # Return None if there are no negative or positive integers\n    if a == -(a for a in lst):\n        return (None, a)\n    if b == -(b for b in lst):\n        return (None, b)\n    if a > b:\n        return (a, b)\n    else:\n        return (a, a)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n    if len(lst) > 1:\n        a = max(-1, min(len(lst) - 1, 0))\n        b = min(len(lst) - 1, 0)\n        return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n\n    n = len(lst) - 1\n    smallest = lst[0]\n    largest = -smallest\n    for i in range(n):\n        if lst[i] > largest:\n            largest = lst[i]\n        if lst[i] < smallest:\n            smallest = lst[i]\n\n    return (largest, smallest)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a, b = None, None\n    for x in lst:\n        if x < 0:\n            a = x\n        elif x > 0:\n            b = x\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a, b = None, None\n    for x in lst:\n        if x < 0:\n            if a is None:\n                a = x\n            else:\n                a = min(a, x)\n        elif x > 0:\n            if b is None:\n                b = x\n            else:\n                b = max(b, x)\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Initialize variables\n    smallest = None\n    largest = None\n    for i in lst:\n        if i < 0:\n            smallest = i\n        if i > 0:\n            largest = i\n    return smallest, largest", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if lst:\n        a, b = 0, 0\n        for i in lst:\n            if i > 0:\n                a = max(a, i)\n            elif i < 0:\n                b = min(b, -i)\n            else:\n                a = b = i\n        if a == 0 or b == 0:\n            return None, None\n        else:\n            return a, b\n    else:\n        return None, None", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for i in xrange(len(lst)):\n        if abs(lst[i]) > a:\n            a = abs(lst[i])\n        if abs(lst[i]) < b:\n            b = abs(lst[i])\n    if a is None or b is None:\n        return a, b\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n\n    nums = []\n    for val in lst:\n        if val >= 0:\n            nums.append(val)\n        elif val < 0:\n            nums.append(-val)\n    if len(nums) == 0:\n        return (None, None)\n    elif len(nums) == 1:\n        return (nums[0], nums[0])\n    else:\n        return (max(nums), min(nums))", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    return sorted([-n for n in lst])[1], sorted([+for n in lst])[0]", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return None, (None, None)\n    a = None\n    b = None\n    for x in range(len(lst)):\n        if (lst[x] < 0) and (a is None):\n            a = x\n        if (lst[x] > 0) and (b is None):\n            b = x\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    def get_element(lst):\n        max_num = -(1 << 31)\n        min_num = 1 << 31\n\n        for i in range(len(lst)):\n            if (lst[i] < min_num):\n                min_num = lst[i]\n            elif (lst[i] > max_num):\n                max_num = lst[i]\n\n        return max_num, min_num\n\n    a, b = get_element(lst)\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    if len(lst) == 0:\n        return (a, b)\n    if len(lst) == 1:\n        a = abs(min(lst))\n        b = abs(max(lst))\n    else:\n        a = max(abs(min(lst[1:])), abs(max(lst[1:])))\n        b = min(abs(min(lst[:-1])), abs(max(lst[:-1])))\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            a = i\n            break\n        elif i > 0:\n            b = i\n            break\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) < 1:\n        return (None, None)\n    if len(lst) == 1:\n        a, b = lst[0], lst[0]\n    else:\n        a, b = None, None\n        for i in range(len(lst) - 1):\n            if lst[i] < 0:\n                a = max(a, -lst[i])\n            if lst[i+1] > 0:\n                b = min(b, lst[i+1])\n        a, b = a, b\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) > 0:\n        a = -sum(lst) if lst[0] < 0 else 0\n        b = sum(lst) if lst[-1] > 0 else 0\n    else:\n        a = None\n        b = None\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    lst = list(map(int, lst))\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            if i == 0:\n                return (lst[0], lst[i])\n            return (lst[i-1], lst[i])\n        elif lst[i] > 0:\n            if i == len(lst)-1:\n                return (lst[i], lst[0])\n            return (lst[i+1], lst[i])\n    return (lst[0], lst[-1])", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    negative_integers = set([x for x in range(-1, len(lst)) if x < 0 for x in lst])\n    positive_integers = set([x for x in range(1, len(lst)) if x >= 0 for x in lst])\n    if len(negative_integers) == 0:\n        return (None, None)\n    if len(positive_integers) == 0:\n        return (None, None)\n    if len(negative_integers) == len(positive_integers):\n        return (negative_integers.pop(), positive_integers.pop())\n    return (negative_integers.pop(), positive_integers.pop())", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n\n    max_int = -float('inf')\n    min_int = float('inf')\n    for value in lst:\n        if value > 0:\n            min_int = min(min_int, value)\n        if value < 0:\n            max_int = max(max_int, value)\n\n    if max_int == -float('inf') and min_int == float('inf'):\n        return (None, None)\n\n    return (max_int, min_int)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    def find_largest_negative(lst):\n        if len(lst) == 0:\n            return None\n        i = max(lst)\n        if i < 0:\n            return i\n        return find_largest_negative(lst[:i])\n    def find_smallest_positive(lst):\n        if len(lst) == 0:\n            return None\n        i = min(lst)\n        if i < 0:\n            return i\n        return find_smallest_positive(lst[:i])\n    if not lst:\n        return (None, None)\n    return (find_largest_negative(lst), find_smallest_positive(lst))", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # use the following to simplify your code\n    from functools import reduce\n\n    neg_integers = set([-n for n in lst])\n    neg_int_cnt = len(neg_integers)\n\n    pos_integers = set([ n for n in lst if n > 0 ])\n\n    if len(pos_integers) == 0:\n        return (None, None)\n\n    neg_int_diff = len(neg_integers)\n    if neg_int_diff > 0:\n        neg_int_tup = reduce(lambda x, y: x + y, neg_integers, 0)\n        neg_int_tup = max(neg_int_tup, neg_int_diff)\n\n    pos_int_diff = len(pos_integers)\n    if pos_int_diff > 0:\n        pos_int_tup = reduce(lambda x, y: x + y, pos_integers, 0)\n        pos_int_tup = min(pos_int_tup, pos_int_diff)\n\n    if neg_int_diff == pos_int_diff:\n        return (neg_int_tup, pos_int_tup)\n\n    return (neg_int_tup, pos_int_tup)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Return None if the list is empty\n    if not lst:\n        return None, None\n\n    # Run through the list\n    list_of_largest_integers = []\n    list_of_smallest_integers = []\n    for i in range(len(lst)):\n        # Get the first element\n        first = lst[i]\n\n        # If the element is positive, add it to the list of smallest integers\n        if first > 0:\n            list_of_smallest_integers.append(first)\n\n        # If the element is negative, add it to the list of largest integers\n        else:\n            list_of_largest_integers.append(first)\n\n    # Return the largest and smallest integer values\n    return list_of_largest_integers, list_of_smallest_integers", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            a = max(a, i)\n        else:\n            b = min(b, i)\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if not lst:\n        return (None, None)\n\n    negs = set(lst)\n    pos = set(lst)\n    negs.difference_update(pos)\n    pos.difference_update(negs)\n    if negs == pos:\n        return (min(negs), max(pos))\n    elif negs == set([]) or pos == set([]):\n        return (None, None)\n    else:\n        return (max(negs), min(pos))", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n\n    # find largest negative number\n    neg = lst[0]\n    for i in range(1, len(lst)):\n        if neg < lst[i]:\n            neg = lst[i]\n\n    # find smallest positive number\n    pos = neg\n    for i in range(len(lst) - 1, -1, -1):\n        if neg > lst[i]:\n            neg = lst[i]\n        if pos < lst[i + 1]:\n            pos = lst[i + 1]\n\n    # return as (a, b)\n    return (neg, pos)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Find the maximum and minimum numbers in the list\n    m, n = max(lst), min(lst)\n\n    # Return (m, n) if there are no negative or positive integers\n    if (n < 0) or (m < 0):\n        return (m, n)\n\n    # Get the 'negative' and 'positive' numbers from the maximum and minimum\n    # numbers, and return the largest and smallest numbers as a tuple\n    return (m, max(lst[n:-1]), min(lst[n:]))", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n    if len(lst) == 1:\n        return (lst[0], None)\n    if not lst:\n        return (None, None)\n    a = min(lst)\n    b = max(lst)\n    for n in range(len(lst) - 1, -1, -1):\n        if a > n or b < n:\n            continue\n        if n < 0:\n            return (None, n)\n        if n < a:\n            a = n\n        if n > b:\n            b = n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Start with two numbers that are not integers.\n    largest = -math.inf\n    smallest = math.inf\n\n    for i in xrange(len(lst)):\n        if math.isinf(lst[i]):\n            continue\n\n        if lst[i] < 0:\n            largest = math.min(largest, -lst[i])\n        else:\n            smallest = math.max(smallest, lst[i])\n\n    return largest, smallest", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    l = [int(i) for i in lst]\n    if not l:\n        return (None, None)\n\n    n = len(l)\n    if n == 1:\n        # Sort by least or greatest\n        if l[0] < 0:\n            return (l[0], l[0])\n        elif l[0] > 0:\n            return (l[0], l[0])\n        else:\n            return (l[0], l[0])\n    elif l[0] < 0:\n        n -= 1\n        return (l[0], l[0])\n    elif l[0] > 0:\n        n -= 1\n        return (l[0], l[0])\n    else:\n        return (l[0], l[0])", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n    smallest = min(lst)\n    if smallest < 0:\n        largest = min(lst) + 1\n    else:\n        largest = min(lst)\n    return (largest, smallest)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if not lst:\n        return (None, None)\n\n    smallest = None\n    largest = None\n\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            smallest = i\n        elif lst[i] > 0:\n            largest = i\n\n    return (largest, smallest)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return None, None\n    a = None\n    b = None\n    for x in reversed(lst):\n        if x == 0:\n            continue\n        if x < 0:\n            if a is None:\n                a = x\n            else:\n                a = max(a, -x)\n        elif x > 0:\n            if b is None:\n                b = x\n            else:\n                b = min(b, x)\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if lst == []:\n        return (None, None)\n    if len(lst) == 1:\n        return (lst[0], None)\n    a = smallest(lst[1:])\n    b = largest(lst[:-1])\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a, b = None, None\n    for elem in lst:\n        if elem < 0:\n            a = elem\n        if elem > 0:\n            b = elem\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return None, None\n\n    a = 0\n    b = len(lst) - 1\n    while a < b:\n        if lst[a] > 0:\n            a += 1\n        elif lst[b] < 0:\n            b -= 1\n        else:\n            break\n\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    a, b = 0, 0\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            a = i + 1\n            continue\n        if lst[i] > 0:\n            b = i + 1\n            continue\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = -(max(-lst, key=lambda x: -x))\n    b = -(min(lst, key=lambda x: -x))\n    return a, b\n</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    a = 0\n    b = 1\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            a = a + abs(lst[i])\n        else:\n            b = b - abs(lst[i])\n\n    if a == 0:\n        return (None, None)\n    if b == 0:\n        return (None, None)\n\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    elif len(lst) == 1:\n        return (lst[0], None)\n    a, b = None, None\n    for i in range(len(lst)-1):\n        if lst[i] < 0:\n            a = i\n        elif lst[i] > 0:\n            b = i\n        else:\n            break\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Run this function on every integer and change them to negative\n    # and positive.\n    negative_integers = map(lambda x: -x, lst)\n    positive_integers = map(lambda x: x, lst)\n    # Create a list to hold all of the results\n    results = [None, None]\n    # If there are no positive integers, the largest negative integer\n    # is the only one we need to return\n    if len(positive_integers) == 0:\n        # Change all of the negative integers in the list to positive\n        # integers\n        negative_integers = map(lambda x: +x, negative_integers)\n        # Return the largest negative integer\n        results[0] = max(negative_integers)\n    # If there are no negative integers, the largest positive integer is\n    # the only one we need to return\n    if len(positive_integers) == 0:\n        # Change all of the positive integers in the list to negative\n        # integers\n        positive_integers = map(lambda x: -x, positive_integers)\n        # Return the largest positive integer\n        results[1] = min(positive_integers)\n    # Return the results\n    return results</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # negative = -1\n    # positive = 0\n    #\n    # if not lst:\n    #     return (None, None)\n\n    # first = 0\n    # largest = -1\n    # smallest = 1\n\n    # for item in lst:\n    #     if item < 0:\n    #         smallest = smallest - 1\n    #     else:\n    #         largest = largest + 1\n    #     if largest < 0 or smallest > lst[largest]:\n    #         return (None, None)\n\n    # if largest < smallest:\n    #     return (largest, smallest)\n\n    # return (largest, smallest)\n    return lst[::-1].sort()[::-1]", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if lst is None:\n        return None, None\n    a, b = None, None\n    for i in range(len(lst)):\n        if a is None:\n            a = -lst[i]\n        elif b is None:\n            b = lst[i]\n        else:\n            if a > b:\n                a, b = a, b\n            elif a < b:\n                b, a = b, a\n\n    return a, b\n</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    a, b = lst[0], lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < 0:\n            a = max(a, -lst[i])\n        else:\n            b = min(b, lst[i])\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    # Make sure all inputs are not None\n    if not lst:\n        return (None, None)\n\n    # Compute the largest and smallest integers\n    if len(lst) == 0:\n        return (None, None)\n    a = min(lst)\n    b = max(lst)\n\n    # Return a tuple\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    else:\n        a = min(lst)\n        b = max(lst)\n        return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    lst = sorted(lst, reverse=True)\n    if not lst:\n        return (None, None)\n    a = lst[0]\n    b = lst[-1]\n    for x in range(len(lst) - 1, -1, -1):\n        if lst[x] < 0:\n            a = x\n        else:\n            b = x\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    max = lst[0]\n    min = lst[-1]\n    for i in range(len(lst) - 1, -1, -1):\n        if max > min:\n            max = min\n        min = lst[i]\n    return (max, min)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    a, b = (None, None)\n\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            a = max(lst[:i], a)\n        if lst[i] > 0:\n            b = min(lst[i:], b)\n\n    return a, b", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for i in xrange(0, len(lst)-1):\n        if i == 0 or lst[i] < lst[i+1]:\n            if a is None or lst[i] < a[0]:\n                a = lst[i]\n            if b is None or lst[i+1] > b[1]:\n                b = lst[i+1]\n    return a, b\n</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for item in lst:\n        if item < 0:\n            a = max(a, item)\n        else:\n            b = min(b, item)\n    if a is not None:\n        return (a, b)\n    else:\n        return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for i in xrange(len(lst)):\n        if is_nonzero(lst[i]):\n            if is_positive(lst[i]):\n                b = max(b, lst[i])\n            else:\n                a = max(a, -lst[i])\n    return (a, b)", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a = 0\n    b = 0\n    for i in xrange(len(lst)):\n        if (lst[i] < 0):\n            a = max(a, -lst[i])\n        else:\n            b = min(b, lst[i])\n    return (a, b)\n</s>", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    if len(lst) == 0:\n        return None, None\n\n    # Initialize the result\n    a = 0\n    b = len(lst)\n\n    # Iterate over the list, doing the following:\n    #  - if an integer is negative, append it to a\n    #  - if an integer is positive, append it to b\n    for i in range(0, len(lst)):\n        if lst[i] < 0:\n            a += lst[i]\n        else:\n            b += 1\n\n    # If there were any negative integers, return a\n    if a > 0:\n        return a, b\n    else:\n        return None, None", "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    # sorted\n    sorted = sorted(lst)\n    a = sorted[0]\n\n    if a < 0:\n        a = - a\n        if a == 0:\n            return (None, None)\n    if len(sorted) > 1:\n        b = sorted[1]\n        if b < 0:\n            b = - b\n            if b == 0:\n                return (a, None)\n    else:\n        b = len(lst)\n\n    return (a, b)"]]