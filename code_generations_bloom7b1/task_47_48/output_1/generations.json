[["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    return (l[len(l) // 2] + l[len(l) // 2 - 1] + l[len(l) // 2 - 2] + l[len(l) // 2 - 1]) / 4", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) > 2:\n        return (l[0] + l[1] + l[2] / 3) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    return (l[len(l) // 2] + l[len(l) // 2 - 1] + l[len(l) // 2 - 2] + l[len(l) // 2 - 1]) / 4", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) > 2:\n        return (l[0] + l[1] + l[2]) / 3", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    middle = l[len(l) / 2]\n    if middle == 0:\n        return 0\n    if middle == len(l) - 1:\n        return len(l) - 1\n    return middle", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    return (l[len(l) // 2] + l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) / 3", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) > 2:\n        return (l[0] + l[1] + l[2]) / 3", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) % 2 == 0:\n        return l[len(l) / 2]\n    else:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    return (l[len(l) // 2] + l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) / 3", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    return (l[len(l) // 2] + l[len(l) // 2 - 1] + l[len(l) // 2 - 2] + l[len(l) // 2 - 1]) / 4", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) % 2 == 1:\n        return l[len(l) / 2]\n    else:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    return (l[len(l) // 2] + l[len(l) // 2 - 1] + l[len(l) // 2 - 2] + l[len(l) // 2 - 1]) / 4", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[0] + l[1]) / 2\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    return (l[len(l) // 2] + l[len(l) // 2 - 1] + l[len(l) // 2 - 2] + l[len(l) // 2 - 1]) / 4", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return sum(l) / float(len(l)) * 0.5", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) % 2 == 0:\n        return (l[0] + l[1]) / 2\n    else:\n        return (l[0] + l[1]) / 2 + (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) > 2:\n        return (l[0] + median(l[1:])) / 2 + median(l[2:])\n    return median(l[:-1]) + median(l[1:])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 1:\n        return (l[0] + l[1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) > 3:\n        return (l[0] + l[1] + l[2] + l[3] / 3) / 4", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) > 2:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    return (l[0] + l[1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    if len(l) % 2 == 1:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 + (l[len(l) / 2] - l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) % 2 == 0:\n        return l[int(len(l) // 2)]\n    else:\n        return (l[int(len(l) // 2)] + l[int(len(l) // 2) + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) > 2:\n        return (median(l[:-1]) + median(l[1:])) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) > 2:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) % 2 == 0:\n        return (l[0] + l[1]) / 2\n    else:\n        return (l[0] + l[1]) / 2 + (l[len(l) - 1] + l[len(l) - 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return (l[(len(l) // 2) - 1] + l[(len(l) // 2) - 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2 + (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[0] + l[1]) / 2\n    return (l[0] + l[1]) / 2 + (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    return (l[len(l) // 2] + l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) / 3", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 1:\n        return (l[0] + l[1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) == 2:\n        return l[0]\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    if len(l) == 10:\n        return (l[0] + l[1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    else:\n        return (l[0] + l[1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) > 2:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) > 2:\n        return (l[0] + l[1] + l[2]) / 3", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    return (l[0] + l[1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) > 2:\n        return (l[0] + l[1] + l[2] / 3) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) > 2:\n        return (median(l[:-1]) + median(l[1:])) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) > 2:\n        return (median(l[:-1]) + median(l[1:])) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) > 2:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) > 2:\n        return (median(l[:-1]) + median(l[1:])) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) == 2:\n        return l[0]\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    if len(l) == 10:\n        return (l[0] + l[1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    mid = (l[0] + l[1]) // 2\n    if mid == l[0]:\n        return l[0]\n    elif mid == l[1]:\n        return l[1]\n    else:\n        return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    return (l[len(l) // 2] + l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) / 3", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) > 2:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) % 2 == 0:\n        return l[int(len(l) // 2)]\n    else:\n        return (l[int(len(l) // 2)] + l[int(len(l) // 2) + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2 + (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 1:\n        return (l[0] + l[1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    if len(l) % 2 == 2:\n        return (l[0] + l[1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    return (l[0] + l[1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 -", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    mid = (l[0] + l[1]) / 2\n    if mid == l[0]:\n        return l[0]\n    elif mid == l[1]:\n        return l[1]\n    else:\n        return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) > 2:\n        return (l[0] + l[1] + l[2]) / 3", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) > 2:\n        return (l[0] + l[1] + l[2]) / 3", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) % 2 == 0:\n        return l[int(len(l) / 2)]\n    else:\n        return (l[int(len(l) / 2)] + l[int(len(l) / 2) + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) == 2:\n        return l[0]\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    if len(l) == 10:\n        return (l[0] + l[1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) > 2:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) % 2 == 0:\n        return (l[0] + l[1]) / 2\n    else:\n        return (l[0] + l[1]) / 2 + (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) > 2:\n        return sum([(l[i] + l[i + 1]) / 2 for i in range(len(l) - 2)]) + l[len(l) - 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) > 2:\n        return (l[0] + l[1] + l[2] / 3) / 2\n    return 0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) > 3:\n        return (l[0] + l[1] + l[2] + l[3] / 3) / 4", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) % 2 == 0:\n        return (l[0] + l[1]) / 2\n    else:\n        return (l[0] + l[1]) / 2 + (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) > 2:\n        return (l[0] + l[1] + l[2]) / 3", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3] / 4\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4] / 5\n    if len(l) == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] / 6\n    if len(l) == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] / 7\n    if len(l) == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] / 8\n    if len(l) == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] / 9\n    if len(l) == 10:\n        return l[0] +", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    if len(l) % 2 == 0:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    else:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2 + (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 0:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2 == 1:\n        return (l[0] + l[1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    if len(l) % 2 == 2:\n        return (l[0] + l[1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    return (l[0] + l[1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 -"]]