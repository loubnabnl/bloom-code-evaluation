[["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    else:\n        m = (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n        if m <= 0 or m >= l[len(l) // 2]:\n            m = l[len(l) // 2]\n        return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # TODO\n    # By default, l is sorted.\n    # Do we need to do that, or can we just assume it is sorted?\n    sorted_l = sorted(l)\n    if len(sorted_l) > 1:\n        return sorted_l[len(sorted_l) // 2]\n    else:\n        return sorted_l[0]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    return sum(l) / len(l) *.5", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return (l[len(l)//2] + l[len(l)//2-1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    return (l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    assert len(l) >= 2\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        if l[1] >= l[0]:\n            return l[1]\n        else:\n            return l[0]\n    if len(l) % 2 == 1:\n        n = len(l) // 2\n        m = (l[n] + l[n - 1]) // 2\n    else:\n        n = len(l) // 2\n        m = (l[n - 1] + l[n]) // 2\n    return m\n</s>", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n < 2:\n        return 0.0\n    mid = n // 2\n    if n % 2 == 0:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid + 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = list(map(float, l))\n    if len(l) > 1:\n        l = sorted(l)\n    i = len(l) // 2\n    while True:\n        if l[i] <= l[i - 1]:\n            i -= 1\n        elif l[i] >= l[i + 1]:\n            i += 1\n        else:\n            break\n    return l[i]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return (sum(l) / len(l)) * 0.5", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return 0\n    m = (l[0] + l[n - 1]) / 2\n    if n % 2 == 0:\n        return m\n    return m + median(l[::-1])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    middle = int(len(l)/2)\n    if middle == 0:\n        return l[-1]\n    elif middle == len(l):\n        return l[0]\n    else:\n        return l[(middle-1) // 2 + middle]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return 0\n    if l[0] > l[-1]:\n        return l[0]\n    if l[-1] < l[0]:\n        return l[-1]\n    median = (l[0] + l[-1]) // 2\n    for i in range(1, len(l)):\n        if l[i] > median + l[i - 1]:\n            median = l[i]\n    return median", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    mid = int(len(l) / 2)\n    if len(l) % 2 == 1:\n        return l[mid]\n    if mid == 0:\n        return 0\n    else:\n        return (l[mid - 1] + l[mid + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return None\n    mid = (l[1] + l[0]) // 2\n    return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return (sum(l) / len(l)) * (len(l) - 1)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        half = len(l) // 2\n        return (l[half] + l[half + 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        mid = l[0] + l[1] / 2\n        if mid == 0 or mid == len(l):\n            return 0\n        return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    return float(l[len(l) // 2] + l[len(l) // 2 - 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    assert len(l) > 0, \"l must be non-empty\"\n    if len(l) == 1:\n        return l[0]\n    median = (l[len(l) // 2 - 1] + l[len(l) // 2]) // 2\n    return median", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return 0\n    middle = int(n // 2)\n    left = l[:middle]\n    right = l[middle:]\n    if n > 1:\n        return float(left + middle + right) / 3.0\n    else:\n        return float(left + right) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return l[(len(l) - 1) // 2]\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    m = (l[0] + l[-1]) / 2\n    for i in range(len(l) - 1):\n        if l[i] > m:\n            m = l[i]\n        if l[i] < m:\n            m = l[i]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    r = l[0]\n    for i in range(1, len(l)):\n        if l[i] < r:\n            r = l[i]\n    return r", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    m = 0.0\n    for i in range(len(l)):\n        m = (m + l[i]) / 2\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = len(l)\n    if m < 2:\n        return None\n    if m % 2 == 1:\n        return l[int(m/2)]\n    left, right = l[:int(m/2)], l[int(m/2):]\n    return (left + right) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    i = (len(l) - 1) // 2\n    j = i - 1\n    a = l[i]\n    b = l[j]\n    if a == b:\n        a, b = b, a\n    while a!= b:\n        if a < b:\n            i += 1\n        else:\n            j -= 1\n        a, b = b, a\n    return a", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n\n    if len(l) == 1:\n        return l[0]\n\n    m = len(l) / 2.0\n\n    if m == 1:\n        return l[int(m)]\n\n    left = l[:int(m)]\n    right = l[int(m):]\n\n    if len(left) > len(right):\n        left_mid = median(left)\n        right_mid = median(right)\n    else:\n        left_mid = median(right)\n        right_mid = median(left)\n\n    return left_mid + right_mid / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 1:\n        return l[int(n // 2)]\n    else:\n        return (l[int(n // 2 - 1)] + l[int(n // 2)]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return (l + l[:-1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    mid = len(l) // 2\n    if len(l) % 2:\n        left = l[mid - 1]\n        right = l[mid]\n    else:\n        left = l[mid - 1]\n        right = l[mid + 1]\n    if len(left) == 0 or len(right) == 0:\n        return 0\n    if len(left) > len(right):\n        return left\n    else:\n        return right", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # TODO decide if best to use the numpy version of median or write a\n    # version of it here\n    return np.median(l)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l)[len(l)//2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n\n    if len(l) == 1:\n        return l[0]\n\n    if len(l) % 2 == 0:\n        return l[int(len(l) // 2) - 1]\n\n    low, high = 0, len(l) - 1\n\n    while low <= high:\n        mid = int((low + high) / 2)\n        if l[mid] < l[low]:\n            low = mid + 1\n        elif l[mid] > l[high]:\n            high = mid - 1\n        else:\n            return l[mid]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return (sum([list(x) for x in l if x!= 0]) / len(l)) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    try:\n        if len(l) > 0:\n            q = sum(l[:-1]) / 2.0\n            p = sum(l[1:]) / 2.0\n            if len(l) % 2 == 1:\n                return q\n            return (p + q) / 2.0\n    except ZeroDivisionError:\n        return median(list(range(len(l)) // 2))", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 1:\n        return l[0]\n    middle = n // 2\n    if n % 2 == 1:\n        left = median(l[:middle])\n        right = median(l[middle:])\n        return (left + right) // 2\n    else:\n        left = median(l[:middle])\n        right = median(l[middle:middle + 1])\n        return (left + right) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 1:\n        return l[0]\n    if n < 3:\n        return l[0]\n    half = n // 2\n    if n > half and l[half - 1] < l[half]:\n        i = half - 1\n    else:\n        i = half\n    if l[i] < l[i - 1]:\n        return l[i]\n    else:\n        return l[i - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        raise ValueError('List must contain more than one element')\n    l = list(l)\n    n = len(l)\n    if n % 2 == 0:\n        return float(l[int(n / 2)])\n    else:\n        if len(l) % 3 == 0:\n            return ((l[int(n / 2)] + l[int(n / 2) - 1]) / 2.0)\n        else:\n            return ((l[int(n / 2)] + l[int(n / 2) - 1] + l[int(n / 2) + 1]) / 3.0)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    try:\n        return sorted(l)[int(len(l) / 2)]\n    except (KeyError, IndexError):\n        return sorted(l)[int(len(l) // 2) - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = len(l)\n    if m < 2:\n        return 0\n    if m == 2:\n        return l[0]\n    if m % 2 == 1:\n        return (l[0] + l[1]) / 2\n    if m % 2 == 0:\n        l = l[::-1]\n        return median(l)\n    mid = int(math.floor(m / 2.0))\n    if mid > 0:\n        l = l[mid:]\n        return median(l)\n    l = l[:mid]\n    return median(l)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"Median cannot be calculated on empty list.\")\n    if len(l) == 1:\n        return l[0]\n    medians = [l[i] for i in xrange(0, len(l), 2)]\n    middle = medians[len(medians) / 2]\n    middle += 0.5\n    if middle < 0 or middle > len(l):\n        raise ValueError(\"Median out of range.\")\n    return middle", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return None\n    if n == 1:\n        return l[0]\n    if n % 2 == 0:\n        return (l[(n / 2) - 1] + l[(n / 2)]) / 2\n    return (l[(n / 2) - 1] + l[(n / 2)]) / 2 + (l[n / 2] + l[n / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    middle = int(len(l)/2)\n    if l[middle] > l[-middle]:\n        return l[middle]\n    else:\n        return l[-middle]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        raise ValueError('list must not be empty')\n    if n == 1:\n        return l.pop()\n    middle = int(n / 2.0)\n    if middle == n:\n        return l.pop()\n    elif middle == 0:\n        raise ValueError('list must not be empty')\n    else:\n        return (l[middle] + l[middle - 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) <= 1:\n        return l[0]\n    return (l[0] + l[len(l) / 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    assert len(l) > 0\n    mid = len(l) // 2\n    try:\n        l[mid]\n        return mid\n    except IndexError:\n        return len(l) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    elif len(l) % 2 == 0:\n        return l[int(len(l) // 2) - 1]\n    else:\n        return ((l[0] + l[int(len(l) // 2) - 1]) / 2.0) if len(l) % 2 == 1 else (l[int(len(l) // 2) - 1] + l[0]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return None\n    s = sum(l)\n    i = len(l) / 2\n    if i == 0:\n        return s\n    else:\n        return s / float(i)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # I prefer a list comprehension if possible:\n    #\n    #   [int(round(sum(i) / float(len(i)))) for i in sorted(l, key=lambda x: x)]\n    #\n    # However, if the elements are integers, we can use numpy's\n    #  numpy.median():\n    #\n    #   numpy.median(l)\n    #\n    if isinstance(l, str):\n        l = list(map(int, l))\n    return numpy.median(l)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n < 2:\n        raise ValueError('len(l) < 2')\n    if len(l) % 2 == 0:\n        return int(l[len(l)//2])\n    else:\n        return (l[n//2] + l[n//2+1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n\n    middle = (l[0] + l[-1]) // 2\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        if l[i] < middle:\n            i += 1\n        else:\n            j -= 1\n\n    return middle", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    m = l[0]\n    for el in l[1:]:\n        if el > m:\n            m = el\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = 1\n    for i in range(len(l)-1):\n        if l[i] < l[i+1]:\n            m = l[i]\n            l[i], l[i+1] = l[i+1], l[i]\n    return l[m]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l, reverse = True)[::2][::-1].median()", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    middle = len(l) // 2\n    if middle == 0:\n        return 0\n    elif middle == len(l):\n        return l[len(l) - 1]\n    return (l[middle - 1] + l[middle + 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = len(l) / 2\n    return l[m] if m > 0 else l[m - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    middle = (len(l) // 2) + 1\n    if len(l) % 2:\n        return (l[middle - 1] + l[middle]) // 2\n    else:\n        return (l[middle - 1] + l[middle]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    mid = len(l) // 2\n    # case of odd number of elements\n    if mid == 1 and l[mid] < l[mid - 1]:\n        return l[mid]\n    # case of even number of elements\n    elif mid == 1 and l[mid] > l[mid - 1]:\n        return l[mid] + l[mid - 1] // 2\n    else:\n        left, right = l[:mid], l[mid:]\n        left_sum, right_sum = sum(left), sum(right)\n        if left_sum > right_sum:\n            return left[left_sum - right_sum // 2]\n        elif left_sum < right_sum:\n            return right[left_sum - right_sum // 2]\n        else:\n            return (left[left_sum - right_sum // 2] +\n                    right[left_sum - right_sum // 2]) // 2\n    return 0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    else:\n        pivot = l[(len(l) / 2)]\n        return (pivot + l[len(l) - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l)[int(len(l)/2)]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2:\n        return float(l[len(l) // 2 - 1])\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return 0.0\n    if len(l) % 2 == 0:\n        return sum(l) / 2.0\n    else:\n        return sum(l) / 2.0 + median(l[::2])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = len(l) // 2\n    if m == 0:\n        return 0\n    elif m == 1:\n        return l[m]\n    else:\n        return sum(l[:m]) / m + sum(l[m:]) / (m - 1)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # sorted() is needed here to prevent Numpy from using the default\n    # sorting order, which in this case is descending\n    a = sorted(l, key=lambda x: x)[:-1]\n    middle = (a[0] + a[-1]) / 2\n    return a[middle]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    mid = l[0]\n    for i in range(1, len(l)):\n        if l[i] > mid:\n            mid = l[i]\n    return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    return (l[len(l)//2] + l[len(l)//2 - 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        raise ValueError(\"Input list must have at least one element\")\n\n    n = len(l)\n    if n % 2 == 1:\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    else:\n        return l[n / 2 - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return float(len(l)) * (sum(l) / len(l))[::-1].median()", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    half_len = len(l) // 2\n    smallest = l[0]\n    biggest = l[half_len]\n    return (smallest + biggest) / 2 if smallest < biggest else biggest", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 3:\n        return l[0]\n    else:\n        half = len(l) // 2\n        return l[(len(l) - 1) // 2] + l[half]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    # l is sorted, so we can use binary search\n    mid = len(l) // 2\n    l = sorted(l)\n    if l[mid - 1] <= l[mid]:\n        return l[mid - 1]\n    else:\n        return l[mid]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return (l[len(l) / 2 - 1] + l[len(l) / 2 + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) % 2 == 0:\n        first, second = l[:-1], l[1:]\n    else:\n        first, second = l[:-1], l[1:], l[0]\n    return first + (second - first) / 2\n</s>", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 3:\n        return l[0]\n    return sum(l) / len(l) * 0.5", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    import numpy as np\n    m = np.median(l)\n    if len(l) == 0:\n        return m\n    i = 0\n    while i < len(l):\n        if l[i] > m:\n            m = l[i]\n        i += 1\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    m = len(l) / 2\n    median = l[m]\n    mid = l[m - 1]\n    if mid > m:\n        median = median + mid\n        mid = mid - m\n    else:\n        median = median + mid\n        mid = mid + m\n    if mid == m:\n        median = median - mid\n        mid = mid - m\n    if mid == 0:\n        median = median - m\n    return median", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 0:\n        return 0\n    if len(l) < 2:\n        raise ValueError(\"Not a list of length 2: {}\".format(l))\n\n    if len(l) % 2 == 1:\n        # We can use a simple median operation if all elements are odd or even\n        return (l[int(len(l) / 2) - 1] + l[int(len(l) / 2)]) / 2\n\n    m = 0\n    for i in range(1, len(l) - 1):\n        m1 = l[i]\n        m2 = l[i + 1]\n        if m1 > m2:\n            m = m1\n        else:\n            m = m2\n    if m > l[len(l) - 1]:\n        m = l[len(l) - 1]\n    if m > l[0]:\n        m = l[0]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[1] + 0.5 * (l[0] - l[1])\n    if len(l) == 3:\n        return l[2] + 0.5 * (l[1] - l[2]) + 0.5 * (l[0] - l[2])\n    return 0.5 * (l[int(len(l) / 2)] + l[int(len(l) / 2) - 1])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    m = l[0]\n    for i in range(1, len(l)):\n        if l[i] < m:\n            m = l[i]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = len(l) // 2\n    mid = m if len(l) % 2 else len(l) - m\n    if mid > 0:\n        i, j = 0, mid - 1\n        while i <= j:\n            if l[i] <= l[j]:\n                i += 1\n            else:\n                j -= 1\n        return l[i] if i <= m else l[mid - 1]\n    return l[m] if m < len(l) else l[0]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    if len(l) % 2 == 0:\n        return (l[0] + l[1]) / 2\n    return (l[0] + l[1]) / 2 + (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    try:\n        return reduce(operator.add, l, mid=True)\n    except ValueError:\n        return reduce(operator.sub, l, mid=True)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l) if len(l) > 1 else float('nan')", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = len(l) // 2\n    return l[m] if m == 0 else l[m - 1] + l[m + 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        median = (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n        median = median if median > 0 else -median\n        return median", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    num_items = len(l)\n    if num_items == 0:\n        return 0\n    if num_items == 1:\n        return l[0]\n    num_pairs = num_items // 2\n    median = l[num_pairs // 2]\n    if num_pairs % 2:\n        median += l[num_pairs // 2 - 1]\n    return median", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    i = 1\n    j = n / 2\n    while i <= j:\n        if l[i] > l[j]:\n            i += 1\n        else:\n            j -= 1\n    return l[i]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    half = len(l) // 2\n    if l[0] < l[half]:\n        j = 0\n    else:\n        j = half\n    if l[half + 1] < l[0]:\n        i = half - 1\n    else:\n        i = 0\n    return l[i] + (l[j] - l[i]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return None\n    count = 0\n    for i in range(1, len(l) - 1):\n        if l[i] < l[i + 1]:\n            count += 1\n        else:\n            count += 1\n    if count % 2 == 0:\n        return l[int((len(l) / 2) - 1)]\n    else:\n        return l[int((len(l) / 2) - 1)] + l[int(count / 2)]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n <= 1:\n        return l[0]\n    if n % 2 == 1:\n        return l[n // 2]\n    half = n // 2 + 1\n    if n % 3 == 1:\n        return l[half]\n    if n % 5 == 1:\n        return l[half - 1]\n    if n % 7 == 1:\n        return l[half - 2]\n    if n % 9 == 1:\n        return l[half - 3]\n    if n % 11 == 1:\n        return l[half - 4]\n    return median(l[half - 5 : half] + l[half : half + 1])\n</s>", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    mid = (len(l) / 2)\n    if l[mid] > l[mid - 1]:\n        mid = mid - 1\n    else:\n        mid = mid + 1\n    return l[mid]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        m = l[i] + l[j] / 2.0\n        if m < l[i]:\n            i += 1\n        else:\n            j -= 1\n    return l[i]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    middle = len(l) / 2\n    lower = l[:middle]\n    upper = l[middle:]\n    lower_median = median(lower)\n    upper_median = median(upper)\n    return lower_median + (upper_median - lower_median) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / float(len(l)) if len(l) else 0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    assert len(l) >= 2\n    half_len = len(l) // 2\n    middle = len(l) // 2\n    if middle == 0:\n        return 0\n    if len(l) % 2:\n        return l[middle]\n    else:\n        first = l[middle - 1]\n        second = l[middle]\n        if first > second:\n            return first\n        else:\n            return second", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return 0.0\n    l.sort()\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    m = l[len(l) / 2]\n    for i in range(1, len(l) - 1):\n        if l[i] > m:\n            m = l[i]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    mid = len(l) // 2\n    left = l[:mid]\n    right = l[mid:]\n    if len(left) == 1:\n        return left[0]\n    if len(right) == 1:\n        return right[0]\n    return (left + right) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    l.sort()\n    return 0.5 * (l[0] + l[len(l) / 2])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    else:\n        return (l[0] + l[1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    mid = int(len(l) / 2)\n    if len(l) % 2:\n        return l[mid]\n    else:\n        return l[mid - 1] + l[mid]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    # Make sure that the list is sorted first\n    l.sort()\n    if l[0] < l[-1]:\n        return l[len(l)/2]\n    else:\n        return l[0]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    elif len(l) == 2:\n        return (l[0] + l[1]) / 2\n    else:\n        part1, part2 = l[:-1], l[1:]\n        p = int(len(part1) // 2)\n        if len(part1) % 2 == 0:\n            p1 = part1[p1]\n            p2 = part1[p1] + 1\n            p3 = part1[p2]\n            p4 = part1[p2] + 1\n        else:\n            p1 = part1[p1]\n            p2 = part2[p1]\n            p3 = part2[p1] + 1\n            p4 = part2[p2]\n            p5 = part2[p2] + 1\n        mid = (p1 + p3) / 2\n        if mid == p2:\n            return part2[p3]\n        else:\n            if mid == p4:\n                return part1[p2]\n            elif mid == p5:\n                return part1[p3]\n    return l[(l.index(median(part1)) + median(part2)) / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) % 2 == 1:\n        return l[(len(l) - 1) / 2]\n    return l[(len(l) // 2 - 1) // 2] + (l[(len(l) - 1) // 2] - l[(len(l) // 2) - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        median = (l[n//2] + l[n//2]) / 2\n    else:\n        median = l[n//2]\n    return median", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = 0\n    for i in range(len(l)):\n        m += (l[i] - m) / 2\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return float(len(l)) * 0.5 + sum(l) / len(l)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    else:\n        last = l[len(l) // 2]\n        mid = l[len(l) // 2 - 1]\n        if last > mid:\n            mid = median(l[:len(l) // 2 + 1])\n        elif last < mid:\n            mid = median(l[:len(l) // 2])\n        return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        raise ValueError(\"list is empty\")\n    if len(l) % 2 == 1:\n        return mean(l) / 2.0\n    first = int(len(l) / 2.0)\n    second = len(l) - 1\n    i = 0\n    while i < first:\n        if l[i] > second:\n            return l[i]\n        i += 1\n    return l[second]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    l.sort()\n    if len(l) % 2:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    else:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    x, n = divmod(len(l), 2)\n    if n:\n        return sum(l[:x]) / n\n    else:\n        return sum(l) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return (l[(l.count(x) + 1) // 2] for x in l)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 1:\n        return l[(n + 1) / 2]\n    return n / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    try:\n        n = len(l)\n        if n == 0:\n            return None\n    except TypeError:\n        raise TypeError('list must be of type list')\n    return 0.5 * (l[0] + l[n - 1]) if n > 1 else l[n / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    mid = len(l) // 2\n    if len(l) % 2:\n        mid += 1\n    return (l[mid], l[mid - 1]) if mid!= len(l) else (l[mid - 1], l[mid])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    m = (l[0] + l[-1]) / 2\n    for i in range(1, len(l) - 1):\n        if l[i] > m:\n            m = l[i]\n        else:\n            break\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    from math import floor, ceil\n    mid = floor(len(l)/2)\n    if mid > len(l)-1:\n        return l[mid]\n    if mid == len(l)-1:\n        return l[mid]\n    return (l[mid] + l[mid+1])/2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    elif len(l) == 2:\n        return l[0] + l[1] / 2.0\n    elif len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3.0\n    else:\n        return (l[:len(l) / 2] + l[len(l) / 2:]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return\n    mid = (l[1] + l[0]) / 2\n    if mid!= l[1]:\n        return mid\n    for item in l[:-1]:\n        if item > l[2]:\n            return item\n    return l[2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l) if len(l) > 0 else 0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) % 2 == 0:\n        if l[0] < l[-1]:\n            return l[(len(l) / 2) - 1]\n        else:\n            return l[(len(l) / 2) - 1] + (l[(len(l) / 2) - 1] - l[0]) / 2\n    else:\n        if l[len(l) / 2 - 1] < l[0]:\n            return l[(len(l) / 2) - 1]\n        else:\n            return l[(len(l) / 2) - 1] + (l[(len(l) / 2) - 1] - l[0]) / 2 + (l[0] - l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    assert len(l) > 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) % 2:\n        return (l[0] + l[1]) / 2\n    if len(l) - 1 < 0:\n        raise ValueError(\"can not calculate median of list of negative values\")\n    v1 = l[0]\n    v2 = l[-1]\n    if v1 < v2:\n        temp = v1\n        v1 = v2\n        v2 = temp\n    if v2 < v1:\n        temp = v2\n        v2 = v1\n        v1 = temp\n    return v1 + (v2 - v1) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    median = sum(l) / len(l)\n    if len(l) % 2:\n        return (median / 2.0) + l[(median / 2.0) - 1]\n    else:\n        return (median / 2.0) + l[(median / 2.0) - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        raise ValueError('Invalid input: list has fewer than two elements.')\n    if len(l) % 2 == 1:\n        return l[(len(l) - 1) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    half_len = len(l) // 2\n    low = 0\n    high = half_len - 1\n    while low < high:\n        mid = (low + high) // 2\n        if l[mid] > l[low]:\n            low = mid + 1\n        elif l[mid] < l[high]:\n            high = mid - 1\n        else:\n            return l[mid]\n    return (low + high) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = len(l)\n    if m == 0:\n        return 0\n    if m == 1:\n        return l[0]\n    if m == 2:\n        return l[0] + l[1]\n    if m % 2 == 0:\n        return (l[0] + l[1]) / 2\n    else:\n        return (l[1] + l[2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = len(l)\n    if m < 2:\n        return l[0]\n    n = m // 2\n    if l[n-1] == l[n]:\n        return l[m - n]\n    if l[n-1] < l[n]:\n        return median(l[:n]) + l[n - 1]\n    else:\n        return median(l[:n]) + l[n + 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # returns median of the list\n    if len(l) % 2 == 0:\n        return int(l[len(l) / 2])\n    else:\n        return int(l[int(len(l) / 2) - 1] + int(len(l) / 2) * (len(l) / 2))", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) % 2 == 0:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    else:\n        return l[len(l) / 2] + l[len(l) / 2 + 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) < 3:\n        return 0\n    if len(l) % 2 == 1:\n        if len(l) == 3:\n            return l[0] + (l[1] + l[2]) / 2\n        if len(l) == 2:\n            return l[0] + l[1]\n    for i in range(len(l) / 2):\n        left = median(l[:i + 1])\n        right = median(l[i + 1:])\n        if left > right:\n            return left\n        elif left == right:\n            return left + 0.5\n    if len(l) % 2 == 0:\n        if len(l) == 3:\n            return l[0] + (l[1] + l[2]) / 2\n        if len(l) == 2:\n            return l[0] + l[1]\n    if len(l) % 2 == 1:\n        if len(l) == 3:\n            return l[0] + (l[1] + l[2]) / 2\n        if len(l) == 2:\n            return l[0] + l[1]\n    return 0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l)[len(l) / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = (l + l[:-1]) / 2\n    if len(l) % 2 == 0:\n        return m\n    else:\n        return (l[0] + m) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    mid = l[int(len(l) / 2)]\n    if len(l) % 2 == 0:\n        return mid\n    else:\n        return (mid + l[int(len(l) / 2) - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    c = 0\n    j = 0\n    for i in range(len(l) - 1, -1, -1):\n        c += l[i]\n        j += 1\n        if j % 2 == 0:\n            c /= 2.0\n    c /= j\n    if c % 2 == 0:\n        return (c / 2.0) + 0.5\n    else:\n        return (c / 2.0) - 0.5", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return float(len(l)) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return (len(l) - 1) // 2 if len(l) > 0 else 0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 0:\n        return sum(l) / 2\n    else:\n        return sum(l) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return l[0]\n    elif n == 2:\n        return l[0] + l[1]\n    else:\n        m = (l[1] + l[n - 2]) // 2\n        l[n - 2], l[n - 1] = l[n - 2], l[n - 1] - m\n        return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    else:\n        mid = 0.5*(l[0] + l[-1])\n        if l[0] > mid:\n            mid += 1\n        if l[-1] < mid:\n            mid -= 1\n        return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    middle = len(l) // 2\n    if len(l) > middle:\n        m = l[middle]\n    else:\n        m = l[middle - 1]\n    if middle + 1 == len(l):\n        return m\n    else:\n        m = l[middle + 1]\n    return m + (m - l[middle]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    l = l[:-1]\n    if len(l) % 2 == 0:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    else:\n        return l[len(l) / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return None\n    elif len(l) == 2:\n        return l[0] + l[1] / 2.0\n    else:\n        m = l[1] + l[2] / 2.0\n        i = 2\n        while m == l[i]:\n            m = l[i + 1]\n            i += 1\n        return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    middle = l[0]\n    for i in range(1, len(l) - 1):\n        middle = (middle + l[i]) // 2 if l[i]!= l[i - 1] else middle\n    return middle", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return [ i + (i - x)/2 for i, x in enumerate(l) ]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) % 2 == 0:\n        median = (l[0] + l[1]) / 2\n    else:\n        median = (l[0] + l[-1]) / 2\n    return median", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    middle = len(l)//2\n    i, j = 0, middle - 1\n    while i < j:\n        if l[i] > l[j]:\n            j -= 1\n        else:\n            i += 1\n    return l[(i+j)//2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    x = [(a + b) / 2 for a, b in zip(l, l[1:])]\n    return x[len(x) / 2] if len(x) > 0 else 0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    assert len(l) > 0\n    assert len(l) % 2 == 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    m = (l[0] + l[1] + l[2]) / 3\n    if m < l[-1]:\n        m = l[-2] + (l[-1] - m) / 2\n    elif m > l[-1]:\n        m = l[-1] + (m - l[-2]) / 2\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l)[len(l)//2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    return ((l[0] + l[len(l) / 2]) / 2) if len(l) % 2 == 0 else ((l[len(l) / 2] + l[len(l) - 1]) / 2)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (l[(n-1)//2] + l[(n-2)//2]) / 2\n    else:\n        return (l[(n-2)//2] + l[n//2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    m = (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n    if m == 0:\n        return l[0]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 3:\n        return l\n    mid = len(l) // 2\n    if l[mid] < l[mid - 1] or l[mid] > l[mid + 1]:\n        return l[mid - 1]\n    else:\n        return l[mid + 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        raise ValueError(\"Invalid input\")\n    l.sort()\n    return float(l[len(l) / 2 - 1])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l)[int(len(l)/2)]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    half_len = len(l) // 2\n    if half_len < 1:\n        return None\n    if len(l) % 2:\n        return (l[half_len - 1] + l[half_len - 2]) / 2\n    else:\n        return (l[half_len - 1] + l[half_len - 2]) / 2 + l[half_len - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return 0\n\n    half = len(l) // 2\n    if len(l) % 2 == 0:\n        if l[half] == l[half - 1]:\n            return l[half]\n        elif l[half] > l[half - 1]:\n            return l[half - 1]\n    else:\n        if l[half] == l[half - 1]:\n            return l[half]\n        elif l[half - 1] > l[half]:\n            return l[half - 1]\n    return 0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 1:\n        return l[0]\n    if n == 2:\n        return l[0] + l[1]\n    if n % 2 == 1:\n        i = n // 2\n        j = n // 2 - 1\n        return ((l[i] + l[j]) // 2.0) if i == j else (l[i] + l[j + 1]) // 2.0\n    i = n // 2\n    j = n // 2\n    k = n // 2 + 1\n    return (l[i] + l[j] + l[k]) // 3.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    middle = l[0] + (l[1] - l[0]) / 2\n    if l.count(middle) == len(l) / 2:\n        return middle\n    else:\n        return median(l[:(len(l) / 2)] + l[(len(l) / 2):len(l)])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return [(x + y) / 2 for x, y in zip(l, l[1:])]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    try:\n        m = l[0]\n    except IndexError:\n        return l[-1]\n    for i in range(len(l) - 1, -1, -1):\n        if l[i] > m:\n            m = l[i]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return 0.0\n    if n == 1:\n        return l[0]\n    if n == 2:\n        return (l[0] + l[1]) / 2.0\n    if n % 2 == 1:\n        return (l[0] + l[n / 2]) / 2.0\n    else:\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = 0.5 * (l[0] + l[-1])\n    i, j = 0, len(l) - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if l[mid] > m:\n            m = l[mid]\n            i = mid + 1\n        else:\n            j = mid\n            break\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        raise ValueError('list must have at least two elements')\n    middle = l[len(l)//2]\n    return (middle + l[len(l)//2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    assert len(l) > 0\n\n    if len(l) <= 1:\n        return l[0]\n\n    mid = 0.5 * (l[0] + l[len(l) - 1])\n    mid2 = 0.5 * (l[len(l) // 2] + l[len(l) // 2 - 1])\n    mid3 = 0.5 * (l[len(l) // 3 - 1] + l[len(l) // 3 + 1])\n\n    if mid2 == mid3:\n        mid2 = mid3 = 0.5 * (mid + mid2)\n\n    return mid + (mid2 + mid3) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    mid = 0\n    for e in l:\n        if e > mid:\n            mid = e\n        else:\n            return mid\n    mid = mid / 2\n    if mid > l[-1]:\n        return mid\n    else:\n        return mid + l[-1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    half_len = len(l) // 2\n    if len(l) % 2 == 0:\n        if l[half_len - 1] == l[half_len]:\n            return l[half_len - 1]\n        return l[half_len]\n    else:\n        if l[half_len - 1] == l[half_len - 2]:\n            return l[half_len - 1]\n        return l[half_len - 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = (l[1:] + l[:-1]) // 2\n    if m == 0:\n        return 0\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return max(l)\n    if len(l) == 3:\n        return min(l)\n    if len(l) == 4:\n        return (min(l[:3]), min(l[3:]), max(l[:3]), max(l[3:]))\n    if len(l) == 5:\n        return (min(l[:4]), min(l[4:]), max(l[:4]), max(l[4:]))", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    mid = int(l[-1] + 0.5)\n    if len(l) > 1:\n        return l[mid - 1] + (l[mid] - l[mid - 1]) / 2\n    else:\n        return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    l.sort()\n    middle = l[len(l) // 2 - 1] + l[len(l) // 2]\n    return middle / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError('List cannot be empty')\n    else:\n        m = (l[0] + l[-1]) // 2\n        for i in range(1, len(l)):\n            if l[i] > m:\n                m = l[i]\n            elif l[i] < m:\n                m = l[i]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    median = l[len(l)//2]\n    if len(l) % 2:\n        median += l[len(l) - 1]\n    return median", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    try:\n        m = (sum(l) / len(l) if len(l) > 1 else 0.5) if len(l) > 1 else 0.0\n        median = m if len(l) > 0 else 0.0\n        for i in range(len(l) - 1):\n            if l[i] < m and l[i + 1] > m:\n                median = l[i] if i % 2 == 0 else l[i + 1]\n                break\n    except ZeroDivisionError:\n        median = 0.0\n    return median", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    a = 0\n    for i in range(len(l)):\n        if l[i] > a:\n            a = l[i]\n    a /= len(l)\n    return a", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2:\n        mid = (n // 2) + 1\n        return mid\n    else:\n        return l[int(n // 2)]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) % 2 == 0:\n        return l[len(l) // 2 - 1]\n    return (l[len(l) // 2] + l[len(l) // 2 + 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2:\n        raise ValueError(\"list must be of even length\")\n    p = l[:len(l) // 2]\n    q = l[len(l) // 2:]\n    return p.mean() + q.mean() / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    assert len(l) > 0, 'empty list'\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + (l[1] - l[0]) // 2.0\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[(len(l) - 1) // 2] + (l[(len(l) - 1) // 2 - 1] - l[(len(l) - 1) // 2]) // 2.0\n    else:\n        return (l[(len(l) - 1) // 2 - 1] + l[(len(l) - 1) // 2]) // 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    return (l[(l.index(max(l)) + 1) / 2] + l[(l.index(min(l)) + 1) / 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0.0\n    mid = (l[1] + l[0]) // 2\n    return l[mid] if mid > 0 else l[-len(l)]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    else:\n        middle = len(l) // 2\n        return l[(middle - 1) // 2 + 1] + (l[middle - 1] - l[(middle - 1) // 2]) * 0.5", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    total = 0\n    for i in range(len(l)):\n        total += l[i]\n    n = len(l) - 1\n    if n % 2 == 0:\n        return l[n // 2] + (total / 2)\n    else:\n        return (total / 2) + (l[n // 2 - 1] + l[n // 2])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 1:\n        return l[0]\n    if n == 2:\n        return l[0] + l[1]\n    if n % 2 == 1:\n        m = (l[0] + l[1]) / 2\n    else:\n        m = (l[1] + l[0]) / 2\n    if n % 2 == 1:\n        return m\n    else:\n        return m + (l[n//2] - m) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Short circuit if list is empty or too small\n    if len(l) < 3:\n        return 0\n    if len(l) == 3:\n        mid = 0.5 * (l[0] + l[1] + l[2])\n        return mid if mid == 0 else mid / 3\n\n    # Find largest and smallest elements\n    maxs = max(l, key=lambda e: e)\n    mins = min(l, key=lambda e: e)\n    # Find midpoint of largest and smallest elements\n    mid = 0.5 * (maxs[0] + mins[0])\n    # Find median by bisecting\n    for i in range(1, len(l) - 1):\n        mid = 0.5 * (mid + l[i])\n    return mid if mid == 0 else mid / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    try:\n        if len(l) == 1:\n            return l[0]\n    except IndexError:\n        return 0.5 * (l[0] + l[-1])\n    m = 0\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            if l[i] > m:\n                m = l[i]\n            else:\n                m = l[i + 1]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    mid = len(l) // 2\n    if mid == 0:\n        return float('inf')\n    if len(l) % 2:\n        return l[mid]\n    if l[mid-1] > l[mid]:\n        if mid - 1 == 0:\n            return float('inf')\n        return l[mid-1]\n    return l[mid]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    p = len(l) // 2\n    if p > 0:\n        m = list(l)\n        m.pop(p)\n        m.pop(p)\n        if m[0] > m[1]:\n            m = m.pop(1) + m.pop(0)\n        else:\n            m = m.pop(0) + m.pop(1)\n    else:\n        m = list(l)\n    return int(m / p) * p", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n\n    total = sum(l)\n    mid = total / 2\n    if mid == 0:\n        return l[0]\n    if l[0] <= mid:\n        return mid\n    if l[-1] > mid:\n        return mid\n    return total // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    if len(l) % 2 == 0:\n        return l[(len(l) - 1) // 2 + 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        m = (l[0] + l[-1]) / 2\n        i = 0\n        while m > l[i]:\n            i += 1\n        if m > l[i]:\n            m -= l[i]\n        else:\n            m += l[i]\n        return m\n    else:\n        mid = (l[0] + l[(n - 1) / 2]) / 2\n        while mid > l[n / 2 + 1]:\n            mid -= l[n / 2 + 1]\n        while mid < l[n / 2]:\n            mid += l[n / 2]\n        return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0.0\n    return (l[int(len(l) / 2)] + l[int(len(l) / 2) - 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    middle = int(len(l) // 2)\n    if len(l) % 2 == 0:\n        return l[middle - 1]\n    else:\n        return l[middle]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    try:\n        k = len(l) // 2\n    except ZeroDivisionError:\n        k = 0\n    if len(l) % 2 == 0:\n        return k * (l[k//2] + l[k//2])\n    else:\n        return k * (l[k//2] - l[k//2]) + (k * (l[k//2] + l[k//2]))", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    num = len(l)\n    if num <= 2:\n        return l[0]\n    else:\n        m1 = l[int(num * 0.5) - 1]\n        m2 = l[int(num * 0.5)]\n        return m1 + (m2 - m1) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return (l[1] + l[0]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return int(math.median(l))", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return\n    m = (l[0] + l[-1]) / 2\n    for n in range(1, len(l) - 1):\n        if l[n] < l[n - 1]:\n            m = m + (l[n] - l[n - 1])\n        else:\n            m = m + (l[n - 1] - l[n])\n    return m"]]