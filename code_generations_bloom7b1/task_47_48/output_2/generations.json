[["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    else:\n        m = (l[0] + l[-1]) // 2\n        if len(l) % 2 == 0:\n            return m\n        else:\n            return (m + median(l[(len(l) - 1) // 2 : ])) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # TODO: handle negative numbers\n    # TODO: handle NaNs\n\n    # TODO: add a more efficient algorithm\n    if len(l) == 0:\n        return None\n\n    if len(l) == 1:\n        return l[0]\n\n    # TODO: add a more efficient algorithm\n    return sum(l[:-1]) / len(l[:-1]) + l[-1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    else:\n        mid = int(len(l) / 2)\n        if mid == 0:\n            return None\n        else:\n            if l[mid - 1] > l[mid]:\n                return l[mid - 1]\n            else:\n                return l[mid]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n < 2:\n        return 0.0\n    if n == 2:\n        return l[0]\n    if n == 1:\n        return l[0]\n    if n == 3:\n        return (l[0] + l[1] + l[2]) / 3.0\n    if n == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4.0\n    return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n <= 1:\n        return l[0]\n    if n <= 3:\n        return l[(n // 2) - 1]\n    if n % 2 == 0:\n        return l[(n // 2) - 1] + l[(n // 2)]\n    return (l[(n // 2) - 1] + l[(n // 2)]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    l.sort()\n    return l[len(l) / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 3:\n        raise ValueError(\"list must contain at least three elements\")\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        if l[0] > l[1]:\n            return l[0]\n        return l[1]\n    if len(l) % 2 == 1:\n        return (l[(len(l) - 1) // 2] + l[(len(l) - 1) // 2 - 1]) // 2\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l\n    return (l[len(l)//2] + l[len(l)//2 - 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        median = l[len(l) / 2]\n        if len(l) % 2:\n            median = median + l[len(l) / 2]\n        return median", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    assert len(l) > 0\n    if len(l) == 1:\n        return l[0]\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    else:\n        return sum(l) / float(len(l))", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l)[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return sum([l[(i + 1) // 2] for i in range(len(l) // 2 - 1)]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        if l[0] > l[1]:\n            return l[0]\n        else:\n            return l[1]\n    i, j = 0, len(l) - 1\n    while i <= j:\n        m = (l[i] + l[j]) / 2\n        if m == l[i]:\n            i += 1\n        elif m == l[j]:\n            j -= 1\n        else:\n            return m\n    return l[(i + j) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return median(l, key=lambda x: x)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError('Empty list')\n\n    if len(l) == 1:\n        return l[0]\n    mid = (l[0] + l[-1]) // 2\n    return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    return (l[n / 2] + l[n / 2 - 1]) / 2 + (l[n / 2] + l[n / 2 + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n < 2:\n        raise ValueError(\"Can't divide by zero\")\n    if n == 1:\n        return l[0]\n    if n % 2 == 0:\n        return (l[(n // 2) - 1] + l[(n // 2)]) / 2\n    return (l[(n // 2) - 1] + l[(n // 2) + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    m = len(l) // 2\n    half = median(l[:m])\n    half += median(l[m:])\n    return half", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    mid = int(len(l) / 2)\n    if mid == 0:\n        return 0\n    left = l[:mid]\n    right = l[mid:]\n    if len(left) > len(right):\n        return left.median()\n    else:\n        return right.median()", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError('Empty list')\n    else:\n        if len(l) == 1:\n            return l[0]\n        else:\n            return (l[len(l) / 2 - 1] + l[len(l) / 2 + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    mid = len(l) // 2\n    return l[mid] if mid > 0 else l[-mid]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    return float(sum(l)) / len(l) * 0.5", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    return (l[0] + l[1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    half = len(l) // 2\n    middle = (l[half] + l[-half]) // 2\n    return middle if middle > l[half] else l[-half]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    return sum(l) / float(len(l) - 1) * (len(l) - 1) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) % 2 == 0:\n        return l[(len(l) - 1) // 2]\n    else:\n        return l[len(l) // 2] + (l[len(l) // 2 - 1] + l[len(l) // 2 - 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    try:\n        return sorted(l)[int(len(l) / 2)]\n    except IndexError:\n        return float('inf')", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        raise ValueError(\"Median requires at least 2 elements.\")\n    mid = len(l) // 2\n    if mid == 0:\n        return l[0]\n    if mid == len(l) - 1:\n        return l[mid]\n    if l[mid] > l[mid - 1]:\n        return l[mid]\n    else:\n        return l[mid - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    return (l[len(l)//2] + l[len(l)//2 - 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    middle = (l[0] + l[-1]) / 2\n    if len(l) % 2 == 0:\n        return middle\n    else:\n        return median(l[:-1]) + median(l[1:])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # initialize the median to the first element of the list\n    # (the median is the middle element of the sorted list)\n    return l[0]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    elif len(l) == 2:\n        return (l[0] + l[1]) / 2\n    else:\n        mid = len(l) / 2\n        left = median(l[:mid])\n        right = median(l[mid:])\n        return left + right / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"list must contain at least one element\")\n    if len(l) == 1:\n        return l[0]\n    l.sort()\n    if len(l) % 2 == 1:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    else:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 + (l[len(l) / 2] - l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"List is empty\")\n\n    if len(l) == 1:\n        return l[0]\n    else:\n        middle = len(l) // 2\n        if len(l) % 2 == 1:\n            return l[middle]\n        else:\n            left = median(l[:middle])\n            right = median(l[middle+1:])\n            return left + (right - left) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return sum(l) / float(len(l) - 1)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l)[int(len(l) / 2)]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    middle = len(l) // 2\n    if middle == 0:\n        return 0\n    if middle > len(l):\n        return l[middle - 1]\n    else:\n        return l[middle]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = l[0]\n    for i in range(1, len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return None\n    return float(l[len(l) / 2 - 1]) + float(l[len(l) / 2 + 1])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return None\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    half = len(l) // 2\n    if half == 0:\n        return 0\n    return (l[half] + l[-half]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    mid = (l[0] + l[len(l) / 2]) / 2\n    left = 0\n    right = len(l) - 1\n    while left <= right:\n        mid = (mid + l[left] + l[right]) / 3\n        left = left + 1\n        right = right - 1\n    return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return l[(n // 2) - 1]\n    else:\n        return (l[(n // 2) - 1] + l[(n // 2)]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        raise ValueError(\"Median of empty list\")\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2 + (l[len(l) // 2 + 1] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = len(l) / 2\n    if m == 0:\n        return 0\n    if m == len(l):\n        return l[m]\n    i = 0\n    j = m\n    while i < j:\n        if l[i] > l[j]:\n            i += 1\n        else:\n            j -= 1\n    return l[i]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n\n    middle = len(l) / 2\n    a = l[middle]\n    b = l[middle - 1]\n    if a > b:\n        return a\n    else:\n        return b", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return 0.0\n    if n == 1:\n        return l[0]\n    if n == 2:\n        return l[0] + l[1]\n    half = n // 2\n    if l[half] < l[-half]:\n        return l[half]\n    return l[-half]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # http://stackoverflow.com/questions/496637/calculate-the-median-of-a-list-in-python\n    # \n    # using the bisect method, we can divide the list into two halves, then\n    # find the median of the two halves.\n    if len(l) < 2:\n        return l[0]\n    a, b = l[:-1], l[1:]\n    i = bisect.bisect_left(a, b)\n    if i == 0:\n        return a[i]\n    if i == len(a) - 1:\n        return b[i]\n    return a[i] + (b[i] - a[i]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    else:\n        return (l[0] + l[-1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        # sorted(l) is not necessary, but it helps the code readability\n        l.sort()\n        m = 0\n        for i in range(len(l) - 1):\n            m = (m + l[i]) / 2 if l[i]!= 0 else 0\n        return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    m = l[len(l) / 2]\n    for i in range(len(l) - 1):\n        if l[i] > m:\n            m = l[i]\n        if l[i + 1] < m:\n            m = l[i + 1]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    return (l[0] + l[1] + l[2]) / 3", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[len(l)//2] + l[len(l)//2-1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    if len(l) % 2 == 0:\n        return (l[int(len(l) / 2)] + l[int(len(l) / 2) - 1]) / 2\n    else:\n        return (l[int(len(l) / 2)] + l[int(len(l) / 2) - 1]) / 2 + l[int(len(l) / 2) - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        if l[0] > l[1]:\n            return l[1]\n        else:\n            return l[0]\n    else:\n        return float(l[len(l)//2])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    middle = l[int(len(l) / 2)]\n    return middle if len(l) % 2 == 0 else median(l[:int(len(l) / 2)]) + median(l[int(len(l) / 2):])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    middle = (l[0] + l[-1]) / 2\n    return middle", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    if len(l) % 2 == 0:\n        mid = int(len(l) / 2.0)\n        if l[mid] > l[mid - 1]:\n            return l[mid - 1]\n        else:\n            return l[mid]\n    else:\n        return (l[len(l) / 2.0 - 1] + l[len(l) / 2.0 + 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return 0\n    if n == 1:\n        return l[0]\n    if n == 2:\n        return (l[0] + l[1]) / 2\n    if n % 2 == 0:\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    else:\n        return (l[n / 2] + l[n / 2 - 1] + l[n / 2]) / 3", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) % 2 == 0:\n        return (l[0] + l[len(l) / 2]) / 2.0\n    else:\n        return (l[0] + l[len(l) / 2]) / 2.0 + (l[len(l) / 2] - l[0]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        if l[0] == l[1]:\n            return l[0]\n    if len(l) % 2 == 0:\n        return (l[0] + l[1]) / 2\n    else:\n        return (l[0] + l[1]) / 2 + (l[len(l) - 1] + l[len(l) - 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l) if len(l) > 0 else 0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return (l + l) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        raise ValueError(\"list must contain at least two elements\")\n    m = (l[0] + l[1]) // 2\n    for i in range(2, len(l)):\n        if l[i] < m:\n            m = l[i]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    middle = len(l) // 2\n    left = median(l[:middle])\n    right = median(l[middle:])\n    return left + (right - left) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l) if len(l) else 0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    mid = len(l) / 2\n    left = median(l[:mid])\n    right = median(l[mid:])\n    if left > right:\n        return left\n    return right", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 1:\n        return l[0]\n    if n == 2:\n        return l[0] + l[1]\n    middle = n // 2\n    if n % 2 == 0:\n        return l[middle]\n    if n % 2 == 1:\n        return l[middle] + l[n - middle]\n    if n % 3 == 0:\n        return l[middle] + l[n - middle] + l[n - middle - 1]\n    if n % 3 == 1:\n        return l[middle] + l[n - middle] + l[n - middle - 1] + l[n - middle - 2]\n    if n % 4 == 0:\n        return l[middle] + l[n - middle] + l[n - middle - 1] + l[n - middle - 2] + l[n - middle - 3]\n    return (l[n - middle - 1] + l[n - middle - 2] + l[n - middle - 3]) / 3", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    a, b = l[:-1], l[1:]\n    if len(a) == 0 or len(b) == 0:\n        return 0\n    if len(b) == 0:\n        return a[0]\n    if len(a) == 0:\n        return b[0]\n    if a[0] == b[0]:\n        return (a[1] + b[1]) / 2\n    return (a[1] + b[1]) / 2 + (a[0] + b[0]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n <= 1:\n        return l[0]\n    mid = (l[0] + l[n - 1]) / 2\n    if n % 2 == 1:\n        return mid\n    if n % 2 == 0:\n        return mid - 1\n    return mid + 1", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    half = len(l) // 2\n    if half == 0:\n        return None\n    return l[half] + (l[half - 1] if len(l) > half else 0)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return (l + 1) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    n = len(l) // 2\n    if n == 0:\n        return None\n    if n == 1:\n        return l[0]\n    if l[n - 1] > l[n]:\n        return l[n - 1]\n    return l[n - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    mid = l[0] + (l[1] - l[0]) // 2\n    if mid > l[-1]:\n        return mid\n    return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) % 2 == 0:\n        mid = (l[0] + l[-1]) / 2\n        if mid > l[-1]:\n            return mid\n        else:\n            return l[0]\n    else:\n        left, right = l[:-1], l[1:]\n        mid = left + (right - left) / 2\n        if mid < left:\n            return left\n        elif mid > right:\n            return right\n        else:\n            return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    else:\n        return (l[0] + l[1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # create a list with the same number of elements as l\n    num = len(l)\n    if num == 1:\n        return l[0]\n    elif num == 2:\n        return (l[0] + l[1]) / 2.0\n    else:\n        # split the list in half\n        half = l[:num / 2]\n        # create a list with the same number of elements as half\n        num_half = num / 2\n        half_half = half[:num_half]\n        half_half_half = half_half + half_half[:num_half / 2]\n        half_half_half_half = half_half_half + half_half_half[:num_half / 2]\n        # find the median of half_half_half_half\n        median = (half_half_half_half[num_half / 2] + half_half_half_half[num_half / 2 - 1]) / 2.0\n        # find the median of half_half_half_half_half\n        median += half_half_half_half[num_half / 2 - 1]\n        # return the median of half_half_half_half_half_half\n        return median", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    else:\n        m = l[(len(l)//2)]\n        if l[(len(l)//2) - 1] > m:\n            return m\n        else:\n            return l[(len(l)//2) - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) == 3:\n        if l[0] > l[1] > l[2]:\n            return (l[1] + l[2]) / 2\n        else:\n            return (l[0] + l[2]) / 2\n    else:\n        return (l[0] + median(l[1:])) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    left = median(l[:-1])\n    right = median(l[1:])\n    return left + right / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return None\n    mid = l[(len(l) - 1) // 2]\n    return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    mid = 0\n    for i in range(len(l) / 2):\n        mid = (mid + l[i]) / 2\n    return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        raise ValueError(\"List must contain at least 2 elements\")\n    m = l.pop(0)\n    i = 0\n    while i < len(l):\n        if l[i] <= m:\n            m = l[i]\n        else:\n            i += 1\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return 0\n    if n == 1:\n        return l[0]\n    if n == 2:\n        return l[0] + l[1]\n    if n % 2 == 0:\n        return (l[n // 2] + l[n // 2 - 1]) // 2\n    else:\n        return (l[n // 2] + l[n // 2 + 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError('list must be non-empty')\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2.0\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3.0\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4.0\n    if len(l) > 4:\n        raise ValueError('list must be at most 4 elements')\n    return (l[:3] + l[3:]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    middle = l[len(l)//2]\n    if middle > 0:\n        return middle\n    else:\n        return median(l[:len(l)//2]) + median(l[len(l)//2:])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    half = len(l) // 2\n    if len(l) % 2 == 0:\n        return (l[half] + l[half - 1]) // 2\n    else:\n        return (l[half - 1] + l[half]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    mid = len(l) // 2\n    left, right = l[:mid], l[mid:]\n    left_median, right_median = median(left), median(right)\n    if left_median < right_median:\n        return left_median\n    else:\n        return right_median", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    mid = len(l) // 2\n    if len(l) % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        raise ValueError('List must have at least two elements.')\n    mid = (l[:len(l) / 2] + l[len(l) / 2:]) / 2\n    return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # if len(l) == 0: return 0\n    if len(l) < 2: return 0\n    middle = l[len(l) // 2]\n    if middle == 0: return 0\n    return middle", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    if len(l) % 2 == 0:\n        return (l[0] + l[len(l) // 2]) / 2\n    else:\n        return (l[0] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # TODO: is it better to use a generator here?\n    #     return sorted(l)[::2][::2][::2][::2][::2][::2][::2][::2]\n    return sum(l) / len(l) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2.0\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3.0\n    return median(l[:-1]) + median(l[1:])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    middle = (l[0] + l[-1]) / 2.0\n    return middle in l and middle or l[len(l) / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return 0.0\n    if n == 1:\n        return l[0]\n    return (l[n // 2] + l[n // 2 + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    if len(l) % 2 == 0:\n        return (l[0] + l[len(l) // 2]) / 2\n    else:\n        return (l[0] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    middle = (l[0] + l[-1]) / 2\n    for i in range(1, len(l) - 1):\n        if l[i] < middle:\n            return middle\n        else:\n            return l[i]\n    return middle", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = 0\n    for i in range(len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    if len(l) % 2 == 1:\n        return (l[0] + l[len(l) / 2]) / 2.0\n    return l[len(l) / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l)[int(len(l) / 2) - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    m = len(l) // 2\n    i = 0\n    j = m\n    while i < m:\n        while j >= 0 and l[j] > l[i]:\n            j -= 1\n        while j >= 0 and l[j] < l[i]:\n            j -= 1\n        if j < 0:\n            return l[i]\n        i += 1\n    return l[i]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    else:\n        l.sort()\n        i = len(l) / 2\n        return l[i] if i % 2 == 0 else l[i - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    mid = l[int(len(l) // 2)]\n    return mid if mid > 0 else -mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # TODO: consider using the bisect module\n    if len(l) == 0:\n        return 0\n    else:\n        middle = len(l) // 2\n        if len(l) % 2:\n            return l[middle]\n        else:\n            left = median(l[:middle])\n            right = median(l[middle + 1:])\n            return left + right // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    mid = (l[-1] + l[0]) / 2\n    return mid if mid > 0 else 0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # TODO: Implement this algorithm for efficiency\n    #\n    # The algorithm is described in\n    # http://www.cs.princeton.edu/~jpr/algorithms/median.pdf\n    #\n    # We use the following implementation:\n    #\n    # We sort the list in ascending order\n    #\n    # Then we divide the list into two parts\n    #\n    # The first part is the list with elements smaller than the median\n    # The second part is the list with elements greater than the median\n    #\n    # We then iterate over the first part\n    #\n    # We keep track of the median of the first part\n    #\n    # We iterate over the second part\n    #\n    # We keep track of the median of the second part\n    #\n    # Then we return the median of the two medians\n    #\n    # The algorithm is described in\n    # http://www.cs.princeton.edu/~jpr/algorithms/median.pdf\n    #\n    # We use the following implementation:\n    #\n    # We sort the list in ascending order\n    #\n    # Then we divide the list into two parts\n    #\n    # The first part is the list with elements smaller than the median\n    # The second part is the list with elements greater", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"Input list is empty\")\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[1]\n    if len(l) == 3:\n        return (l[1] + l[2]) / 2\n    if len(l) > 3:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return (l[len(l) // 2 - 1] + l[len(l) // 2 + 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return (l + l) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"List is empty\")\n    n = len(l)\n    if n % 2 == 0:\n        return (l[int(n // 2)] + l[int(n // 2) - 1]) / 2.0\n    else:\n        return l[int(n // 2)]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) == 2:\n        return l[0] + l[1]\n    half = len(l) // 2\n    left = median(l[:half])\n    right = median(l[half:])\n    return left + right // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    m = l[0]\n    for i in range(1, len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return None\n    m = (l[0] + l[1]) / 2\n    for i in range(2, len(l) - 1):\n        if l[i] > m:\n            m = l[i]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # The median is the middle value in the list.\n    # The middle value is the value that divides the list into two equal halves.\n    # In this case, the middle value is the value at index 0.5.\n    # This is the same as finding the midpoint of the list.\n\n    # The number of elements in the list.\n    n = len(l)\n\n    # The first half of the list.\n    half = l[:n//2]\n\n    # The second half of the list.\n    half2 = l[n//2:]\n\n    # The middle value of the list.\n    middle = half2.index(max(half, half2))\n\n    # The median is the middle value.\n    return middle", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError('List is empty')\n    if len(l) == 1:\n        return l[0]\n    else:\n        middle = int(len(l) // 2)\n        if middle == 0:\n            return 0\n        else:\n            left = median(l[:middle])\n            right = median(l[middle:])\n            return left + right / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    return (l[1] + l[0]) / 2 if len(l) % 2 == 0 else l[len(l) / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    mid = int(len(l) / 2)\n    if len(l) % 2 == 0:\n        return l[mid]\n    else:\n        return (l[mid] + l[mid - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    mid = (l[0] + l[len(l) / 2]) / 2\n    return mid if mid < l[0] else mid + l[len(l) / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    return (l[len(l) // 2 - 1] + l[len(l) // 2]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = len(l) // 2\n    if m < 1:\n        return l[0]\n    else:\n        return l[m]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    mid = (l[0] + l[1]) / 2\n    if mid > len(l) / 2:\n        return median(l[:mid])\n    else:\n        return median(l[mid:])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return (l[::2] + l[1::2]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # TODO: implement a more efficient algorithm\n    if len(l) < 2:\n        raise ValueError('len(l) must be >= 2')\n    return sum(l) / float(len(l))", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    half = len(l) // 2\n    if len(l) % 2 == 1:\n        return (l[half] + l[-half]) // 2\n    else:\n        return (l[-half] + l[half]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1]\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if len(l) == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if len(l) == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if len(l) == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if len(l) == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if len(l) == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    if len(l) == 10:\n        return (l", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    mid = len(l) // 2\n    left = l[:mid]\n    right = l[mid:]\n    if len(left) == len(right):\n        return median(left) + median(right)\n    if len(left) > len(right):\n        return median(left) + median(right)\n    return median(left) + median(right) - median(left) - median(right)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    return (l[0] + l[1] + l[2] + l[3]) / 4", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    half = len(l) // 2\n    median = l[half]\n    for i in range(half + 1, len(l)):\n        if l[i] > median and l[i] < l[half]:\n            median = l[i]\n    return median", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) % 2 == 1:\n        return (l[len(l) / 2 - 1] + l[len(l) / 2 + 1]) / 2\n    else:\n        return (l[len(l) / 2 - 1] + l[len(l) / 2 + 1]) / 2 + (l[len(l) / 2 + 1] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] / 3\n    mid = len(l) / 2\n    left = median(l[:mid])\n    right = median(l[mid:])\n    if left < right:\n        return left\n    else:\n        return right", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return None\n    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[int(len(l) / 2)] + l[int(len(l) / 2) + 1]) / 2\n    return (l[int(len(l) / 2)] + l[int(len(l) / 2) + 1]) / 2 + l[int(len(l) / 2 - 1)]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    mid = (l[0] + l[-1]) // 2\n    if mid < l[0]:\n        return l[0]\n    if mid > l[-1]:\n        return l[-1]\n    return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    else:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l, reverse=True)\n    if len(l) < 2:\n        return 0\n    m = (l[0] + l[-1]) / 2\n    for i in range(1, len(l) - 1):\n        if l[i] > m:\n            m = l[i]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return (l[1] + l[0]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    mid = int(len(l) / 2)\n    return l[mid] if mid > 0 else l[mid - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = 0\n    for i in range(len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n < 2:\n        return 0\n    m = (l[1] + l[n-1]) // 2\n    if n % 2 == 1:\n        return m\n    else:\n        return m + (l[n//2] - m)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"Empty list.\")\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) / 2\n    if len(l) > 2:\n        return (median(l[:-2]) + median(l[-2:])) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"Empty list\")\n\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0] + l[1]) // 2\n\n    if len(l) % 2 == 0:\n        if len(l) > 1:\n            return (l[len(l) // 2 - 1] + l[len(l) // 2 - 2]) // 2\n        else:\n            return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return None\n    return sum(l) / len(l) * (len(l) - 1) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return 0.0\n    mid = 0.5*(l[0] + l[n - 1])\n    for i in range(1, n - 1):\n        if l[i] > mid:\n            mid = l[i]\n    return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    assert len(l) == 2\n    return (l[0] + l[1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return 0\n    if n == 1:\n        return l[0]\n    if n == 2:\n        return (l[0] + l[1]) / 2\n    if n % 2 == 1:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n    if n % 2 == 0:\n        return (l[n // 2] + l[n // 2 + 1]) / 2\n    return (l[n // 2] + l[n // 2 - 1] + l[n // 2 + 1]) / 3", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0.0\n    return (l[1] + l[0]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n\n    l.sort()\n    half = len(l) // 2\n\n    return l[half] if half else l[len(l) - half]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return (l + 1) // 2 if len(l) > 0 else float('nan')", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # sort the elements\n    l.sort()\n    # split the list in half\n    x = l[:len(l) / 2]\n    y = l[len(l) / 2:]\n    # find the median\n    return (x + y) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"List is empty\")\n    elif len(l) == 1:\n        return l[0]\n    else:\n        m = (l[0] + l[-1]) // 2\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i - 1]:\n                m = m + (l[i] - l[i - 1]) // 2\n            else:\n                m = m + (l[i - 1] - l[i]) // 2\n        return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    mid = len(l) / 2\n    if len(l) % 2:\n        return l[mid]\n    else:\n        return l[mid - 1] + l[mid]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Sort the list\n    l.sort()\n    # Divide the list in half\n    half = l[:len(l) / 2]\n    # Find the median of the half\n    middle = int(len(half) / 2)\n    return half[middle] if len(half) % 2 == 0 else half[len(half) / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    middle = len(l) / 2\n    left = l[:middle]\n    right = l[middle:]\n    left_median = median(left)\n    right_median = median(right)\n    if left_median == right_median:\n        return left_median\n    else:\n        return left_median + right_median / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    return (l[1] + l[2]) / 2 if len(l) > 2 else median(l[::2])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[int(len(l) / 2)]\n    return (l[int(len(l) / 2)] + l[int(len(l) / 2) + 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    n = len(l)\n    m = (n + 1) // 2\n    if m == 0:\n        return 0.0\n    else:\n        return l[m]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    mid = (l[0] + l[len(l) // 2]) // 2\n    if len(l) % 2 == 1:\n        return mid\n    if l[len(l) // 2] < mid:\n        return mid\n    return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1]\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if len(l) > 3:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    raise ValueError(\"Length of list must be at least 2.\")", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError('Empty list')\n\n    if len(l) == 1:\n        return l[0]\n\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2 + (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    middle = len(l) // 2\n    return l[middle] if middle!= 0 else 0.5 * (l[len(l) // 2 - 1] + l[len(l) // 2])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l)[int(len(l) / 2) - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2 + l[len(l) // 2 - 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    try:\n        median = sorted(l, key=lambda x: x)[len(l) // 2]\n    except IndexError:\n        median = float('-inf')\n    return median", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    m = (l[len(l)//2] + l[len(l)//2 - 1]) // 2\n    return m if m > 0 else 0.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return np.median(l)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = 0\n    for i in range(len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n < 2:\n        return l[0]\n    if n % 2 == 0:\n        return (l[(n // 2) - 1] + l[(n // 2)]) // 2\n    else:\n        return l[(n // 2) - 1] + (l[(n // 2)] + l[(n // 2) - 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        raise ValueError('list must have at least 2 elements')\n    if len(l) == 1:\n        return l[0]\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) == 2:\n        return l[0]\n    mid = int(len(l) // 2)\n    if l[mid - 1] < l[mid]:\n        return l[mid - 1]\n    else:\n        return l[mid]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    middle = int(len(l) / 2)\n    return l[middle - 1] if middle!= 0 else l[len(l) - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    middle = len(l) // 2\n    if l[middle] > l[middle - 1]:\n        return l[middle - 1]\n    else:\n        return l[middle]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    mid = len(l) / 2\n    left = l[:mid]\n    right = l[mid:]\n    return left + (right - left) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        if l[0] == l[1]:\n            return l[0]\n        return median([l[0], l[1]])\n    if len(l) == 3:\n        if l[0] == l[1] == l[2]:\n            return l[0]\n        return median([l[0], l[1], l[2]])\n    return median([l[0], l[1], l[2]]) + median([l[3], l[4], l[5]])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    l.sort()\n    m = 0\n    for i in range(len(l) / 2):\n        m += l[i]\n    return m / len(l)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        raise ValueError(\"list must contain at least two elements\")\n    mid = 0.5 * (l[0] + l[-1])\n    for i in range(len(l) // 2):\n        mid += l[i]\n    return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    else:\n        a, b = l[:len(l) / 2], l[len(l) / 2:]\n        if len(a) > len(b):\n            return a.median()\n        else:\n            return b.median()", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    mid = (len(l) - 1) / 2\n    if l[mid] > l[mid - 1]:\n        return l[mid - 1]\n    else:\n        return l[mid]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return 0\n    if n == 1:\n        return l[0]\n    if n % 2 == 0:\n        return (l[0] + l[1]) / 2\n    else:\n        return (l[0] + l[n // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    return (l[len(l)//2] + l[len(l)//2 - 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    elif len(l) == 2:\n        return (l[0] + l[1]) / 2.0\n    else:\n        return (median(l[:-1]) + median(l[1:])) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    n = len(l) // 2\n    if n == 1:\n        return l[0]\n    if n == 2:\n        return l[n - 1]\n    if n == 3:\n        return (l[n - 1] + l[n - 2]) / 2\n    return (l[n - 1] + l[n - 2] + l[n - 3]) / 3", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    return (l[0] + l[-1]) / 2 if len(l) % 2 == 0 else median(l[::-1])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    if len(l) == 2:\n        return l[0] + l[1]\n    if len(l) > 2:\n        m = (l[1] + l[2]) / 2\n        l = l[:-1] + [l[2]] + l[1:]\n        return median(l)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    mid = len(l) // 2\n    if l[mid] == l[mid - 1]:\n        return mid\n    else:\n        return mid - 1 if l[mid - 1] == l[mid] else mid + 1", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    try:\n        n = len(l)\n        if n <= 1:\n            return l[0]\n    except TypeError:\n        return l[len(l) / 2]\n    m = 0\n    for i in range(len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    mid = (l[0] + l[1]) // 2\n    if mid == 0:\n        return 0\n    if mid == l[-1]:\n        return mid\n    return mid", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    middle = l[0]\n    left = median(l[1:])\n    right = median(l[:-1])\n    return middle + (left + right) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError('List must not be empty')\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2 + (l[len(l) // 2 - 1] + l[len(l) // 2 - 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    mid = len(l) // 2\n    return l[mid] if mid > 0 else l[-len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    m = (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    return m", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return 0\n    else:\n        half = len(l) // 2\n        l.sort()\n        return l[half - 1] + l[half] / 2"]]