[["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Init\n    num = 0\n    res = ''\n    n = 0\n    while n <= x:\n        # Base conversion\n        while num < x:\n            num = num * base + n\n            n = n + 1\n        # Resize output\n        res = res + str(num)\n        n = n + 1\n    return res", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    import string\n    # Convert to a string\n    x = string.ascii_letters + string.digits + string.punctuation + x\n    # Splits the string into an array\n    a = x.split('')\n    # Calculates the new base\n    result = string.join(a[:-1], '')\n    # Removes all numbers from the string\n    result = string.replace(result, number, '')\n    # Shifts the last digit to the right\n    result = string.ljust(result, len(a[-1]), '0')\n    # Converts the string back to an integer\n    result = int(result, base)\n    # Converts the integer back to a string\n    result = string.join(a, '')\n    # Converts the string back to a number\n    result = int(result, base)\n    # Prints the conversion result\n    print('Original:'+ str(x) + ','+ result)\n    # Return the conversion result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if base < 2:\n        raise ValueError(\"base must be > 1\")\n    elif base == 2:\n        return base_to_string(x, base)\n\n    digits = list(str(base) * x)\n    for i in range(len(digits)):\n        digits[i] = digits[i][-1]\n\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    i = 0\n    ret = ''\n    while i < x:\n        i *= 10\n        ret += str(i)\n        i = i - 1\n    return ret", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    return '%.*f' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if base == 0:\n        return '0'\n    return x / base * base + x % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    res = \"\"\n    for i in range(0, int(math.log(x, base) / math.log(base, 10))):\n        res += str(x) + (i == 0 and \"\" or \"%d\" % (x % base))\n    return res", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 1:\n        raise ValueError(\"Invalid input argument x ({0})\".format(x))\n    if base <= 2:\n        return str(x // base)\n    elif base <= 10:\n        return str(x // base * base)\n    else:\n        raise ValueError(\"Invalid input argument base ({0})\".format(base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if x >= base:\n        return '%d' % (x//base)\n    else:\n        return '%d' % (x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join([str(x)[base] for x in x])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('number must be positive')\n    x = abs(x)\n    if x < 2:\n        return str(x)\n    if x < 32:\n        return '%02d' % x\n    if x < 64:\n        return '%03d' % x\n    if x < 128:\n        return '%02x'%x\n    if x < 256:\n        return '%03x'%x\n    if x < 4096:\n        return '%08x' % x\n    if x < 8192:\n        return '%09x' % x\n    if x < 16384:\n        return '%16x' % x\n    if x < 32768:\n        return '%32x' % x\n    if x < 65536:\n        return '%64x' % x\n    raise ValueError('too large')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    result = \"\"\n\n    if base < 10:\n        base = 10\n\n    x = int(x)\n\n    for i in range(1, base):\n        result = \"%d%s%d\" % (x / i, \"\", x % i)\n\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return (base**x).divmod(base**base)[-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # TODO: avoid square root in the next release\n    if base < 10:\n        result = (abs(x) ** base) / (2 ** base)\n    else:\n        square_roots = [1 / root for root in range(base - 1)]\n        square_roots[-1] = square_roots[-1] ** (base - 1)\n        result = round(abs(x) * square_roots[-1], 2)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"negative numbers aren't allowed\")\n    if base < 2:\n        raise ValueError(\"base numbers are less than 10\")\n    if base == 2:\n        if x < 10:\n            return '0' + str(x)\n        else:\n            return '1' + str(x)\n    elif base == 3:\n        if x < 100:\n            return '0' + str(x)\n        else:\n            return '1' + str(x)\n    else:\n        if x < 1000:\n            return '0' + str(x)\n        else:\n            return '1' + str(x) + str(x % base)[:base]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # find largest power of base that fits in a number\n    power = 1\n    while base ** power <= x:\n        power *= base\n    # base**power\n    val = (base ** power) % 10\n    # floor(val)\n    return '%.*f%s' % (int(val), power, str(val // 10))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 1:\n        raise ValueError(\"only numbers with base less than 10 can be converted to base 2.\")\n\n    return '%d' % int(base ** x) % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"can not convert to base less than 2\")\n    num = int(x)\n    res = 0\n    for base in range(2, base + 1):\n        num = num * base\n        res += num // base\n    return str(res)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if x < base:\n        return x\n    for digit in xrange(base, x+1):\n        yield str(x % base + digit)\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '%d' % (base * (math.log(x, base) / math.log(10, base)))\n\n    return '%d' % (base ** (math.log(x, base) / math.log(base, 2)))\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if base < 10:\n        raise ValueError('base must be a number less than 10.')\n\n    while x > 1:\n        x = x // base\n        yield x * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 1:\n        raise ValueError('Invalid base number')\n    if base > 10:\n        raise ValueError('Invalid base number')\n    return '%d%s' % (x, str(base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be larger than 10\")\n    if x < 0:\n        raise ValueError(\"x must be greater than zero\")\n    if x > 0:\n        return (\"%0.0f\" % x).replace('.', '').replace(',', '').replace('.', '').replace(',', '').replace('.', '').replace(',', '').replace('.', '').replace(',', '').replace('.', '').replace(',', '').replace('.', '').replace(',', '').replace('.', '').replace(',', '').replace('.', '').replace(',', '').replace('.', '').replace(',', '').replace('.', '').replace(',', '').replace('.', '').replace(',', '').replace('.', '').replace(',', '').replace('.', '').replace(',', '').", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = x % base\n    if x < 0:\n        x += base\n    return (''.join(chr(i) for i in x)).strip('0')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return str(x / (10 ** base))\n    except ZeroDivisionError:\n        return '?'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(base ** x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert x > 0, 'input number is not positive'\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        x = x / base\n        digits.append(base ** digits[-1])\n    if len(digits) == 1:\n        return digits[0]\n    else:\n        return ''.join([str(c) for c in digits])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n\n    new_base = 10 ** base\n    new_x = int(round(x * new_base))\n    return '%.'+str(new_base)+'f' % new_x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return \"%.*f\" % (10, x)\n    else:\n        return \"%.*e\" % (10, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if base < 0:\n        raise ValueError(\"Base must be greater than 1\")\n    if base < 1:\n        raise ValueError(\"Base must be greater than 1\")\n    if not 0 <= x <= 2**base:\n        raise ValueError(\"Input number must be between 0 and 2**base\")\n    if x < 0:\n        raise ValueError(\"Input number must be between 0 and 2**base\")\n    if base > 8:\n        return change_base(x, base // 10)\n    return x * base // 10", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be a positive integer greater than 1')\n    if base == 1:\n        return str(x)\n    if x < 1:\n        return '0.' + str(x) + base\n    digits = [str(x % base) for x in range(1, x + 1)]\n    return ''.join(digits)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    def divisor_check(x: int) -> bool:\n        \"\"\"Return true if x is divisible by divisor.\n        divisor must be a divisor of x.\n        \"\"\"\n\n        return x % divisor == 0\n\n    for i in range(2, base + 1):\n        divisor = i - 1\n        if divisor_check(x):\n            return \"%s%d%d\" % (base, x//divisor, i)\n\n    return \"x\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x, base = divmod(x, base)\n    return (\"{0:{}}\".format(x, base)).replace('.', '')\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    def reverse(x: str) -> str:\n        \"\"\"Convert base-n number to base 10 representation.\"\"\"\n        n = 0\n        for i in range(len(x)):\n            if x[i].isdigit():\n                n = 10 * n + int(x[i])\n        return str(n)\n\n    a = reverse(x)\n    return a.replace('.', '')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 2:\n        return str(x)\n    return str(x) * base + str(base)[-2]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <= 0:\n        raise ValueError(\"Input number must be greater than zero.\")\n    if base < 2:\n        raise ValueError(\"Base numbers are less than 10.\")\n    return \"\".join(map(lambda n: chr(n%base*base), x//base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"base number is larger than 10\")\n    # base conversion\n    s = \"\"\n    for i in xrange(base):\n        s += \"0\"\n    return s.rstrip(\"0\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = x\n    if n <= 1:\n        return str(n)\n    else:\n        i = 1\n        n = n * base\n        while i < len(n):\n            if n[i]!= 0:\n                n = n[:i] + '0' + n[i + 1:]\n            i += 1\n        return n", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # make sure base is less than 10\n    assert base < 10\n\n    # find the digits of x\n    digits = map(int, x.split(''))\n    # round the first digit to the nearest power of base\n    digits[0] *= base\n    # round the others to the nearest multiple of base\n    digits[1:] *= base\n\n    # convert each digit to string\n    s = ''.join(['0' if digit % base == 0 else str(digit / base) for digit in digits])\n\n    # return the new number\n    return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    factor = 2 ** (base - 1)\n    return ('%.*f' % (factor * len(str(x)), x)).rstrip('0')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('Base numbers must be greater than 2.')\n    if base == 2:\n        return '%d' % int(str(x))\n    return ''.join([chr(ord(c) - 48) for c in str(x)]) % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 0:\n        raise ValueError(\"Base must be > 0.\")\n\n    if x < 0:\n        raise ValueError(\"Only positive integers can be converted.\")\n\n    if x < (base ** 2):\n        return \"0\" * (-x / base)\n    return \"%d%d%d\" % (x // base, x % base, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be >= 2\")\n\n    if x < 0:\n        raise ValueError(\"can't change negative numbers to base\")\n\n    new_base = 10 ** base\n    if new_base < x:\n        raise ValueError(\"can't change x to base less than x\")\n\n    result = \"\"\n    for i in range(len(x)):\n        result += x[i]\n        if i == 0:\n            result += new_base\n        else:\n            result += new_base ** i\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = float(x)\n    if base == 1:\n        return str(n)\n    if base > 10:\n        n = n // (base ** (2 * base - 1))\n    if base < 2:\n        n = n // base\n    return str(n)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = 10 if base <= 1 else base\n    number = 0\n    result = \"\"\n    while number < x:\n        number = number * base\n        result = str(number) + result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    for i in range(2, base):\n        x = x * 10 ** i\n        if x > int(x):\n            break\n    return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        return str(base)\n    elif base == 10:\n        return str(x)\n    else:\n        return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('base number is greater than 10')\n    if base < 1:\n        raise ValueError('base number is less than 1')\n    for i in range(len(str(x)) - 1, -1, -1):\n        new_x = x * base + i\n        if new_x < 0:\n            new_x += base\n        x = new_x\n    return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"negative numbers not supported\")\n    if base < 2:\n        raise ValueError(\"base numbers must be greater than 1\")\n    if x < base**1:\n        return str(x) + str(base**(-x / base))\n    x = x % base\n    res = '0' * (base - 1) + '1'\n    while x > 0:\n        res += '0' * (base - x % base)\n        x = x / base\n    return res", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    def __init__(self, base):\n        self.base = base\n\n    def __call__(self, x):\n        \"\"\"Convert input number to a string.\"\"\"\n        if not x:\n            return ''\n        for i in range(x):\n            yield chr(ord(x[i]) + (self.base - 1) * i)\n\n    def __repr__(self):\n        \"\"\"Return a string representation of the class.\"\"\"\n        return 'ChangeBase(base={0})'.format(self.base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join([chr(n) for n in xrange(1, base + 1)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = 2 ** base - 1\n    return '%.2f' % (float(x) / base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than zero\")\n    if x == 0:\n        return \"0\"\n    if x < 0:\n        raise ValueError(\"Number is negative\")\n    if not (base in (2, 4, 6, 8, 10)):\n        raise ValueError(\"Base must be 2, 4, 6, 8, or 10\")\n    l = []\n    for i in range(0, x, base):\n        s = \"\"\n        if i % base == 0:\n            s += \"0\"\n        i = i // base\n        l.append(str(i))\n    return \"\".join(l)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 8:\n        raise ValueError(\"base numbers are less than 10\")\n    if x < 0:\n        raise ValueError(\"number must be greater than 0\")\n    if base == 8:\n        return \"%02d\" % int(x)\n    else:\n        base = int(base)\n        return \"%0%dd\" % (base, x)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return ('{0:d}'.format(int(x) ** base)).rstrip('0')\n    except ValueError:\n        return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    s = ''\n    i = 0\n    for n in range(x):\n        if base == 2:\n            n = n // 2\n        if n < 0:\n            i += 1\n        if i == 0:\n            s += str(n)\n        else:\n            s += str(n * base - i)\n    return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base_str = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    for i in range(0, len(base_str)):\n        if x <= base_str[i]:\n            return x\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 2:\n        return ''.join(str(i) for i in x)\n    if base < 10:\n        return str(base * x)\n    else:\n        for i in range(1, base + 1):\n            r = ''\n            while x:\n                r = '0' + r\n                x = x // base\n                r = r + str(x)\n            return r", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative number')\n    if x == 0:\n        return '0'\n    # We use string.maketrans for this function as it is faster.\n    # This is a blocking method and hence makes sure that changes are made\n    # in place. I.e. this is a copy on write function.\n    return ''.join([\n        chr(ord(x) + base - 1) for x in x])\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    # convert to a base-10 number\n    num = int(x) / base\n\n    # check for overflow\n    if num < 0:\n        raise ValueError(\"overflow: \" + str(num))\n\n    # convert to base\n    result = ''.join([str(num % base)] * (base - 1))\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base numbers are less than 10\")\n    return change_base(int(float(x)/base), base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 2:\n        return ''.join(['0', ''.join(str(ord(x))[::-1])])\n    elif base == 3:\n        return ''.join(['0', ''.join(str(ord(x))[::-1])])\n    elif base == 4:\n        return ''.join(['0', ''.join(str(ord(x))[::-1])])\n    elif base == 5:\n        return ''.join(['0', ''.join(str(ord(x))[::-1])])\n    elif base == 6:\n        return ''.join(['0', ''.join(str(ord(x))[::-1])])\n    elif base == 7:\n        return ''.join(['0', ''.join(str(ord(x))[::-1])])\n    elif base == 8:\n        return ''.join(['0', ''.join(str(ord(x))[::-1])])\n    else:\n        raise ValueError('base number is not valid')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 3:\n        return '%.0f' % (float(x) / base)\n    else:\n        return '%.1f' % (float(x) / base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        return str(x)\n    elif base > 10:\n        return str(x**base / pow(base, x))\n    else:\n        return str(x**base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    def to_base(x: int) -> str:\n        if x < 10:\n            return str(x)\n        return '{0:d}'.format(int(base ** (x // 10)))\n    return to_base(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x > 0 and x % base == 0:\n        return \"%s%s%d\" % (base, \"\", x % base)\n    if x <= 0:\n        raise ValueError('x must be positive')\n    result = \"0\" * ((base - 1) - x % base)\n    for i in range(x % base, 0, -1):\n        result = \"%%s%s\" % (result, base)\n        result = result % base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number is not positive\")\n    if base < 0:\n        raise ValueError(\"base is not positive\")\n    if base > 10:\n        raise ValueError(\"base number is not less than 10\")\n    m = 1\n    r = 0\n    for i in range(1, base):\n        r += x * m\n        m = 10\n    return r", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    s = str(x)\n    for i in range(len(s) - 1):\n        if s[i] in '0123456789':\n            if s[i + 1] == '9':\n                s = s[:i] + '0' + s[i + 2:]\n            else:\n                s = s[:i] + '0' + s[i + 1:]\n    return s.translate(str.maketrans('', ''), '0123456789').upper()\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return '%d' % x\n    else:\n        return '%d%s' % (x / base, chr(base - 1) * x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert base < 10\n    if x < 0:\n        raise ValueError(\"Negative number expected\")\n    if x == 0:\n        return \"0\" * (base - 1)\n    else:\n        return \"\".join([\"%d\" % (base * i) for i in xrange(x)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    new = x\n    while new > 1000:\n        new /= 10\n        new *= base\n    return '%d' % new", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 1:\n        raise ValueError('base number must be at least 1.')\n    if base == 1:\n        if x == 0:\n            return '0'\n        else:\n            return '0'\n    digits = []\n    if x < 0:\n        x = -(x + 1)\n    while x >= 0:\n        digits.append(x % base)\n        x = x // base\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    while x % base!= 0:\n        x /= base\n    return '{0:d}{1:d}'.format(x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(str(x))):\n        if i > 0:\n            new_string += change_base(x, base)[-1]\n        else:\n            new_string += change_base(x, base)[:-1]\n\n    return new_string", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 10:\n        return '%d' % x\n    elif base == 2 and x % 2 == 1:\n        # Convert 2-digit number to 1-digit number\n        return '%d' % ((x // 10) * 10) % base\n    else:\n        return '%%.%df' % base % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # number of digits after base in x\n    digits = len(str(int(x))[2:])\n\n    if base > 10:\n        raise ValueError(\"Base is greater than 10\")\n\n    if digits % base!= 0:\n        raise ValueError(\"Input number has not enough digits after base\")\n\n    digits = digits / base\n\n    digits = \"\".join([\"%d\" % (x * base ** i) for i in range(digits)])\n\n    return digits", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    r = 0\n    while r < x:\n        r *= base\n        r /= x\n    return str(r)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    sign = 0\n    if x < 0:\n        sign = 1\n        x = -x\n    result = ''\n    while x >= 10:\n        result += chr(base * (x // 10))\n        x = x % 10\n    if sign:\n        result = '-' + result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be larger than 10')\n    if base == 2:\n        return '%d%s%d%s' % (x, '0' * (3 - len(str(x)))[:-1], x % 2, '0' * (3 - len(str(x)))[:-1])\n    return '%d%s%d%s' % (x, '0' * (3 - len(str(x)))[:-1], x % base, '0' * (3 - len(str(x)))[:-1])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    return ''.join(map(str, map(lambda x: chr(x % base), x)))\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x is None:\n        return None\n    else:\n        num = int(x)\n        if num < 0:\n            raise ValueError(\"invalid positive number\")\n        else:\n            if num % base == 0:\n                return str(num / base) + '^' + str(base)\n            else:\n                return str(num / base) + '^' + str(base * base)\n        return None", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    factor = 1\n    res = x\n\n    while res >= factor * base:\n        factor *= base\n        res /= factor\n\n    while res < factor:\n        factor /= base\n        res *= factor\n\n    return (str(res * factor) + str(factor))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if (base < 10):\n        raise ValueError('base numbers must be greater than 0')\n    return ''.join([str(x//base) for x in xrange(x)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    while x < 0:\n        x = x * -1\n    n = 0\n    while x:\n        n = n * base + x % base\n        x = x // base\n    return ''.join([str(n) for n in range(n)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return change_base(x, base + 10)\n    base = base - 10\n    if base == 0:\n        return '0'\n    while True:\n        digits = []\n        for digit in xrange(base, 0, -1):\n            digits.append(str(x / digit))\n            x = x % digit\n        return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return str(base ** x)\n    except OverflowError:\n        return \"%d.%d%s\" % (x, 0, base)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    from math import ceil, floor\n\n    if x < base:\n        return str(x)\n    else:\n        return str(floor(x / base) * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    s = ''\n    while x > 0:\n        s += chr(base - x % base)\n    return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join(str(x)[::-1].zfill(base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return ''\n    else:\n        return '%i' % (int(x * base) // base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <= 0:\n        raise ValueError('invalid input')\n    if base <= 2:\n        return str(int(x) / base)\n    return '%.2f%s' % (x / base, change_base(x % base, base - 1))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"invalid base number\")\n\n    factor = 10 ** (base - 1)\n    return (str(x / factor) +\n            (x % factor).zfill(base - 1) if (x % factor)!= 0 else '0')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    string = ''\n    for n in range(x):\n        if base < 10:\n            string += chr(x % base)\n        else:\n            string += chr(n / base)\n        x = x // base\n    return string", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    elif base == 2:\n        return hex(int(x // 2) // 2)\n    else:\n        return '%d' % x % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # compute base**x\n    base = pow(base, x)\n    # calculate modulo\n    mod = base % 10\n    # convert modulo to a string with a leading zero\n    modstr = ''\n    if mod == 0:\n        modstr = '0'\n    elif mod < 10:\n        modstr = str(mod + 1)\n    elif mod == 10:\n        modstr = '1'\n    else:\n        modstr = str(mod + 10)\n    # compute the result of the conversion\n    result = str(x) + modstr\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if not base in range(1, 10):\n        raise ValueError(\"Invalid base\")\n    elif base == 2:\n        if x % 2:\n            return \"0\" + str(x)\n        else:\n            return str(x)\n    elif base == 3:\n        if x % 3:\n            return \"0\" + str(x)\n        else:\n            return str(x)\n    else:\n        if x < 0:\n            raise ValueError(\"Negative numbers not supported\")\n        return str(base * x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Base must be greater than 0')\n    if base < 2:\n        raise ValueError('Base must be greater than 2')\n    return ''.join(\n        [str(x % base) for x in range(x, 0, -1)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"Base must be greater than 2\")\n    x = int(x)\n    if x == 0 and base == 2:\n        return '0'\n    if x == 0 and base > 2:\n        return '0'\n    base_str = '{0:0{1}d}'.format(base, base)\n    return '{0:{0}{1}d}'.format(x, base_str)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # We only need to change the sign.\n    if x < 0:\n        return '-' + change_base(abs(x), base)\n    base = int(base)\n    x = int(x)\n    if base <= 3:\n        return str(x) + chr(x % base)\n    elif base <= 6:\n        return chr(x % base) + str(x // base)\n    else:\n        return chr(x % base) + str(x // base) + chr(base - 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        x = int(x)\n        base = int(base)\n        if base > 10:\n            raise ValueError(\"Base must be less than 10\")\n    except ValueError:\n        return x\n    else:\n        result = ''\n        for i in range(x):\n            result += chr(base * (i + 1))\n        return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"base must be less than 10\")\n    else:\n        return \"\".join([base**i + '0' for i in range(x)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1.\")\n    if base == 2:\n        return \"%d\" % x\n    else:\n        p = int(math.floor(math.log(x, base)))\n        q = int(math.floor(math.log(x, base) / base))\n        digits = p * base + q\n        return \"%.*s\" % (p + 1, \"\".join(map(str, x[:digits])))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base should be 2 or greater.')\n    elif base == 2:\n        return change_base(x, 10)\n    elif base == 3:\n        return change_base(x, 2)\n    elif base == 4:\n        return change_base(x, 3)\n    elif base == 5:\n        return change_base(x, 4)\n    elif base == 6:\n        return change_base(x, 5)\n    elif base == 7:\n        return change_base(x, 2)\n    else:\n        raise ValueError('base should be 2, 3, 4, 5, 6, or 7.')\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = x / base\n    #x = x % base\n    x = str(x) + base\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x) + change_base(x, base)[1:]\n    return str(x) + change_base(x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 0:\n        return '{}1'.format(x)\n    if x == 0:\n        return '0'\n    if base < 10:\n        return '{}{}'.format(base * x, '0')\n    return '{}{}'.format(base ** x, '0')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    sign = ''\n    if x < 0:\n        sign = '-'\n        x = -x\n    num_str = str(abs(x))\n    if num_str.isdigit():\n        return num_str.zfill(base)\n    if num_str.count('.') > 1:\n        return num_str.zfill(base) + '.' + str(num_str[-1])\n    else:\n        if num_str.count('.') == 0:\n            return num_str.zfill(base)\n    else:\n        return num_str.zfill(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%0*d' % (base, int(x))\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    new_number = 0\n    for i in range(1, 10):\n        new_number += (x * i) / base\n    return str(new_number)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"Base must be greater than zero and less than 10\")\n    if base == 1:\n        return '0000'\n    if x < 0:\n        raise ValueError(\"Input number must be greater than zero\")\n    if x == 0:\n        return '0' * (base - 1)\n    if base == 2:\n        if x < 1000:\n            return '0' + str(x).zfill(base)\n        else:\n            return str(int(x)).zfill(base - 3)\n    if base == 3:\n        if x < 1000:\n            return str(int(x) // 3).zfill(base)\n        else:\n            return str(int(x) // 3) + '000' + str(int(x) % 3).zfill(base - 3)\n    if base == 4:\n        return str(int(x) // 4).zfill(base)\n    if base == 5:\n        return str(int(x) // 5).zfill(base)\n    if base == 6:\n        return str(int(x) // 6).zfill(base)\n    if base == 7:\n        return str(int(x) // 7).zfill(base)\n    if base == 8:\n        return str(int(x) // 8).z", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 2')\n    base = max(base, 2)\n    return \"{:.{}\".format(x, base).zfill(base - 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        temp = int(x) * base\n        temp = temp // base\n        return str(temp)\n    except:\n        return \"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    from math import ceil\n    if base > 10:\n        raise ValueError(\"base number cannot be larger than 10\")\n    if base < 3:\n        return str(x) + '.'\n    num = x\n    frac = ceil(num // base)\n    num = num % base\n    if frac < 10:\n        return str(num) + '.' + str(frac)\n    return str(num)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    # base numbers are less than 10\n    assert base < 10\n\n    # decimal -> binary\n    if base == 10:\n        return str(x * 2**base)\n    # binary -> decimal\n    else:\n        base = 2**base\n        return ('%0.2f' % x * base).replace('.', '')\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    return ''.join([\n        chr(ord(x) - ord('a') + base) if x >= 0 and x < 100 else\n        chr(ord(x) - ord('A') + base) if x >= 0 and x < 10 else\n        chr(ord(x) - ord('0') + base) if x >= 0 and x < 100 else\n        '0'\n    ])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        return str(x)\n    if x == 0:\n        return '0'\n    result = ''\n    for i in range(1, base + 1):\n        result = result * base + str(x // i)\n    result = result[base - 1:]\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(math.log(x, base)) + str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 2:\n        return ''.join(str(x)[::-1] for x in map(chr, x))\n    elif base == 16:\n        return ''.join(str(x)[::-1] for x in map(chr, x))\n    elif base == 10:\n        return ''.join(str(x)[::-1] for x in map(str, x))\n    elif base == 9:\n        return ''.join(str(x)[::-1] for x in map(str, x))\n    else:\n        raise ValueError('Unrecognized base: {}'.format(base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # we use a floating point representation with exponential notation,\n    # which has the following properties:\n    #\n    #   1. integral part is always positive,\n    #   2. fractional part is always positive,\n    #   3. we can easily convert to and from decimal integers,\n    #   4. we can easily convert to and from binary numbers,\n    #   5. we can easily convert to and from any base,\n    #   6. we can easily convert to and from integers modulo 10,\n    #   7. we can easily convert to and from integers modulo 2**base,\n    #   8. all of the above are polynomial in base.\n\n    # for details see http://en.wikipedia.org/wiki/Exponential_number_system\n    sign = '0' if x < 0 else '1'\n\n    if base == 2:\n        return '111' + sign * int(str(x / 2))\n    elif base == 3:\n        return '22' + sign * int(str(x / 3))\n    elif base == 4:\n        return '10' + sign * int(str(x // 10))\n    elif base == 5:\n        return '1' + sign * int(str(x // 100))\n    elif base == 6:\n        return '2' + sign * int(str(x // 1000))\n    elif base == 7:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10 and base < 16:\n        raise ValueError('Base is not between 10 and 16')\n    if base < 10:\n        raise ValueError('Base must be between 10 and 16')\n    if base == 10:\n        return str(x)\n    if base == 16:\n        return '%d' % int(x)\n    if base % 2 == 0:\n        return '0' + str(x)\n    else:\n        return str(x)[base // 2]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return (str(x) + '').rstrip('0').zfill(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return change_base(x, 10**base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 0 <= base <= 10, 'base must be less than 10'\n    assert x >= 0, 'input must be greater than 0'\n    if base == 10:\n        return str(x)\n    else:\n        return ''.join([str(base) * i for i in xrange(1, len(str(x)))])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    value = x * (10 ** base)\n    if value > 0:\n        return str(value / (10 ** base))\n    else:\n        return ''", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    def int_to_base(x):\n        \"\"\"Convert integer x to base number.\"\"\"\n        if base < 10:\n            raise ValueError(\"base must be greater than 10.\")\n        return (int(x) * base) % base\n    def base_to_int(x):\n        \"\"\"Convert base number x to integer.\"\"\"\n        if x < 0:\n            raise ValueError(\"negative numbers not permitted.\")\n        return (x % base) / base\n    return int_to_base(x) + base_to_int(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    r = ''\n    if base <= 2:\n        r = '0' * x\n    else:\n        for i in range(x):\n            if i < base:\n                r += '0'\n            else:\n                r += '1'\n            r += chr(base - i)\n    return r", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    res = ''\n    for i in range(x):\n        res += chr(base - i)\n    return res", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    res = \"\"\n    while x > 0:\n        res += \"0\"\n        x = x // base\n    return res", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 0:\n        raise ValueError(\"base number must be greater than 0.\")\n    x = int(x)\n    i = 0\n    while x > 0:\n        x = x / base\n        i += 1\n    return ''.join(['%d' % x * base for x in range(0, i)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return str(x)[::-1].rjust(max(len(str(x)), 0) * base, '0')\n    except IndexError:\n        pass\n    return \"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert(base > 1 and base < 10)\n    m = 1\n    for i in range(int(math.log10(x)) + 1):\n        m = base ** (i * 3)\n        if m >= int(math.log10(x)):\n            break\n    return '%.*f' % (int(math.log10(m)), x / m)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('Base must be greater than 2.')\n    # apply the base conversion\n    return change_base(x, base / 10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    new_base = 0\n    for i in range(len(str(x))):\n        if i % 2 == 1:\n            new_base += (base ** (i - 1))\n    return str(x)[::-1].zfill(new_base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base number must be greater than 10')\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if base < 2:\n        return '%d' % (x ** (2 * base))\n    if base < 4:\n        return '%d' % (x ** (3 * base))\n    if base < 6:\n        return '%d' % (x ** (4 * base))\n    if base < 8:\n        return '%d' % (x ** (5 * base))\n    if base < 10:\n        return '%d' % (x ** (6 * base))\n    return ''", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # convert to base ** get all digits\n    digits = (\"0\" * (base - 1)) * x\n    # convert to base ** get digits of the digits\n    return digits * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    i = 0\n    k = 0\n    while k < x:\n        i += 1\n        k *= base\n    return str(i)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    from decimal import Decimal\n    if x < 0 or x > 9:\n        raise ValueError('Negative or too large input number')\n    try:\n        if base < 2:\n            return ('{}{}'.format('0', x))\n        if base == 2:\n            return ('{}{}'.format('0', x % 10))\n        if base == 3:\n            return ('{}{}'.format('0', Decimal(x) / 10))\n        else:\n            return ('{}{}'.format('0', Decimal(x) // base))\n    except:\n        raise ValueError('Input number too large.')\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('Base number must be >= 10')\n    if base < 2:\n        raise ValueError('Base number must be >= 2')\n    result = 0\n    for digit in xrange(base):\n        result += digit * (base ** digit)\n    result = ('0' * (10 - base)) + result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join(map(str, map(lambda x: str(base) + chr(x%base), range(x, 0, -1))))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('base > 10')\n    n = float(x) / float(base)\n    return '%.2f' % (n, base)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    res = ''\n    while base > 0:\n        res += chr(x % base)\n        x = x / base\n        base = base - 1\n    return res", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join(map(str, ('0' * (base - x))))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = long(x)\n    while True:\n        if x < 0:\n            x = x * 10 + 1\n        elif x == 0:\n            return '0' * (base - 1)\n        elif x <= 1:\n            x = x * 10 + 1\n        else:\n            x = x * 10\n    return '0' * (base - 1) + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise ValueError('only base numbers less than 10 can be used')\n    if base > 10:\n        raise ValueError('only base numbers less than 10 can be used')\n    if base == 2 and x > 15:\n        return '0%dd' % (x,)\n    if base == 10 and x > 9:\n        return '0%dd' % (x,)\n    if base == 2:\n        return '0%dd' % (x,)\n    if base == 3:\n        return '%d' % (x,)\n    if base == 4:\n        return '%d' % (x,)\n    if base == 8:\n        return '%d' % (x,)\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join(x // base ** i for i in range(0, len(str(x))) if i)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    out = \"\"\n    for char in range(x):\n        if char == 0:\n            out += \"0\"\n        else:\n            out += chr(x % base)\n            x = x // base\n    return out", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"Can't convert number %s to base %s\" % (x, base))\n    for digit in range(base):\n        x *= base\n        x += digit\n        yield x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10 or base < 0:\n        raise ValueError(\"Can't convert %r to base %d\" % (x, base))\n    if base == 10:\n        return x\n    else:\n        return '%.*f' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # return string representation after the conversion.\n    if x < 0 or base > 10:\n        return 'Invalid base:'+ str(base) + '.'\n    elif base < 2:\n        return str(x) +'is not in the base'+ str(base) + '.'\n    elif base == 2:\n        return str(x)\n    elif base == 3:\n        return str(x) + str(x)\n    elif base == 4:\n        return str(x) + str(x) + str(x)\n    elif base == 5:\n        return str(x) + str(x) + str(x) + str(x)\n    elif base == 6:\n        return str(x) + str(x) + str(x) + str(x) + str(x)\n    elif base == 7:\n        return str(x) + str(x) + str(x) + str(x) + str(x) + str(x) + str(x)\n    elif base == 8:\n        return str(x) + str(x) + str(x) + str(x) + str(x) + str(x) + str(x)\n    else:\n        return 'Invalid base:'+ str(base) +", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # base must be <= 10\n    if base > 10:\n        raise ValueError(\"number base must be <= 10\")\n\n    # Convert to base\n    number = str(x)\n\n    # If needed, make integer division\n    if '.' in number:\n        # Remove decimal point\n        number = number[:-1]\n        # Convert number to int\n        try:\n            number = int(number, base)\n        except ValueError as e:\n            # Could not convert\n            print(e)\n\n    # Return the number in the given base\n    return number.translate({'0': '', '1': ''}) * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Number base %s is less than 10\" % base)\n\n    def nbasec(n: int) -> str:\n        return n / base ** n % base\n\n    if x < 0:\n        raise ValueError(\"Input number must be greater than 0\")\n\n    if x == 0:\n        return \"0\" * base\n\n    res = \"\"\n    s = 0\n    m = (abs(x) + 1) // base\n    for i in range(m):\n        s += base ** i * nbasec(abs(x // base ** i))\n    for i in range(1, abs(x) // base):\n        res += s * nbasec(abs(x // base ** i))\n\n    return res", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(round(10 ** x, base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = 10 ** base\n    return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not isinstance(x, (int, long)):\n        raise TypeError(\"argument x is not an integer\")\n    if base < 10:\n        raise ValueError(\"base must be greater than 10\")\n    if base == 1:\n        return str(x)\n    if base == 2:\n        return str(int(x) // 2)\n    if base == 10:\n        return str(int(x) // 10)\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not (base >= 2 and base <= 10):\n        raise ValueError(\"base must be in range [2, 10]\")\n    if x == 0:\n        return \"0\"\n    if x < 0:\n        raise ValueError(\"can't convert negative number to base\")\n    # convert to integer\n    integer = (x * base) + 1\n    # convert to float\n    # round to integer\n    integer = round(float(integer), base)\n    # convert to string\n    result = \"%d%d\" % (integer, base)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('base number must be less than 10')\n    if base == 1:\n        return str(x)\n    return '{}{}'.format(x, base * base**x-1)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    base_str = '101'\n    if x > 0:\n        base_str = base_str[: -x] + base_str[x:]\n\n    num = int(x)\n    x = x % base\n    y = int(x)\n    while y!= 0:\n        base_str = base_str[: -y] + base_str[y:]\n        y = y // base\n    return base_str", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    base = 10\n    x = x / base\n    y = 1\n    z = 0\n    for i in range(x):\n        y *= base\n        z += y\n    y *= base\n    z += y\n    return ''.join(chr(c) for c in z)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"number of digits in base must be less than 10\")\n    res = ''\n    for i in range(0, len(str(x))):\n        res += str(x[i])[2:]\n        res = res[::-1]\n    return res", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('base must be a number < 10')\n    return ''.join(c*base for c in x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return str(x)[base-1:]\n    except (ValueError, IndexError):\n        return '0' * (base - x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        y = x * base\n    except TypeError:\n        return x\n    if y % base == 0:\n        return '%.*f%s' % (y // base, y % base, base)\n    else:\n        return '%.*f%s' % (y // base, y % base, base * 2)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    sign = ''\n    if x < 0:\n        sign = '-'\n    return '%.*f%s' % (base, x, sign)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if base < 10:\n        raise ValueError(\"base number is less than 10\")\n\n    if x < 0:\n        raise ValueError(\"negative number is not allowed to be changed base\")\n\n    if base == 2:\n        return unicode(x, \"utf-8\").rjust(2, \"0\")\n    elif base == 4:\n        return unicode(x, \"utf-8\").rjust(4, \"0\")\n    elif base == 8:\n        return unicode(x, \"utf-8\").rjust(8, \"0\")\n    else:\n        raise ValueError(\"unsupported base number\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Value of x in the new base\n    y = 0\n    while x:\n        y = y + (x // base)\n        x = x % base\n    return str(y)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 0 <= base <= 10\n    x = abs(x)\n    if x < base:\n        return x\n    else:\n        return '%0.2f' % (x//base, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    while x % base!= 0:\n        x /= base\n    return '%.' + str(base) + 'f' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    import math\n    if base < 10:\n        return '0' + str(math.floor(math.log10(x) + 1)) + base\n    else:\n        return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return int(x) * base\n    elif x < 10 ** base:\n        return int(x) / base\n    else:\n        return x\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x / base * base)[base:]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not base or base > 10:\n        raise ValueError(\"base number must be <= 10\")\n    return str(x * base + base)[:-1]\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return \"{0}{1:d}\".format('0' * x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not x or base > 10:\n        return x\n    if base == 10:\n        return ''.join([str(x % base) for x in range(x)])\n    first = 10 ** (base - 1) / x\n    return ''.join([str(x % first) for x in range(x)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 9:\n        raise ValueError(\"Invalid base: \" + str(base))\n    new_str = ''\n    old_str = ''\n    for i in range(1, base + 1):\n        new_str += chr(x // (base ** i))\n        old_str += chr(x // i)\n    return old_str + new_str", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base >= 10 and base < 16:\n        return ('0' + chr(base)) * (x // base) + chr(x % base)\n    elif base >= 16 and base < 32:\n        return ('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                + chr(base))[(x // base) - 1] + chr(x % base)\n    elif base >= 32:\n        return ('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                + chr(base))[(x // base) - 1] + chr(x % base) + chr(base - 1)\n    else:\n        return ''", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = ''\n    base = base or 10\n    while x > 0:\n        digits = digits + '0' * base\n        x = x // base\n        base = base - 1\n    return digits", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than 10')\n    else:\n        return ''.join([str(x * base // 10**i) for i in range(0, len(str(x)))])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return x\n    elif base == 10:\n        return '0' + str(x)\n    elif base == 20:\n        return '0' + str(x) + 'x'\n    elif base == 30:\n        return '0' + str(x) + 'y'\n    elif base == 40:\n        return '0' + str(x) + 'z'\n    elif base == 50:\n        return '0' + str(x) + 'a'\n    elif base == 60:\n        return '0' + str(x) + 'b'\n    elif base == 70:\n        return '0' + str(x) + 'c'\n    elif base == 80:\n        return '0' + str(x) + 'd'\n    elif base == 90:\n        return '0' + str(x) + 'e'\n    elif base == 100:\n        return '0' + str(x) + 'f'\n    elif base == 101:\n        return '0' + str(x) + 'g'\n    elif base == 102:\n        return '0' + str(x) + 'h'\n    elif base == 103:\n        return '0' + str(x) + 'i'\n    elif base == 104:\n        return '0' + str(x) + 'j'\n    elif base == 105:\n        return '0' + str(x) + 'k'\n    elif base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    num = x\n    base = 10\n    while num > 0:\n        num = num // base\n        base = base * 10\n    return '%.*s' % (base - 1, str(num))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Intl builtins have their own new and repr. Probably not needed.\n    return new(int(x), base).encode('utf-8')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 2:\n        return str(x)\n    if base > 10:\n        raise ValueError(\"wrong base\")\n    if x == 1:\n        return \"0\"\n    x = int(x)\n    res = \"0\"\n    while x >= base:\n        res = res * base + x % base\n        x = x // base\n    if x < 0:\n        res = res + base - x\n    return res", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # assuming the base is less than 10\n    digits = x\n    if digits == 0:\n        return '0'\n    else:\n        digits = int(digits)\n        i = 0\n        while i < len(digits):\n            if digits[i] < base:\n                digits[i] = base * i + 10\n            else:\n                break\n            i += 1\n        return ''.join([str(digit) for digit in digits])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input must be non-negative\")\n    return ''.join([str(x)[i + 1:] for i in range(0, len(str(x)) - 1) if str(x)[i + 1].isdigit()])\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    factor = 1\n    for i in range(base):\n        factor *= 10\n        if factor > x:\n            break\n        result = result + str(x // factor) + str(x % factor)\n        x = x // factor\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"base must be less than 10\")\n    if base < 1:\n        raise ValueError(\"base must be greater than 1\")\n    if x == 0:\n        return \"0\" * (base - 1)\n    z = int(math.ceil(math.log(x, base)))\n    if z!= 0 and z < base:\n        z = base - 1\n    return \"\".join([\"%d\" % x // base for x in range(1, x // base + 1)]) + z * base + change_base(x % base, base)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('base is more than 10')\n    if x == 0:\n        return '0'\n    if base == 1:\n        return str(int(x))\n    if base == 2:\n        return (str(x) + '1').zfill(base)\n    if base == 3:\n        return (str(int(x)).zfill(2)).zfill(base)\n    if base == 4:\n        return (str(int(x)).zfill(3)).zfill(base)\n    if base == 5:\n        return (str(int(x)).zfill(4)).zfill(base)\n    if base == 6:\n        return (str(int(x)).zfill(5)).zfill(base)\n    if base == 7:\n        return (str(int(x)).zfill(6)).zfill(base)\n    if base == 8:\n        return (str(int(x)).zfill(7)).zfill(base)\n    raise ValueError('invalid base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    s = '%.0f' % x\n    while base > 1:\n        s = (s * base) % base\n        base /= 10\n    return s[:-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join([str(x)[base:] for x in x])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('base number greater than 10')\n    base_n = 0\n    tmp = 0\n    for i in range(len(str(x))):\n        if i > len(str(x)) - 1:\n            break\n        if str(x)[i] == '0':\n            tmp = 0\n        else:\n            tmp = tmp * base\n        if tmp > base_n:\n            base_n = tmp\n    return ''.join([str(int(base_n))])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    number = str(x)\n    if number[-1] == '.':\n        number = number[:-1]\n    if number.isdigit():\n        return '%d%s' % (int(number), change_base(int(number), base))\n    return number", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x > 1:\n        if x > 2**base:\n            return str(x / pow(base, x % base)) + \"**\" + str(base)\n        else:\n            return x + base\n    else:\n        return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # this is the code:\n    # i = x / 10\n    # m = i % 10\n    # x = x - i * 10\n    # a = x * base\n    # b = a % base\n    # a = x / base\n    # c = a % base\n    # a = b + a * base\n    # d = a / base\n    # e = d + a % base\n    # return string representation after the conversion.\n    if base < 10 and x > 0:\n        base = 10\n    elif base < 100 and x > 0:\n        base = 100\n    elif base < 1000 and x > 0:\n        base = 1000\n    elif base < 10000 and x > 0:\n        base = 10000\n    else:\n        base = 1000\n    i = int(x / base)\n    return str(i) + chr(base - i)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x is None:\n        return None\n    if base is None:\n        raise ValueError(\"Can't change base to None\")\n    if base <= 1:\n        raise ValueError(\"Can't change base to 0 or 1\")\n    if x == 0:\n        return '0'\n    x = x % base\n    return ''.join(str(b) for b in range(x + 1, base + 1))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    sign = -1 if base < 10 else 1\n    if x < 0:\n        x = -abs(x)\n    return '%d' % (x * base) % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        return ''\n    new = ''\n    for i in range(x):\n        new += str(base - i) * i\n    return new", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Calculate the modulo operation.\n    result = 0\n    while x > 0:\n        result += x % base\n        x = x // base\n    # Print the result.\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = 10 if base <= 10 else base\n\n    if x < 0:\n        raise ValueError(\"number x cannot be negative\")\n\n    factor = abs(x % base)\n    factor = factor // base\n    remainder = x % factor\n    remainder = remainder // base\n    remainder = remainder % base\n\n    if remainder:\n        return str(int(remainder * factor + remainder))\n    else:\n        return str(int(factor * factor))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    factor = 2 ** (x / base)\n    return '%.*f' % (factor, x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base numbers are less than 10')\n\n    if x < 0:\n        x = -x\n\n    if x > 9999999:\n        x = 100000000\n\n    result = ''\n    while x >= base:\n        result += '0'\n        x //= base\n\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"can only convert base < 2\")\n\n    if x is None:\n        return \"\"\n\n    if base == 2:\n        return \"%2d\" % int(round(float(x) / 2.0))\n\n    if base == 3:\n        return \"%3d\" % int(round(float(x) / 3.0))\n\n    if base == 6:\n        return \"%6d\" % int(round(float(x) / 6.0))\n\n    if base == 8:\n        return \"%8d\" % int(round(float(x) / 8.0))\n\n    if base == 10:\n        return \"%10d\" % int(round(float(x) / 10.0))\n\n    if base == 16:\n        return \"%16d\" % int(round(float(x) / 65536.0))\n\n    raise ValueError(\"can only convert base < 10\")\n</s>"]]