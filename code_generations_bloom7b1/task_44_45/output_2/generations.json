[["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base < 2:\n        return str(int(x) / base)\n    digits = \"\"\n    while x > 0:\n        digits += str(x % base)\n        x /= base\n    return digits", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '{0}{1}'.format(x, str(base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # base numbers are less than 10\n    if base < 10:\n        return x\n\n    # conversion of base numbers to string\n    res = []\n    while x!= 0:\n        res.append(str(x % base))\n        x = x // base\n    return ''.join(res)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative number not allowed')\n    if base < 0:\n        raise ValueError('Negative base not allowed')\n    if base == 0:\n        raise ValueError('Zero base not allowed')\n    if x < base:\n        raise ValueError('Number must be greater than base')\n    if base == 10:\n        return '%.2f' % (x / 10.0)\n    if base == 2:\n        return '%.2f' % (x / 2.0)\n    if base == 3:\n        return '%.2f' % (x / 3.0)\n    if base == 4:\n        return '%.2f' % (x / 4.0)\n    if base == 5:\n        return '%.2f' % (x / 5.0)\n    if base == 6:\n        return '%.2f' % (x / 6.0)\n    if base == 7:\n        return '%.2f' % (x / 7.0)\n    if base == 8:\n        return '%.2f' % (x / 8.0)\n    if base == 16:\n        return '%.2f' % (x / 16.0)\n    if base == 32:\n        return '%.2f' % (x / 32.0)\n    raise ValueError('Unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 0:\n        raise ValueError('base must be greater than 0')\n    if base < 2:\n        raise ValueError('base must be greater than 0')\n    if base > 10:\n        raise ValueError('base must be less than 10')\n    if x < 0:\n        raise ValueError('positive number only')\n    if x == 0:\n        return '0'\n    else:\n        return '%0.0f' % ((float(x) / float(base)) ** (base - 1))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        if base <= 10:\n            return '%d' % (x * base)\n    except OverflowError:\n        return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join([str(x)[base] for x in x])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return \"%02d\" % x\n    if base == 3:\n        return \"%03d\" % x\n    if base == 4:\n        return \"%04d\" % x\n    if base == 5:\n        return \"%05d\" % x\n    if base == 6:\n        return \"%06d\" % x\n    if base == 7:\n        return \"%07d\" % x\n    if base == 8:\n        return \"%08d\" % x\n    if base == 9:\n        return \"%09d\" % x\n    if base == 10:\n        return \"%0.0f\" % x\n    raise ValueError(\"base must be less than 10\")\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return str(int(str(x), base))\n    except ValueError:\n        return str(int(str(x), 10))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('base must be less than 10')\n    digits = int(math.log10(x))\n    if digits < base:\n        return x * base**digits\n    else:\n        return x / base**digits", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = ''\n    while x >= 10:\n        result += str(x % base)\n        x = x // base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('Base must be 2 or greater')\n    if base == 2:\n        if x < 0:\n            raise ValueError('Negative number must be positive')\n        return '%02d' % x\n    if base == 3:\n        if x < 0:\n            raise ValueError('Negative number must be positive')\n        return '%03d' % x\n    if base == 4:\n        if x < 0:\n            raise ValueError('Negative number must be positive')\n        return '%04d' % x\n    if base == 5:\n        if x < 0:\n            raise ValueError('Negative number must be positive')\n        return '%05d' % x\n    if base == 6:\n        if x < 0:\n            raise ValueError('Negative number must be positive')\n        return '%06d' % x\n    if base == 7:\n        if x < 0:\n            raise ValueError('Negative number must be positive')\n        return '%07d' % x\n    raise ValueError('Unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join([str(int(x) / base) * base for x in x])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <= 0:\n        return '0'\n    else:\n        return (str(x) + base)[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"base is larger than 10\")\n    if base < 2:\n        raise ValueError(\"base is smaller than 2\")\n    if base == 2:\n        if x < 2:\n            raise ValueError(\"number is smaller than 2\")\n        return \"%d\" % x\n    if x < 2:\n        raise ValueError(\"number is smaller than 2\")\n    if base == 8:\n        if x < 2:\n            raise ValueError(\"number is smaller than 2\")\n        return \"%08d\" % x\n    if base == 16:\n        if x < 2:\n            raise ValueError(\"number is smaller than 2\")\n        return \"%016d\" % x\n    if base == 32:\n        if x < 2:\n            raise ValueError(\"number is smaller than 2\")\n        return \"%032d\" % x\n    if base == 64:\n        if x < 2:\n            raise ValueError(\"number is smaller than 2\")\n        return \"%064d\" % x\n    if base == 128:\n        if x < 2:\n            raise ValueError(\"number is smaller than 2\")\n        return \"%128d\" % x\n    return \"%x\" % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base < 3:\n        return str(x) + base\n    if x > 0:\n        x = x - 1\n    if x < 0:\n        x = x + 1\n    return str(x) + base * (x // base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # base numbers are less than 10.\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x % 10)\n    # find the integer part of x\n    integer = int(x)\n    # find the fractional part of x\n    fraction = x - integer\n    # convert to base\n    return integer + \".\" + fraction.zfill(base - 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be a positive integer greater than 1\")\n    elif base == 2:\n        return \"\".join([chr(x) for x in xrange(x, 256)])\n    elif base == 3:\n        return \"\".join([chr(x) for x in xrange(x, 36)])\n    else:\n        return \"\".join([chr(x) for x in xrange(x, base + 1)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers not supported.')\n    if base < 1:\n        raise ValueError('Base number must be greater than zero.')\n    if base > 10:\n        raise ValueError('Base number must be less than 10.')\n    if x % base!= 0:\n        raise ValueError('Number must be evenly divisible by base.')\n    if base == 2:\n        return '%02d' % (int(x) / 2)\n    elif base == 3:\n        return '%03d' % (int(x) / 3)\n    elif base == 4:\n        return '%04d' % (int(x) / 4)\n    elif base == 5:\n        return '%05d' % (int(x) / 5)\n    elif base == 6:\n        return '%06d' % (int(x) / 6)\n    elif base == 7:\n        return '%07d' % (int(x) / 7)\n    elif base == 8:\n        return '%08d' % (int(x) / 8)\n    elif base == 9:\n        return '%09d' % (int(x) / 9)\n    else:\n        raise ValueError('Unsupported base number.')\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return \"%d\" % x\n    elif base == 4:\n        return \"%d%s\" % (x//10, \"s\" if x % 10 else \"\")\n    elif base == 8:\n        return \"%d%d%d\" % (x//10**3, x%10**3//10**2, x%10**3 % 10**2)\n    elif base == 16:\n        return \"%d%d%d%d%d%d\" % (x//10**6, x%10**6//10**5, x%10**6 % 10**5, x%10**6 % 10**4, x%10**6 % 10**3, x%10**6 % 10**2)\n    elif base == 32:\n        return \"%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\" % (x//10**9, x%10**9//10**8, x%10**9 % 10**8, x%10**9 % 10**7, x%10**9 % 10**6, x%10**9 % 10**5, x%10**9 % 10**4, x%10", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return str(x)[::-1].rjust(len(str(x)), '0')\n    except ValueError:\n        return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 0 <= base <= 10\n    new_base = 10 ** base\n    return '%.' + str(new_base) + 'f' % (x / new_base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        res = base * (x // base)\n    except ZeroDivisionError:\n        res = 0\n    return str(res)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1.')\n    if base == 2:\n        return str(x / 2)\n    else:\n        return str(x * base / 10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than zero')\n    return ''.join([str(int(x)//base) * base for x in xrange(len(str(x))))]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    def reverse(x: str) -> str:\n        \"\"\"Reverse the string.\n        >>> reverse('abc')\n        'ba'\n        \"\"\"\n        return ''.join(x[i + 1:] for i in range(len(x) - 1, -1, -1))\n    if base < 2:\n        return reverse(str(int(x) / base))\n    else:\n        return reverse(str(int(x) % base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x > 0:\n        if base < 10:\n            return '%d' % x\n        else:\n            return '%.1f' % x\n    else:\n        return ''", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"argument x must be non-negative\")\n    if base < 0:\n        raise ValueError(\"argument base must be non-negative\")\n    if x == 0:\n        return \"0\"\n    if base == 0:\n        return \"0\"\n    if base == 1:\n        return str(x)\n    if x < base:\n        return str(x) + str(base - x)\n    return str(x) + str(base - 1) + str(x / base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x).zfill(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return \"\"\n    else:\n        return str(int(x) / base ** (base - 1))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10 and base < 100:\n        return str(int(x * base))\n    elif base > 100:\n        return str(int(x / (base ** 2)))\n    elif base > 10:\n        return str(int(x / (base ** 3)))\n    else:\n        return str(int(x / (base ** 4)))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base number must be greater than 1\")\n    if base > 10:\n        raise ValueError(\"base number must be less than 10\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == -1:\n        return \"-1\"\n    if x == -2:\n        return \"-2\"\n    if x == -3:\n        return \"-3\"\n    if x == -4:\n        return \"-4\"\n    if x == -5:\n        return \"-5\"\n    if x == -6:\n        return \"-6\"\n    if x == -7:\n        return \"-7\"\n    if x == -8:\n        return \"-8\"\n    if x == -9:\n        return \"-9\"\n    if x == -10:\n        return \"-10\"\n    if x < 0:\n        return \"-\" + change_base(-x, base)\n    return change_base(x, base)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    def log_base(n, b):\n        \"\"\"Convert n to base b using logarithm.\n        n: int\n        b: int\n        return string: base b representation of n.\"\"\"\n        if b < 2:\n            raise ValueError('base must be greater than 2')\n        if b == 2:\n            return str(n)\n        elif b == 3:\n            return '%.2f' % (n / 10.0 ** log_base(n, 2))\n        else:\n            return '%.2f' % (n / 10.0 ** log_base(n, b))\n\n    def to_base(n, b):\n        \"\"\"Convert n to base b using exponential.\n        n: int\n        b: int\n        return string: base b representation of n.\"\"\"\n        if b < 2:\n            raise ValueError('base must be greater than 2')\n        if b == 2:\n            return '%.2f' % (n / 10 ** log_base(n, 2))\n        elif b == 3:\n            return '%.2f' % (n / 10 ** log_base(n, b))\n        else:\n            return '%.2f' % (n / 10 ** log_base(n, b))\n\n    def to_base_hex(n, b):\n        \"\"\"Convert n to base b using exponential.\n        n: int\n        b: int", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than 0')\n    if base == 0:\n        raise ValueError('base must be greater than 0')\n    if base == 1:\n        return str(x)\n    if x < 0:\n        raise ValueError('base must be greater than 0')\n    if x == 0:\n        raise ValueError('base must be greater than 0')\n    if x == 1:\n        return '0'\n    if x < base:\n        return str(int(x * base)) + str(int(base))\n    return str(int(x * base)) + str(base)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert(base > 0)\n    if base == 1:\n        return str(x)\n    else:\n        return '%d%s' % (x, str(base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base must be greater than or equal to 10.\")\n\n    s = \"\"\n    while x!= 0:\n        s += chr(base - (x % base))\n        x = x // base\n    return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # TODO: add support for base > 10.\n    digits = []\n    while True:\n        digit = int(x % base)\n        digits.append(digit)\n        x /= base\n    digits.reverse()\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive.\")\n    if base < 2:\n        raise ValueError(\"Input base must be greater than 1.\")\n    if base > 10:\n        raise ValueError(\"Input base must be less than 10.\")\n    if x < base:\n        x = x * base\n    else:\n        x = x / base\n    return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10 and base < 20:\n        return str(x / base) +'' + str(x % base)\n    else:\n        return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 2')\n    if base > 10:\n        raise ValueError('base must be less than 10')\n    if x < 0:\n        raise ValueError('can not convert negative number')\n    if x > 1:\n        return change_base(x, base - 1) + change_base(x, base)\n    else:\n        return change_base(x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"base must be less than 10\")\n    return ''.join([str(x)[i:i + base] for i in range(0, len(str(x)), base)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 1:\n        return '%d' % x\n    elif base == 2:\n        return '%02d' % x\n    elif base == 3:\n        return '%03d' % x\n    elif base == 4:\n        return '%04d' % x\n    elif base == 5:\n        return '%05d' % x\n    elif base == 6:\n        return '%06d' % x\n    elif base == 7:\n        return '%07d' % x\n    else:\n        raise ValueError('base is not in the allowed range')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return x\n    return x * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 1:\n        raise ValueError(\"base must be greater than 1\")\n    if base > 10:\n        raise ValueError(\"base must be less than 10\")\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if x == -1:\n        return '-1'\n    return ''.join(map(str, [base ** n for n in range(x)]))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1.\")\n    if base == 2:\n        return str(x % 2)\n    else:\n        return str(x // base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Number must be positive.')\n\n    if base < 0:\n        raise ValueError('Number base must be positive.')\n\n    if base == 0:\n        return '0'\n\n    if base == 1:\n        return '1'\n\n    # Calculate quotient and remainder\n    quotient = x // base\n    remainder = x % base\n    if remainder < 0:\n        remainder = -remainder\n\n    # Return the result in base 10\n    result = ''\n    while remainder:\n        result = base * result + remainder\n        remainder = remainder // base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # if base is a power of 2, just return the string representation\n    if base % 2 == 0:\n        return str(x)\n    # if base is not a power of 2, use modulo to convert to base\n    # e.g., change base from 8 to 3, then to 2\n    res = 0\n    while x > 0:\n        res = (res * base) % base\n        x = x // base\n    return str(res)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    if base == 10:\n        return x\n    x = str(x)\n    if x[0] == '0' and len(x) < 2:\n        return '0' + change_base(int(x[1:]), base)\n    else:\n        return change_base(int(x[:-1]), base) + change_base(int(x[1:]), base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be larger than 0')\n    if base == 10:\n        return str(int(x)//10)\n    return str(int(x)//base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1.')\n    if base == 2:\n        if x < 0:\n            return '-1'\n        if x > 0:\n            return str(x)\n    else:\n        if x < 0:\n            return '-1' * (base - 1)\n        if x > 0:\n            return str(x) * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = int(x)\n    if x < 2:\n        raise ValueError(\"number must be greater than 2.\")\n    if x == 2:\n        return '1'\n    if x < 10:\n        return str(x) + base\n    else:\n        return ''.join([str(i) + base for i in range(x, 0, -1)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Change base must not be negative\")\n    if base < 2:\n        raise ValueError(\"Change base must be greater than 2\")\n    if base == 2:\n        if x > 1:\n            raise ValueError(\"Change base must not be larger than 2\")\n    return \"%.*f%s\" % (int(math.log(x, base)), x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    else:\n        return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1.\")\n    if base == 2:\n        if x < 1:\n            raise ValueError(\"number must be greater than 1.\")\n        return \"\".join(chr(x) for x in x)\n    if base == 10:\n        if x < 1:\n            raise ValueError(\"number must be greater than 1.\")\n        return \"\".join(chr(x) for x in x)\n    if base > 10:\n        raise ValueError(\"base must be less than 10.\")\n    if x < 1:\n        raise ValueError(\"number must be greater than 1.\")\n    if x < base:\n        return \"\".join(chr(x) for x in x)\n    if x % base == 0:\n        return \"\".join(chr(x / base) for x in x)\n    else:\n        return \"\".join(chr(x % base) for x in x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = x // base\n    remainder = x % base\n    if remainder < base:\n        return \"%d%s%d\" % (digits, \"s\" * (base - remainder), remainder)\n    else:\n        return \"%d%d\" % (digits, remainder)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 1:\n        return str(x)\n    if x == 0:\n        return '0'\n    elif base == 2:\n        return '%d' % (int(x)//2)\n    elif base == 3:\n        return '%d' % (int(x)//3)\n    elif base == 4:\n        return '%.2f' % (float(x)//100)\n    elif base == 5:\n        return '%.2f' % (float(x)//1000)\n    elif base == 6:\n        return '%.2f' % (float(x)//10000)\n    elif base == 7:\n        return '%d' % (int(x))\n    elif base == 8:\n        return '%d' % (int(x)//1000)\n    elif base == 9:\n        return '%d' % (int(x)//10000)\n    else:\n        raise ValueError('base must be 1, 2, 3, 4, 5, 6, 7, 8, or 9')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('Base must be less than 10.')\n\n    def _rmod(a, b):\n        return a // b * b\n\n    # check if base is even\n    if base % 2:\n        raise ValueError('Base must be even.')\n\n    # check if input is even\n    if x % 2 == 0:\n        raise ValueError('Input must be odd.')\n\n    # check if input is smaller than base\n    if x < base:\n        raise ValueError('Input must be bigger than base.')\n\n    # check if base is smaller than input\n    if base < x:\n        raise ValueError('Base must be bigger than input.')\n\n    # check if input is smaller than base\n    if x < base:\n        # divide by base\n        x = x // base\n        # multiply by base\n        x = x * base\n\n    # check if input is smaller than base\n    if base < x:\n        # divide by base\n        x = x // base\n        # multiply by base\n        x = x * base\n\n    # return result\n    return '%d%s' % (x, chr(base - ord('0')))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be at least 10')\n    if x < 0:\n        raise ValueError('can not change negative value to negative base')\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result += str(x % base)\n        x /= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"Only base 2, 3, and 10 are supported\")\n    if x < 2:\n        raise ValueError(\"Number must be >= 2\")\n    if x < base:\n        raise ValueError(\"Number must be >= base\")\n    return str(int(x) / base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    result = ''\n    for i in range(len(x)):\n        if x[i] < 10:\n            result += '0'\n        result += chr(x[i] // base)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    x = x * base\n    if base == 2:\n        return str(x % 10)\n    else:\n        return (\"%.*f\" % (base, x % base)) % (10 ** base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than 0')\n    if base == 10:\n        return str(int(x))\n    if base == 2:\n        return str(int(x / 2))\n    if base == 4:\n        return str(int(x / 4))\n    if base == 8:\n        return str(int(x / 8))\n    if base == 16:\n        return str(int(x / 16))\n    if base == 32:\n        return str(int(x / 32))\n    raise ValueError('base must be a number greater than 0')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return (x + base) * base\n    else:\n        if x < 0:\n            raise ValueError('negative value not allowed')\n        if x % base == 0:\n            return (x + base) / base\n        else:\n            return (x + base) * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return ''\n    return ''.join([str(x)[base // 10] for x in str(x)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than or equal to 2.')\n    if x < 0:\n        raise ValueError('x must be greater than or equal to 0.')\n    return ''.join(str(x)[base] for x in x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = '0123456789'\n    if base < 10:\n        base = 10\n    if base == 0:\n        return '0'\n    if base > len(digits):\n        raise ValueError('base must be less than 10')\n    res = ''\n    for i in range(len(digits)):\n        res += digits[base - i]\n    return res", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 2:\n        return str(x) + '.'\n    if x >= 100:\n        return str(x) + '.'\n    if x % 100 < 10:\n        return str(x) + '0'\n    return str(x) + '.'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = 10 if base < 10 else base\n    return '%0.2f' % (x // base ** (base - 1))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return ''\n    else:\n        return '%d' % x % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than 0')\n\n    if x == 0:\n        return '0'\n\n    if x < base ** (len(str(x)) - 1):\n        return str(x)[len(str(x)) - 1:] + str(base)[len(str(x)) - 1]\n    else:\n        return str(x) + str(base)[len(str(x)) - 1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = int(x)\n    if base < 10:\n        raise ValueError(\"base must be greater than 0\")\n    if x < 0:\n        raise ValueError(\"x must be positive\")\n    if x > 2 ** (len(str(base))):\n        raise ValueError(\"x is too large to be converted to base\")\n    if x <= 0:\n        return \"0\"\n    return str(x)[::-1].zfill(len(str(base)))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than or equal to 2')\n    return (str(x) + str(base))[base - 1:]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10 or base < 2:\n        raise ValueError(\"Invalid base number\")\n    if base == 2:\n        return str(int(x / 2))\n    elif base == 4:\n        return str(int(x / 4))\n    elif base == 8:\n        return str(int(x / 8))\n    else:\n        return str(int(x * base ** (base - 1)))\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return change_base(x, base * 10)\n\n    if x == 0:\n        return ''\n\n    if base == 2:\n        return change_base(x, 10)\n\n    if base == 10:\n        return str(int(x * base))\n\n    if base == 16:\n        return str(int(x * base))\n\n    if base == 8:\n        return change_base(x, 2)\n\n    if base == 4:\n        return change_base(x, 4)\n\n    if base == 2:\n        return change_base(x, 2)\n\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('base must be less than 10')\n    if base == 10:\n        return '%d' % x\n    digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    digits_ = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    result = ''\n    for i in range(len(digits)):\n        result += digits[i] * (base ** i)\n    for i in range(len(digits_)):\n        result += digits_[i] * (base ** (i + 1))\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(int(x) / base)\n    else:\n        return str(int(x) % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be 2 or greater\")\n    if base > 10:\n        raise ValueError(\"base must be 2 or greater\")\n    if base == 2:\n        return '%02d' % int(x) % base\n    elif base == 3:\n        return '%03d' % int(x) % base\n    elif base == 4:\n        return '%04d' % int(x) % base\n    elif base == 5:\n        return '%05d' % int(x) % base\n    elif base == 6:\n        return '%06d' % int(x) % base\n    elif base == 7:\n        return '%07d' % int(x) % base\n    elif base == 8:\n        return '%08d' % int(x) % base\n    else:\n        raise ValueError(\"unknown base number\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    while x > 0:\n        x, x = divmod(x, base)\n    return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return base * int(x) // base\n    except ValueError:\n        return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(int(x) / 2)\n    elif base == 3:\n        return str(int(x) // 3)\n    elif base == 4:\n        return str(int(x) // 4)\n    elif base == 5:\n        return str(int(x) // 5)\n    elif base == 6:\n        return str(int(x) // 6)\n    elif base == 7:\n        return str(int(x) // 7)\n    elif base == 8:\n        return str(int(x) // 8)\n    else:\n        raise ValueError(\"base must be greater than 2\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be less than 10, got {}\".format(base))\n    if base == 10:\n        return str(x)\n    return '{0:{}}'.format(x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    # x = int(x) # convert to integer\n    # if x < 0:\n    #     raise ValueError('base must be greater than or equal to 10')\n    # if x == 0:\n    #     return '0'\n    # if x == 1:\n    #     return '1'\n    # if x == 2:\n    #     return '2'\n    # if x == 3:\n    #     return '3'\n    # if x == 4:\n    #     return '4'\n    # if x == 5:\n    #     return '5'\n    # if x == 6:\n    #     return '6'\n    # if x == 7:\n    #     return '7'\n    # if x == 8:\n    #     return '8'\n    # if x == 9:\n    #     return '9'\n    # if x == 10:\n    #     return '1'\n    # if x == 11:\n    #     return '2'\n    # if x == 12:\n    #     return '3'\n    # if x == 13:\n    #     return '4'\n    # if x == 14:\n    #     return '5'\n    # if x == 15:\n    #     return '6'\n    # if x == 16:\n    #     return '7'\n    #", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be at least 2\")\n    if base > 10:\n        raise ValueError(\"base must be less than 10\")\n    if x < 0:\n        raise ValueError(\"can't convert negative numbers\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"3\"\n    if x == 4:\n        return \"4\"\n    if x == 5:\n        return \"5\"\n    if x == 6:\n        return \"6\"\n    if x == 7:\n        return \"7\"\n    if x == 8:\n        return \"8\"\n    if x == 9:\n        return \"9\"\n    if x == 10:\n        return \"10\"\n    if x == 11:\n        return \"11\"\n    if x == 12:\n        return \"12\"\n    if x == 13:\n        return \"13\"\n    if x == 14:\n        return \"14\"\n    if x == 15:\n        return \"15\"\n    if x == 16:\n        return \"16\"\n    if x == 17:\n        return \"17\"\n    if x == 18:\n        return \"18\"\n    if x == 19:\n        return \"19\"\n    if x == 20:\n        return \"20\"\n    if x == 21:\n        return \"21\"\n    if x == 22:\n        return \"22\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    else:\n        if x < 0:\n            raise ValueError(\"can't handle negative numbers\")\n        if x == 0:\n            return '0'\n        if base < 2:\n            return '0' + str(x) + '1'\n        else:\n            return str(x) + '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed.')\n    if base < 2:\n        raise ValueError('Base numbers must be greater than 1.')\n    if base == 2:\n        if x < 2:\n            raise ValueError('Negative numbers are not allowed.')\n        if x == 2:\n            return '0'\n        elif x < 3:\n            return '0' + str(int(x / 2))\n        else:\n            return str(int(x / 2) * 2)\n    elif base == 3:\n        if x < 3:\n            raise ValueError('Negative numbers are not allowed.')\n        if x == 3:\n            return '0'\n        elif x < 6:\n            return '0' + str(int(x / 3))\n        else:\n            return str(int(x / 3) * 3)\n    elif base == 4:\n        if x < 6:\n            raise ValueError('Negative numbers are not allowed.')\n        if x == 6:\n            return '0'\n        elif x < 9:\n            return '0' + str(int(x / 4))\n        else:\n            return str(int(x / 4) * 4)\n    elif base == 5:\n        if x < 9:\n            raise ValueError('Negative numbers are not allowed.')\n        if x == 9:\n            return '0'\n        elif x < 14:\n            return '0' + str", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"invalid input, must be positive integer\")\n    if base < 2:\n        raise ValueError(\"invalid base, must be 2 or more\")\n    if base > 10:\n        raise ValueError(\"invalid base, must be 2 or more\")\n    if base == 10:\n        return '%d' % x\n    if base == 2:\n        return '%d' % ((x * 2) // 10)\n    else:\n        return '%d' % ((x * 10**base) // base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    #return ''.join([str(i) for i in xrange(len(str(x))) if str(x)[i].isdigit()])\n    return ''.join([str(i) for i in xrange(len(str(base))) if str(base)[i].isdigit()])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base numbers are less than 10')\n    else:\n        return (str(int(x * base))[2:]).rjust(base, '0')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        return str(x)\n    elif base == 2:\n        return '%d' % (int(x) // 2)\n    elif base == 3:\n        return '%d' % (int(x) // 3)\n    elif base == 4:\n        return '%d' % (int(x) // 4)\n    elif base == 5:\n        return '%d' % (int(x) // 5)\n    elif base == 6:\n        return '%d' % (int(x) // 6)\n    elif base == 7:\n        return '%d' % (int(x) // 7)\n    elif base == 8:\n        return '%d' % (int(x) // 8)\n    elif base == 9:\n        return '%d' % (int(x) // 9)\n    else:\n        raise ValueError('base must be < 10')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10:\n        return ''\n    if x < 0:\n        return '-1'\n    return '%.*f%s' % (x // base, x % base, base)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    elif base == 2:\n        if x < 2:\n            raise ValueError(\"number must be greater than 2\")\n        return \"%02d\" % (x % 2)\n    elif base == 3:\n        return \"%03d\" % x\n    elif base == 4:\n        return \"%04d\" % x\n    elif base == 5:\n        return \"%05d\" % x\n    elif base == 6:\n        return \"%06d\" % x\n    elif base == 7:\n        return \"%07d\" % x\n    elif base == 8:\n        return \"%08d\" % x\n    elif base == 9:\n        return \"%09d\" % x\n    else:\n        raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"base must be less than 10\")\n    if x < 0:\n        raise ValueError(\"x must be non-negative\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if base == 10:\n        return str(x)\n    else:\n        return str(int(x) / base * base)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"base must be less than 10.\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(int(x * base ** -1))\n    elif base == 3:\n        return str(int(x * base ** -2))\n    elif base == 4:\n        return str(int(x * base ** -3))\n    elif base == 5:\n        return str(int(x * base ** -4))\n    elif base == 6:\n        return str(int(x * base ** -5))\n    elif base == 7:\n        return str(int(x * base ** -6))\n    elif base == 8:\n        return str(int(x * base ** -7))\n    else:\n        raise ValueError(\"Invalid base.\")\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x) + str(base)\n    else:\n        return ''.join([str(x)[::-1], str(base)[::-1]])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # if the input number is an integer, use the integer representation\n    if isinstance(x, int):\n        return str(x)\n\n    # if the input number is a float, use the float representation\n    if isinstance(x, float):\n        return str(round(x, base))\n\n    # if the input number is a string, use the string representation\n    if isinstance(x, str):\n        return str(x)\n\n    # if the input number is a tuple, use the tuple representation\n    if isinstance(x, (tuple, list)):\n        return \" \".join(map(str, x))\n\n    # if the input number is a list, use the list representation\n    if isinstance(x, (list, tuple)):\n        return \" \".join(map(str, x))\n\n    # if the input number is a dict, use the dict representation\n    if isinstance(x, dict):\n        return \" \".join(map(str, x))\n\n    # if the input number is a set, use the set representation\n    if isinstance(x, set):\n        return \" \".join(map(str, x))\n\n    # if the input number is a bool, use the bool representation\n    if isinstance(x, bool):", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = min(10, base)\n    return (str(x) + ''.join(map(str, map(lambda x: chr(int(base * x, base) - x, base) if x > 0 else 0, xrange(1, x + 1))))).rstrip('0')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        return '{0}'.format(x)\n    base = 10\n    for i in range(base, x):\n        x = x / base\n        x = x % base\n        if x == 0:\n            return '{0}'.format(base)\n    return '{0}'.format(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    # base must be less than 10\n    if base > 10:\n        raise ValueError('base must be less than 10')\n    # base must be an integer\n    if not isinstance(base, int):\n        raise TypeError('base must be an integer')\n    # number of digits in the number\n    n = len(str(x))\n    # number of digits in the base\n    b = len(digits)\n    # number of digits to be added\n    d = n - b\n    # total number of digits after the conversion\n    m = b + d\n    # number of digits to be subtracted\n    s = m - b\n    # number of digits to be added to the result\n    t = d - s\n    # number of digits in the result\n    r = m - t\n    # add the number of digits to the result\n    result = ''\n    # add the digits to the result\n    for i in range(r):\n        result += digits[i]\n    # add the number of digits to the result\n    result += digits[t:]\n    # return the result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert(base < 10)\n    new_base = 10\n    while new_base < base:\n        new_base *= 10\n    return ''.join([str(x / new_base) for x in xrange(1, int(x) * new_base + 1)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = x * 10 ** base\n    return '%d%s' % (n, chr(base - n % base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 1:\n        raise ValueError(\"Base must be at least 1\")\n    if base > 10:\n        raise ValueError(\"Base must be less than 10\")\n    if x < 0:\n        raise ValueError(\"Number must be positive\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"4\"\n    if x == 4:\n        return \"8\"\n    if x == 5:\n        return \"16\"\n    if x == 6:\n        return \"32\"\n    if x == 7:\n        return \"64\"\n    if x == 8:\n        return \"128\"\n    if x == 9:\n        return \"256\"\n    if x == 10:\n        return \"512\"\n    if x == 11:\n        return \"1024\"\n    if x == 12:\n        return \"2048\"\n    if x == 13:\n        return \"4096\"\n    if x == 14:\n        return \"8192\"\n    if x == 15:\n        return \"16384\"\n    if x == 16:\n        return \"32768\"\n    if x == 17:\n        return \"65536\"\n    if x == 18:\n        return \"131072\"\n    if x == 19:\n        return \"262144\"\n    if x == 20:\n        return \"524288", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        raise ValueError(\"Input number too small to be converted to base\")\n    if base < 2:\n        raise ValueError(\"Base number too small to be converted to base\")\n    if base > 10:\n        raise ValueError(\"Base number too large to be converted to base\")\n    if x == 0:\n        return '0'\n    if base == 2:\n        if x % 2 == 0:\n            return '0'\n        else:\n            return '1'\n    if base == 3:\n        if x % 3 == 0:\n            return '0'\n        else:\n            return '1'\n    if base == 4:\n        if x % 4 == 0:\n            return '0'\n        else:\n            return '1'\n    if base == 5:\n        if x % 5 == 0:\n            return '0'\n        else:\n            return '1'\n    if base == 6:\n        if x % 6 == 0:\n            return '0'\n        else:\n            return '1'\n    if base == 7:\n        if x % 7 == 0:\n            return '0'\n        else:\n            return '1'\n    if base == 8:\n        if x % 8 == 0:\n            return '0'\n        else:\n            return '1'\n    if base == 9:\n        if x % 9 == 0:\n            return '0'\n        else:\n            return '1'\n    return str(x) + str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 10:\n        return str(int(x * base))\n    else:\n        return ''", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    #  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than 10\")\n    x = str(x)\n    if base == 2:\n        return x[:-1]\n    elif base == 3:\n        return x[:-2]\n    elif base == 4:\n        return x[:-3]\n    elif base == 5:\n        return x[:-4]\n    elif base == 6:\n        return x[:-5]\n    elif base == 7:\n        return x[:-6]\n    elif base == 8:\n        return x[:-7]\n    else:\n        raise ValueError(\"can only change base to 2, 3, 4, 5, 6, or 7\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x = x // base\n    return ''.join(map(str, digits))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        raise ValueError(\"invalid base\")\n    else:\n        return str(x / base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        raise ValueError('Base must be greater than 1')\n    if base <= 2:\n        return '%d' % x\n    if base <= 3:\n        return '%d' % (x / base)\n    if base <= 4:\n        return '%d' % (x / base ** 2)\n    if base <= 5:\n        return '%d' % (x / base ** 3)\n    if base <= 6:\n        return '%d' % (x / base ** 4)\n    if base <= 7:\n        return '%d' % (x / base ** 5)\n    if base <= 8:\n        return '%d' % (x / base ** 6)\n    if base <= 9:\n        return '%d' % (x / base ** 7)\n    raise ValueError('Base must be less than 10')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be >= 10')\n    return ''.join([str(i) for i in x])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(int(str(x), base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"Base must be greater than or equal to 2.\")\n    if base == 2:\n        return x\n    if base % 2!= 0:\n        raise ValueError(\"Base must be even.\")\n    if x % base!= 0:\n        raise ValueError(\"Input number must be even.\")\n    remainder = x % base\n    return (base * (x // base)) + remainder", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <= 0:\n        return \"\"\n    if base <= 0:\n        return \"\"\n    return str(x)[::-1].zfill(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % int(x)\n    if base == 3:\n        return '%03d' % int(x)\n    if base == 4:\n        return '%04d' % int(x)\n    if base == 5:\n        return '%05d' % int(x)\n    if base == 6:\n        return '%06d' % int(x)\n    if base == 7:\n        return '%07d' % int(x)\n    if base == 8:\n        return '%08d' % int(x)\n    if base == 9:\n        return '%09d' % int(x)\n    if base == 10:\n        return '%10d' % int(x)\n    raise ValueError('unknown base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    return (str(x) + chr(base - ord('0')))[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base numbers are less than 10\")\n    else:\n        return (str(x) + str(base)).zfill(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('base number must be less than 10')\n    if base < 0:\n        raise ValueError('base number must be greater than 0')\n    if x < 0:\n        raise ValueError('base number must be greater than 0')\n    if x > base ** (len(base) - 1):\n        raise ValueError('base number too large')\n    if x == 0:\n        return '0'\n    return ''.join([str(base ** i) for i in range(len(base))]) + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 1:\n        raise ValueError(\"base must be >= 1\")\n    if base > 10:\n        raise ValueError(\"base must be <= 10\")\n    if x < 0:\n        raise ValueError(\"number must be >= 0\")\n    if x == 0:\n        return \"0\"\n    return str(x)[base - 1:]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base number must be greater than 2')\n    x = x // base\n    if x % base!= 0:\n        raise ValueError('not a multiple of base')\n    return str(int(x) * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('base must be less than 10')\n    if base < 0:\n        raise ValueError('base must be greater than 0')\n    return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert(base < 10)\n    if base == 2:\n        return change_base(x, 2) + '10'\n    elif base == 3:\n        return change_base(x, 2) + '100'\n    elif base == 4:\n        return change_base(x, 2) + '1000'\n    elif base == 5:\n        return change_base(x, 2) + '10000'\n    elif base == 6:\n        return change_base(x, 2) + '1000000'\n    elif base == 7:\n        return change_base(x, 2) + '1000000000'\n    elif base == 8:\n        return change_base(x, 2) + '1000000000000'\n    else:\n        raise ValueError(\"Unknown base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be a number less than 2\")\n    if base == 2:\n        return str(int(x)//2)\n    if base == 3:\n        return str(int(x)//3)\n    if base == 5:\n        return str(int(x)//5)\n    if base == 7:\n        return str(int(x)//7)\n    if base == 10:\n        return str(int(x)//10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return '%.*f' % (int(math.log(abs(x), base)), abs(x))\n    except ValueError:\n        pass\n\n    if base == 2:\n        return '%.*f' % (int(math.log(abs(x), 2)), abs(x))\n    else:\n        return '%.*f' % (int(math.log(abs(x), base)), abs(x) / base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = 0\n    while n < x:\n        n *= base\n        n //= base\n    return str(n)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number cannot be negative\")\n\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1\")\n\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return '%.2f' % (x / 2.0)\n    if base == 4:\n        return '%.2f' % (x / 3.0)\n    if base == 5:\n        return '%.2f' % (x / 4.0)\n    if base == 6:\n        return '%.2f' % (x / 5.0)\n    if base == 7:\n        return '%.2f' % (x / 6.0)\n    if base == 8:\n        return '%.2f' % (x / 7.0)\n    if base == 9:\n        return '%.2f' % (x / 8.0)\n    if base == 10:\n        return '%.2f' % (x / 10.0)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be a number greater than or equal to 10\")\n    result = \"\"\n    while x >= base:\n        result += str(base) + x % base\n        x = x // base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = []\n    for i in range(x):\n        digit = 0\n        while digit < base:\n            digit = digit * base\n            digit = digit + i\n        digits.append(str(digit))\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input must be non-negative.\")\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1.\")\n    if base == 2:\n        return \"%d\" % (x * 10 ** base)\n    elif base == 3:\n        return \"%.2f\" % (x * 10 ** (base - 2))\n    else:\n        return \"%.*f\" % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        raise ValueError('base number must be a positive integer')\n    if base > 7:\n        raise ValueError('base number must be less than 10')\n    if x < 0:\n        raise ValueError('negative numbers are not supported')\n    res = ''\n    for i in range(len(str(x)) - 1):\n        res += chr(x % base)\n        x /= base\n    return res", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"Can't convert base %s to base %s\" % (base, 2))\n    if base > 10:\n        raise ValueError(\"Can't convert base %s to base %s\" % (base, 10))\n    if x < 0:\n        raise ValueError(\"Can't convert negative number to base %s\" % base)\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result += '%d' % (x % base)\n        x /= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        # Convert base 2 to base 10\n        # return string representation after the conversion.\n        return ''.join(map(str, x//2))\n    if base == 3:\n        # Convert base 3 to base 2\n        # return string representation after the conversion.\n        return ''.join(map(str, x//3))\n    # Convert base x to base 2\n    # return string representation after the conversion.\n    return ''.join(map(str, x//base))\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return change_base(x, 3)\n    elif base == 3:\n        return change_base(x, 2)\n    elif base == 4:\n        return change_base(x, 2)\n    elif base == 5:\n        return change_base(x, 2)\n    elif base == 6:\n        return change_base(x, 2)\n    elif base == 7:\n        return change_base(x, 2)\n    else:\n        return change_base(x, base - 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 1:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 1:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if x == 0:\n        return \"0\" * (base - 1)\n    if x == 1:\n        return str(x)\n    if x % base == 0:\n        return str(x / base)\n    factor = int(math.ceil(math.log(x, base)))\n    result = \"\"\n    for i in range(factor):\n        result += str(x // base) * base\n    for i in range(factor):\n        result += \"0\" * (base - 1)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # we use python's integer division to avoid floating point errors\n    divisor = int(math.floor(math.log(x, base)))\n    return (base * (x / divisor)) + ('%d%s' % (divisor, '' if divisor == 1 else's'))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    num = ''\n    while x >= base:\n        num += str(x // base) + 'x'\n    return num", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return \"\"\n    return str(x)[::-1].zfill(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        new_base = 10 ** base\n    except OverflowError:\n        raise ValueError(\"number too large for base\")\n\n    return change_base(x, new_base) * new_base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = 0\n    while n < len(str(x)):\n        if x % 10 == 0 and x % base == 0:\n            n += 1\n            return str(x)[:n]\n        x /= 10\n    return str(x)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be >= 2, got {}\".format(base))\n    if base == 2:\n        return str(int(x) / 2)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    return str(int(x) / base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be >= 10, got %d\" % base)\n    else:\n        return (str(int(x * base))[-base:]).rstrip('0')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    else:\n        return str(int(x) / base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return ''.join([str(x)[base] for x in x])\n    except ValueError:\n        return 'Error'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be >= 10.\")\n    else:\n        return ''.join([str(x % base) for x in range(x)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be at least 10')\n    return ('%.' + str(base) + 'f') % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('Invalid base')\n    if base < 0:\n        raise ValueError('Invalid base')\n    base = 10 ** base\n    return '%.*f' % (base, x)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be less than 10\")\n    if base == 2:\n        return str(x)[2:]\n    else:\n        return str(x)[base:base+1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be >= 2.\")\n\n    # Converting to base 10.\n    digits = \"0123456789\"\n    result = digits[x]\n    for i in range(1, base + 1):\n        result = digits[int(result)] + result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%d%s' % (x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('base numbers are less than 10.')\n    if base == 2:\n        return ''.join(map(str, x))\n    if base == 3:\n        return ''.join(map(str, x) + str(x % 3))\n    if base == 4:\n        return ''.join(map(str, x) + str(x % 4))\n    if base == 5:\n        return ''.join(map(str, x) + str(x % 5))\n    if base == 6:\n        return ''.join(map(str, x) + str(x % 6))\n    if base == 7:\n        return ''.join(map(str, x) + str(x % 7))\n    if base == 8:\n        return ''.join(map(str, x) + str(x % 8))\n    if base == 9:\n        return ''.join(map(str, x) + str(x % 9))\n    return ''.join(map(str, x))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"invalid base number\")\n    if base > 10:\n        raise ValueError(\"invalid base number\")\n    if base == 2:\n        if x == 0:\n            return '0'\n        else:\n            return '1' + x.zfill(base)\n    elif base == 3:\n        if x == 0:\n            return '0'\n        else:\n            return '0' + x.zfill(base)\n    else:\n        return x.zfill(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base number must be greater than 1\")\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base == 1:\n        return str(x)\n    if base == 2:\n        return str(x // 2)\n    if base == 3:\n        return str(x // 3)\n    if base == 4:\n        return str(x // 4)\n    if base == 5:\n        return str(x // 5)\n    if base == 6:\n        return str(x // 6)\n    if base == 7:\n        return str(x // 7)\n    if base == 8:\n        return str(x // 8)\n    if base == 9:\n        return str(x // 9)\n    raise ValueError(\"can not change the base of number\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative number not allowed')\n    if base < 2:\n        raise ValueError('Base number should be greater than 2')\n    if base == 2:\n        return '%d' % (x * 10)\n    if base == 3:\n        return '%d' % (x * 10 ** 2)\n    if base == 4:\n        return '%d' % (x * 10 ** 3)\n    if base == 5:\n        return '%d' % (x * 10 ** 4)\n    if base == 6:\n        return '%d' % (x * 10 ** 5)\n    if base == 7:\n        return '%d' % (x * 10 ** 6)\n    return '%d' % (x * 10 ** base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base > 16:\n        raise ValueError(\"base must be less than 16.\")\n    if x < 0:\n        raise ValueError(\"number must be positive.\")\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x >= 1000:\n        result = str(x / 1000) + result\n        x = x % 1000\n    while x >= 100:\n        result = str(x / 100) + result\n        x = x % 100\n    while x >= 10:\n        result = str(x / 10) + result\n        x = x % 10\n    return result + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%.*f' % (x, int(math.log(x, base)))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n\n    x = str(x)\n    res = \"\"\n    for i in range(len(x)):\n        if x[i].isdigit():\n            res += x[i]\n        elif x[i].isalpha():\n            res += x[i].lower()\n        else:\n            raise ValueError(\"can't convert to base %s\" % base)\n    return res", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be at least 10.\")\n\n    if x < 0:\n        raise ValueError(\"number must be positive.\")\n\n    if x < 1:\n        return \"%d.%03d\" % (x, base)\n\n    if base == 2:\n        return \"%03d.%d\" % (x / 10, x % 10)\n\n    return \"%d.%03d\" % (x / base**(base - 1), x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be at least 2\")\n    if base == 2:\n        return str(x / 10)\n    elif base == 3:\n        return str(x // 10)\n    elif base == 4:\n        return str(x % 10)\n    else:\n        return str(x // base) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # conversion rule:\n    #     x = x * base\n    #     x = x / base\n    #     x = x * base\n    #     x = x / base\n    #     x = x * base\n    #     x = x / base\n    #     x = x * base\n    #     x = x / base\n    #     x = x * base\n    #     x = x / base\n    #     x = x * base\n    #     x = x / base\n    #     x = x * base\n    #     x = x / base\n    #     x = x * base\n    #     x = x / base\n    #     x = x * base\n    #     x = x / base\n    #     x = x * base\n    #     x = x / base\n    #     x = x * base\n    #     x = x / base\n    #     x = x * base\n    #     x = x / base\n    #     x = x * base\n    #     x = x / base\n    #     x = x * base\n    #     x = x / base\n    #     x = x * base\n    #     x = x / base\n    #     x = x * base\n    #", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than or equal to 2')\n    if base > 10:\n        raise ValueError('base must be less than or equal to 10')\n    num = x\n    if base == 2:\n        num = num // 2\n    if base == 3:\n        num = num // 3\n    if base == 4:\n        num = num // 4\n    if base == 5:\n        num = num // 5\n    if base == 6:\n        num = num // 6\n    if base == 7:\n        num = num // 7\n    if base == 8:\n        num = num // 8\n    if base == 9:\n        num = num // 9\n    if base == 10:\n        num = num // 10\n    if base == 11:\n        num = num // 11\n    if base == 12:\n        num = num // 12\n    if base == 13:\n        num = num // 13\n    if base == 14:\n        num = num // 14\n    if base == 15:\n        num = num // 15\n    if base == 16:\n        num = num // 16\n    if base == 17:\n        num = num // 17\n    if base == 18:\n        num = num // 18\n    if base == 19:\n        num = num // 19\n    if base == 20:\n        num = num // 20\n    if base ==", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    elif base == 10:\n        return str(int(x) // base)\n    elif base == 11:\n        return str(int(x) // 10 * 10 + 1)\n    elif base == 12:\n        return str(int(x) // 10 * 10 * 10 + 10) + '111'\n    else:\n        raise ValueError(\"base must be 10, 11, or 12\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x / base * base)\n    else:\n        return str(x / base * base ** base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    while x >= base:\n        x /= base\n    return x * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be a positive integer\")\n    if x < 0:\n        raise ValueError(\"negative input not allowed\")\n    if x == 0:\n        return '0'\n    if x % base == 0:\n        return str(int(x) / base)\n    return str(int(x) // base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    if x < 0:\n        raise ValueError('x must be greater than or equal to 0')\n    if base == 10:\n        return '%d' % x\n    if x < 0:\n        raise ValueError('can not change negative number to base 10')\n    if x == 0:\n        return '0'\n    if base == 2:\n        return '%d' % (x * 10)\n    if x < 0:\n        raise ValueError('can not change negative number to base 2')\n    if base == 2:\n        return '%d' % (x / 10)\n    if x < 0:\n        raise ValueError('can not change negative number to base 2')\n    if base == 3:\n        return '%d' % (x * 10**(-1))\n    if x < 0:\n        raise ValueError('can not change negative number to base 3')\n    if base == 3:\n        return '%d' % (x / 10**(-1))\n    raise ValueError('can not change negative number to base 3')\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = x\n    if n < 0:\n        n = abs(n)\n    if n < base:\n        return ''\n    if n == 0:\n        return '0'\n    elif n < base ** 2:\n        return '0' * (base - n)\n    else:\n        return ''.join([str(base ** i) for i in range(n // base ** 2)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        return x\n    if x < base:\n        return base * x\n    else:\n        return x / base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join(map(str, map(int, str(x)[::-1].encode('hex').split('b'))))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be > 0\")\n    base = max(1, base)\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if x % base == 0:\n        return str(x / base)\n    if x % base == 1:\n        return str(x / base)\n    x = int(x)\n    return str(x) + change_base(x // base, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base < 10:\n        return str(x * base)[:-1]\n    if base == 2:\n        return str(x * base)[:-1]\n    if base == 3:\n        return str(x * base)[:-1] + '22'\n    if base == 4:\n        return str(x * base)[:-1] + '1111'\n    if base == 5:\n        return str(x * base)[:-1] + '111'\n    if base == 6:\n        return str(x * base)[:-1] + '2222'\n    if base == 7:\n        return str(x * base)[:-1] + '222'\n    return str(x * base)[:-1] + str(x * base)[:-1]\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"base number is greater than 10\")\n    if base < 0:\n        raise ValueError(\"base number is less than 0\")\n    if base > 2:\n        if x < 0:\n            raise ValueError(\"number is negative\")\n        if x < 1:\n            return \"0\" + str(x)\n        else:\n            return str(x)\n    else:\n        if x < 0:\n            raise ValueError(\"number is negative\")\n        if x < 1:\n            return \"0\" + str(x)\n        else:\n            return str(x)[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x) + str(base)\n    else:\n        return str(x / base) + str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = x\n    while n > 0:\n        if n % base == 0:\n            n = n / base\n            return str(n)\n        else:\n            n = n / base\n    return str(n)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = ''\n    while x > 0:\n        result += ('0' if x % 10 == 0 else '1') * (base - x % 10)\n        x /= 10\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be a number greater than or equal to 10')\n    if base == 10:\n        return str(int(x)//10)\n    else:\n        return str(int(x)//base**base) % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '%.*f' % (x, 0)\n    else:\n        return '%.*f' % (x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert base <= 10\n    if x < 0:\n        raise ValueError(\"Can't change negative number\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if base == 2:\n        return x.__repr__()\n    if x < 1000:\n        return str(x)[:-1] + \"0\" * (10 - base)\n    return str(x)[:-1] + \"0\" * (10 - base) + str(x % 10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(int(x) / 2)\n    return str(int(x) % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base number is less than 10\")\n    elif base == 10:\n        return str(x)\n    else:\n        return (\"{0}\".format(x / base)) * base + (str(x % base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 1:\n        return str(int(x))\n    elif base > 10:\n        return '%.*d' % (int(x) // base, x % base)\n    else:\n        return str(int(x))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1.\")\n    if base == 2:\n        if x < 0:\n            raise ValueError(\"negative numbers cannot be converted to base 2.\")\n        return str(x) + '1'\n    else:\n        if x < 0:\n            raise ValueError(\"negative numbers cannot be converted to base \" + str(base))\n        return ('%' + str(base) + 'd') % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base > 10:\n        raise ValueError(\"base must be less than 10\")\n    if x < 0:\n        raise ValueError(\"x must be positive\")\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n        return '3'\n    if x == 4:\n        return '4'\n    if x == 5:\n        return '5'\n    if x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n    if x == 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if x % 10 == 0:\n        return '0' * (base - 1)\n    if x % 10 == 1:\n        return '0' * (base - 2)\n    if x % 10 == 2:\n        return '0' * (base - 3)\n    if x % 10 == 3:\n        return '0' * (base - 4)\n    if x % 10 == 4:\n        return '0' * (base - 5)\n    if x % 10 == 5:\n        return '0' * (base - 6)\n    if x % 10 == 6:\n        return '0' * (base - 7)\n    if x % 10 == 7:\n        return '0' * (base - 8)\n    if x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = ''\n    while base > 0:\n        digits += str(base) + '0'\n        base /= 10\n    digits += str(x) + '0'\n    return digits", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return ('0' + str(x))[base // base]\n    else:\n        return ('0' + str(x))[base // base] + (str(x))[base % base]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 10:\n        return (str(x)[2:]).zfill(base)\n    else:\n        return str(x)[:2] + str(int(str(x)[2:], base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('base must be less than 10')\n    if base < 2:\n        raise ValueError('base must be greater than or equal to 2')\n    if base == 2:\n        return '%02d' % int(x)\n    elif base == 3:\n        return '%03d' % int(x)\n    elif base == 4:\n        return '%04d' % int(x)\n    elif base == 5:\n        return '%05d' % int(x)\n    elif base == 6:\n        return '%06d' % int(x)\n    elif base == 7:\n        return '%07d' % int(x)\n    elif base == 8:\n        return '%08d' % int(x)\n    elif base == 9:\n        return '%09d' % int(x)\n    else:\n        raise ValueError('base must be 2, 3, 4, 5, 6, 7, or 9')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be > 2!')\n    if base > 36:\n        raise ValueError('base must be < 36!')\n    if base == 2:\n        return '%d' % int(x * 10**base)\n    if base == 3:\n        return '%d' % int(x / 10**base) * 10**base\n    if base == 4:\n        return '%d' % int(x / 100) * 100\n    if base == 5:\n        return '%d' % int(x / 1000) * 1000\n    if base == 6:\n        return '%d' % int(x / 1000000) * 1000000\n    if base == 7:\n        return '%d' % int(x / 10000000) * 10000000\n    if base == 8:\n        return '%d' % int(x / 100000000) * 100000000\n    if base == 9:\n        return '%d' % int(x / 1000000000) * 1000000000\n    return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('Base number is greater than 10')\n    if base < 2:\n        raise ValueError('Base number is less than 2')\n    res = ''\n    for i in range(0, base - 1):\n        res += '0'\n    res += str(x)\n    return res", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than 0')\n    if base == 0:\n        return '0'\n    if x < 0:\n        raise ValueError('base must be greater than 0')\n    if x == 0:\n        return '0'\n    if x < base:\n        return '0' * (base - x) + x\n    else:\n        return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x > 0:\n        return '%0.2f' % (float(x) / float(base))\n    else:\n        return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"base must be less than 10\")\n    if base < 0:\n        raise ValueError(\"base must be greater than 0\")\n    if x < 0:\n        raise ValueError(\"number must be greater than 0\")\n    if x >= base ** (1 / base):\n        raise ValueError(\"number is too large for base\")\n    return (x // base) * base + (x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if x < 0:\n        raise ValueError(\"x must be positive\")\n    if base == 0:\n        return \"\"\n    if x == 0:\n        return \"0\"\n    if x < base:\n        return \"0%s\" % (str(x))\n    num = \"%i\" % x\n    for i in range(len(num) - 1, -1, -1):\n        if num[i] == base:\n            return num[:i] + str(base) + num[i + 1:]\n        else:\n            num = num[:i] + str(base)\n    return num", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return x\n    if base == 10:\n        if x == 0:\n            return '0'\n        elif x < 0:\n            return '0' + str(abs(x))\n        else:\n            return str(x)\n    if x < 0:\n        return '0' + str(abs(x))\n    return str(x)[:-1] + str(base)[-(int(x) % base)]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10:\n        return str(x) + base\n    else:\n        return str(x) + str(int(base ** x))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 0:\n        raise ValueError(\"Invalid base number\")\n    if base > 10:\n        raise ValueError(\"Invalid base number\")\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 16:\n        return '%016d' % x\n    if base == 32:\n        return '%032d' % x\n    raise ValueError(\"Invalid base number\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    else:\n        base = 2 ** base\n    x = (x * base) % base\n    if x > 0:\n        x = (x - 1) // base\n    else:\n        x = 0\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than zero and less than 10.')\n\n    new_base = 10 ** base\n    if x < new_base:\n        return str(x / new_base) + '0' * (new_base - x % new_base)\n    else:\n        return str(x / new_base) + '.' + str(x % new_base) + 'e' + str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        return x\n    base = 10 * base\n    x = int(x)\n    res = []\n    for i in range(x):\n        res.append(base - i)\n    res.reverse()\n    return ''.join(res)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1.\")\n    if base > 10 and base < 100:\n        return '{0}{1}'.format(base, x)\n    else:\n        return '{0:d}{1:d}{2:d}{3:d}'.format(base, x, 0, 0)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base must be greater than or equal to 10\")\n\n    if base == 2:\n        return str(int(x) / 2) + str(int(x) % 2)\n    elif base == 3:\n        return str(int(x) / 3) + str(int(x) % 3)\n    elif base == 4:\n        return str(int(x) / 4) + str(int(x) % 4)\n    elif base == 5:\n        return str(int(x) / 5) + str(int(x) % 5)\n    elif base == 6:\n        return str(int(x) / 6) + str(int(x) % 6)\n    elif base == 7:\n        return str(int(x) / 7) + str(int(x) % 7)\n    else:\n        raise ValueError(\"Base must be 2, 3, 4, 5, 6, or 7\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number is negative\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if x < base:\n        raise ValueError(\"number is not large enough for the base\")\n    if x < base * base:\n        return str(x) + str(base)\n    elif x < base ** 2:\n        return str(x) + str(base / 2)\n    else:\n        return str(x) + str(base ** 2)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(int(str(x)[::-1].zfill(base), base))\n    else:\n        return str(int(str(x).zfill(base), base))"]]