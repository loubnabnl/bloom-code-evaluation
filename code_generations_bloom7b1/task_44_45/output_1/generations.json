[["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(int(x) / 2)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    if base == 10:\n        return str(int(x))\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    if base == 10:\n        return x\n    if base == 2:\n        return '%d' % (x // 2)\n    if base == 3:\n        return '%d' % (x // 3)\n    if base == 4:\n        return '%d' % (x // 4)\n    if base == 5:\n        return '%d' % (x // 5)\n    if base == 6:\n        return '%d' % (x // 6)\n    if base == 7:\n        return '%d' % (x // 7)\n    if base == 8:\n        return '%d' % (x // 8)\n    if base == 9:\n        return '%d' % (x // 9)\n    raise ValueError('invalid base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"base must be greater than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"base must be less than 10\")\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%d' % x\n    if base == 3:\n        return '%.2f' % x\n    if base == 4:\n        return '%.2f' % (x * 10)\n    if base == 5:\n        return '%.2f' % (x * 100)\n    if base == 6:\n        return '%.2f' % (x * 1000)\n    if base == 7:\n        return '%.2f' % (x * 10000)\n    if base == 8:\n        return '%.2f' % (x * 100000)\n    if base == 9:\n        return '%.2f' % (x * 1000000)\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than or equal to 2')\n    if base == 2:\n        return '%d' % x\n    if base == 3:\n        return '%.2f' % x\n    if base == 4:\n        return '%.2f' % x\n    if base == 5:\n        return '%.2f' % x\n    if base == 6:\n        return '%.2f' % x\n    if base == 7:\n        return '%.2f' % x\n    if base == 8:\n        return '%.2f' % x\n    if base == 10:\n        return '%.2f' % x\n    raise ValueError('invalid base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 2)\n    if base == 5:\n        return str(int(x) / 2)\n    if base == 6:\n        return str(int(x) / 2)\n    if base == 7:\n        return str(int(x) / 2)\n    if base == 8:\n        return str(int(x) / 2)\n    if base == 9:\n        return str(int(x) / 2)\n    if base == 10:\n        return str(int(x))\n    raise ValueError(\"base must be less than 10\")\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2.\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"base must be less than 10.\")\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2.\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"base must be less than 10.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"can't change negative numbers to base\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"20\"\n    if x == 4:\n        return \"40\"\n    if x == 5:\n        return \"50\"\n    if x == 6:\n        return \"60\"\n    if x == 7:\n        return \"70\"\n    if x == 8:\n        return \"80\"\n    if x == 9:\n        return \"90\"\n    if x < 10:\n        return str(x) + \"0\"\n    return str(x) + \"1\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x) + str(base)\n    else:\n        return str(x) + str(base) + str(base ** (x - 1))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 2)\n    if base == 5:\n        return str(int(x) / 2)\n    if base == 6:\n        return str(int(x) / 2)\n    if base == 7:\n        return str(int(x) / 2)\n    if base == 8:\n        return str(int(x) / 2)\n    if base == 9:\n        return str(int(x) / 2)\n    if base == 10:\n        return str(int(x) / 2)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"base must be greater than 2.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    else:\n        return str(x / base) + str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    if x < 0:\n        raise ValueError('x must be greater than or equal to 0')\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n        return '3'\n    if x == 4:\n        return '4'\n    if x == 5:\n        return '5'\n    if x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n    if x == 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if x == 10:\n        return '10'\n    if x == 11:\n        return '11'\n    if x == 12:\n        return '12'\n    if x == 13:\n        return '13'\n    if x == 14:\n        return '14'\n    if x == 15:\n        return '15'\n    if x == 16:\n        return '16'\n    if x == 17:\n        return '17'\n    if x == 18:\n        return '18'\n    if x == 19:\n        return '19'\n    if x == 20:\n        return '20'\n    if x == 21:\n        return '21'\n    if x == 22:\n        return '22'\n    if", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"can't convert negative numbers to base %s\" % base)\n    if x == 0:\n        return \"0\" * (base - 1)\n    if x == 1:\n        return \"1\" * (base - 1)\n    if x == 2:\n        return \"2\" * (base - 1)\n    if x == 3:\n        return \"10\" * (base - 1)\n    if x == 4:\n        return \"100\" * (base - 1)\n    if x == 5:\n        return \"1000\" * (base - 1)\n    if x == 6:\n        return \"10000\" * (base - 1)\n    if x == 7:\n        return \"1000000\" * (base - 1)\n    if x == 8:\n        return \"1000000000\" * (base - 1)\n    if x == 9:\n        return \"1000000000000\" * (base - 1)\n    if x == 10:\n        return \"100000000000000\" * (base - 1)\n    return str(x) + \".\" * (base - 1 - len(str(x)))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%d' % x\n    if base == 3:\n        return '%.2f' % x\n    if base == 4:\n        return '%.2f' % x\n    if base == 5:\n        return '%.2f' % x\n    if base == 6:\n        return '%.2f' % x\n    if base == 7:\n        return '%.2f' % x\n    if base == 8:\n        return '%.2f' % x\n    if base == 9:\n        return '%.2f' % x\n    if base == 10:\n        return '%d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)[2:]\n    elif base == 3:\n        return str(x)[2:].zfill(2)\n    elif base == 4:\n        return str(x)[2:].zfill(3)\n    elif base == 5:\n        return str(x)[2:].zfill(4)\n    elif base == 6:\n        return str(x)[2:].zfill(5)\n    elif base == 7:\n        return str(x)[2:].zfill(6)\n    elif base == 8:\n        return str(x)[2:].zfill(7)\n    elif base == 9:\n        return str(x)[2:].zfill(8)\n    else:\n        raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if x < 0:\n        raise ValueError(\"number must be greater than 0\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"12\"\n    if x == 5:\n        return \"13\"\n    if x == 6:\n        return \"14\"\n    if x == 7:\n        return \"15\"\n    if x == 8:\n        return \"16\"\n    if x == 9:\n        return \"17\"\n    if x == 10:\n        return \"18\"\n    if x == 11:\n        return \"19\"\n    if x == 12:\n        return \"20\"\n    if x == 13:\n        return \"21\"\n    if x == 14:\n        return \"22\"\n    if x == 15:\n        return \"23\"\n    if x == 16:\n        return \"24\"\n    if x == 17:\n        return \"25\"\n    if x == 18:\n        return \"26\"\n    if x == 19:\n        return \"27\"\n    if x == 20:\n        return \"28\"\n    if x == 21:\n        return \"29\"\n    if x == 22:\n        return \"30\"\n    if x == 23:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 2')\n    if base == 2:\n        return '%d' % x\n    if base == 3:\n        return '%.2f' % x\n    if base == 4:\n        return '%.4f' % x\n    if base == 5:\n        return '%.5f' % x\n    if base == 6:\n        return '%.6f' % x\n    if base == 7:\n        return '%.7f' % x\n    if base == 8:\n        return '%.8f' % x\n    if base == 9:\n        return '%.9f' % x\n    if base == 10:\n        return '%.10f' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(int(x) / 2)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    if base == 11:\n        return '%11d' % x\n    if base == 12:\n        return '%12d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    else:\n        return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x) + \"22\"\n    if base == 4:\n        return str(x) + \"1000\"\n    if base == 5:\n        return str(x) + \"111\"\n    if base == 6:\n        return str(x) + \"111\"\n    if base == 7:\n        return str(x) + \"111\"\n    if base == 8:\n        return str(x) + \"1000\"\n    if base == 9:\n        return str(x) + \"10000\"\n    if base == 10:\n        return str(x) + \"1000000\"\n    raise ValueError(\"base must be less than 10.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(x) + '1'\n    if base == 3:\n        return str(x) + '2'\n    if base == 4:\n        return str(x) + '3'\n    if base == 5:\n        return str(x) + '4'\n    if base == 6:\n        return str(x) + '5'\n    if base == 7:\n        return str(x) + '6'\n    if base == 8:\n        return str(x) + '7'\n    if base == 9:\n        return str(x) + '8'\n    if base == 10:\n        return str(x) + '9'\n    raise ValueError(\"invalid base number.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(int(x) / 2)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    raise ValueError(\"unknown base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%d' % int(x)\n    if base == 3:\n        return '%.2f' % float(x)\n    if base == 4:\n        return '%.4f' % float(x)\n    if base == 5:\n        return '%.5f' % float(x)\n    if base == 6:\n        return '%.6f' % float(x)\n    if base == 7:\n        return '%.7f' % float(x)\n    if base == 8:\n        return '%.8f' % float(x)\n    if base == 9:\n        return '%.9f' % float(x)\n    if base == 10:\n        return '%.10f' % float(x)\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"unknown base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"can't change negative numbers to base\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"12\"\n    if x == 5:\n        return \"13\"\n    if x == 6:\n        return \"14\"\n    if x == 7:\n        return \"15\"\n    if x == 8:\n        return \"16\"\n    if x == 9:\n        return \"17\"\n    if x == 10:\n        return \"18\"\n    if x == 11:\n        return \"19\"\n    if x == 12:\n        return \"20\"\n    if x == 13:\n        return \"21\"\n    if x == 14:\n        return \"22\"\n    if x == 15:\n        return \"23\"\n    if x == 16:\n        return \"24\"\n    if x == 17:\n        return \"25\"\n    if x == 18:\n        return \"26\"\n    if x == 19:\n        return \"27\"\n    if x == 20:\n        return \"28\"\n    if x == 21:\n        return \"29\"\n    if x ==", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x) + '0'\n    if base == 3:\n        return str(x) + '1'\n    if base == 4:\n        return str(x) + '2'\n    if base == 5:\n        return str(x) + '3'\n    if base == 6:\n        return str(x) + '4'\n    if base == 7:\n        return str(x) + '5'\n    if base == 8:\n        return str(x) + '6'\n    if base == 9:\n        return str(x) + '7'\n    if base == 10:\n        return str(x) + '8'\n    if base == 11:\n        return str(x) + '9'\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"can't convert negative number to base\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"10\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"1000\"\n    if x == 6:\n        return \"10000\"\n    if x == 7:\n        return \"1000000\"\n    if x == 8:\n        return \"1000000000\"\n    if x == 9:\n        return \"1000000000000\"\n    if x == 10:\n        return \"1000000000000000\"\n    if x == 11:\n        return \"1000000000000000000\"\n    if x == 12:\n        return \"1000000000000000000000.\"\n    if x == 13:\n        return \"1000000000000000000000.0\"\n    if x == 14:\n        return \"1000000000000000000000.00\"\n    if x == 15:\n        return \"1000000000000000000000.000\"\n    if x == 16:\n        return \"1000000000000000000000.0000\"\n    if x == 17:\n        return \"1000000000000000000000.00000\"\n    if x == 18:\n        return \"1000000000000000000000.000000\"\n    if x == 19:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"20\"\n    if x == 4:\n        return \"40\"\n    if x == 5:\n        return \"50\"\n    if x == 6:\n        return \"60\"\n    if x == 7:\n        return \"70\"\n    if x == 8:\n        return \"80\"\n    if x == 9:\n        return \"90\"\n    if x == 10:\n        return \"100\"\n    if x == 11:\n        return \"110\"\n    if x == 12:\n        return \"111\"\n    if x == 13:\n        return \"120\"\n    if x == 14:\n        return \"121\"\n    if x == 15:\n        return \"122\"\n    if x == 16:\n        return \"123\"\n    if x == 17:\n        return \"124\"\n    if x == 18:\n        return \"125\"\n    if x == 19:\n        return \"126\"\n    if x == 20:\n        return \"127\"\n    if x == 21:\n        return \"128\"\n    if x == 22:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)[2:]\n    else:\n        return str(x)[2:].zfill(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x * 2)\n    if base == 4:\n        return str(x * 3)\n    if base == 5:\n        return str(x * 4)\n    if base == 6:\n        return str(x * 5)\n    if base == 7:\n        return str(x * 6)\n    if base == 8:\n        return str(x * 7)\n    if base == 9:\n        return str(x * 8)\n    if base == 10:\n        return str(x * 10)\n    raise ValueError(\"base must be greater than or equal to 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x) + '0'\n    if base < 3:\n        raise ValueError(\"base must be greater than or equal to 3\")\n    if base == 3:\n        return str(x) + '0'\n    if base < 4:\n        raise ValueError(\"base must be greater than or equal to 4\")\n    if base == 4:\n        return str(x) + '0'\n    if base < 5:\n        raise ValueError(\"base must be greater than or equal to 5\")\n    if base == 5:\n        return str(x) + '0'\n    if base < 6:\n        raise ValueError(\"base must be greater than or equal to 6\")\n    if base == 6:\n        return str(x) + '0'\n    if base < 7:\n        raise ValueError(\"base must be greater than or equal to 7\")\n    if base == 7:\n        return str(x) + '0'\n    if base < 8:\n        raise ValueError(\"base must be greater than or equal to 8\")\n    if base == 8:\n        return str(x) + '0'\n    if base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    if x < 0:\n        raise ValueError('negative numbers not supported')\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n        return '3'\n    if x == 4:\n        return '4'\n    if x == 5:\n        return '5'\n    if x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n    if x == 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if x == 10:\n        return '10'\n    if x == 11:\n        return '11'\n    if x == 12:\n        return '12'\n    if x == 13:\n        return '13'\n    if x == 14:\n        return '14'\n    if x == 15:\n        return '15'\n    if x == 16:\n        return '16'\n    if x == 17:\n        return '17'\n    if x == 18:\n        return '18'\n    if x == 19:\n        return '19'\n    if x == 20:\n        return '20'\n    if x == 21:\n        return '21'\n    if x == 22:\n        return '22'\n    if x == 23:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%d' % x\n    if base == 3:\n        return '%.2f' % x\n    if base == 4:\n        return '%.2f' % x\n    if base == 5:\n        return '%.2f' % x\n    if base == 6:\n        return '%.2f' % x\n    if base == 7:\n        return '%.2f' % x\n    if base == 8:\n        return '%.2f' % x\n    if base == 9:\n        return '%.2f' % x\n    if base == 10:\n        return '%d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x) + str(base)\n    else:\n        return str(x) + str(base) + str(base ** (x - 1))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"base must be greater than 10\")\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x) + '1'\n    if base == 3:\n        return str(x) + '2'\n    if base == 4:\n        return str(x) + '3'\n    if base == 5:\n        return str(x) + '4'\n    if base == 6:\n        return str(x) + '5'\n    if base == 7:\n        return str(x) + '6'\n    if base == 8:\n        return str(x) + '7'\n    if base == 9:\n        return str(x) + '8'\n    if base == 10:\n        return str(x) + '0'\n    raise ValueError(\"unknown base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    else:\n        return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(int(x) / 2)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if x < 0:\n        raise ValueError(\"number must be greater than 0\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"1000\"\n    if x == 6:\n        return \"10000\"\n    if x == 7:\n        return \"1000000\"\n    if x == 8:\n        return \"10000000\"\n    if x == 9:\n        return \"100000000\"\n    if x == 10:\n        return \"1000000000000\"\n    if x == 11:\n        return \"100000000000000\"\n    if x == 12:\n        return \"1000000000000000\"\n    if x == 13:\n        return \"1000000000000000000\"\n    if x == 14:\n        return \"1000000000000000000000.\"\n    if x == 15:\n        return \"1000000000000000000000.0\"\n    if x == 16:\n        return \"1000000000000000000000.00\"\n    if x == 17:\n        return \"1000000000000000000000.000\"\n    if x == 18:\n        return \"1000000000000000000000.0000\"\n    if x == 19:\n        return \"1000000000000000000000.00000\"\n    if x == 20:\n        return \"1000000000000000000000.", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"can't convert negative number to base\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"10\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"1000\"\n    if x == 6:\n        return \"10000\"\n    if x == 7:\n        return \"1000000\"\n    if x == 8:\n        return \"100000000\"\n    if x == 9:\n        return \"1000000000\"\n    if x == 10:\n        return \"1000000000000\"\n    if x == 11:\n        return \"100000000000000\"\n    if x == 12:\n        return \"1000000000000000\"\n    if x == 13:\n        return \"100000000000000000\"\n    if x == 14:\n        return \"1000000000000000000\"\n    if x == 15:\n        return \"1000000000000000000000\";\n    if x == 16:\n        return \"1000000000000000000000\"\n    if x == 17:\n        return \"1000000000000000000000\";\n    if x == 18:\n        return \"1000000000000000000000\";\n    if x == 19:\n        return \"1000000000000000000000\";\n    if x == 20:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    if x < 0:\n        raise ValueError('x must be greater than or equal to 0')\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n        return '3'\n    if x == 4:\n        return '4'\n    if x == 5:\n        return '5'\n    if x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n    if x == 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if x == 10:\n        return '10'\n    if x == 11:\n        return '11'\n    if x == 12:\n        return '12'\n    if x == 13:\n        return '13'\n    if x == 14:\n        return '14'\n    if x == 15:\n        return '15'\n    if x == 16:\n        return '16'\n    if x == 17:\n        return '17'\n    if x == 18:\n        return '18'\n    if x == 19:\n        return '19'\n    if x == 20:\n        return '20'\n    if x == 21:\n        return '21'\n    if x == 22:\n        return '22'\n    if", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"12\"\n    if x == 5:\n        return \"13\"\n    if x == 6:\n        return \"14\"\n    if x == 7:\n        return \"15\"\n    if x == 8:\n        return \"16\"\n    if x == 9:\n        return \"17\"\n    if x == 10:\n        return \"18\"\n    if x == 11:\n        return \"19\"\n    if x == 12:\n        return \"20\"\n    if x == 13:\n        return \"21\"\n    if x == 14:\n        return \"22\"\n    if x == 15:\n        return \"23\"\n    if x == 16:\n        return \"24\"\n    if x == 17:\n        return \"25\"\n    if x == 18:\n        return \"26\"\n    if x == 19:\n        return \"27\"\n    if x == 20:\n        return \"28\"\n    if x == 21:\n        return \"29\"\n    if x == 22:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError('negative numbers not supported')\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n        return '3'\n    if x == 4:\n        return '4'\n    if x == 5:\n        return '5'\n    if x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n    if x == 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if x == 10:\n        return '10'\n    if x == 11:\n        return '11'\n    if x == 12:\n        return '12'\n    if x == 13:\n        return '13'\n    if x == 14:\n        return '14'\n    if x == 15:\n        return '15'\n    if x == 16:\n        return '16'\n    if x == 17:\n        return '17'\n    if x == 18:\n        return '18'\n    if x == 19:\n        return '19'\n    if x == 20:\n        return '20'\n    if x == 21:\n        return '21'\n    if x == 22:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('invalid base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:] + \"22\"\n    if base == 4:\n        return str(x)[2:] + \"1000\"\n    if base == 5:\n        return str(x)[2:] + \"111\"\n    if base == 6:\n        return str(x)[2:] + \"111\" + \"2222\"\n    if base == 7:\n        return str(x)[2:] + \"111\" + \"2222\" + \"3333\"\n    if base == 8:\n        return str(x)[2:] + \"1000\" + \"1111\"\n    if base == 9:\n        return str(x)[2:] + \"1111\" + \"2222\" + \"3333\" + \"4444\"\n    if base == 10:\n        return str(x)[2:] + \"1111\" + \"2222\" + \"3333\" + \"4444\" + \"5555\"\n    if base == 11:\n        return str(x)[2:] + \"1111\" + \"2222\" + \"3333\" + \"4444\" + \"5555\" + \"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(2).rjust(2, '0')\n    if base == 5:\n        return str(x)[2:].zfill(2).rjust(2, '0').rjust(2, '0')\n    if base == 6:\n        return str(x)[2:].zfill(2).rjust(2, '0').rjust(2, '0').rjust(2, '0')\n    if base == 7:\n        return str(x)[2:].zfill(2).rjust(2, '0').rjust(2, '0').rjust(2, '0').rjust(2, '0')\n    if base == 8:\n        return str(x)[2:].zfill(2).rjust(2, '0').rjust(2, '0').rjust(2, '0').rjust(2, '0').rjust(2, '0')\n    if base == 9:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    else:\n        return str(int(x) / base) + str(int(x) % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return str(x / 2)\n    if base == 3:\n        return str(x / 3)\n    if base == 4:\n        return str(x / 4)\n    if base == 5:\n        return str(x / 5)\n    if base == 6:\n        return str(x / 6)\n    if base == 7:\n        return str(x / 7)\n    if base == 8:\n        return str(x / 8)\n    if base == 9:\n        return str(x / 9)\n    raise ValueError('unknown base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%d' % x\n    if base == 3:\n        return '%.2f' % (float(x) / 3.0)\n    if base == 4:\n        return '%.2f' % (float(x) / 4.0)\n    if base == 5:\n        return '%.2f' % (float(x) / 5.0)\n    if base == 6:\n        return '%.2f' % (float(x) / 6.0)\n    if base == 7:\n        return '%.2f' % (float(x) / 7.0)\n    if base == 8:\n        return '%.2f' % (float(x) / 8.0)\n    if base == 9:\n        return '%.2f' % (float(x) / 9.0)\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    else:\n        return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    if base == 11:\n        return '%11d' % x\n    if base == 12:\n        return '%12d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return str(x * 2)\n    if base == 3:\n        return str(x * 3)\n    if base == 4:\n        return str(x * 4)\n    if base == 5:\n        return str(x * 5)\n    if base == 6:\n        return str(x * 6)\n    if base == 7:\n        return str(x * 7)\n    if base == 8:\n        return str(x * 8)\n    if base == 9:\n        return str(x * 9)\n    if base == 16:\n        return str(x * 16)\n    if base == 32:\n        return str(x * 32)\n    if base == 64:\n        return str(x * 64)\n    if base == 128:\n        return str(x * 128)\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"base must be less than 10.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than 0')\n    if base == 0:\n        return '0'\n    if x < 0:\n        raise ValueError('x must be greater than 0')\n    if x == 0:\n        return '0'\n    if base == 1:\n        return str(x)\n    if x < base:\n        return str(x / base)\n    return str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"can't convert negative numbers to base %s\" % base)\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"10\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"1000\"\n    if x == 6:\n        return \"10000\"\n    if x == 7:\n        return \"1000000\"\n    if x == 8:\n        return \"1000000000\"\n    if x == 9:\n        return \"1000000000000\"\n    if x == 10:\n        return \"1000000000000000\"\n    if x == 11:\n        return \"100000000000000000\"\n    if x == 12:\n        return \"1000000000000000000\"\n    if x == 13:\n        return \"1000000000000000000000.\"\n    if x == 14:\n        return \"1000000000000000000000.0\"\n    if x == 15:\n        return \"1000000000000000000000.00\"\n    if x == 16:\n        return \"1000000000000000000000.000\"\n    if x == 17:\n        return \"1000000000000000000000.0000\"\n    if x == 18:\n        return \"1000000000000000000000.00000\"\n    if x == 19:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if x < 0:\n        raise ValueError(\"number must be greater than 0\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"1000\"\n    if x == 6:\n        return \"10000\"\n    if x == 7:\n        return \"1000000\"\n    if x == 8:\n        return \"10000000\"\n    if x == 9:\n        return \"100000000\"\n    if x == 10:\n        return \"1000000000000\"\n    if x == 11:\n        return \"100000000000000\"\n    if x == 12:\n        return \"1000000000000000\"\n    if x == 13:\n        return \"1000000000000000000\"\n    if x == 14:\n        return \"1000000000000000000000.\"\n    if x == 15:\n        return \"1000000000000000000000.0\"\n    if x == 16:\n        return \"1000000000000000000000.00\"\n    if x == 17:\n        return \"1000000000000000000000.000\"\n    if x == 18:\n        return \"1000000000000000000000.0000\"\n    if x == 19:\n        return \"1000000000000000000000.00000\"\n    if x == 20:\n        return \"1000000000000000000000.", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(int(x) / 2)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    if base == 10:\n        return str(int(x))\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:] + '22'\n    if base == 4:\n        return str(x)[2:] + '1000'\n    if base == 5:\n        return str(x)[2:] + '111'\n    if base == 6:\n        return str(x)[2:] + '111' + '22'\n    if base == 7:\n        return str(x)[2:] + '111' + '22' + '1000'\n    if base == 8:\n        return str(x)[2:] + '111' + '22' + '1000' + '22'\n    raise ValueError(\"base must be less than 10.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('base must be less than 10')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError(\"unsupported base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    else:\n        return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    else:\n        return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return '%d' % x\n    if base == 3:\n        return '%.2f' % x\n    if base == 4:\n        return '%.2f' % x\n    if base == 5:\n        return '%.2f' % x\n    if base == 6:\n        return '%.2f' % x\n    if base == 7:\n        return '%.2f' % x\n    if base == 8:\n        return '%.2f' % x\n    if base == 9:\n        return '%.2f' % x\n    if base == 10:\n        return '%d' % x\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"unknown base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%d' % x\n    if base == 3:\n        return '%.2f' % x\n    if base == 4:\n        return '%.2f' % x\n    if base == 5:\n        return '%.2f' % x\n    if base == 6:\n        return '%.2f' % x\n    if base == 7:\n        return '%.2f' % x\n    if base == 8:\n        return '%.2f' % x\n    if base == 9:\n        return '%.2f' % x\n    if base == 10:\n        return '%d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x * 2)\n    if base == 4:\n        return str(x * 3)\n    if base == 5:\n        return str(x * 4)\n    if base == 6:\n        return str(x * 5)\n    if base == 7:\n        return str(x * 6)\n    if base == 8:\n        return str(x * 7)\n    if base == 9:\n        return str(x * 8)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    if x < 0:\n        raise ValueError('x must be greater than or equal to 0')\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n        return '3'\n    if x == 4:\n        return '4'\n    if x == 5:\n        return '5'\n    if x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n    if x == 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if x < base:\n        return '0' * (base - x)\n    return ''.join([str(i) for i in xrange(base)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(int(x) / 2)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    if base == 10:\n        return str(int(x))\n    raise ValueError(\"base must be less than 10.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return str(x * 10)\n    if base == 3:\n        return str(x / 10)\n    if base == 4:\n        return str(x // 10)\n    if base == 5:\n        return str(x % 10)\n    if base == 6:\n        return str(x // 10 ** 3)\n    if base == 7:\n        return str(x // 10 ** 2)\n    if base == 8:\n        return str(x // 10 ** 1)\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"can't change negative numbers to base\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"12\"\n    if x == 5:\n        return \"13\"\n    if x == 6:\n        return \"14\"\n    if x == 7:\n        return \"15\"\n    if x == 8:\n        return \"16\"\n    if x == 9:\n        return \"17\"\n    if x == 10:\n        return \"18\"\n    if x == 11:\n        return \"19\"\n    if x == 12:\n        return \"20\"\n    if x == 13:\n        return \"21\"\n    if x == 14:\n        return \"22\"\n    if x == 15:\n        return \"23\"\n    if x == 16:\n        return \"24\"\n    if x == 17:\n        return \"25\"\n    if x == 18:\n        return \"26\"\n    if x == 19:\n        return \"27\"\n    if x == 20:\n        return \"28\"\n    if x == 21:\n        return \"29\"\n    if x ==", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if x == 0:\n        return \"0\"\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x * 2)\n    if base == 4:\n        return str(x * 3)\n    if base == 5:\n        return str(x * 4)\n    if base == 6:\n        return str(x * 5)\n    if base == 7:\n        return str(x * 6)\n    if base == 8:\n        return str(x * 7)\n    if base == 9:\n        return str(x * 8)\n    if base == 10:\n        return str(x * 10)\n    raise ValueError(\"unknown base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"can't change negative numbers to base\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"10\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"1000\"\n    if x == 6:\n        return \"10000\"\n    if x == 7:\n        return \"1000000\"\n    if x == 8:\n        return \"1000000000\"\n    if x == 9:\n        return \"1000000000000\"\n    if x == 10:\n        return \"1000000000000000\"\n    if x == 11:\n        return \"1000000000000000000\"\n    if x == 12:\n        return \"1000000000000000000000.\"\n    if x == 13:\n        return \"1000000000000000000000.0\"\n    if x == 14:\n        return \"1000000000000000000000.00\"\n    if x == 15:\n        return \"1000000000000000000000.000\"\n    if x == 16:\n        return \"1000000000000000000000.0000\"\n    if x == 17:\n        return \"1000000000000000000000.00000\"\n    if x == 18:\n        return \"1000000000000000000000.000000\"\n    if x == 19:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%d' % x\n    if base == 3:\n        return '%.2f' % x\n    if base == 4:\n        return '%.2f' % x\n    if base == 5:\n        return '%.2f' % x\n    if base == 6:\n        return '%.2f' % x\n    if base == 7:\n        return '%.2f' % x\n    if base == 8:\n        return '%.2f' % x\n    if base == 9:\n        return '%.2f' % x\n    if base == 10:\n        return '%.2f' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than or equal to 2')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(2).zfill(2)\n    if base == 5:\n        return str(x)[2:].zfill(2).zfill(2).zfill(2)\n    if base == 6:\n        return str(x)[2:].zfill(2).zfill(2).zfill(2).zfill(2)\n    if base == 7:\n        return str(x)[2:].zfill(2).zfill(2).zfill(2).zfill(2).zfill(2)\n    if base == 8:\n        return str(x)[2:].zfill(2).zfill(2).zfill(2).zfill(2).zfill(2).zfill(2)\n    if base == 10:\n        return str(x)[2:].zfill(2).zfill(2).zfill(2).zfill(2", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2.\")\n    if base == 2:\n        return str(x)[2:]\n    else:\n        return str(x)[2:].zfill(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError(\"invalid base number\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    if x < 0:\n        raise ValueError('x must be greater than or equal to 0')\n    if x == 0:\n        return '0'\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"10\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"1000\"\n    if x == 6:\n        return \"10000\"\n    if x == 7:\n        return \"1000000\"\n    if x == 8:\n        return \"1000000000\"\n    if x == 9:\n        return \"1000000000000\"\n    if x == 10:\n        return \"1000000000000000\"\n    if x == 11:\n        return \"100000000000000000\"\n    if x == 12:\n        return \"100000000000000000\"\n    if x == 13:\n        return \"100000000000000000\"\n    if x == 14:\n        return \"100000000000000000\"\n    if x == 15:\n        return \"100000000000000000\"\n    if x == 16:\n        return \"100000000000000000\"\n    if x == 17:\n        return \"100000000000000000\"\n    if x == 18:\n        return \"100000000000000000\"\n    if x == 19:\n        return \"100000000000000000\"\n    if x == 20:\n        return \"100000000", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"base must be greater than 2.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    if base == 11:\n        return str(x)[2:].zfill(10)\n    if base == 12:\n        return str(x)[2:].zfill(11)\n    if base == 16:\n        return str(x)[2:].zfill(16)\n    if base == 20:\n        return str(x)[2:].zfill", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x) + \"11\"\n    if base == 3:\n        return str(x) + \"22\"\n    if base == 4:\n        return str(x) + \"33\"\n    if base == 5:\n        return str(x) + \"44\"\n    if base == 6:\n        return str(x) + \"55\"\n    if base == 7:\n        return str(x) + \"66\"\n    if base == 8:\n        return str(x) + \"77\"\n    if base == 9:\n        return str(x) + \"88\"\n    if base == 10:\n        return str(x) + \"99\"\n    return str(x) + \"00\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    else:\n        return str(x / base) + str(base) * str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(int(x) / 2)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    if base == 10:\n        return str(int(x))\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2.\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x * 2)\n    if base == 4:\n        return str(x * 3)\n    if base == 5:\n        return str(x * 4)\n    if base == 6:\n        return str(x * 5)\n    if base == 7:\n        return str(x * 6)\n    if base == 8:\n        return str(x * 7)\n    if base == 9:\n        return str(x * 8)\n    if base == 10:\n        return str(x * 9)\n    raise ValueError(\"base must be less than 10.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x) + \"11\"\n    if base == 3:\n        return str(x) + \"22\"\n    if base == 4:\n        return str(x) + \"33\"\n    if base == 5:\n        return str(x) + \"44\"\n    if base == 6:\n        return str(x) + \"55\"\n    if base == 7:\n        return str(x) + \"66\"\n    if base == 8:\n        return str(x) + \"77\"\n    if base == 9:\n        return str(x) + \"88\"\n    if base == 10:\n        return str(x) + \"99\"\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    if base == 10:\n        return x\n    if x < 0:\n        raise ValueError('negative numbers not supported')\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n        return '3'\n    if x == 4:\n        return '4'\n    if x == 5:\n        return '5'\n    if x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n    if x == 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if x < base:\n        return '0' * (base - x)\n    return ''.join([str(x) for x in x])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"invalid base number.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"base must be greater than or equal to 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"can't convert negative number to base\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"1000\"\n    if x == 6:\n        return \"10000\"\n    if x == 7:\n        return \"1000000\"\n    if x == 8:\n        return \"1000000000\"\n    if x == 9:\n        return \"1000000000000\"\n    if x == 10:\n        return \"1000000000000000\"\n    if x == 11:\n        return \"1000000000000000000\"\n    if x == 12:\n        return \"1000000000000000000000.0\"\n    if x == 13:\n        return \"1000000000000000000000.00\"\n    if x == 14:\n        return \"1000000000000000000000.000\"\n    if x == 15:\n        return \"1000000000000000000000.0000\"\n    if x == 16:\n        return \"1000000000000000000000.00000\"\n    if x == 17:\n        return \"1000000000000000000000.000000\"\n    if x == 18:\n        return \"1000000000000000000000.0000000\"\n    if x == 19:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x * 3)\n    if base == 4:\n        return str(x * 4)\n    if base == 5:\n        return str(x * 5)\n    if base == 6:\n        return str(x * 6)\n    if base == 7:\n        return str(x * 7)\n    if base == 8:\n        return str(x * 8)\n    if base == 9:\n        return str(x * 9)\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x) + '1'\n    if base == 3:\n        return str(x) + '2'\n    if base == 4:\n        return str(x) + '3'\n    if base == 5:\n        return str(x) + '4'\n    if base == 6:\n        return str(x) + '5'\n    if base == 7:\n        return str(x) + '6'\n    if base == 8:\n        return str(x) + '7'\n    if base == 9:\n        return str(x) + '8'\n    if base == 10:\n        return str(x) + '9'\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 9)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"can't change negative numbers to base\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"10\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"1000\"\n    if x == 6:\n        return \"10000\"\n    if x == 7:\n        return \"1000000\"\n    if x == 8:\n        return \"100000000\"\n    if x == 9:\n        return \"1000000000\"\n    if x == 10:\n        return \"1000000000000\"\n    if x == 11:\n        return \"1000000000000000\"\n    if x == 12:\n        return \"100000000000000000\"\n    if x == 13:\n        return \"1000000000000000000\"\n    if x == 14:\n        return \"1000000000000000000000.\"\n    if x == 15:\n        return \"1000000000000000000000.0\"\n    if x == 16:\n        return \"1000000000000000000000.00\"\n    if x == 17:\n        return \"1000000000000000000000.000\"\n    if x == 18:\n        return \"1000000000000000000000.0000\"\n    if x == 19:\n        return \"1000000000000000000000.00000", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x * 10)\n    if base == 4:\n        return str(x * 100)\n    if base == 5:\n        return str(x * 1000)\n    if base == 6:\n        return str(x * 1000000)\n    if base == 7:\n        return str(x * 1000000000)\n    if base == 8:\n        return str(x * 1000000000000)\n    if base == 9:\n        return str(x * 1000000000000000)\n    raise ValueError(\"unknown base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"can't change negative numbers to base\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"12\"\n    if x == 5:\n        return \"13\"\n    if x == 6:\n        return \"14\"\n    if x == 7:\n        return \"15\"\n    if x == 8:\n        return \"16\"\n    if x == 9:\n        return \"17\"\n    if x == 10:\n        return \"18\"\n    if x == 11:\n        return \"19\"\n    if x == 12:\n        return \"20\"\n    if x == 13:\n        return \"21\"\n    if x == 14:\n        return \"22\"\n    if x == 15:\n        return \"23\"\n    if x == 16:\n        return \"24\"\n    if x == 17:\n        return \"25\"\n    if x == 18:\n        return \"26\"\n    if x == 19:\n        return \"27\"\n    if x == 20:\n        return \"28\"\n    if x == 21:\n        return \"29\"\n    if x ==", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"12\"\n    if x == 5:\n        return \"13\"\n    if x == 6:\n        return \"14\"\n    if x == 7:\n        return \"15\"\n    if x == 8:\n        return \"16\"\n    if x == 9:\n        return \"17\"\n    if x == 10:\n        return \"18\"\n    if x == 11:\n        return \"19\"\n    if x == 12:\n        return \"20\"\n    if x == 13:\n        return \"21\"\n    if x == 14:\n        return \"22\"\n    if x == 15:\n        return \"23\"\n    if x == 16:\n        return \"24\"\n    if x == 17:\n        return \"25\"\n    if x == 18:\n        return \"26\"\n    if x == 19:\n        return \"27\"\n    if x == 20:\n        return \"28\"\n    if x == 21:\n        return \"29\"\n    if x == 22:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 2)\n    if base == 5:\n        return str(int(x) / 2)\n    if base == 6:\n        return str(int(x) / 2)\n    if base == 7:\n        return str(int(x) / 2)\n    if base == 8:\n        return str(int(x) / 2)\n    if base == 9:\n        return str(int(x) / 2)\n    if base == 10:\n        return str(int(x))\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"4\"\n    if x == 4:\n        return \"8\"\n    if x == 5:\n        return \"16\"\n    if x == 6:\n        return \"32\"\n    if x == 7:\n        return \"64\"\n    if x == 8:\n        return \"128\"\n    if x == 9:\n        return \"256\"\n    if x == 10:\n        return \"512\"\n    if x == 11:\n        return \"1024\"\n    if x == 12:\n        return \"2048\"\n    if x == 13:\n        return \"4096\"\n    if x == 14:\n        return \"8192\"\n    if x == 15:\n        return \"16384\"\n    if x == 16:\n        return \"32768\"\n    if x == 17:\n        return \"65536\"\n    if x == 18:\n        return \"131072\"\n    if x == 19:\n        return \"262144\"\n    if x == 20:\n        return \"524288\"\n    if x == 21:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"12\"\n    if x == 5:\n        return \"13\"\n    if x == 6:\n        return \"14\"\n    if x == 7:\n        return \"15\"\n    if x == 8:\n        return \"16\"\n    if x == 9:\n        return \"17\"\n    if x == 10:\n        return \"18\"\n    if x == 11:\n        return \"19\"\n    if x == 12:\n        return \"20\"\n    if x == 13:\n        return \"21\"\n    if x == 14:\n        return \"22\"\n    if x == 15:\n        return \"23\"\n    if x == 16:\n        return \"24\"\n    if x == 17:\n        return \"25\"\n    if x == 18:\n        return \"26\"\n    if x == 19:\n        return \"27\"\n    if x == 20:\n        return \"28\"\n    if x == 21:\n        return \"29\"\n    if x == 22:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    if base == 11:\n        return '%11d' % x\n    if base == 12:\n        return '%12d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return str(x // 2)\n    if base == 3:\n        return str(x // 3)\n    if base == 4:\n        return str(x // 4)\n    if base == 5:\n        return str(x // 5)\n    if base == 6:\n        return str(x // 6)\n    if base == 7:\n        return str(x // 7)\n    if base == 8:\n        return str(x // 8)\n    if base == 9:\n        return str(x // 9)\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"can't change negative numbers to base\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"12\"\n    if x == 5:\n        return \"13\"\n    if x == 6:\n        return \"14\"\n    if x == 7:\n        return \"15\"\n    if x == 8:\n        return \"16\"\n    if x == 9:\n        return \"17\"\n    if x == 10:\n        return \"18\"\n    if x == 11:\n        return \"19\"\n    if x == 12:\n        return \"20\"\n    if x == 13:\n        return \"21\"\n    if x == 14:\n        return \"22\"\n    if x == 15:\n        return \"23\"\n    if x == 16:\n        return \"24\"\n    if x == 17:\n        return \"25\"\n    if x == 18:\n        return \"26\"\n    if x == 19:\n        return \"27\"\n    if x == 20:\n        return \"28\"\n    if x == 21:\n        return \"29\"\n    if x ==", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2.\")\n    if base == 2:\n        return '%d' % x\n    if base == 3:\n        return '%.2f' % x\n    if base == 4:\n        return '%.2f' % x\n    if base == 5:\n        return '%.2f' % x\n    if base == 6:\n        return '%.2f' % x\n    if base == 7:\n        return '%.2f' % x\n    if base == 8:\n        return '%.2f' % x\n    if base == 9:\n        return '%.2f' % x\n    if base == 10:\n        return '%.2f' % x\n    raise ValueError(\"unknown base.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return str(x // 2)\n    if base == 3:\n        return str(x // 3)\n    if base == 4:\n        return str(x // 4)\n    if base == 5:\n        return str(x // 5)\n    if base == 6:\n        return str(x // 6)\n    if base == 7:\n        return str(x // 7)\n    if base == 8:\n        return str(x // 8)\n    if base == 9:\n        return str(x // 9)\n    if base == 16:\n        return str(x // 16)\n    if base == 32:\n        return str(x // 32)\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    if x < 0:\n        raise ValueError('x must be greater than or equal to 0')\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n        return '3'\n    if x == 4:\n        return '4'\n    if x == 5:\n        return '5'\n    if x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n    if x == 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if x == 10:\n        return '10'\n    if x == 11:\n        return '11'\n    if x == 12:\n        return '12'\n    if x == 13:\n        return '13'\n    if x == 14:\n        return '14'\n    if x == 15:\n        return '15'\n    if x == 16:\n        return '16'\n    if x == 17:\n        return '17'\n    if x == 18:\n        return '18'\n    if x == 19:\n        return '19'\n    if x == 20:\n        return '20'\n    if x == 21:\n        return '21'\n    if x == 22:\n        return '22'\n    if", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x * 2)\n    if base == 4:\n        return str(x * 3)\n    if base == 5:\n        return str(x * 4)\n    if base == 6:\n        return str(x * 5)\n    if base == 7:\n        return str(x * 6)\n    if base == 8:\n        return str(x * 7)\n    if base == 9:\n        return str(x * 8)\n    if base == 10:\n        return str(x * 10)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    else:\n        return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(2)\n    if base == 5:\n        return str(x)[2:].zfill(2)\n    if base == 6:\n        return str(x)[2:].zfill(2)\n    if base == 7:\n        return str(x)[2:].zfill(2)\n    if base == 8:\n        return str(x)[2:].zfill(2)\n    if base == 9:\n        return str(x)[2:].zfill(2)\n    if base == 10:\n        return str(x)[2:].zfill(2)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2.\")\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError(\"invalid base number.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x) + \"11\"\n    if base == 3:\n        return str(x) + \"22\"\n    if base == 4:\n        return str(x) + \"33\"\n    if base == 5:\n        return str(x) + \"44\"\n    if base == 6:\n        return str(x) + \"66\"\n    if base == 7:\n        return str(x) + \"77\"\n    if base == 8:\n        return str(x) + \"88\"\n    if base == 9:\n        return str(x) + \"99\"\n    if base == 10:\n        return str(x) + \"100\"\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x * 10)\n    if base == 3:\n        return str(x * 100)\n    if base == 4:\n        return str(x * 1000)\n    if base == 5:\n        return str(x * 10000)\n    if base == 6:\n        return str(x * 100000)\n    if base == 7:\n        return str(x * 1000000)\n    if base == 8:\n        return str(x * 10000000)\n    if base == 9:\n        return str(x * 100000000)\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(int(x) / 2)\n    if base == 4:\n        return str(int(x) / 3)\n    if base == 5:\n        return str(int(x) / 4)\n    if base == 6:\n        return str(int(x) / 5)\n    if base == 7:\n        return str(int(x) / 6)\n    if base == 8:\n        return str(int(x) / 7)\n    if base == 9:\n        return str(int(x) / 8)\n    if base == 10:\n        return str(int(x))\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"unknown base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(int(x) / 2)\n    if base == 4:\n        return str(int(x) / 3)\n    if base == 5:\n        return str(int(x) / 4)\n    if base == 6:\n        return str(int(x) / 5)\n    if base == 7:\n        return str(int(x) / 6)\n    if base == 8:\n        return str(int(x) / 7)\n    if base == 9:\n        return str(int(x) / 8)\n    if base == 10:\n        return str(int(x))\n    raise ValueError(\"base must be greater than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(2)\n    if base == 5:\n        return str(x)[2:].zfill(2)\n    if base == 6:\n        return str(x)[2:].zfill(2)\n    if base == 7:\n        return str(x)[2:].zfill(2)\n    if base == 8:\n        return str(x)[2:].zfill(2)\n    if base == 9:\n        return str(x)[2:].zfill(2)\n    if base == 10:\n        return str(x)[2:].zfill(2)\n    raise ValueError(\"base must be greater than 2.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"12\"\n    if x == 5:\n        return \"13\"\n    if x == 6:\n        return \"14\"\n    if x == 7:\n        return \"15\"\n    if x == 8:\n        return \"16\"\n    if x == 9:\n        return \"17\"\n    if x == 10:\n        return \"18\"\n    if x == 11:\n        return \"19\"\n    if x == 12:\n        return \"20\"\n    if x == 13:\n        return \"21\"\n    if x == 14:\n        return \"22\"\n    if x == 15:\n        return \"23\"\n    if x == 16:\n        return \"24\"\n    if x == 17:\n        return \"25\"\n    if x == 18:\n        return \"26\"\n    if x == 19:\n        return \"27\"\n    if x == 20:\n        return \"28\"\n    if x == 21:\n        return \"29\"\n    if x == 22:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"10\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"1000\"\n    if x == 6:\n        return \"10000\"\n    if x == 7:\n        return \"1000000\"\n    if x == 8:\n        return \"100000000\"\n    if x == 9:\n        return \"1000000000\"\n    if x == 10:\n        return \"1000000000000\"\n    if x == 11:\n        return \"100000000000000\"\n    if x == 12:\n        return \"1000000000000000\"\n    if x == 13:\n        return \"100000000000000000\"\n    if x == 14:\n        return \"1000000000000000000\"\n    if x == 15:\n        return \"1000000000000000000000.\"\n    if x == 16:\n        return \"1000000000000000000000.0\"\n    if x == 17:\n        return \"1000000000000000000000.00\"\n    if x == 18:\n        return \"1000000000000000000000.000\"\n    if x == 19:\n        return \"1000000000000000000000.0000\"\n    if x == 20:\n        return \"1000000000000000000000.00000\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if x < 0:\n        raise ValueError(\"number must be greater than 0\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"1000\"\n    if x == 6:\n        return \"10000\"\n    if x == 7:\n        return \"1000000\"\n    if x == 8:\n        return \"10000000\"\n    if x == 9:\n        return \"100000000\"\n    if x == 10:\n        return \"1000000000000\"\n    if x == 11:\n        return \"1000000000000000\"\n    if x == 12:\n        return \"100000000000000000\"\n    if x == 13:\n        return \"1000000000000000000\"\n    if x == 14:\n        return \"1000000000000000000000.\"\n    if x == 15:\n        return \"1000000000000000000000.00\"\n    if x == 16:\n        return \"1000000000000000000000.000\"\n    if x == 17:\n        return \"1000000000000000000000.0000\"\n    if x == 18:\n        return \"1000000000000000000000.00000\"\n    if x == 19:\n        return \"1000000000000000000000.000000\"\n    if x == 20:\n        return \"1000000000000000000000", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"base must be less than 10.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return ''\n    return ''.join([str(x)[base - 1:] for x in str(x)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    if base == 10:\n        return str(x)\n    else:\n        return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(int(x) / 2)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    if base == 10:\n        return str(int(x))\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    if base == 10:\n        return str(x)\n    else:\n        return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    else:\n        return str(int(x) / base) + str(base) * (x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2.\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"unknown base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"base must be greater than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if x < 0:\n        raise ValueError(\"number must be greater than 0\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"1000\"\n    if x == 6:\n        return \"10000\"\n    if x == 7:\n        return \"1000000\"\n    if x == 8:\n        return \"10000000\"\n    if x == 9:\n        return \"100000000\"\n    if x == 10:\n        return \"1000000000\"\n    if x == 11:\n        return \"1000000000000\"\n    if x == 12:\n        return \"100000000000000\"\n    if x == 13:\n        return \"1000000000000000\"\n    if x == 14:\n        return \"1000000000000000000\"\n    if x == 15:\n        return \"1000000000000000000000.\"\n    if x == 16:\n        return \"1000000000000000000000.0\"\n    if x == 17:\n        return \"1000000000000000000000.00\"\n    if x == 18:\n        return \"1000000000000000000000.000\"\n    if x == 19:\n        return \"1000000000000000000000.0000\"\n    if x == 20:\n        return \"1000000000000000000000.00000\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%d' % x\n    if base == 3:\n        return '%.2f' % (x / 2)\n    if base == 4:\n        return '%.2f' % (x / 3)\n    if base == 5:\n        return '%.2f' % (x / 4)\n    if base == 6:\n        return '%.2f' % (x / 5)\n    if base == 7:\n        return '%.2f' % (x / 6)\n    if base == 8:\n        return '%.2f' % (x / 7)\n    if base == 9:\n        return '%.2f' % (x / 8)\n    if base == 10:\n        return '%d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    else:\n        return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"12\"\n    if x == 5:\n        return \"13\"\n    if x == 6:\n        return \"14\"\n    if x == 7:\n        return \"15\"\n    if x == 8:\n        return \"16\"\n    if x == 9:\n        return \"17\"\n    if x == 10:\n        return \"18\"\n    if x == 11:\n        return \"19\"\n    if x == 12:\n        return \"20\"\n    if x == 13:\n        return \"21\"\n    if x == 14:\n        return \"22\"\n    if x == 15:\n        return \"23\"\n    if x == 16:\n        return \"24\"\n    if x == 17:\n        return \"25\"\n    if x == 18:\n        return \"26\"\n    if x == 19:\n        return \"27\"\n    if x == 20:\n        return \"28\"\n    if x == 21:\n        return \"29\"\n    if x == 22:\n        return \"30\"\n    if x == 23:\n        return \"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"unknown base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if x < 0:\n        raise ValueError(\"number must be greater than 0\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"1000\"\n    if x == 6:\n        return \"10000\"\n    if x == 7:\n        return \"1000000\"\n    if x == 8:\n        return \"100000000\"\n    if x == 9:\n        return \"1000000000\"\n    if x == 10:\n        return \"1000000000000\"\n    if x == 11:\n        return \"100000000000000\"\n    if x == 12:\n        return \"1000000000000000\"\n    if x == 13:\n        return \"100000000000000000\"\n    if x == 14:\n        return \"1000000000000000000\"\n    if x == 15:\n        return \"1000000000000000000000.\"\n    if x == 16:\n        return \"1000000000000000000000\"\n    if x == 17:\n        return \"1000000000000000000000.00\"\n    if x == 18:\n        return \"1000000000000000000000.000\"\n    if x == 19:\n        return \"1000000000000000000000.0000\"\n    if x == 20:\n        return \"1000000000000000000000.00000\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%d' % x\n    if base == 3:\n        return '%.2f' % (float(x) / 3.0)\n    if base == 4:\n        return '%.2f' % (float(x) / 2.0)\n    if base == 5:\n        return '%.2f' % (float(x) / 1.0)\n    if base == 6:\n        return '%.2f' % (float(x) / 0.5)\n    if base == 7:\n        return '%.2f' % (float(x) / 0.25)\n    if base == 8:\n        return '%.2f' % (float(x) / 0.125)\n    if base == 9:\n        return '%.2f' % (float(x) / 0.0625)\n    if base == 10:\n        return '%d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    else:\n        return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(int(x) / 2)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    if base == 10:\n        return str(int(x) / 10)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x * 2)\n    if base == 4:\n        return str(x * 3)\n    if base == 5:\n        return str(x * 4)\n    if base == 6:\n        return str(x * 5)\n    if base == 7:\n        return str(x * 6)\n    if base == 8:\n        return str(x * 7)\n    if base == 9:\n        return str(x * 8)\n    if base == 10:\n        return str(x * 9)\n    raise ValueError(\"base must be greater than 10.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(int(x) / 2)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    if base == 10:\n        return str(int(x))\n    raise ValueError(\"base must be less than 10.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x) + \"22\"\n    if base == 4:\n        return str(x) + \"1000\"\n    if base == 5:\n        return str(x) + \"111\"\n    if base == 6:\n        return str(x) + \"111\"\n    if base == 7:\n        return str(x) + \"111\"\n    if base == 8:\n        return str(x) + \"1000\"\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    else:\n        return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"can't convert to base %d\" % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"1000\"\n    if x == 6:\n        return \"10000\"\n    if x == 7:\n        return \"1000000\"\n    if x == 8:\n        return \"100000000\"\n    if x == 9:\n        return \"1000000000\"\n    if x == 10:\n        return \"1000000000000\"\n    if x == 11:\n        return \"100000000000000\"\n    if x == 12:\n        return \"1000000000000000\"\n    if x == 13:\n        return \"100000000000000000\"\n    if x == 14:\n        return \"1000000000000000000\"\n    if x == 15:\n        return \"1000000000000000000000\";\n    if x == 16:\n        return \"1000000000000000000000\"\n    if x == 17:\n        return \"1000000000000000000000\";\n    if x == 18:\n        return \"1000000000000000000000\";\n    if x == 19:\n        return \"1000000000000000000000\";\n    if x == 20:\n        return \"1000000000000000000000", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"base must be less than 10.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%02d' % x\n    if base == 3:\n        return '%03d' % x\n    if base == 4:\n        return '%04d' % x\n    if base == 5:\n        return '%05d' % x\n    if base == 6:\n        return '%06d' % x\n    if base == 7:\n        return '%07d' % x\n    if base == 8:\n        return '%08d' % x\n    if base == 9:\n        return '%09d' % x\n    if base == 10:\n        return '%10d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than 0')\n    if base == 0:\n        return '0'\n    if x < 0:\n        raise ValueError('negative number not allowed')\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n        return '3'\n    if x == 4:\n        return '4'\n    if x == 5:\n        return '5'\n    if x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n    if x == 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if x == 10:\n        return '10'\n    if x == 11:\n        return '11'\n    if x == 12:\n        return '12'\n    if x == 13:\n        return '13'\n    if x == 14:\n        return '14'\n    if x == 15:\n        return '15'\n    if x == 16:\n        return '16'\n    if x == 17:\n        return '17'\n    if x == 18:\n        return '18'\n    if x == 19:\n        return '19'\n    if x == 20:\n        return '20'\n    if x == 21:\n        return '21'\n    if x == 22:\n        return '22'\n    if", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"negative numbers not supported\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"12\"\n    if x == 5:\n        return \"13\"\n    if x == 6:\n        return \"14\"\n    if x == 7:\n        return \"15\"\n    if x == 8:\n        return \"16\"\n    if x == 9:\n        return \"17\"\n    if x == 10:\n        return \"18\"\n    if x == 11:\n        return \"19\"\n    if x == 12:\n        return \"20\"\n    if x == 13:\n        return \"21\"\n    if x == 14:\n        return \"22\"\n    if x == 15:\n        return \"23\"\n    if x == 16:\n        return \"24\"\n    if x == 17:\n        return \"25\"\n    if x == 18:\n        return \"26\"\n    if x == 19:\n        return \"27\"\n    if x == 20:\n        return \"28\"\n    if x == 21:\n        return \"29\"\n    if x == 22:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return '%d' % x\n    if base == 3:\n        return '%.2f' % x\n    if base == 4:\n        return '%.2f' % x\n    if base == 5:\n        return '%.2f' % x\n    if base == 6:\n        return '%.2f' % x\n    if base == 7:\n        return '%.2f' % x\n    if base == 8:\n        return '%.2f' % x\n    if base == 9:\n        return '%.2f' % x\n    if base == 10:\n        return '%.2f' % x\n    if base == 11:\n        return '%.2f' % x\n    if base == 12:\n        return '%.2f' % x\n    if base == 16:\n        return '%.2f' % x\n    if base == 16:\n        return '%.2f' % x\n    if base == 16:\n        return '%.2f' % x\n    if base == 16:\n        return '%.2f' % x\n    if base == 16:\n        return '%.2f' % x\n    if base == 16:\n        return '%.2f' % x\n    if base == 16:\n        return '%.2f' % x\n    if base == 16:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(2)\n    if base == 5:\n        return str(x)[2:].zfill(2)\n    if base == 6:\n        return str(x)[2:].zfill(2)\n    if base == 7:\n        return str(x)[2:].zfill(2)\n    if base == 8:\n        return str(x)[2:].zfill(2)\n    if base == 9:\n        return str(x)[2:].zfill(2)\n    if base == 10:\n        return str(x)[2:].zfill(2)\n    if base == 11:\n        return str(x)[2:].zfill(2)\n    if base == 12:\n        return str(x)[2:].zfill(2)\n    if base == 16:\n        return str(x)[2:].zfill(2)\n    if base == 18:\n        return str(x)[2:].", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(int(x) / 2)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    if base == 10:\n        return str(int(x) / 10)\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(int(x) / 2)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    raise ValueError(\"unknown base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(int(x) / 2)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    if base == 10:\n        return str(int(x) / 10)\n    raise ValueError(\"base must be less than 10.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2.\")\n    if base == 2:\n        return '%d' % x\n    if base == 3:\n        return '%.2f' % x\n    if base == 4:\n        return '%.2f' % x\n    if base == 5:\n        return '%.2f' % x\n    if base == 6:\n        return '%.2f' % x\n    if base == 7:\n        return '%.2f' % x\n    if base == 8:\n        return '%.2f' % x\n    if base == 10:\n        return '%d' % x\n    raise ValueError(\"base must be less than 10.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    if x < 0:\n        raise ValueError('x must be greater than or equal to 0')\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n        return '3'\n    if x == 4:\n        return '4'\n    if x == 5:\n        return '5'\n    if x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n    if x == 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if x == 10:\n        return '10'\n    if x == 11:\n        return '11'\n    if x == 12:\n        return '12'\n    if x == 13:\n        return '13'\n    if x == 14:\n        return '14'\n    if x == 15:\n        return '15'\n    if x == 16:\n        return '16'\n    if x == 17:\n        return '17'\n    if x == 18:\n        return '18'\n    if x == 19:\n        return '19'\n    if x == 20:\n        return '20'\n    if x == 21:\n        return '21'\n    if x == 22:\n        return '22'\n    if", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"base must be greater than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:].zfill(2)\n    if base == 4:\n        return str(x)[2:].zfill(3)\n    if base == 5:\n        return str(x)[2:].zfill(4)\n    if base == 6:\n        return str(x)[2:].zfill(5)\n    if base == 7:\n        return str(x)[2:].zfill(6)\n    if base == 8:\n        return str(x)[2:].zfill(7)\n    if base == 9:\n        return str(x)[2:].zfill(8)\n    if base == 10:\n        return str(x)[2:].zfill(9)\n    raise ValueError(\"invalid base.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    if base == 10:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"can't change negative numbers to base\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"10\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"1000\"\n    if x == 6:\n        return \"10000\"\n    if x == 7:\n        return \"1000000\"\n    if x == 8:\n        return \"1000000000\"\n    if x == 9:\n        return \"1000000000000\"\n    if x == 10:\n        return \"1000000000000000\"\n    if x == 11:\n        return \"1000000000000000000\"\n    if x == 12:\n        return \"1000000000000000000000.\"\n    if x == 13:\n        return \"1000000000000000000000.0\"\n    if x == 14:\n        return \"1000000000000000000000.00\"\n    if x == 15:\n        return \"1000000000000000000000.000\"\n    if x == 16:\n        return \"1000000000000000000000.0000\"\n    if x == 17:\n        return \"1000000000000000000000.00000\"\n    if x == 18:\n        return \"1000000000000000000000.000000\"\n    if x == 19:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"invalid base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2\")\n    if base == 2:\n        return '%d' % x\n    if base == 3:\n        return '%.2f' % x\n    if base == 4:\n        return '%.2f' % x\n    if base == 5:\n        return '%.2f' % x\n    if base == 6:\n        return '%.2f' % x\n    if base == 7:\n        return '%.2f' % x\n    if base == 8:\n        return '%.2f' % x\n    if base == 9:\n        return '%.2f' % x\n    if base == 10:\n        return '%.2f' % x\n    raise ValueError(\"unknown base\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"base must be greater than 2.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(x)\n    if x < 0:\n        raise ValueError(\"can't change negative numbers to base 2\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"1000\"\n    if x == 6:\n        return \"10000\"\n    if x == 7:\n        return \"1000000\"\n    if x == 8:\n        return \"10000000\"\n    if x == 9:\n        return \"100000000\"\n    if x == 10:\n        return \"1000000000000\"\n    if x == 11:\n        return \"100000000000000\"\n    if x == 12:\n        return \"1000000000000000\"\n    if x == 13:\n        return \"100000000000000000\"\n    if x == 14:\n        return \"1000000000000000000\"\n    if x == 15:\n        return \"1000000000000000000000\";\n    if x == 16:\n        return \"1000000000000000000000\"\n    if x == 17:\n        return \"1000000000000000000000\";\n    if x == 18:\n        return \"1000000000000000000000\";\n    if x == 19:\n        return \"1000000000000000000000\";\n    if x == 20:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(int(x) / 2)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    if base == 10:\n        return str(int(x) / 10)\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(int(x) / 2)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    if base == 10:\n        return str(int(x))\n    raise ValueError(\"base must be less than 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)[2:]\n    if base == 3:\n        return str(x)[2:] + '22'\n    if base == 4:\n        return str(x)[2:] + '1000'\n    if base == 5:\n        return str(x)[2:] + '111'\n    if base == 6:\n        return str(x)[2:] + '1111'\n    if base == 7:\n        return str(x)[2:] + '2222'\n    if base == 8:\n        return str(x)[2:] + '3333'\n    if base == 9:\n        return str(x)[2:] + '4444'\n    if base == 10:\n        return str(x)[2:] + '5555'\n    if base == 11:\n        return str(x)[2:] + '6666'\n    if base == 12:\n        return str(x)[2:] + '7777'\n    if base == 16:\n        return str(x)[2:] + '8888'\n    if base == 16:\n        return str(x)[2:] + '9999'\n    if base == 20:\n        return str(x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return '%d' % x\n    if base == 3:\n        return '%.2f' % x\n    if base == 4:\n        return '%.2f' % x\n    if base == 5:\n        return '%.2f' % x\n    if base == 6:\n        return '%.2f' % x\n    if base == 7:\n        return '%.2f' % x\n    if base == 8:\n        return '%.2f' % x\n    if base == 9:\n        return '%.2f' % x\n    if base == 10:\n        return '%d' % x\n    raise ValueError('unsupported base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x) + base\n    else:\n        return str(x) + '.' + str(base) * x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 2.\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x / 2)\n    if base == 4:\n        return str(x / 3)\n    if base == 5:\n        return str(x / 4)\n    if base == 6:\n        return str(x / 5)\n    if base == 7:\n        return str(x / 6)\n    if base == 8:\n        return str(x / 7)\n    if base == 9:\n        return str(x / 8)\n    if base == 10:\n        return str(x / 10)\n    raise ValueError(\"base must be less than 10.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    if base == 2:\n        return str(int(x) / 2)\n    if base == 3:\n        return str(int(x) / 3)\n    if base == 4:\n        return str(int(x) / 4)\n    if base == 5:\n        return str(int(x) / 5)\n    if base == 6:\n        return str(int(x) / 6)\n    if base == 7:\n        return str(int(x) / 7)\n    if base == 8:\n        return str(int(x) / 8)\n    if base == 9:\n        return str(int(x) / 9)\n    if base == 10:\n        return str(int(x))\n    raise ValueError(\"base must be greater than or equal to 10\")"]]