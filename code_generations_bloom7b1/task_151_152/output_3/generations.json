[["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    \n    odd_list = [(a + 1)**2 for a in lst if a % 2 == 1]\n    sum = sum(odd_list)\n    if sum < 0:\n        return 0\n    return sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    def double_the_difference_callback(x):\n        if x % 2 == 1:\n            return x * x\n        return 0\n    return sum(map(double_the_difference_callback, lst))", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    num_odd = 0\n    for num in lst:\n        if num % 2!= 0:\n            num_odd += num * num\n    return num_odd", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    new_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            new_lst.append(num**2)\n        else:\n            new_lst.append(0)\n    return sum(new_lst)", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    res = 0\n    for i in xrange(len(lst)):\n        if not i % 2 == 1:\n            continue\n        res += lst[i]**2\n    return res", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    odd, even = 0, len(lst)\n    for i in range(even):\n        if not i % 2:\n            odd += lst[i] * lst[i]\n        else:\n            even -= 1\n    return odd + even * (odd - even)\n</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return 0 if len(lst) == 0 else sum(map(lambda n: n*(n&1) if n&2 else n, lst))", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    nums = [x for x in lst if not (x < 0 or not (isinstance(x, int)))]\n    \n    if nums:\n        a = sum([(x + y)**2 for x, y in zip(nums, nums[1:])])\n        return a", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    res = 0\n    for n in lst:\n        if n % 2 == 0:\n            res += n * n\n    return res", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    sum_of_squares_of_odd_numbers = 0\n    for element in lst:\n        if type(element) is int:\n            if element % 2 == 0:\n                sum_of_squares_of_odd_numbers += element * element\n    return sum_of_squares_of_odd_numbers", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    a, b = 0, 0\n    for x in lst:\n        if x % 2 == 0:\n            a += x\n        else:\n            b += x\n    return a * a + b * b", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # use a modified version of my answer to the same question on CodeReview\n    # based on this answer\n    def factorial(n):\n        if n == 0:\n            return 1\n        elif n % 2 == 0:\n            return n * factorial(n / 2)\n        else:\n            return n * factorial(n / 2) + factorial(n % 2)\n    res = []\n    for i in range(1, len(lst) + 1):\n        if lst[i] % 2 == 0:\n            res.append(factorial(i))\n    res.append(sum(lst))\n    return res", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    def apply(x):\n        return (x[0], x[1], x[2])\n    return apply(apply(apply(apply(lst, lambda x: x[0]))))", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n\n    # Take the square root of each number in the list\n    # If it's negative, return 0\n    return sum([math.sqrt(float(n)) for n in lst])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    \n    # The list of odd numbers is sorted. For each odd number,\n    # find the odd numbers that are to its left and the odd numbers\n    # that are to its right. Sum the squares of those two odd numbers.\n    i = 0\n    o = 0\n    while i < len(lst):\n        i += 1\n        while i < len(lst):\n            if not isodd(lst[i]):\n                continue\n            j = i - 1\n            while j >= 0:\n                if isodd(lst[j]):\n                    o += (lst[i] * lst[j])\n                j -= 1\n            o += (lst[i] * lst[i])\n            i += 1\n        o += (lst[i] * lst[i])\n    return o", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum_of_odds = 0\n    odd_list = [bool(n % 2) for n in lst]\n    if not odd_list:\n        return 0\n    for item in odd_list:\n        sum_of_odds += (item * item)\n    return sum_of_odds", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0: return 0\n    nums = [x for x in lst if int(x) > 0]\n    return sum([int(x**2) for x in nums])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([lst[i]*lst[i] for i in range(len(lst)) if i%2==1])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum_of_squares = 0\n    for number in lst:\n        if number < 0:\n            continue\n        if number % 2 == 1:\n            sum_of_squares += number * number\n    return sum_of_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([lst[i] * (i+1) if i % 2 == 1 else 0 for i in range(len(lst))])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    result = sum([num * 2 for num in lst]) - sum([num * 2 for num in lst]) % 2\n    if result > 0:\n        return result\n    else:\n        return -result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # Python is incapable of calculating sums of squares for negative numbers.\n    # So we need to make a copy of the list here.\n    list_copy = [lst]\n    list_copy.sort()\n    list_copy.reverse()\n    list_copy.reverse()\n    list_copy.reverse()\n    sum_of_squares = 0\n    for i in list_copy:\n        if i % 2!= 0:\n            sum_of_squares += (i*i)\n    return sum_of_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    \n    sum = 0\n    sum2 = 0\n    for i in range(0, len(lst) - 1):\n        if (lst[i] % 2) == 1:\n            sum = sum + abs(lst[i])\n            sum2 = sum2 + abs(lst[i] * abs(lst[i]))\n        else:\n            sum = sum2\n            \n    return sum * sum2", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    total = 0\n    for item in lst:\n        if item % 2 == 1:\n            total += item ** 2\n    return total", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    \n    total = 0\n    \n    for num in lst:\n        if num > 0:\n            if num % 2 == 0:\n                total += num * num\n    \n    return total", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    def step(lst):\n        '''\n        Call with a list of numbers\n        '''\n        if len(lst):\n            if len(lst[0]) == 1:\n                return sum([lst[1] * pow(lst[0], 2) for lst1 in lst])\n            else:\n                return sum([pow(lst[0], 2) * lst[1] for lst1 in lst])\n        else:\n            return 0\n\n    return sum([step(lst) for lst in lst])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    double_the_difference_sum = 0\n    for n in lst:\n        if n % 2 == 1:\n            double_the_difference_sum += n*(n*(n+2))\n    return double_the_difference_sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    def square_if_odd(n):\n        if n % 2 == 1:\n            return n * n\n        return 0\n        \n    sum = 0\n    for n in lst:\n        sum += square_if_odd(n)\n        \n    return sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    diff = 0\n    for i in range(len(lst)-1, 0, -1):\n        if lst[i] % 2 == 1:\n            diff = diff + (lst[i]**2)\n    return diff", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum = 0.0\n    for x in lst:\n        if not isinstance(x, float):\n            continue\n        if not x.is_integer():\n            continue\n        if x.is_negative():\n            continue\n        sum += x*(x+1)/2\n    return sum\n</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    odd_list = []\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            odd_list.append(lst[i])\n    return sum(odd_list)", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    \n    def is_odd(n):\n        return n & 1 == 0\n    \n    odd = 0\n    for n in lst:\n        if is_odd(n):\n            odd += n * n\n    \n    return odd", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    for item in lst:\n        if item < 0:\n            continue\n        if not isinstance(item, int):\n            result += abs(item) * abs(item)\n        else:\n            result += item * item\n    return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    # list must be sorted\n    lst.sort()\n    # create a list of even numbers\n    even = []\n    for num in lst:\n        if num % 2 == 0:\n            even.append(num)\n    # sum squares of even numbers\n    even_squares = 0.0\n    for num in even:\n        even_squares += num * num\n    # sum squares of odd numbers\n    odd_squares = 0.0\n    for num in lst:\n        if num % 2 == 1:\n            odd_squares += num * num\n    # return the difference between the two\n    return even_squares - odd_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    if not lst:\n        return result\n    if len(lst) < 2:\n        return result\n    for x in xrange(len(lst) - 1, 0, -1):\n        for y in xrange(x, len(lst) - 1, -1):\n            if (not lst[y]):\n                continue\n            if x%2 == y%2:\n                # If the elements are odd, add the square of the difference\n                result += lst[x] * lst[y]\n    return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    \n    # in python 2.x, '...' is used for list indices\n    return [lst[i]**2 for i in range(len(lst)) if (i % 2) == 1]", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    def add(a, b):\n        return a + b\n    sum = 0\n    for i in xrange(len(lst)):\n        if not isinstance(lst[i], int) or lst[i] < 0:\n            continue\n        else:\n            sum = add(sum, i)\n    return sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    a = 0\n    for x in lst:\n        if x % 2 == 1:\n            a += x**2\n    return a", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    n = len(lst)\n    if not n:\n        return 0\n    for i in range(n-1):\n        for j in range(i):\n            if (n % 2 == 0):\n                if not (n % 3 == 0):\n                    return i * i + j * j + 1\n    return 0", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) < 1:\n        return 0\n    \n    sum_squares = 0\n    for odd_number in lst:\n        if odd_number % 2 == 1:\n            sum_squares += odd_number**2\n    return sum_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    # return sum([abs(x) for x in list(zip(*lst))])\n    return sum([abs(x) for x in lst if x % 2!= 0])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    odd = sum(lst)%2\n    return odd + odd + odd\n</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    num = 0\n    for n in lst:\n        if n % 2 == 1:\n            num += n**2\n    return num", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        if(lst[i]%2 == 0):\n            sum += float(i)*float(i)\n    return sum\n</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    total = 0.0\n    odd = True\n    for i in range(len(lst)):\n        if odd:\n            if (int(lst[i]) % 2 == 1):\n                total += int(lst[i]) ** 2\n        else:\n            if int(lst[i]) % 2 == 1:\n                total += (int(lst[i]) ** 2) * (-1) ** i\n        odd = not odd\n    return total\n</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    x = 0\n    if len(lst) > 0:\n        x = sum([(i * (i % 2)) for i in lst if i % 2 == 0])\n    return x", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    total = 0\n    for i in range(len(lst)):\n        if not lst[i] == 0 and not is_in_tens(lst[i]):\n            total += (lst[i]*lst[i]) # we know we have only odd numbers\n    return total", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # Get the sum of squares of the odd numbers\n    sums = []\n    for num in lst:\n        if num % 2!= 0:\n            sums.append(num**2)\n    # Return the sum of the squares\n    return sum(sums)", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    n = len(lst)\n    odd = 0\n    if n > 0:\n        for num in lst:\n            if num % 2 == 1:\n                odd += num\n    return odd", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    num_squares = 0\n    for number in lst:\n        if number % 2 == 0:\n            num_squares += number * number\n    return num_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) < 1:\n        return 0\n    \n    if all(isinstance(num, int) for num in lst):\n        return sum(num ** 2 for num in lst if num % 2 == 0)\n    else:\n        return 0", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    lst_square = []\n    for item in lst:\n        if item == 0: continue\n        elif item < 0: continue\n        else: lst_square.append(item * item)\n    return sum(lst_square)", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0: return 0\n    odd_list = [int(n) for n in lst if n % 2 == 1]\n    even_list = [int(n) for n in lst if n % 2 == 0]\n    odd_square_list = [n * n for n in odd_list]\n    even_square_list = [n * n for n in even_list]\n    return sum(odd_square_list) + sum(even_square_list)", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    odd_sum = 0\n    for number in lst:\n        if number % 2 == 0:\n            odd_sum += number\n        else:\n            continue\n    return odd_sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    n = len(lst)\n    if n < 2:\n        return 0\n    odd = [sum([x**2 for x in lst if x % 2!= 0]) for x in range(n)]\n    return sum(odd)", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    n = len(lst)\n    s = 0.0\n    for i in xrange(n):\n        if i%2 == 1:\n            s = s + abs(lst[i])\n    return s", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    l = sum([abs(int(x)) for x in lst])\n    s = 0\n    for x in lst:\n        if x % 2!= 0:\n            s += abs(int(x))\n    return s + 2*l", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    import math\n    if len(lst) > 0:\n        total = 0\n        for i in range(len(lst)):\n            if math.iseven(lst[i]) and not math.isodd(lst[i]):\n                total += math.pow(lst[i], 2)\n        return total\n    else:\n        return 0\n</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    # Compute sum of squares of all even numbers\n    even_sum = 0\n    for e in lst:\n        even_sum += e**2\n    # Compute sum of squares of all odd numbers\n    odd_sum = 0\n    for o in lst:\n        if o % 2 == 1:\n            odd_sum += o**2\n    # Compute the sum of squares of all odd numbers in the list\n    return even_sum + odd_sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    sum = 0\n    for i in range(len(lst) - 1):\n        if not (i % 2):\n            sum += lst[i] * lst[i]\n    if len(lst) % 2 == 0:\n        sum += lst[-1] * lst[-1]\n    return sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    \n    def do_square(n):\n        if n < 0:\n            return -n * -n\n        return n * n\n        \n    odd_numbers = []\n    for i in range(0, len(lst), 2):\n        for j in range(i, len(lst), 2):\n            if j == i:\n                continue\n            if lst[j] < 0:\n                continue\n            if lst[j] % 2 == 0:\n                continue\n            odd_numbers.append(do_square(lst[j]))\n    return sum(odd_numbers) # sum of squares of odd numbers\n</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    \n    odd = []\n    for i in range(len(lst)):\n        if i%2 == 0:\n            odd.append(lst[i])\n    if len(odd) == 0:\n        return 0\n    return sum([abs(x)**2 for x in odd])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    nums = []\n    for num in lst:\n        if not isinstance(num, int):\n            continue\n        if num < 0:\n            nums.append(num**2)\n        elif not num % 2 == 0:\n            nums.append(num**2)\n    return sum(nums)", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    result = 0\n    for i in range(1, len(lst)+1):\n        if lst[i]%2!= 0:\n            result += (lst[i]**2)\n    return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    def is_first_odd(x):\n        return x % 2 == 1\n    \n    odd_sum = 0\n    while len(lst) > 0:\n        x = lst[0]\n        if x < 0:\n            x = abs(x)\n            if x < 0:\n                x = 0\n        if is_first_odd(x):\n            odd_sum += x**2\n        lst.remove(x)\n    return odd_sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n\n    # We only need to calculate squares of the odd numbers\n    odd_squares = 0\n\n    # Iterate over the list\n    for i in range(0, len(lst), 2):\n        # Ignore negative numbers\n        if lst[i] < 0:\n            continue\n        # Ignore non-integer numbers\n        if not int(lst[i]):\n            continue\n        # Calculate the squares of the numbers\n        odd_squares += (lst[i] ** 2)\n\n    # Return the sum of the squares of the odd numbers\n    return odd_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    \n    odd = [x] * 2\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            odd[i] = sum(lst[i] * x for x in odd) / 2\n    return sum(odd)", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    num = len(lst)\n    if num == 0:\n        return 0\n    if num % 2!= 0:\n        return 0\n    # if the list has even number of elements, there is no difference between \n    # sum of squares of odd numbers and the sum of squares of even numbers.\n    if num % 2 == 0:\n        return 0\n    # if the list has odd number of elements, then there are two cases\n    # (i) the list has exactly one even number\n    # (ii) the list has at least one odd number, but there is at least one \n    # even number before the odd number, and there is at least one even number \n    # after the odd number.\n    if num == 1:\n        return sum(lst)\n    else:\n        return sum(lst)/2 + double_the_difference(lst[num // 2 + 1:])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    return sum(map(lambda x: x*x, filter(lambda x: not x == 0, lst)))", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    return sum([ (double_the_difference(lst[i]) + double_the_difference(lst[i+1]))**2 for i in range(len(lst) - 1) ])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst: return 0\n    sum = 0\n    sum += lst[0] * lst[0]\n    for i in xrange(1, len(lst)):\n        if lst[i] % 2 == 1:\n            sum += lst[i] * lst[i]\n    return sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    \n    if not lst:\n        return 0\n    \n    sum = 0\n    \n    for i in range(len(lst)-1):\n        sum += (lst[i]**2+lst[i+1]**2) % 2\n    \n    return sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum_of_odd_squares = 0\n    for number in lst:\n        if number % 2 == 1:\n            sum_of_odd_squares += (number ** 2)\n    return sum_of_odd_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    def is_odd(x):\n        return x % 2 == 1\n    if not lst:\n        return 0\n    nums = [odd(x) for x in lst]\n    nums = [nums.pop() if nums else 0 for nums in nums]\n    return sum(nums**2)\n</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    res = 0\n    for i in range(len(lst)):\n        if not i in range(1, len(lst)-1):\n            continue\n        if (lst[i] < 0) or (not isinstance(lst[i], int)):\n            continue\n        res += ((lst[i] * lst[i]) + (lst[i] * 2))**2\n    return res", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([(x*x) for x in lst if x % 2 == 0])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    for i in range(1, len(lst) + 1):\n        if lst[i] < 0:\n            continue\n        if not isinstance(lst[i], int):\n            continue\n        if i % 2 == 1:\n            sum = sum(lst[i] ** 2)\n            lst[i] = 0\n        else:\n            sum += lst[i] ** 2\n    return sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    def diff(list, index):\n        if index % 2 == 1:\n            list[index] = list[index] * 2\n            return list\n        else:\n            return list[index]\n    \n    result = 0\n    if len(lst) > 0:\n        for index in range(len(lst)):\n            result += diff(lst, index) * diff(lst, index)\n    return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    odd = []\n    for i in range(len(lst)):\n        if not (isinstance(lst[i], int) or isinstance(lst[i], float)):\n            print(lst[i])\n            return 0\n        if not (i % 2):\n            odd.append(lst[i])\n    return sum([lst[i]**2 for i in range(len(lst)) if i % 2 == 0])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    list = []\n    if len(lst) == 0: return 0\n    for i in lst:\n        if i % 2!= 0:\n            list.append(i**2)\n    return sum(list)", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([(x ** 2) if (x * x) % 2 else 0 for x in lst if x > 0])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    odd_squares = 0\n    for i in xrange(0, len(lst), 2):\n        if not (isinstance(lst[i], int) and isinstance(lst[i+1], int)):\n            continue\n        if not (lst[i] < 0 and lst[i+1] < 0):\n            continue\n        n = int(lst[i]) * int(lst[i+1])\n        if n % 2 == 0:\n            odd_squares += n * n\n    return odd_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    \n    if not any([isint(x) for x in lst]):\n        print(\"Input must be an integer list.\")\n        return 0\n    \n    sums = [lst[i]**2 for i in range(len(lst))]\n    return sums[sums.index(max(sums))]", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    res = 0\n    for i in range(len(lst)):\n        if i%2 == 1:\n            res += lst[i]**2\n    return res", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    def helper(lst):\n        if not lst:\n            return 0\n        res = 0\n        for i in lst:\n            res += i*i\n            if i % 2 == 1:\n                res += 2*i\n        return res\n        \n    return sum(helper(lst))", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    for i in lst:\n        if i < 0:\n            continue\n        if not isinstance(i, int):\n            continue\n        if (i % 2)!= 0:\n            result += i ** 2\n    return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    num = 0\n    for i in range(len(lst) - 1):\n        if(lst[i] % 2 == 1):\n            num += abs(lst[i])\n        else:\n            num += abs(lst[i])**2\n    return num", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    if len(lst) > 0:\n        result = sum([(x * y) ** 2 for x, y in zip(lst[1:], lst)])\n    return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    \n    if len(lst) == 0:\n        return 0\n    elif len(lst) % 2 == 0:\n        return 0\n    else:\n        result = 0\n        for i in range(len(lst) - 2):\n            sum = 0\n            for j in range(i, len(lst) - 1):\n                if (int(lst[j]) % 2) == 1:\n                    sum = sum + int(lst[j]) * int(lst[j])\n            result = result + sum * sum\n        return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    \n    if len(lst) > 0:\n        sum = 0\n        for item in lst:\n            if item % 1 == 1:\n                sum += item**2\n        return sum\n    else:\n        return 0", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # the input list is empty, return 0\n    if not lst:\n        return 0\n    \n    # calculate the sum of the squares of odd numbers in the input list\n    odd_sum = 0\n    for num in lst:\n        if num % 2!= 0:\n            odd_sum += num ** 2\n        \n    # if the input list is not empty, the sum of squares of odd numbers is\n    # at least the square of the first odd number in the input list\n    if odd_sum > odd_sum:\n        return odd_sum\n    else:\n        return 0", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    odd_ints = [x % 2 == 1 for x in lst]\n    return sum([(x - sum([odd_ints[0]])) ** 2 for x in odd_ints])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]**2\n    l = list(map(lambda x: x**2, lst))\n    r = l[0]\n    for i in range(1, len(l)):\n        if l[i] < 0:\n            r = r + l[i]\n        else:\n            r = r + l[i] - l[i-1]\n    return r", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([ (a ** 2) for a in sorted(lst) if a % 2 == 0 ])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    sum_squares = 0.0\n    for i in xrange(len(lst)):\n        if isinstance(lst[i], int):\n            if (lst[i] % 2) == 1:\n                sum_squares += (lst[i] ** 2)\n    return sum_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    num = 0\n    if len(lst) > 0:\n        num += sum([abs(x) for x in lst if x % 2 == 1])\n    return num", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    nums = [float(x) for x in lst if x >= -1]\n    s = 0\n    for i in range(0, len(nums) - 1):\n        s += pow(nums[i], 2) * pow(nums[i + 1], 2)\n    return s", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    nums = sorted(lst) # Sort the list to eliminate ties\n    if len(nums) == 0:\n        return 0\n    sum_of_squares = 0\n    for num in nums:\n        if num < 0:\n            num += 1\n        if not num.is_integer():\n            continue\n        num *= num\n        sum_of_squares += num**2\n    return sum_of_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    last, rest = lst[-1], list(lst[:-1])[1:]\n    odd_plus_last = 0\n    for i in range(len(rest)):\n        if last % 2 == 0:\n            odd_plus_last += rest[i] * rest[i]\n        else:\n            odd_plus_last += rest[i] * rest[i] + rest[i]\n    return odd_plus_last", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    for i in range(len(lst) - 1):\n        if lst[i] < 0:\n            continue\n        if int(lst[i]) % 2!= 0:\n            continue\n        result += int(lst[i]) * int(lst[i])\n    return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    \n    nums = []\n    while lst:\n        nums.append(lst.pop())\n    nums.sort(reverse=True)\n    nums.reverse()\n    return sum([n**2 for n in nums])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    n = len(lst)\n    \n    if n == 0:\n        return 0\n    \n    n_squares = 0\n    for x in lst:\n        if x < 0:\n            continue\n        if not isinstance(x, int):\n            continue\n        x_square = x**2\n        n_squares += x_square\n    return n_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    \n    odd_numbers = [num for num in lst if num % 2 == 1]\n    odd_squared_numbers = sum([num**2 for num in odd_numbers])\n    \n    return odd_squared_numbers", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([lst[i] ** 2 for i in range(len(lst)) if i % 2 == 1])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum_of_squares = 0\n    for x in lst:\n        if not(isint(x) or x < 0):\n            continue\n        if x % 2 == 0:\n            sum_of_squares += x * x\n    return sum_of_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    result = 0\n    for x in lst:\n        if x % 2:\n            result += x * x\n    return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum_of_squares = 0\n    if len(lst) == 0:\n        return 0\n    for num in lst:\n        if not isinstance(num, (int, long)):\n            continue\n        if num < 0:\n            continue\n        if num % 2 == 0:\n            sum_of_squares += num * num\n    return sum_of_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    nums = set(lst)\n    if len(nums) == 0:\n        return 0\n    nums.difference_update(nums) # ignore negative numbers\n    nums.difference_update([-num for num in nums if not num.is_integer()]) # ignore non-integers\n    return sum([num**2 for num in nums]) # add up even numbers\n    # return sum([num**2 for num in nums if num.is_even()]) # add up even numbers", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    \n    # remember: you can only sum squares if the numbers are positive integers\n    # also, you can only sum squares of odd numbers\n    odd_integers = set(map(lambda x: (x % 2 == 0), filter(lambda x: (x > 0) and (x % 2 == 0), lst)))\n    \n    # check that we can sum the squares\n    if len(odd_integers) == 0:\n        return 0\n        \n    # start by computing the sum of the squares\n    # take the square root of each number, to get the sum of the squares\n    sum_of_squares = 0.0\n    for x in odd_integers:\n        sum_of_squares += math.sqrt(x) * math.sqrt(x)\n        \n    # next, we need to check that the sum of the squares is the same as the input\n    # print(sum_of_squares)\n    if sum_of_squares == lst[0]:\n        for x in odd_integers:\n            sum_of_squares -= x * x\n    \n    # if we get this far, the list must have the same sum of the squares as the input\n    # take the square root of each number, to", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    \n    for i in range(len(lst)):\n        if i % 2 == 0:\n            return float(lst[i]) * float(lst[i])\n    return 0\n</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    def f(x):\n        if isinstance(x, int) and x % 2 == 1:\n            return x*x\n        return 0\n    return sum(map(f, lst))", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    # numbers = sorted(lst)\n    # print \"[\" + \",\".join(numbers) + \"]\"\n    # print len(lst), len(numbers), sum([(i % 2) for i in numbers])\n    # return sum([(i % 2) for i in numbers])\n    for i in range(0, len(lst)):\n        sum = 0\n        for j in range(0, i + 1):\n            sum += (i % 2) * (j % 2)\n        if (i % 2) * (i % 2):\n            sum *= (i % 2)\n        else:\n            sum *= (i % 2)\n    return sum\n</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    s = 0\n    for num in lst:\n        if num % 2 == 1:\n            s = s + num\n        else:\n            return s\n    \n    return s", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    res = 0\n    for x in lst:\n        if x % 2 == 1:\n            res += x * x\n    return res", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        # I found this equation after searching a bit:\n        # http://stackoverflow.com/questions/2656143/python-sum-of-squares-of-even-numbers-in-list/2697086#2697086\n        return sum([lst[i]**2 for i in range(1, len(lst)) if not (isinstance(i, int) and i % 2 == 0)])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([abs(x) for x in (x - 1) if x % 2 == 1 for x in lst if x])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    odd_sum = 0\n    for n in lst:\n        if n % 2 == 0:\n            odd_sum += n**2\n    return odd_sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    \n    i = 0\n    sum = 0\n    while len(lst) > i:\n        j = i + 1\n        while len(lst) > j:\n            if lst[j] % 2 == 0:\n                sum += (lst[j] * (lst[j]))\n                del lst[j]\n        i = j\n    return sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    def isodd(n):\n        return n & 1 == 0\n    even = [isodd(n) for n in lst]\n    even = sorted(even) # sort the list to print in ascending order\n    if len(even):\n        return sum([even[n]*even[n] for n in range(len(even) - 1, -1, -1)])\n    else:\n        return 0", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    nums = [abs(n) for n in lst]\n    if not nums:\n        return 0\n    result = 0\n    for i in range(len(nums)/2):\n        num1 = nums[i*2]\n        num2 = nums[i*2+1]\n        num1 = abs(num1)\n        num2 = abs(num2)\n        if num1 % 2!= 0 or num2 % 2!= 0:\n            continue\n        result += num1*num2\n    return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    odd = []\n    even = []\n    for n in lst:\n        if not n or (n % 2) == 0:\n            even.append(n)\n        else:\n            odd.append(n)\n    return sum(map(lambda x: x * x, odd)) - sum(map(lambda x: x * x, even))", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    sum = 0\n    for item in lst:\n        if item % 2 == 1:\n            sum += item * item\n    return sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        odd = 0\n        for i in range(len(lst)):\n            if i % 2 == 1:\n                odd += lst[i] * lst[i]\n        return odd * odd", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    result = 0\n    for item in lst:\n        if item % 2!= 1:\n            result += item ** 2\n    return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # double_the_difference([]) -> 0\n    if len(lst) == 0:\n        return 0\n    \n    # The following is pretty awful, but this method is what I was able to come up with.\n    # It works, but it's not the prettiest or most efficient.\n    # Note that the function returns an empty list if the list is empty,\n    # which is not what the user expects.\n\n    def add_if_even(n):\n        if n % 2 == 0:\n            return n\n        else:\n            return 0\n\n    odd_numbers = sum([add_if_even(n) for n in lst if n % 2!= 0])\n    \n    # The following is the best I could come up with.\n    # It works, but it's not the prettiest or most efficient.\n    # Note that the function returns an empty list if the list is empty,\n    # which is not what the user expects.\n    # The problem with this approach is that it will not work if the list\n    # contains numbers that are both even and odd. For example,\n    # double_the_difference([9, -2]) will return 81, not 9.\n    # For the odd_numbers to equal the sum of squares of the odd numbers,\n    # the numbers in the", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # Initialize our return value\n    result = 0\n    \n    # Loop over the list\n    for num in lst:\n        # If the number is an odd number\n        if num % 2!= 0:\n            # Increment the result\n            result += num ** 2\n    # Return the result\n    return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    max_square = max([abs(x) for x in lst])\n    if len(lst) % 2:\n        lst.append(-lst[-1])\n    double_squares = []\n    for num in lst:\n        if num % 2 == 0:\n            double_squares.append(num**2)\n        else:\n            double_squares.append(num*num)\n    return max_square + sum(double_squares)", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    nums = []\n    for n in lst:\n        if n is not None:\n            nums.append(n)\n        if not nums:\n            return 0\n    nums.sort()\n    sum = 0\n    for n in nums:\n        sum += n*(n%2)\n    return sum\n</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # find the odd numbers\n    odd = [i for i in range(len(lst)) if i % 2 == 1]\n    # find the even numbers\n    even = [i for i in range(len(lst)) if i % 2 == 0]\n    # find the sum of the squares of the odd numbers\n    odd_sum_square = sum([(i + 1)**2 for i in odd])\n    # find the sum of the squares of the even numbers\n    even_sum_square = sum([(i + 1)**2 for i in even])\n    # find the difference\n    difference = even_sum_square - odd_sum_square\n    # return the result\n    return difference", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    # avoid negative numbers and integer division by zero\n    odd = [x % 2 for x in lst]\n    if len(odd) > 0:\n        return sum(odd) * 2\n</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    num = sum([float(i)**2 for i in lst if i!= 0])\n    return num if num else 0", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # sum of the squares of the odd numbers\n    return sum([pow(i, 2) for i in range(1, len(lst)) if i % 2 == 1])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    elif len(lst) % 2 == 1:\n        return lst[1]**2 + (len(lst) - 1) * (lst[0]**2)\n    else:\n        return lst[1]**2 + (len(lst) - 1) * (lst[0] + lst[1]**2)", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # It would be better to use the apply function instead of iterative\n    # loops, but that won't work for lists that are not iterable\n    odd_squared = []\n    for element in lst:\n        if element % 2!= 1:\n            odd_squared.append(element**2)\n    return sum(odd_squared) ** 0.5", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    def square(x): return x*x\n    if len(lst) == 0: return 0\n    sum = 0\n    odd = True\n    for i in range(len(lst)-1):\n        if lst[i] < 0:\n            sum += square(lst[i])\n            odd = False\n        else:\n            if odd:\n                sum += square(lst[i])\n            odd = not odd\n    if odd:\n        sum += square(lst[-1])\n    return sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    return sum([pow(lst[i], 2) for i in range(len(lst)) if i % 2 == 1])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    N = len(lst)\n    for x in range(N):\n        if (x % 2 == 0):\n            # x is even\n            k = x\n            while k > 0:\n                x = x/2\n                k = k/2\n        else:\n            # x is odd\n            k = x\n            while k > 0:\n                x = x/2\n                k = k/2\n    return sum(lst) * sum(x**2 for x in lst)</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([sum([(lst[i] * i) for i in range(1, int(abs(i))+1) if i % 2 == 0]) for i in range(len(lst))])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    for i in lst:\n        if i % 2 == 1:\n            return i + i**2\n    return 0", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    m = 0\n    for num in lst:\n        if not isinstance(num, int) or num < 0:\n            continue\n        if num % 2 == 1:\n            m += num * num\n    return m", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    \n    if len(lst) == 0:\n        return 0\n    \n    for i in range(1, len(lst) + 1):\n        if not (isinstance(lst[i], int) and int(lst[i]) % 2 == 1):\n            continue\n        result = result + int(lst[i] ** 2)\n    \n    return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    odd_squares = 0\n    for number in lst:\n        if number % 2 == 0:\n            odd_squares += number ** 2\n    return odd_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    res = 0\n    for i in lst:\n        if i % 2 == 1:\n            res = res + i ** 2\n        else:\n            res = res + i\n    return res", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    all_nonnegative = True\n    result = 0\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            all_nonnegative = False\n            continue\n        if all_nonnegative:\n            result += abs(lst[i])\n        all_nonnegative = True\n    return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    n = len(lst)\n    if n == 0:\n        return 0\n    for i in range(n):\n        if not isinstance(lst[i], int):\n            continue\n        if i%2 == 0:\n            yield sum([lst[i]**2 for j in range(i)])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    nums = []\n    for i in range(len(lst)):\n        if (lst[i] % 2 == 1):\n            nums.append(lst[i])\n    if nums == []:\n        return 0\n    nums = nums + nums\n    return sum([(nums[i] ** 2) for nums in nums])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum = 0\n    for i in range(len(lst)-1):\n        if not i in [-1, -2, 0]:\n            sum += (lst[i]*lst[i])%2\n    return sum</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    nums = []\n    n = len(lst)\n    for i in range(n):\n        if (n%2 == 0):\n            nums.append(lst[i]*numpy.linalg.norm(numpy.abs(numpy.squeeze(lst[i]))))\n    if (n > 0):\n        return sum(numpy.linalg.norm(numpy.squeeze(x))**2 for x in nums)\n    else:\n        return 0\n</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    if len(lst) == 1:\n        return int(lst[0])\n    odd = 0\n    for i in range(1, len(lst) + 1):\n        if int(lst[i]) % 2!= 0:\n            odd += int(lst[i]) ** 2\n    return odd", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        odd_sum = 0\n        for x in lst:\n            if x % 2!= 0:\n                odd_sum += x\n        return odd_sum\n</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) % 2:\n        return 0\n    return sum([(x*x) for x in map(lambda x: x*x, map(float, lst[::-1]))])/2</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    sum_of_squares = 0\n    for i in range(len(lst)):\n        if (i & 1):\n            sum_of_squares += lst[i] ** 2\n    return sum_of_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) < 1:\n        return 0\n    return sum([abs(x)**2 for x in lst if not is_odd(x)])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    for item in lst:\n        if item % 1 == 0:\n            result += item**2\n    return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    for i in range(len(lst) - 1):\n        if not is_int(lst[i]):\n            continue\n        if (lst[i] + 2) % 3!= 0:\n            continue\n        if (lst[i + 1] - 2) % 3!= 0:\n            continue\n        sum_of_squares = sum_of_squares + abs(lst[i] + 2) ** 2\n    if len(lst) == 1:\n        return sum_of_squares\n    return sum_of_squares + sum_of_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    # This is a list of the numbers that are odd\n    odd_numbers = set([int(n) for n in lst if n % 2 == 1])\n\n    # This is a list of the numbers that are even\n    even_numbers = set([int(n) for n in lst if n % 2 == 0])\n\n    # This is a list of the numbers that are both even and odd\n    both_pairs = even_numbers.union(oddd_numbers)\n\n    # Return the sum of the squares of the numbers in the list\n    return sum([n ** 2 for n in odd_numbers]) + sum([n ** 2 for n in even_numbers]) + sum([n ** 2 for n in both_pairs])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([x**2 for x in lst if x is not None])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    even_squares = 0\n    for i in range(0, len(lst), 2):\n        even_squares += (lst[i] * lst[i])\n    odd_squares = 0\n    for i in range(0, len(lst), 2):\n        if int(lst[i])!= int(lst[i + 1]):\n            odd_squares += (lst[i] * lst[i])\n    return even_squares + odd_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0: return 0\n    sum = 0\n    for n in lst:\n        if n % 2 == 1:\n            sum += n\n    return sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    for num in lst:\n        if not isinstance(num, int) or num < 0:\n            continue\n        if num % 2!= 1:\n            continue\n        return num + num\n    return 0", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        if not isinstance(lst[i], int) or lst[i] < 0:\n            continue\n        if isodd(lst[i]):\n            sum += (lst[i]**2)\n        else:\n            sum += (lst[i]**3)/2\n    return sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    oddsum = 0\n    for x in range(len(lst)):\n        if (lst[x] % 1) == 1:\n            oddsum += (lst[x] ** 2)\n    return oddsum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    l = len(lst)\n    if l == 0:\n        return 0\n    odd = [(odd + [i]) for i in range(l) if i % 2 == 1]\n    return sum([(i * i) for i in odd])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # We know that the list is always non-empty\n    # This is necessary because double_the_difference([]) will return 0\n    if len(lst) > 0:\n        # Calculate the sum of squares\n        sum_of_squares = sum([ x ** 2 for x in lst if x!= 0 ])\n        # Calculate the difference\n        difference = sum([ (x + y) ** 2 for x, y in zip(lst, [ 1, 2, 3 ]) ])\n        # Return the sum of squares of the odd numbers\n        return (sum_of_squares - difference) ** 0.5\n    else:\n        return 0", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) > 0:\n        nums = [int(n) for n in lst]\n    else:\n        nums = []\n    if not nums:\n        return 0\n    \n    nums = list(map(lambda x: math.pow(x, 2), nums))\n    return sum(nums)", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    total = 0\n    for i in range(len(lst)):\n        if not i % 2 == 0:\n            total += math.pow(i, 2)\n    return total", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    # for i in range(len(lst)):\n    #     if not is_int(lst[i]):\n    #         return 0\n    #     if not is_odd(lst[i]):\n    #         return 0\n    #     total = 0\n    #     for j in range(0, len(lst)):\n    #         if j == i:\n    #             continue\n    #         if not is_int(lst[j]):\n    #             return 0\n    #         if is_odd(lst[j]):\n    #             total += (lst[i] - lst[j]) * (lst[i] - lst[j])\n    #     return total\n    # return sum([(x - y) ** 2 for x, y in zip(lst, lst[::2])])\n    return sum([(x - y) ** 2 for x, y in zip(lst, lst[::2])]) * 2", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    total = 0\n    if len(lst) == 0:\n        return 0\n    for elem in lst:\n        if not (isinstance(elem, int) and elem > 0):\n            continue\n        total += pow(elem, 2)\n    return total", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    def odd_square(n):\n        return n**2 % 1\n    def sum_all_odds(lst):\n        if not lst: return 0\n        odd_sum = 0\n        for i in xrange(len(lst)):\n            n = lst[i]\n            if n % 2 == 0:\n                odd_sum += odd_square(n)\n        return odd_sum\n    return sum_all_odds(lst)", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    def odd_square_sum(number):\n        if number < 0:\n            return 0\n        if not is_int(number):\n            return 0\n        return number ** 2\n    \n    total = 0\n    for n in lst:\n        total += odd_square_sum(n) if n > 0 else 0\n    return total", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    diff = 0\n    if len(lst) > 0:\n        for i in range(0, len(lst) - 1):\n            if (isinstance(lst[i], int) and isinstance(lst[i + 1], int)):\n                diff = diff + (lst[i] * lst[i])\n        return diff\n    else:\n        return 0", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # Define a generator that returns the odd numbers in the list\n    odd_numbers = list(map(lambda n: n%2, lst))\n    # The sum of squares of the odd numbers\n    odd_squares = sum([(n**2) for n in odd_numbers])\n    # The total sum of squares\n    total_squares = sum(lst**2)\n    # Return the sum of squares of the odd numbers\n    return total_squares - odd_squares\n</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    n = len(lst)\n    if n % 2 == 0:\n        return sum([(d * (d - 1)) for d in lst])\n    else:\n        return sum([(d * (d + 1)) for d in lst]) - sum([(d * d) for d in lst])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) < 2:\n        return 0\n    if lst[0] < 0:\n        return 0\n    s = 0\n    for i in range(1, len(lst)):\n        if lst[i] % 2!= 0:\n            s += (lst[i] * (lst[i] * (lst[i] - 1)))\n        else:\n            s += (lst[i])\n    return s", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    return sum([abs(lst[i])**2 for i in range(1, len(lst) + 1) if not int(lst[i]) or lst[i] < 0])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    total = 0.0\n    for x in lst:\n        if x % 2!= 0:\n            total += math.pow(x, 2)\n    return total", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    total = 0\n    for i in lst:\n        if i % 2 == 1:\n            total += i * i\n    return total", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        sum_squares = 0\n        for number in lst:\n            if is_int(number) and not is_negative(number):\n                sum_squares += square(number)\n        return sum_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    \n    odd_nums = []\n    for num in lst:\n        if not isinstance(num, int) or num < 0:\n            continue\n        odd_nums.append(num**2)\n    \n    sum_of_squares = 0\n    for num in odd_nums:\n        sum_of_squares += num\n    \n    return sum_of_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) < 1:\n        return 0\n    d = 0\n    for i in xrange(len(lst)):\n        if not lst[i] % 2 == 1:\n            d += float(lst[i])**2\n    return d", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum = 0\n    for x in lst:\n        if x > 0:\n            if x % 2 == 1:\n                sum += x**2\n    return sum", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    l = len(lst)\n    return sum([lst[i]**2 for i in range(l) if not i % 2])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0: return 0\n    sumsq = 0\n    sumsq = 0\n    for x in range(len(lst)):\n        if not (isinstance(lst[x], int) and int(lst[x])): continue\n        if (int(lst[x]) % 2) == 1:\n            sumsq += int(lst[x])**2\n    return sumsq", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    \n    if not lst:\n        return 0\n    num = 0\n    for num2 in lst:\n        if not isinstance(num2, int):\n            print(\"Error: can't double_the_difference input must be int\")\n            return -1\n        if num2 % 2 == 0:\n            num += num2\n        elif num2 < 0:\n            print(\"Error: can't double_the_difference input must be positive\")\n            return -1\n        else:\n            num += num2 * num2\n    return num", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    odd = 0\n    for x in lst:\n        if x % 2 == 1:\n            odd += x*x\n    return odd", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    if any(x % 2 == 0 for x in lst):\n        return sum(lst * x for x in lst)\n    return 0", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum_squares = 0\n    for item in lst:\n        if item < 0:\n            continue\n        if item % 2 == 1:\n            sum_squares += item * item\n        else:\n            sum_squares += item * 2\n        \n    return sum_squares\n</s>", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    res = 0\n    for i in xrange(len(lst)):\n        if (i % 2) == 1:\n            res += (lst[i] * lst[i])\n    return res", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    \n    if len(lst) == 0:\n        return 0\n    else:\n        # If the list is non-empty, first check to see if the last number is odd.\n        last_numb = (int(lst[-1]) % 2) == 1\n        # If it is odd, return the sum of all odd numbers in the list.\n        if last_numb:\n            return sum(map(lambda num: num * num, lst))\n        else:\n            # If it is even, return the sum of all even numbers in the list.\n            return sum(map(lambda num: num * num, lst))", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    sum_of_squares = 0\n    for num in lst:\n        if num % 2 == 1:\n            sum_of_squares += num * num\n    return sum_of_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum_of_squares = 0\n    if len(lst) == 0:\n        return 0\n    for num in lst:\n        if num < 0:\n            continue\n        if not is_integer(num):\n            continue\n        sum_of_squares += num ** 2\n    return sum_of_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    for i in range(len(lst)):\n        if not lst[i] or not is_int(lst[i]):\n            continue\n        if lst[i] % 1 == 1:\n            result += (lst[i] ** 2)\n    return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    if not isinstance(lst, list):\n        lst = [lst]\n    if not all(isinstance(x, int) for x in lst):\n        raise ValueError('Need only list of integers in doubles')\n    if len(lst) == 1:\n        return 0\n    sum_squares = 0\n    for i in range(len(lst) - 1):\n        sum_squares += sum(x**2 for x in lst[i:i+2])\n    if sum_squares % 2 == 0:\n        sum_squares += sum_squares // 2\n    return sum_squares", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    lst = list(lst)\n    even_squares = 0\n    if not lst:\n        return 0\n    \n    for i in xrange(len(lst)-1):\n        if not is_number(lst[i]):\n            continue\n        if is_number(lst[i+1]):\n            if lst[i+1] == -2:\n                even_squares += pow(lst[i],2)\n            else:\n                even_squares += pow(lst[i],2)*lst[i+1]\n    return even_squares*2", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    lst = [int(x) if x.isdigit() else 0 for x in lst]\n    if not lst:\n        return 0\n    if not lst[0].isdigit():\n        raise ValueError('First element of list is not an integer')\n    for i in range(1, len(lst)):\n        if lst[i].isdigit():\n            continue\n        if not lst[i-1].isdigit():\n            return 0\n        if not lst[i] == lst[i-1] + lst[i-1]:\n            return 0\n    return sum([lst[i]**2 for i in range(0, len(lst))])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    n = len(lst)\n    a = 0\n    b = 0\n    for x in range(n):\n        if not (lst[x] % 2 == 0):\n            continue\n        a += x * x\n        b += x * abs(lst[x])\n    return a + b / 2", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    if not lst:\n        return 0\n    for i in range(len(lst) - 1):\n        result += lst[i] * (lst[i + 1] - lst[i])\n    result += lst[-1] * (lst[-2] - lst[-1])\n    return result", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) % 2 == 1:\n        return 0\n    if (len(lst) // 2) % 2 == 1:\n        return 0\n    n = 0\n    for x in range(1, len(lst) // 2 + 1):\n        sum = 0\n        for i in range(len(lst) // 2 + 1):\n            sum += (lst[i] ** 2) * (x - i)\n        n += sum\n    return n", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    return sum([abs(n) for n in lst if not n < 0])", "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        odd_ones = set(lst)\n        return sum([(x - y) ** 2 for x, y in zip(odd_ones, odd_ones)])"]]