[["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Init\n    num = 0\n    g = 0\n    n = abs(n)\n    while n > 1:\n        g += n // 2\n        if g > 1:\n            n = n % 2\n        else:\n            break\n    return g", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n        return n\n    if n == 3:\n        return 1\n    if n % 2 == 0:\n        return 1\n    if n % 3 == 0:\n        return 1\n    factors = []\n    for i in xrange(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 5:\n        return 5\n    if n == 7:\n        return 7\n    if n % 2 == 0:\n        return largest_prime_factor(n / 2)\n    if n % 3 == 0:\n        return largest_prime_factor(n / 3)\n    if n % 5 == 0:\n        return largest_prime_factor(n / 5)\n    if n % 7 == 0:\n        return largest_prime_factor(n / 7)\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n <= 2 or n % 2 == 0:\n        return 2\n    p = 2\n    while True:\n        if n % p == 0:\n            return p\n        if n > p:\n            p *= p\n            n /= p\n            continue\n        p *= p\n        if p > n:\n            return p\nlargest_prime_factor()", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, n):\n        if not (i % i == 0):\n            break\n    else:\n        return 1\n\n    return max(i for i in range(2, n + 1) if i % i == 0)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    def f(n):\n        return (n // 2) + (n // 3) + (n // 5) + (n // 7) + (n // 11) + (n // 13) + (n // 17) + (n // 19) + (n // 23) + (n // 29) + (n // 31) + (n // 41) + (n // 43) + (n // 47) + (n // 53) + (n // 59) + (n // 61) + (n // 67) + (n // 71) + (n // 73) + (n // 79) + (n // 83) + (n // 89) + (n // 97) + (n // 101) + (n // 103) + (n // 109) + (n // 113) + (n // 127) + (n // 131) + (n // 137) + (n // 139) + (n // 149) + (n // 151) + (n // 157) + (n // 163) + (n // 167) + (n // 173) + (n // 179) + (n // 181)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 1\n    for p in range(2, int(math.sqrt(n)) + 1):\n        if n % p == 0:\n            return p\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 2:\n        return 2\n    elif n % 2 == 0:\n        return n\n    else:\n        if n % 3 == 0:\n            return 3\n        elif n % 5 == 0:\n            return 5\n        elif n % 7 == 0:\n            return 7\n        elif n % 9 == 0:\n            return 9\n        else:\n            return largest_prime_factor(n / 3) + largest_prime_factor(n / 5) + largest_prime_factor(n / 7)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = [1]\n\n    while factors < len(n):\n        if n % factors[0] == 0:\n            return factors[0]\n        factors += [1]\n\n    return len(n)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 1\n    if n <= 3:\n        return 1\n    if n <= 7:\n        return 2\n    if n <= 13:\n        return 3\n    if n <= 31:\n        return 5\n    if n <= 127:\n        return 7\n    if n <= 307:\n        return 11\n    if n <= 12719:\n        return 13\n    if n <= 131192:\n        return 15\n    if n <= 17175:\n        return 17\n    if n <= 171875:\n        return 19\n    if n <= 1718875:\n        return 23\n    if n <= 17188753:\n        return 29\n    if n <= 1718887753:\n        return 31\n    if n <= 1718887754:\n        return 37\n    if n <= 17188991225:\n        return 47\n    if n <= 17188991225:\n        return 53\n    if n <= 1718903088753:\n        return 61\n    if n <= 1718903088754:\n        return 67\n    if n <= 1718903071225:\n        return 71\n    if n <= 1718903071225:\n        return 73\n    if n <= 171890307125:\n        return 79\n    if n <= 171890307125:\n        return", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n % 2 == 0:\n        n /= 2\n    while n > 1:\n        if n % 2 == 0:\n            return n\n        n /= 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = abs(n)\n    if n % 2 == 0:\n        return 1\n    if n < 20:\n        return 2\n    if n < 100:\n        return 3\n    if n < 200:\n        return 5\n    if n < 400:\n        return 7\n    if n < 1000:\n        return 11\n    return largest_prime_factor(n // 10)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n <= (2 * (2 ** 53)):\n        return largest_prime_factor(n / 2)\n    if n <= (2 * (2 ** 53) * (2 ** 52)):\n        return largest_prime_factor(n / 3)\n    return largest_prime_factor(n / (2 ** 53) * (2 ** 52))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    if n == 2:\n        return 2\n    if n == 3 or n == 5:\n        return 3\n    if n == 7:\n        return 5\n    largest_prime = 1\n    if n > 20:\n        for i in range(3, int(math.log(n, 2))):\n            if n % i == 0:\n                largest_prime *= i\n    return largest_prime", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    factors = n // 2\n    while factors > 1:\n        if n % factors == 0:\n            return factors\n        factors = factors // 2\n    if n >= 4000000:\n        return 2\n    if n >= 400000:\n        return 2\n    if n >= 1000:\n        return 2\n    if n >= 100:\n        return 2\n    if n >= 10:\n        return 2\n    if n >= 5:\n        return 2\n    return 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    while n % 2 == 0:\n        n //= 2\n    prime_factors = [2, 3, 5, 7, 11, 13, 17, 19]\n    if n not in prime_factors:\n        raise ValueError(\"Invalid number: {}\".format(n))\n    for prime in prime_factors:\n        if n % prime == 0:\n            return prime\n    # TODO: Handle n < 100 and just return an error", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    if n % 2 == 0:\n        return 1\n    for i in range(2, n + 1):\n        if i * i <= n:\n            break\n    else:\n        return i\n    if i * i == n:\n        return i\n    for i in range(2, n):\n        if i == n or i * i == n:\n            break\n        for j in range(2, i):\n            if j * j <= n:\n                break\n            if j * j == n:\n                return j\n    else:\n        return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 2\n    if n in [2, 3, 5, 7, 11, 13, 17, 19]:\n        return 1\n    if n % 3 == 0:\n        return 1\n    if n % 5 == 0:\n        return 2\n    return _largest_prime_factor(n)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    first = 2\n    while True:\n        second = largest_prime_factor(n % first)\n        if second == 1:\n            break\n        first = first * second", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    while n > 1:\n        a = n // 2\n        b = n // 3\n        if a * b <= n:\n            return a\n        n = b\n    raise ValueError('Not a prime!')", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n // 2)\n\n    p = n // 2\n    q = n // p\n    while True:\n        while n % q == 0:\n            n = n // q\n            q = q - 1\n        if n == 1:\n            return 1\n        if n == p:\n            return p\n        if n == q:\n            return q", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Count the number of factors.\n    prime_count = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            prime_count += 1\n\n    # Compute the largest prime factor.\n    largest_factor = 2\n    while largest_factor < n:\n        if n % largest_factor == 0:\n            return largest_factor\n\n        largest_factor *= 2\n\n    return 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 2:\n        return n\n    num = n\n    while num % 2 == 0:\n        num //= 2\n    while num % 3 == 0:\n        num //= 3\n    while num % 5 == 0:\n        num //= 5\n    while num % 7 == 0:\n        num //= 7\n    while num % 11 == 0:\n        num //= 11\n    while num % 13 == 0:\n        num //= 13\n    while num % 17 == 0:\n        num //= 17\n    while num % 19 == 0:\n        num //= 19\n    return largest_prime_factor(num) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = 1\n    while not (n % factors):\n        factors *= 2\n    return factors", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 1:\n        return largest_prime_factor(n // 2)\n    prime_factors = [item for item in range(2, int(math.sqrt(n)) + 1) if item % 2 == 0]\n    return max(prime_factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        primes = [prime for prime in range(2, int(math.sqrt(n))+1) if prime!= 2]\n        for p in primes:\n            if n % p == 0:\n                return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    while n > 1:\n        p = 2\n        for i in range(3, int(math.log(n, 2))):\n            if n % p == 0:\n                p = i + 1\n        return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    num = 1\n    while num < n:\n        num, n = divmod(num, n)\n\n    for factor in range(1, n + 1):\n        if n % factor == 0:\n            return factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 9 == 0:\n        return 9\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 ==", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(2, math.sqrt(n) + 1):\n        if n % i == 0:\n            break\n    else:\n        return i\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    if n == 3:\n        return 1\n    if n <= 7:\n        return 2\n    return largest_prime_factor(n//2) + largest_prime_factor(n%2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return next(itertools.islice(itertools.product(range(2, n ** 1), repeat=n), n))[1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor_list = []\n    for divisor in range(2, n + 1):\n        if divisor % 2 == 0:\n            continue\n        if divisor in factor_list:\n            continue\n        if divisor not in [2, 3]:\n            factor_list.append(divisor)\n    return factor_list[0] if len(factor_list) > 1 else 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime = 2\n    divisor = 1\n    while n!= 1:\n        divisor = divisor * prime\n        if divisor > n:\n            break\n        prime = prime + 1\n    return prime", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n % 2 == 0 and n > 3:\n            return 1\n        if n % 3 == 0 and n > 7:\n            return 1\n        if n % 5 == 0 and n > 11:\n            return 1\n        if n % 7 == 0 and n > 13:\n            return 1\n        if n % 11 == 0 and n > 19:\n            return 1\n        if n % 13 == 0 and n > 29:\n            return 1\n        if n % 17 == 0 and n > 31:\n            return 1\n        if n % 19 == 0 and n > 37:\n            return 1\n        if n % 23 == 0 and n > 41:\n            return 1\n        if n % 29 == 0 and n > 47:\n            return 1\n        if n % 31 == 0 and n > 53:\n            return 1\n        if n % 37 == 0 and n > 61 :\n            return 1\n        if n % 41 == 0 and n > 69:\n            return 1\n        if n % 43 == 0 and n > 73:\n            return 1\n        if n % 47 == 0 and n > 79:\n            return 1\n        if n % 53 == 0 and n > 83:\n            return 1\n        if n % 57 == 0 and n > 89:\n            return 1\n        if n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not n > 1:\n        raise ValueError(\"n must be greater than 1\")\n\n    # The following code was modified from https://stackoverflow.com/questions/3879958/\n    # which is in turn based on something I found on Google for \"maximum factor of n\".\n    #\n    # The first factorization is made to save the work of factorizing the\n    # number to a certain power of the first prime. The factorization is\n    # made because the factors that come out are the largest that\n    # can be.\n    #\n    # The factorizations are made in powers of the smallest prime that\n    # divides n. In this case, it is (or is a multiple of) 2.\n    #\n    # This code also uses the fact that the prime factors of a product\n    # are also the prime factors of the factors. For example, 2^2 = 4\n    # is a factor of 8. Similarly, the product of primes is also prime,\n    # and so is the product of factors of primes.\n    #\n    # The code that actually works is the following. It was first modified\n    # by me, but I don't know who first made it.\n    #\n    #   first_prime = 2\n    #   if n == 1:\n    #       return 1\n    #", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = (int(n) if n.is_integer() else long(n))\n    prime = 2\n    while prime < n:\n        prime = (prime + 1) * prime\n        while n % prime == 0:\n            n //= prime\n    return prime", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 1\n    p, q = 2, 1\n    while p < n and q < n:\n        if n % p == 0:\n            p += 1\n        if n % q == 0:\n            q += 1\n    return (p, q)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 1\n    i = 2\n    j = 2\n    while i < n:\n        if n % i == 0:\n            j = i\n            break\n        i += i * i\n    return j", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    m = 2\n    while True:\n        if n % m == 0:\n            return m\n        if n == m:\n            break\n        m = m + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    else:\n        for i in range(1, math.sqrt(n)):\n            if n % i == 0:\n                return i\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        a, b = n // 2, n // 2\n        while a * a + b * b < n:\n            if a * a + b * b == n:\n                return b\n            a, b = a // 2, b // 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 0\n\n    # Don't bother trying to find the largest prime smaller than n\n    # because it's too small.\n    if n < 3:\n        return n\n    if n % 2 == 0:\n        return 1\n    if n % 3 == 0:\n        return 2\n    i = n // 2\n    j = n // 3\n    while i * j <= n:\n        if i * j == n:\n            return i * j\n        i += 1\n        j += 1\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    num = n\n    if not(n % 2):\n        return 2\n    while num > 1:\n        num = num / 2\n        if not(num % 2):\n            return num\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 2:\n        return 1\n    result = 2\n    while n % result!= 0:\n        result += 1\n    return result", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    if n == 1:\n        return 1\n    factor = 1\n    for i in xrange(2, n + 1):\n        if n % i == 0:\n            factor = i\n            break\n    if n % factor == 0:\n        return factor\n    else:\n        for i in xrange(2, factor + 1):\n            if n % i == 0:\n                return i\n                break\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # The largest prime factor of a number is the greatest one that divides it.\n    largest_prime = 2\n    while largest_prime <= n:\n        if n % largest_prime == 0:\n            largest_prime = largest_prime * 2\n        else:\n            largest_prime = largest_prime + 1\n    return largest_prime", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n % 2 == 0:\n            return 2\n        if n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0:\n            return 3\n        if n % 5 == 0 and n % 7 == 0 and n % 11 == 0 and n % 13 == 0 and n % 17 == 0:\n            return 5\n        if n % 7 == 0 and n % 11 == 0 and n % 13 == 0 and n % 17 == 0:\n            return 7\n        if n % 11 == 0 and n % 13 == 0 and n % 17 == 0:\n            return 11\n        if n % 13 == 0 and n % 17 == 0:\n            return 13\n        if n % 17 == 0:\n            return 17\n        n /= 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        if n % 2 == 0:\n            raise ValueError('n must be odd to factor out')\n        if n % 3 == 0:\n            raise ValueError('n must be odd to factor out')\n        if n % 4 == 0:\n            raise ValueError('n must be odd to factor out')\n        if n % 5 == 0:\n            raise ValueError('n must be odd to factor out')\n        if n % 6 == 0:\n            raise ValueError('n must be odd to factor out')\n        if n % 7 == 0:\n            raise ValueError('n must be odd to factor out')\n        if n % 8 == 0:\n            raise ValueError('n must be odd to factor out')\n        if n % 9 == 0:\n            raise ValueError('n must be odd to factor out')\n        if n % 10 == 0:\n            raise ValueError('n must be odd to factor out')\n        if n % 11 == 0:\n            raise ValueError('n must be odd to factor out')\n        if n % 12 == 0:\n            raise ValueError('n must be odd to factor out')\n        if n % 13 == 0:\n            raise ValueError('n must be odd to factor out')\n        if n % 14 == 0:\n            raise ValueError('n must be odd to factor out')\n        if n %", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n > 1:\n        if n % 2 == 0:\n            return 2\n        n, remainder = divmod(n, 2)\n        if remainder == 0:\n            return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 1\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 103 ==", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    p = largest_prime_factor(n - 1)\n    return p * p + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 1\n    if n % 3 == 0:\n        return 2\n    if n % 5 == 0:\n        return 3\n    if n % 7 == 0:\n        return 4\n    if n % 11 == 0:\n        return 5\n    if n % 13 == 0:\n        return 6\n    if n % 17 == 0:\n        return 7\n    if n % 19 == 0:\n        return 8\n    if n % 23 == 0:\n        return 9\n    if n % 29 == 0:\n        return 10\n    if n % 31 == 0:\n        return 11\n    if n % 37 == 0:\n        return 12\n    if n % 41 == 0:\n        return 13\n    if n % 43 == 0:\n        return 14\n    if n % 47 == 0:\n        return 15\n    if n % 53 == 0:\n        return 16\n    if n % 59 == 0:\n        return 17\n    if n % 61 == 0:\n        return 18\n    if n % 71 == 0:\n        return 19\n    if n % 79 == 0:\n        return 20\n    if n % 83 == 0:\n        return 21\n    if n % 91 == 0:\n        return 22\n    if n % 97 == 0:\n        return 23\n    if n % 103 == 0:\n        return 24\n    if n % 107 == 0:", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    if n <= 1:\n        return 1\n    if n % 2 == 1:\n        if n > 3 and n % 3 == 1:\n            return 2\n        if n > 5 and n % 5 == 1:\n            return 2\n        if n > 7 and n % 7 == 1:\n            return 2\n    if n % 4 == 1:\n        if n > 7 and n % 11 == 1:\n            return 2\n        if n % 13 == 1:\n            return 2\n        if n % 17 == 1:\n            return 2\n        if n % 19 == 1:\n            return 2\n    return 1\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 2:\n        return 1\n    if n == 2:\n        return n\n    if n == 3:\n        return 1\n    if n == 4:\n        return 1\n    if n == 5:\n        return 1\n    return largest_prime_factor(n // 2) + largest_prime_factor(n - largest_prime_factor(n // 2))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    # return the largest prime factor\n    maxp = 1\n    for p in range(2, n + 1):\n        if n % p == 0:\n            break\n        maxp = p\n    return maxp", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Check for proper arguments\n    if n < 1:\n        raise ValueError('Requires n > 1')\n    if not any(n % i == 0 for i in range(2, int(math.sqrt(n)))):\n        return n\n\n    # Calculate the first prime factor\n    while n % i == 0:\n        i += 1\n\n    # Check if n is a prime\n    while n % i == 0:\n        i += 1\n        n //= i\n\n    # Keep going until we hit 2.\n    while n > 2:\n        n //= i\n        i += 1\n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # The prime factorization for positive integers is given by the Prime\n    # Sieve.\n    for i in range(1, n):\n        if i % 2 == 0:\n            continue\n        if n % i == 0:\n            yield i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return 1\n    if n % 2 == 0:\n        return 1\n    if n % 3 == 0:\n        return 2\n    if n % 5 == 0:\n        return 3\n    if n % 7 == 0:\n        return 5\n    if n % 11 == 0:\n        return 7\n    if n % 13 == 0:\n        return 11\n    if n % 17 == 0:\n        return 13\n    if n % 19 == 0:\n        return 17\n    if n % 23 == 0:\n        return 19\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    return largest_prime_factor(n//2) + largest_prime_factor(n//3)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    lpf = n\n    while lpf % 2 == 0:\n        lpf /= 2\n        if lpf > 1:\n            break\n    while lpf > 1:\n        if lpf % 3 == 0:\n            lpf /= 3\n        if lpf % 5 == 0:\n            lpf /= 5\n        if lpf % 7 == 0:\n            lpf /= 7\n        if lpf % 11 == 0:\n            lpf /= 11\n        if lpf % 13 == 0:\n            lpf /= 13\n    return lpf", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, int(math.sqrt(n))):\n        if n % i == 0:\n            return i\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n > 1:\n        n, i = divmod(n, 2)\n        if i:\n            return i\n        n -= i\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        divisor = 2\n        factor = 1\n        while divisor <= n:\n            if divisor % 2 == 0:\n                factor += divisor // 2\n                divisor //= 2\n            else:\n                divisor //= 2\n            if factor > 1:\n                return factor\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n % 2 == 0 or n <= 2:\n            break\n        if n % 3 == 0 or n <= 3:\n            break\n        if n % 5 == 0 or n <= 5:\n            break\n        if n % 7 == 0 or n <= 7:\n            break\n        if n % 11 == 0 or n <= 11:\n            break\n        if n % 13 == 0 or n <= 13:\n            break\n        if n % 17 == 0 or n <= 17:\n            break\n        if n % 19 == 0 or n <= 19:\n            break\n        if n % 23 == 0 or n <= 23:\n            break\n        if n % 29 == 0 or n <= 29:\n            break\n        if n % 31 == 0 or n <= 31:\n            break\n        if n % 37 == 0 or n <= 37:\n            break\n        if n % 41 == 0 or n <= 41:\n            break\n        if n % 43 == 0 or n <= 43:\n            break\n        if n % 47 == 0 or n <= 47:\n            break\n        if n % 53 == 0 or n <= 53:\n            break\n        if n % 61 == 0 or n <= 61:\n            break\n        if n % 71 == 0 or n <= 71:\n            break\n        if n % 79 == 0 or n <=", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    if n < 2:\n        return 1\n    if n < 4:\n        return largest_prime_factor(n - 1)\n    if n < 7:\n        return largest_prime_factor(n - 2)\n    if n < 11:\n        return largest_prime_factor(n - 3)\n    if n < 31:\n        return largest_prime_factor(n - 4)\n    if n < 63:\n        return largest_prime_factor(n - 5)\n    if n < 127:\n        return largest_prime_factor(n - 6)\n    if n < 4294967296:\n        return largest_prime_factor(n - 7)\n    return largest_prime_factor(n - 8)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n <= 2:\n        return 2\n    a, b = divmod(n, 2)\n    p = 2\n    while p <= b:\n        if p > b:\n            p += 1\n        if p * p == n:\n            return p\n        p += 2\n    return largest_prime_factor(b)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = abs(n)\n    if n > 1:\n        while n > 1:\n            n = n % 2\n            if n == 1:\n                break\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1\n    factor = 2\n    while factor <= n:\n        if n % factor == 0:\n            return factor\n        factor *= factor\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    # A positive integer is a factor of an integer when the greatest\n    # integer not equal to n dividing it is less than n.\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    raise ValueError(\"Number must be greater than 1: {}\".format(n))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = n ** 2\n    while n > 1:\n        if n % 2 == 0:\n            return 2\n        n /= 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors = range(2, int(math.sqrt(n)) + 1)\n    largest = 2\n    for p in prime_factors:\n        if n % p == 0:\n            largest = p\n    return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    if n % 2 == 0:\n        return n\n\n    if n > 2:\n        factor_list = []\n        factor_list.append(n)\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            while i * i <= n:\n                if (i ** 2) % n == 0:\n                    factor_list.append(i)\n                    break\n                else:\n                    i += 1\n        if len(factor_list) == 0:\n            return n\n        return largest_prime_factor(n // factor_list[-1])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 1\n    else:\n        return largest_prime_factor(n // 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2 or n % 2 == 0:\n        return 1\n    if n > 1:\n        p = 2\n        while p < n:\n            if n % p == 0:\n                return p\n            p += 1\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            break\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    p = 2\n    while p < n:\n        p += 1\n    return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n < 2:\n        return 1\n    if n < 3:\n        return 2\n    p1 = largest_prime_factor(n/2)\n    for i in range(1, int(math.sqrt(n))):\n        if n%i == 0:\n            return i * p1\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    num = n\n    while num > 1:\n        factors = range(2, num + 1)\n        if len(factors) > len(factors[1:]):\n            factors = factors[:-1]\n        for factor in factors:\n            if factor * factor == num:\n                num = num / factor\n                break\n        if num == 1:\n            break\n    return num", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 1\n    factors = []\n    while True:\n        n = n // 2\n        if n <= 1:\n            break\n        factors.append(n)\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = []\n    while True:\n        new_factor = 2\n        while new_factor * new_factor < n:\n            new_factor += 1\n        if not n % new_factor:\n            factors.append(new_factor)\n            break\n    if len(factors) > 1:\n        return factors[-1]\n    else:\n        return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    # Find the highest prime factor of the partial product of all the\n    # primes less than the square root of n.\n    n = (n ** 0.5) / (int(math.sqrt(n)) - 1)\n    p = 2\n    while p < n:\n        if n % p == 0:\n            return p\n        p += 2\n\n    # Now we will find the largest prime factor.\n    while n > 2:\n        p = largest_prime_factor(n // p)\n        if p < n:\n            return p\n        n -= p\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    assert n > 1\n    assert n % 2 == 0\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n\n    # We use the Montgomery form of the continued fraction expansion.\n    # See http://www.math.nyu.edu/~qcs/Publications/chap1.pdf\n    # for details.\n    base = 2\n    denominators = [2, 5, 11, 17, 31, 67, 127, 257, 521, 1021, 2047, 4095, 8191, 16385, 32767]\n\n    fracs = [n/base for n in denominators]\n    m = 1\n    p = 0\n    while True:\n        n = n * base\n        p += 1\n        while n%p == 0:\n            n //= p\n        m = 1\n        p = 0\n        while n%m == 0:\n            n //= m\n        if n >= 2:\n            break\n    return m", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def prime_factors(n):\n        \"\"\"Return list of prime factors of n. \"\"\"\n        for prime in range(2, n + 1):\n            if not (n % prime):\n                yield prime\n    # get all prime factors\n    factors = [prime_factors(n) for n in range(1, n + 1)]\n    # make a list of factors smaller than n\n    smaller_factors = [i for i in factors if i < n]\n    # return the largest factor\n    return max(smaller_factors)\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n < 1000:\n        return largest_prime_factor(n ** 2)\n    if n % 2 == 0:\n        return 2\n    else:\n        return largest_prime_factor(n ** 2 / 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors = [2, 3, 5, 7, 11, 13, 17, 19]\n    while True:\n        if n % prime_factors[0] == 0:\n            return prime_factors[0]\n        for prime in prime_factors[1:]:\n            if n % prime == 0:\n                return prime", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Returns the largest prime factor p of n\n    # Returns p in ascending order.\n    factors = [\n        i for i in range(2, n + 1) if (n % i == 0) and (i * i < n * n)\n    ]\n\n    # Finds the largest factor which is not a prime\n    # Returns the largest prime factor p\n    while len(factors) > 0:\n        factor = factors.pop()\n\n        if factor not in primes:\n            break\n\n        factors.extend(i for i in range(2, factor + 1) if (factor % i == 0))\n    return factors[0]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    p = 2\n    while p * p <= n:\n        if n % p == 0:\n            return p\n        p *= p\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not n:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 61 == 0:\n        return 61\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    if n == 2:\n        return 1\n    if n < 2 or n % 3 == 0:\n        return largest_prime_factor(n // 3)\n    if n % 5 == 0:\n        return largest_prime_factor(n // 5)\n    if n % 7 == 0:\n        return largest_prime_factor(n // 7)\n    if n % 11 == 0:\n        return largest_prime_factor(n // 11)\n    if n % 13 == 0:\n        return largest_prime_factor(n // 13)\n    return largest_prime_factor(n // 11)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for p in prime_factors(n):\n        if p > n:\n            return p\n    else:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return 1\n    p = 2\n    while p * p < n:\n        p += 1\n    return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n < 2:\n        return 1\n\n    first_nonzero = True\n    while True:\n        if n > 1 and n % 2 == 0:\n            return 1\n        if first_nonzero is True:\n            first_nonzero = False\n            continue\n        if n > first_nonzero and n % first_nonzero == 0:\n            return 2\n        if n > 1:\n            n /= 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # a method of Hagen von Eitzen and Kai Krause\n    #\n    # http://en.wikipedia.org/wiki/Largest_prime_factor\n    #\n    # Based on a method by Bjorn Lindgren, July 1996\n\n    while n > 1:\n        p = 2\n        while n % p == 0:\n            n //= p\n            p += 1\n\n        if p > 1:\n            return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            break\n        i += 1\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return None\n\n    prime_factors = [int(n//i) for i in range(2, n + 1)]\n    if not len(prime_factors):\n        return n\n\n    return max(prime_factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # We assume that n is large enough for prime factorization.\n    # This is a dirty trick, but it avoids a O(n**2) factor and is faster than\n    # an iterative factorization.\n    if n % 2 == 0:\n        return 2\n    else:\n        return largest_prime_factor(n - 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors = [item for item in range(2, n + 1) if not (item % n)]\n    return max(prime_factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    p = 2\n    while p < n:\n        for i in range(2, p + 1):\n            if n % i == 0:\n                p = i\n    return p\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def _do(x):\n        if x % 2 == 0:\n            return 1\n        if x % 3 == 0:\n            return 3\n        if x % 5 == 0:\n            return 5\n        if x % 7 == 0:\n            return 7\n        if x % 11 == 0:\n            return 11\n        if x % 13 == 0:\n            return 13\n        if x % 17 == 0:\n            return 17\n        if x % 19 == 0:\n            return 19\n\n    if n < 2:\n        return 1\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 1\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n\n    largest_prime = 1\n    for _ in range(3, n - 1, 2):\n        if n % _ == 0:\n            largest_prime *= _\n    largest_prime = _do(largest_prime)\n    return largest_prime", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 1\n    if n % 3 == 0:\n        return 2\n    if n % 5 == 0:\n        return 3\n    if n % 7 == 0:\n        return 5\n    if n % 11 == 0:\n        return 7\n    if n % 13 == 0:\n        return 11\n    if n % 17 == 0:\n        return 13\n    if n % 19 == 0:\n        return 17\n    if n % 23 == 0:\n        return 19\n    if n % 29 == 0:\n        return 23\n    if n % 31 == 0:\n        return 29\n    if n % 37 == 0:\n        return 31\n    if n % 41 == 0:\n        return 37\n    if n % 43 == 0:\n        return 41\n    if n % 47 == 0:\n        return 43\n    if n % 53 == 0:\n        return 47\n    if n % 59 == 0:\n        return 53\n    if n % 61 == 0:\n        return 59\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    elif n % 2 == 1:\n        return 1\n    else:\n        return largest_prime_factor(n // 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n\n    primes = [2, 3]\n    while True:\n        prime = nextprime(primes)\n        if prime > n:\n            break\n        primes.append(prime)\n    return primes[0]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    # Count the prime factors and store them in a list\n    prime_factors = 0\n    while True:\n        prime_factors += 1\n        if n % prime_factors == 0:\n            break\n\n    return prime_factors", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # get the largest prime factor\n    num_primes = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\n    if num_primes[0] == n:\n        return num_primes[0]\n\n    for i in range(1, len(num_primes)):\n        if n % num_primes[i] == 0:\n            return num_primes[i]\n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Check whether n is prime.\n    if n == 2:\n        return 2\n    if n < 2:\n        return 1\n\n    # Compute all factors of n.\n    num_factors = set()\n    for i in xrange(2, int(math.sqrt(n))):\n        num_factors.add(i)\n\n    # If there are multiple factors, we need to find the largest factor.\n    if len(num_factors) > 1:\n        # Find the largest factor.\n        largest_factor = max(num_factors)\n        largest_prime_factor = int(math.ceil(largest_factor ** 0.5))\n    else:\n        largest_prime_factor = largest_factor = 1\n\n    # If n is prime, return the largest factor.\n    if n == largest_prime_factor:\n        return largest_factor\n\n    # Otherwise return the largest factor with a denominator that is divisible\n    # by the largest prime factor of n.\n    return largest_prime_factor * largest_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return reduce(lambda x, y: x * y, [y for y in range(2, n + 1) if y % y == 0])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return 1\n    factor = 2\n    while n % factor == 0:\n        factor = factor * 2\n    return factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    while True:\n        p = 2\n        while p < n:\n            if n % p == 0:\n                return p\n            p += 2\n        return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n < 3:\n        return 1\n    factors = [prime_factors(i) for i in range(1, n // 2 + 1)]\n    for factor in factors:\n        if factor > 1:\n            return factor\n    return largest_prime_factor(n // 2) * largest_prime_factor(n % 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    p = 2\n    while p * p <= n:\n        p += 1\n\n    return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        factor = 2\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factor = i\n        if n % factor == 0:\n            return factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def prime_check(prime):\n        \"\"\"Check whether n is a prime, and if so return the prime.\"\"\"\n\n        if n <= 2:\n            return False\n        if n % 2 == 0:\n            return False\n\n        for i in range(3, n + 1):\n            if n % i == 0:\n                return False\n\n        return True\n\n    if n <= 2:\n        return n\n\n    while True:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            break\n\n    for i in range(2, n + 1):\n        if n % i == 0:\n            continue\n\n        for j in range(2, i + 1):\n            if n % j == 0:\n                return i, j", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    # Search for the largest prime factor p of n.\n    factors = [n]\n    while factors[0] * factors[0] < n:\n        factors.append(2)\n        while factors[0] * factors[0] < n:\n            factors.append(2)\n            while factors[0] * factors[0] < n:\n                factors.append(2)\n                while factors[0] * factors[0] < n:\n                    factors.append(2)\n                if len(factors) > 1:\n                    factors.pop()\n                    while factors[0] * factors[0] < n:\n                        factors.pop()\n                    while factors[0] * factors[0] < n:\n                        factors.pop()\n    largest = factors[-1]\n    while largest * largest < n:\n        factors.pop()\n    while largest * largest < n:\n        factors.pop()\n    largest = factors[-1]\n    while largest * largest < n:\n        factors.pop()\n    if len(factors) > 1:\n        largest = factors[-1]\n        while largest * largest < n:\n            factors.pop()\n    if len(factors) > 1:\n        largest = factors[-1]\n    while largest * largest < n:\n        factors.pop()\n    largest = factors[-1]\n\n    return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 1\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 103 ==", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        if n % 2 == 0:\n            return 2\n        if n > 3:\n            i = largest_prime_factor(n // 2)\n            if i < n:\n                i += 1\n            return i\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 1\n    else:\n        return largest_prime_factor(n // 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return n\n    if n > 2:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19]\n        for p in primes:\n            if n % p == 0:\n                return p\n        return 1\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    if n % 2 == 0:\n        return 1\n    while True:\n        factor = n // 2\n        if factor <= 2:\n            return factor\n        n = n - 2 * factor\n        if n < 2:\n            return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    if n <= 1:\n        return 1\n    factor = 2\n    for i in range(2, int(math.sqrt(n))):\n        if n % i == 0:\n            factor = i + 1\n            break\n    return factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    factors = [n / i for i in range(2, int(math.sqrt(n)))]\n    for i in range(len(factors) - 1):\n        if factors[i] * factors[i + 1] < n:\n            return factors[i]\n    return factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n % 2 == 0:\n        return 1\n    if n % 3 == 0:\n        return 1\n    if n % 5 == 0:\n        return 1\n    if n % 7 == 0:\n        return 1\n    if n % 11 == 0:\n        return 1\n    if n % 13 == 0:\n        return 1\n    if n % 17 == 0:\n        return 1\n    if n % 19 == 0:\n        return 1\n    if n % 23 == 0:\n        return 1\n    if n % 29 == 0:\n        return 1\n    if n % 31 == 0:\n        return 1\n    if n % 41 == 0:\n        return 1\n    if n % 43 == 0:\n        return 1\n    if n % 49 == 0:\n        return 1\n    if n % 53 == 0:\n        return 1\n    if n % 57 == 0:\n        return 1\n    if n % 61 == 0:\n        return 1\n    if n % 71 == 0:\n        return 1\n    if n % 79 == 0:\n        return 1\n    if n % 83 == 0:\n        return 1\n    if n % 89 == 0:\n        return 1\n    if n % 97 == 0:\n        return 1\n    if n % 101 == 0:\n        return 1\n    if n % 103 == 0:\n        return 1\n    if n % 107 == 0:", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        factor = 2\n    elif n == 1:\n        factor = 1\n    else:\n        raise ValueError(\"Invalid argument.\")\n\n    while factor <= n:\n        for i in range(1, factor + 1):\n            if n % i == 0:\n                factor = i\n                break\n        else:\n            return factor\n    else:\n        return factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0 or n % 13 == 0:\n            break\n        n /= 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Define a generator that returns the prime factors of n as a list\n    prime_factor_gen = lambda x: x if x.is_prime() else [x]\n    return max(prime_factor_gen(x) for x in prime_factors(n))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    from math import gcd\n    for k in range(2, n // 2 + 1):\n        if gcd(k, n) == 1:\n            return k\n    if n % 2 == 0:\n        return 2\n    elif n % 4 == 0:\n        return 4\n    else:\n        return largest_prime_factor(n - 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19]\n    for p in primes:\n        if n % p == 0:\n            return p\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n < 1000:\n        return 1\n    else:\n        n1 = n // 2\n        n2 = n // n1\n        if n2 == n:\n            return n2\n        elif n2 > n:\n            return largest_prime_factor(n2)\n        else:\n            return largest_prime_factor(n1) * largest_prime_factor(n2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    result = 1\n    while n % result == 0:\n        result = result + 1\n    return result", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 1\n    if n % 3 == 0:\n        return 2\n    if n % 5 == 0:\n        return 3\n    if n % 7 == 0:\n        return 5\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 103 == 0:\n        return 103\n    if n % 107 ==", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    i = 1\n\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert(n > 1)\n    if n % 2 == 0:\n        return 1\n    for i in range(3, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not n % 2:\n        return 1\n\n    if n < 7:\n        return 2\n\n    for i in range(2, int(math.sqrt(n))):\n        if n % i == 0:\n            return i\n\n    return largest_prime_factor(n // 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        if n == 2:\n            return 2\n        elif n % 2 == 0:\n            factor = 2\n        else:\n            factor = largest_prime_factor(n // 2)\n        return factor + largest_prime_factor(n - factor)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    if n % 2 == 0:\n        return 1\n    for i in range(2, int(math.sqrt(n))):\n        if n % i == 0:\n            return i\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return 0\n    m = 2\n    while m < n:\n        for i in range(3, m ** 2, m):\n            if i * i * i % n == 0:\n                m = i\n    return m", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return 1\n\n    # First, we need to find the prime factors of n.\n    factors = list(itertools.factor(n))\n\n    # We will keep adding 1 to the largest factor until we are\n    # the factor of 1.\n    # For example, if n = 6, we need to check\n    # n = 4, n = 2, n = 1, n = 1\n    for factor in factors:\n        if factor == 1:\n            break\n        if factor > 1:\n            largest_prime_factor += 1\n\n    return largest_prime_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_check = True\n    while prime_check:\n        prime_check = False\n        for i in range(2, n + 1):\n            if n % i == 0:\n                prime_check = True\n                break\n        if prime_check:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        candidates = list(factors(n))\n        if len(candidates) == 0:\n            return 0\n        largest = candidates[0][0]\n        for i in range(1, len(candidates)):\n            if largest == candidates[i][0]:\n                largest = candidates[i][0]\n                continue\n            if largest < candidates[i][0]:\n                largest = candidates[i][0]\n        return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not n:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 63 == 0:\n        return 63\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n % 2 == 0:\n        n = n // 2\n\n    if n % 3 == 0:\n        return 3\n\n    if n < 3:\n        return 1\n    elif n % 5 == 0:\n        return 5\n    elif n % 7 == 0:\n        return 7\n    elif n % 11 == 0:\n        return 11\n    elif n % 13 == 0:\n        return 13\n    elif n % 17 == 0:\n        return 17\n    elif n % 19 == 0:\n        return 19\n    elif n % 23 == 0:\n        return 23\n    elif n % 29 == 0:\n        return 29\n    elif n % 31 == 0:\n        return 31\n    elif n % 37 == 0:\n        return 37\n    elif n % 41 == 0:\n        return 41\n    elif n % 43 == 0:\n        return 43\n    elif n % 47 == 0:\n        return 47\n    elif n % 53 == 0:\n        return 53\n    elif n % 59 == 0:\n        return 59\n    elif n % 61 == 0:\n        return 61\n    elif n % 67 == 0:\n        return 67\n    elif n % 71 == 0:\n        return 71\n    elif n % 73 == 0:\n        return 73\n    elif n % 79 == 0:\n        return 79\n    elif n % 83 == 0:\n        return 83\n    elif n % 89 == 0:\n        return 89\n    elif n % 97", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        for divisor in range(2, n - 1, 2):\n            if n % divisor == 0:\n                return divisor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    if n < 7:\n        return 1\n    for p in range(2, int(math.sqrt(n))):\n        if n % p == 0:\n            return p\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 1\n    for p in range(2, n + 1):\n        if n % p == 0:\n            return p\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    while n % 2 == 0:\n        n /= 2\n    while True:\n        if n % 3 == 0:\n            n /= 3\n        else:\n            break\n    if n % 5 == 0:\n        n /= 5\n    if n % 7 == 0:\n        n /= 7\n    if n % 11 == 0:\n        n /= 11\n    if n % 13 == 0:\n        n /= 13\n    if n % 17 == 0:\n        n /= 17\n    if n % 19 == 0:\n        n /= 19\n    if n % 23 == 0:\n        n /= 23\n    if n % 29 == 0:\n        n /= 29\n    if n % 31 == 0:\n        n /= 31\n    if n % 37 == 0:\n        n /= 37\n    if n % 41 == 0:\n        n /= 41\n    if n % 43 == 0:\n        n /= 43\n    if n % 47 == 0:\n        n /= 47\n    if n % 53 == 0:\n        n /= 53\n    if n % 59 == 0:\n        n /= 59\n    if n % 61 == 0:\n        n /= 61\n    if n % 71 == 0:\n        n /= 71\n    if n % 73 == 0:\n        n /= 73\n    if n % 79 == 0:\n        n /= 79\n    if n % 83 == 0:\n        n /=", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 0\n    if n % 2 == 0:\n        return 1\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return 1\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        p = largest_prime_factor(n - 1)\n        return p * p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not n:\n        return None\n    elif n < 2:\n        return 2\n    if n % 2 == 0:\n        return 1\n    max_factor = n // 2\n    return largest_prime_factor(max_factor)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1 and n % 2 == 0\n    # A good factorization is guaranteed to have a unique largest prime factor.\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    # Use a priority queue to find the largest prime factor.\n    pq = PriorityQueue()\n    while len(factors) > 0:\n        factor = factors[0]\n        factors = factors[1:]\n        pq.put(factor)\n    while len(factors) > 0:\n        factor = pq.get()\n        if n % factor == 0:\n            return factor\n        factors.remove(factor)\n    # No factors were found.\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    for i in range(2, n):\n        if n % i == 0:\n            break\n\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # brute force\n    for i in range(2, n + 1):\n        if i ** 2 <= n:\n            return i\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    for i in range(2, n / 2):\n        if n % i == 0:\n            return i\n    return largest_prime_factor(n / 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # http://stackoverflow.com/questions/7525323/quickest-way-to-check-if-a-digit-is-a-primal-number\n    def is_prime(number):\n        \"\"\"Return True if the given number is a prime number.\n\n        :param number: a positive integer\n        :return: True if the number is a prime number, else False.\n        \"\"\"\n        if number == 1:\n            return True\n        if number % 2 == 0:\n            return False\n        for divisor in range(2, number + 1):\n            if number % divisor == 0:\n                return False\n        return True\n\n    for divisor in range(3, n + 1):\n        if is_prime(divisor):\n            return divisor\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n % 2 == 0:\n        return n\n    else:\n        p = 2\n        while p * p <= n:\n            p = p + 2\n        return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, int(math.sqrt(n))):\n        if n % i == 0:\n            return i\n    raise ValueError(\"Argument must be a positive integer\")", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(1, n + 1):\n        if n % i == 0:\n            return i\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = []\n    divisor = 1\n    while divisor < n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            divisor += 1\n        else:\n            divisor += 1\n    if not factors:\n        return 1\n    return factors[0]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n        return 1\n\n    while True:\n        divisor = 2\n        while divisor * divisor <= n:\n            divisor += 1\n\n        if divisor == n:\n            return divisor\n\n        if n % divisor == 0:\n            return divisor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return None\n    if n % 2 == 1:\n        return 1\n    if n % 3 == 1:\n        return 3\n    if n % 5 == 1:\n        return 5\n    p = 2\n    while p <= n:\n        if p * p % n == 0:\n            break\n        p += 1\n    return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 2\n    n_l = [int(i) for i in str(n).split('.') if i]\n    if len(n_l) > 1:\n        factor = largest_prime_factor(n_l[0])\n        for i in range(1, len(n_l)):\n            if n_l[i] > factor:\n                factor = n_l[i]\n    else:\n        factor = n_l[0]\n    return factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 2\n    # Find the largest prime factor\n    start = 2\n    max_fact = 1\n    for i in range(start, n):\n        if n % i == 0:\n            continue\n        if n % i == 0:\n            max_fact = i + 1\n        else:\n            break\n    return max_fact\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n//(n % (n - 1))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    # The largest prime factor is the largest common factor of all the\n    # primes up to n. However, if there are only prime factors that are even\n    # powers of a number then it's better to use the largest even factor as\n    # the largest prime factor, since it's easier to find.\n    if any(p < n for p in primes_up_to(n)):\n        largest_prime_factor = largest_prime_factor_even(n)\n    else:\n        largest_prime_factor = largest_prime_factor_odd(n)\n\n    # If n is a power of a prime, then we know that n = p^k, where p is a\n    # prime and k is the largest even power of p that is less than n.\n    if any(n < p ** k for p in primes_up_to(n)):\n        largest_prime_factor = largest_prime_factor_power_of_p(n)\n\n    # If n is a power of 2, then it's also a power of a prime, and we know\n    # that n = p^k, where p is a prime and k is the largest even power of p\n    # that is less than n.\n    if any(n < p ** k for p in primes_up_to(n)):\n        largest_", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, n + 1):\n        if n % i == 0:\n            continue\n        if n == i * i:\n            return i\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    p = largest_prime_factor(n // 2)\n    if n % 2 == 0:\n        p += largest_prime_factor(n / 2)\n    return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    if n % 2 == 1:\n        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n//2)\n    for i in range(3, n//2):\n        if n % i == 0:\n            return i\n    return largest_prime_factor(n//2) * largest_prime_factor(n%2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    for i in range(3, int(math.sqrt(n))):\n        if n % i == 0:\n            return i\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = abs(n)\n    while True:\n        if n % 2 == 0:\n            if n > 2:\n                return n // 2\n        if n % 3 == 0:\n            if n > 3:\n                return n // 3\n        if n % 5 == 0:\n            if n > 5:\n                return n // 5\n        if n % 7 == 0:\n            if n > 7:\n                return n // 7\n        if n % 11 == 0:\n            if n > 11:\n                return n // 11\n        if n % 13 == 0:\n            if n > 13:\n                return n // 13\n        if n % 17 == 0:\n            if n > 17:\n                return n // 17\n        n = n // 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n % 3 == 0:\n        return 1\n    if n % 5 == 0:\n        return 1\n    if n % 7 == 0:\n        return 1\n    if n % 11 == 0:\n        return 1\n    if n % 13 == 0:\n        return 1\n    if n % 17 == 0:\n        return 1\n    if n % 19 == 0:\n        return 1\n    if n % 23 == 0:\n        return 1\n    if n % 29 == 0:\n        return 1\n    if n % 31 == 0:\n        return 1\n    if n % 37 == 0:\n        return 1\n    if n % 41 == 0:\n        return 1\n    if n % 43 == 0:\n        return 1\n    if n % 47 == 0:\n        return 1\n    if n % 53 == 0:\n        return 1\n    if n % 59 == 0:\n        return 1\n    if n % 61 == 0:\n        return 1\n    if n % 63 == 0:\n        return 1\n    if n % 67 == 0:\n        return 1\n    if n % 71 == 0:\n        return 1\n    if n % 73 == 0:\n        return 1\n    if n % 79 == 0:\n        return 1\n    if n % 83 == 0:\n        return 1\n    if n % 89 == 0:", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    s = 1\n    while n > 1:\n        if n % s == 0:\n            return s\n        s *= 2\n    raise ValueError(\"not a prime\")", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    m = 1\n    while True:\n        while True:\n            if n % m == 0:\n                return m\n            m *= 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    primes = set([primes for primes in range(2, int(math.sqrt(n)) + 1) if primes < n])\n    # longest possible factor is n itself\n    return max(primes)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Compute the largest prime factor up to sqrt(n)\n    factor = 2\n    while factor < sqrt(n):\n        factor = factor * factor\n        if factor % n == 0:\n            break\n    if factor > n:\n        factor = largest_prime_factor(n)\n    return factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    primes = [primes for primes in range(2, n) if not primes % n]\n    if len(primes) > 1:\n        return max(primes)\n    else:\n        return 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n < 2 or n % 2 == 1:\n        return n\n\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        divisor *= 2\n        if divisor % n == 0:\n            factors.append(divisor)\n\n    if len(factors) > 1:\n        return max(factors)\n    else:\n        return factors[0]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Begin by calculating the largest factor of n\n    factor = 1\n    while factor <= n:\n        factor *= factor\n\n    # Now we search for the largest prime factor\n    while factor > 1:\n        if n % factor == 0:\n            return factor\n        factor /= factor\n\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = n % 2\n    while True:\n        if n == 2:\n            return 1\n        n = n - 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n % 2 == 0:\n        return n // 2\n\n    factors = range(2, n + 1)\n    largest = 2\n\n    for i in factors:\n        if largest < i:\n            largest = i\n\n    return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 5:\n        return 5\n    if n % 2 == 0:\n        return 1\n    if n % 3 == 0:\n        return 2\n    if n % 5 == 0:\n        return 3\n    if n % 7 == 0:\n        return 5\n    if n % 11 == 0:\n        return 7\n    if n % 13 == 0:\n        return 11\n    if n % 17 == 0:\n        return 13\n    if n % 19 == 0:\n        return 17\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n %", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = abs(n)\n    while n:\n        if n % 2 == 0:\n            return 1\n        n //= 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 1\n    if n % 3 == 0:\n        return 1\n    if n % 5 == 0:\n        return 1\n    if n % 7 == 0:\n        return 1\n    if n % 11 == 0:\n        return 1\n    if n % 13 == 0:\n        return 1\n    if n % 17 == 0:\n        return 1\n    if n % 19 == 0:\n        return 1\n    if n % 23 == 0:\n        return 1\n    if n % 29 == 0:\n        return 1\n    if n % 31 == 0:\n        return 1\n    if n % 37 == 0:\n        return 1\n    if n % 41 == 0:\n        return 1\n    if n % 43 == 0:\n        return 1\n    if n % 47 == 0:\n        return 1\n    if n % 53 == 0:\n        return 1\n    if n % 59 == 0:\n        return 1\n    if n % 61 == 0:\n        return 1\n    if n % 67 == 0:\n        return 1\n    if n % 71 == 0:\n        return 1\n    if n % 73 == 0:\n        return 1\n    if n % 79 == 0:\n        return 1\n    if n % 83 == 0:\n        return 1\n    if n % 89 == 0:\n        return 1\n    if n % 97 == 0:", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    m = 1\n    while True:\n        if n % m == 0:\n            return m\n        if n > m ** 2:\n            m *= m\n        n = n // m\n        if n == 0:\n            return m", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    factor = 1\n    while n > 1:\n        if n % factor == 0:\n            return factor\n        factor += 1\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n > 1:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19]\n        n, count = divmod(n, primes)\n        if count == 1:\n            return n\n        n = n / count\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = []\n    while n > 1:\n        while n % 2 == 0:\n            n /= 2\n        factors.append(n)\n    return factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Algorithm:\n    # 1. Choose some random integer. It will be the first number we try to factorize\n    #    into primes. We want this number to be as big as possible.\n    # 2. Use the prime factorization algorithm to factorize this number into\n    #    primes.\n    # 3. If no primes were found, print \"no primes found\" and return 0.\n    # 4. If the number was a prime, add the largest prime factor to the result\n    #    and return the result.\n    # 5. Return the largest prime factor of n.\n    biggest_random_prime = random.randint(1, pow(2, max(1, n ** 0.5)))\n    if largest_prime_factor(biggest_random_prime) == 0:\n        return 0\n    else:\n        return largest_prime_factor(biggest_random_prime)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n <= 2:\n        return 1\n    p = 2\n    while n % p == 0:\n        p += 1\n    return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    n /= 2\n    while n > 1:\n        p = n % 2\n        if p == 1:\n            return p\n        n /= 2\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 1\n    else:\n        factors = [1]\n        for divisor in range(2, int(math.sqrt(n)) + 1, 2):\n            if n // divisor == 1:\n                factors.append(divisor)\n        return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"Call with n > 1.\")\n\n    if n % 2 == 0:\n        return 1\n    for p in range(2, n + 1):\n        if n % p == 0:\n            return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    if n % 2 == 0:\n        return 1\n    count = 0\n    for i in xrange(2, n // 2 + 1):\n        if n % i == 0:\n            count += 1\n    if count > 1:\n        return i * i\n    else:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return 1\n    p = 2\n    while p <= n:\n        if n % p == 0:\n            return p\n        p = p * 2\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 2:\n        return n\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    raise ValueError(\"Could not find largest prime factor of {}\".format(n))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n < 3:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 87 == 0:\n        return 87\n    if n % 89 == 0:\n        return 89\n    if", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n <= 1:\n        return 1\n    if n <= 2:\n        return 1\n    if n % 3 == 0:\n        return 2\n    if n % 5 == 0:\n        return 3\n    if n % 7 == 0:\n        return 5\n    if n % 11 == 0:\n        return 7\n    if n % 13 == 0:\n        return 11\n    if n % 17 == 0:\n        return 13\n    if n % 19 == 0:\n        return 17\n    if n % 23 == 0:\n        return 19\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    #  a = 1\n    #  b = 1\n    #  for i in range(2, n + 1):\n    #      if n % i == 0:\n    #          a = i\n    #          b = i - 1\n    #      else:\n    #          break\n    #\n    #  if b == 1:\n    #      return a\n    #  else:\n    #      return a * largest_prime_factor(b)\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        elif n == 2:\n            return True\n        else:\n            for i in range(2, n + 1):\n                if n % i == 0:\n                    return False\n                else:\n                    return True\n\n    #  if n > 2:\n    #      for i in range(2, n + 1):\n    #          if is_prime(n):\n    #              return False\n    #      return True\n\n    return is_prime(n)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 1\n    prime_list = [e for e in range(2, int(math.sqrt(n))) if n % e == 0]\n    if len(prime_list) > 0:\n        return max(prime_list)\n    else:\n        return 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n % 2 == 0:\n        n //= 2\n    while n!= 1:\n        n = n // 2\n        while n % 2 == 0:\n            n //= 2\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        while n > 1:\n            if n % 2 == 0:\n                return 2\n            n = n // 2\n    return 1"]]