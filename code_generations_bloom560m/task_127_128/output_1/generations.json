[["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # first, we check if the interval is closed\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval2)\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int, got %s\" % interval1)\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int, got %s\" % interval2)\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int, got %s\" % interval1)\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int, got %s\" % interval2)\n\n    # now we check if the intervals are closed\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval2)\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int, got %s\" % interval1)\n    if not isinstance(interval2, int):", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        interval1 = [interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1, interval1,", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be an array\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be an array\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be an array\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be an array\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    # check if the intervals intersect\n    if not intersection(interval1, interval2):\n        return \"YES\"\n\n    # check if the intervals intersect\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # check if the intervals intersect\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # check if the intervals intersect\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # check if the intervals intersect\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # check if the intervals intersect\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # check if the intervals intersect\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # check if the intervals intersect\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # check if the intervals intersect\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    #", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"YES\"\n\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    # If the intervals don't intersect, return \"NO\"\n    if not intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\"\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\"\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\"\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\"\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\"\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\"\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\"\n    if intersection(interval1, interval", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    # check if the two intervals intersect\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    # check if the two intervals intersect\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    # check if the two intervals intersect\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    # check if the two intervals intersect\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    # check if the two intervals intersect\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    # check if the two intervals intersect\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    # check if the two intervals intersect\n    if not isinstance(interval1, list):\n        raise TypeError(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer.\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of integers.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of integers.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of integers.\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of integers.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of integers.\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of integers.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int) or not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an int or a pair of ints\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an int\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int) or not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # first, we check if the given intervals intersect\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    # now we check if the given intervals are closed\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    # now we check if the given intervals are prime\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    # now we check if the given intervals are prime\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    # now we check if the given intervals are prime\n    if not isinstance(interval1, list):\n        raise TypeError(\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an int\")\n\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a int.\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # first, we check if the intervals intersect\n    if not intersects(interval1, interval2):\n        return \"YES\"\n\n    # now, we check if the length of the intersection is a prime number\n    if not intersects(interval1, interval2):\n        return \"NO\"\n\n    # now, we check if the length of the intersection is a prime number\n    if intersects(interval1, interval2):\n        return \"YES\"\n\n    # now, we check if the length of the intersection is a prime number\n    if intersects(interval1, interval2):\n        return \"YES\"\n\n    # now, we check if the length of the intersection is a prime number\n    if intersects(interval1, interval2):\n        return \"YES\"\n\n    # now, we check if the length of the intersection is a prime number\n    if intersects(interval1, interval2):\n        return \"YES\"\n\n    # now, we check if the length of the intersection is a prime number\n    if intersects(interval1, interval2):\n        return \"YES\"\n\n    # now, we check if the length of the intersection is a prime number\n    if intersects(interval1, interval2):", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # first, check if the intervals are closed\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    # then, check if the intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    # then, check if the lengths of the intervals are prime\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    # then, check if the lengths of the intervals intersect\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    # then, check if the lengths of the intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    # then, check if the length of the intersection is a prime number\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    # then, check if the length of the intersection is a prime number\n    if not isinstance(interval2, list", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Expected list of intervals.\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int.\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int.\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int.\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int.\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int.\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a int.\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a number\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a number\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a number\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a number\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a number\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a number\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a number\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a number\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a number\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    # first, check if the two intervals intersect\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    # now, check if the length of intersection is a prime number\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    # now, check if the length of intersection is a prime number\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    # now, check if the length of intersection is a prime number\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int) or not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"YES\"\n    if len(interval1) == 1:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 3:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 3:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 3:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 3:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 3:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 3:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # First, we check if the intervals are closed.\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    # Now we check if the intervals intersect.\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    # Now we check if the intervals are prime.\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    # Now we check if the intersection is a prime number.\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    # Now we check if the intersection is a prime number.\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 1:\n        return \"NO\"\n    if len(interval2) == 1:\n        return \"NO\"\n\n    if len(interval1) == 2:\n        return \"NO\"\n    if len(interval2) == 1:\n        return \"NO\"\n\n    if len(interval1) == 3:\n        return \"NO\"\n    if len(interval2) == 3:\n        return \"NO\"\n\n    if len(interval1) == 4:\n        return \"NO\"\n    if len(interval2) == 4:\n        return \"NO\"\n\n    if len(interval1) == 5:\n        return \"NO\"\n    if len(interval2) == 5:\n        return \"NO\"\n\n    if len(interval1) == 6:\n        return \"NO\"\n    if len(interval2) == 6:\n        return \"NO\"\n\n    if len(interval1) == 7:\n        return \"NO\"\n    if len(interval2) == 7:\n        return \"NO\"\n\n    if len(interval1) == 8:\n        return \"NO\"\n    if len(interval2) == 8:\n        return \"NO\"\n\n    if len(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # check if the two intervals intersect\n    if not isinstance(interval1, list):\n        raise TypeError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise TypeError(\"Expected list of intervals, got %s\" % interval2)\n\n    # check if the two intervals intersect\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int, got %s\" % interval1)\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int, got %s\" % interval2)\n\n    # check if the two intervals intersect\n    if not isinstance(interval1, list):\n        raise TypeError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise TypeError(\"Expected list of intervals, got %s\" % interval2)\n\n    # check if the two intervals intersect\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int, got %s\" % interval1)\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int, got %s\" % interval2)\n\n    # check if the two intervals intersect\n    if not isinstance(interval1,", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1.intersection(interval2), list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1.intersection(interval2.intersection(interval1)):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1.intersection(interval2.intersection(interval1)):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1.intersection(interval2.intersection(interval1)):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1.intersection(interval2.intersection(interval1)):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1.intersection(interval2.intersection(interval1)):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1.intersection(interval2.intersection", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a number\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a number\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a number\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a number\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a number\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a number\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a number\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a number\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a number\")\n    if not isinstance(interval2, int):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"YES\"\n    if len(interval1) == 1:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 3:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 3:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 3:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 3:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 3:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 3:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    # If the intervals don't intersect, return \"NO\"\n    if not intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\"\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\"\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\"\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\"\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\"\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\"\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\"\n    if intersection(interval1, interval", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Expected list of intervals.\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int.\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int.\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int.\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int.\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int.\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int.\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int.\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int.\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int.\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int.\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    for i in range(1, len(interval1)):\n        for j in range(1, len(interval2)):\n            if i == j:\n                return \"YES\"\n            elif i == j + 1:\n                return \"NO\"\n            elif i == j + 2:\n                return \"NO\"\n            elif i == j + 3:\n                return \"NO\"\n            elif i == j + 4:\n                return \"NO\"\n\n    return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"NO\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) > len(interval2):\n        return \"NO\"\n    if len(interval1) < len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n\n    # check if the intervals intersect\n    if not intersection(interval1, interval2):\n        return \"YES\"\n\n    # check if the length of intersection is a prime number\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # check if the two intervals intersect\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # check if the length of intersection is a prime number\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # check if the two intervals intersect\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # check if the length of intersection is a prime number\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # check if the two intervals intersect\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # check if the length of intersection is a prime number\n    if not intersection(interval1, interval2):", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    # check if the given intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    # check if the given intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    # check if the given intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    # check if the given intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    # check if", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if len(interval1)!= len(interval2):\n        raise TypeError(\"Interval must be a list\")\n\n    if len(interval1)!= len(interval2):\n        raise TypeError(\"Interval must be a list\")\n\n    if len(interval1)!= len(interval2):\n        raise TypeError(\"Interval must be a list\")\n\n    if len(interval1)!= len(interval2):\n        raise TypeError(\"Interval must be a list\")\n\n    if len(interval1)!= len(interval2):\n        raise TypeError(\"Interval must be a list\")\n\n    if len(interval1)!= len(interval2):\n        raise TypeError(\"Interval must be a list\")\n\n    if len(interval1)!= len(interval2):\n        raise TypeError(\"Interval must be a list\")\n\n    if len(interval1)!= len(interval2):\n        raise TypeError(\"Interval must be a list\")\n\n    if", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        interval1 = [interval1[0]]\n    if not isinstance(interval2, list):\n        interval2 = [interval2[0]]\n\n    if not isinstance(interval1, list):\n        interval1 = [interval1[0]]\n    if not isinstance(interval2, list):\n        interval2 = [interval2[0]]\n\n    if not isinstance(interval1, list):\n        interval1 = [interval1[0]]\n    if not isinstance(interval2, list):\n        interval2 = [interval2[0]]\n\n    if not isinstance(interval1, list):\n        interval1 = [interval1[0]]\n    if not isinstance(interval2, list):\n        interval2 = [interval2[0]]\n\n    if not isinstance(interval1, list):\n        interval1 = [interval1[0]]\n    if not isinstance(interval2, list):\n        interval2 = [interval2[0]]\n\n    if not isinstance(interval1, list):\n        interval1 = [interval1[0]]\n    if not isinstance(interval2, list):\n        interval2 = [interval2[0]]\n\n    if not isinstance(interval1, list):\n        interval1 = [interval1[0]]\n    if not isinstance(interval2, list", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of integers\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of integers\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 2:\n        return \"YES\"\n    if len(interval1) == 3:\n        return \"YES\"\n    if len(interval2) == 3:\n        return \"YES\"\n    if len(interval1) == 4:\n        return \"YES\"\n    if len(interval2) == 4:\n        return \"YES\"\n    if len(interval1) == 5:\n        return \"YES\"\n    if len(interval2) == 5:\n        return \"YES\"\n    if len(interval1) == 6:\n        return \"YES\"\n    if len(interval2) == 6:\n        return \"YES\"\n    if len(interval1) == 7:\n        return \"YES\"\n    if len(interval2) == 7:\n        return \"YES\"\n    if len(interval1) == 8:\n        return \"YES\"\n    if len(interval2) == 8:\n        return \"YES\"\n    if len(interval1) == 9:\n        return \"YES\"\n    if len(interval2) == 9:\n        return \"YES\"\n    if len(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an int\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise TypeError(\"Expected list of intervals, got %s\" % interval2)\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int, got %s\" % interval1)\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int, got %s\" % interval2)\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int, got %s\" % interval1)\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int, got %s\" % interval2)\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int, got %s\" % interval1)\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int, got %s\" % interval2)\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int, got %s\" % interval1)\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int, got %s\" % interval2)\n    if", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n\n    if interval1 < interval2:\n        return \"YES\"\n    elif interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"NO\"\n    elif interval1 > interval2:\n        return \"YES\"\n\n    if interval1 < interval2:\n        return \"NO\"\n    elif interval1 > interval2:\n        return \"YES\"\n\n    if interval1 < interval2:\n        return \"NO\"\n    elif interval1 > interval2:\n        return \"YES\"\n\n    if interval1 < interval2:\n        return \"NO\"\n    elif interval1 > interval2:\n        return \"YES\"\n\n    if interval1 < interval2:\n        return \"NO\"\n    elif interval1 > interval2:\n        return \"YES\"\n\n    if interval1 < interval2:\n        return \"NO\"\n    elif interval1 > interval2:\n        return \"YES\"\n\n    if interval1 < interval2:\n        return \"NO\"\n    elif interval1 > interval2:\n        return \"YES\"\n\n    if interval1 < interval2:\n        return \"NO\"\n    elif interval1 > interval", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval2, list", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer.\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        interval1 = [interval1[0]]\n    if not isinstance(interval2, list):\n        interval2 = [interval2[0]]\n    if not isinstance(interval1, int):\n        interval1 = interval1[0]\n    if not isinstance(interval2, int):\n        interval2 = interval2[0]\n    if not isinstance(interval1, int):\n        interval2 = interval2[0]\n    if not isinstance(interval1, int):\n        interval2 = interval2[0]\n    if not isinstance(interval1, int):\n        interval2 = interval2[0]\n    if not isinstance(interval1, int):\n        interval2 = interval2[0]\n    if not isinstance(interval1, int):\n        interval2 = interval2[0]\n    if not isinstance(interval1, int):\n        interval2 = interval2[0]\n    if not isinstance(interval1, int):\n        interval2 = interval2[0]\n    if not isinstance(interval1, int):\n        interval2 = interval2[0]\n    if not isinstance(interval1, int):\n        interval2 = interval2[0]\n    if not isinstance(interval1, int):\n        interval2 = interval2[0]\n    if", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        interval1 = [interval1]\n    if not isinstance(interval2, list):\n        interval2 = [interval2]\n    if not isinstance(interval1, int):\n        interval1 = [interval1]\n    if not isinstance(interval2, int):\n        interval2 = [interval2]\n    if not isinstance(interval1, int):\n        interval1 = [interval1]\n    if not isinstance(interval2, int):\n        interval2 = [interval2]\n    if not isinstance(interval1, int):\n        interval2 = [interval2]\n    if not isinstance(interval2, int):\n        interval2 = [interval2]\n    if not isinstance(interval1, int):\n        interval2 = [interval2]\n    if not isinstance(interval2, int):\n        interval2 = [interval2]\n    if not isinstance(interval1, int):\n        interval2 = [interval2]\n    if not isinstance(interval2, int):\n        interval2 = [interval2]\n    if not isinstance(interval1, int):\n        interval2 = [interval2]\n    if not isinstance(interval2, int):\n        interval2 = [interval2]\n\n    if not isinstance", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int) or not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a number\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a number\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a number\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a number\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a number\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a number\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a number\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a number\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a number\")\n    if not isinstance(interval2, int):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int) or not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple):\n        raise TypeError(\"Interval must be a tuple\")\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple):\n        raise TypeError(\"Interval must be a tuple\")\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple):\n        raise TypeError(\"Interval must be a tuple\")\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list.\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a number.\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a number.\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a number.\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a number.\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a number.\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a number.\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a number.\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a number.\")\n    if not isinstance(interval1, int):\n        raise TypeError(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        interval1 = [interval1[0]]\n    if not isinstance(interval2, list):\n        interval2 = [interval2[0]]\n\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n\n    if len(interval1) == len(interval2):\n        return \"NO\"\n\n    if len(interval1) == len(interval2):\n        return \"NO\"\n\n    if len(interval1) == len(interval2):\n        return \"NO\"\n\n    if len(interval1) == len(interval2):\n        return \"NO\"\n\n    if len(interval1) == len(interval2):\n        return \"NO\"\n\n    if len(interval1) == len(interval2):\n        return \"NO\"\n\n    if len(interval1) == len(interval2):\n        return \"NO\"\n\n    if len(interval1) == len(interval2):\n        return \"NO\"\n\n    if len(interval1) == len(interval2):\n        return \"NO\"\n\n    if len(interval1) == len", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int) or not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of integers.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of integers.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval1, int):", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer.\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals.\")\n\n    # If the intervals don't intersect, return \"NO\".\n    if not intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\".\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\".\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\".\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\".\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\".\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\".\n    if intersection(interval1, interval2):\n        return \"YES\"\n\n    # If the intervals intersect, return \"NO\".\n    if intersection(interval1, interval2)", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        interval1 = [interval1]\n    if not isinstance(interval2, list):\n        interval2 = [interval2]\n    if not isinstance(interval1, int):\n        interval1 = int(interval1)\n    if not isinstance(interval2, int):\n        interval2 = int(interval2)\n    if not isinstance(interval1, int):\n        interval1 = int(interval1)\n    if not isinstance(interval2, int):\n        interval2 = int(interval2)\n    if not isinstance(interval1, int):\n        interval1 = int(interval1)\n    if not isinstance(interval2, int):\n        interval2 = int(interval2)\n    if not isinstance(interval1, int):\n        interval1 = int(interval1)\n    if not isinstance(interval2, int):\n        interval2 = int(interval2)\n    if not isinstance(interval1, int):\n        interval1 = int(interval1)\n    if not isinstance(interval2, int):\n        interval2 = int(interval2)\n    if not isinstance(interval1, int):\n        interval1 = int(interval1)\n    if not isinstance(interval2, int):", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"YES\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"YES\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"YES\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"YES\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"YES\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"YES\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"YES\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"YES\"\n\n    if len(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # check if the two intervals intersect\n    if not intersection(interval1, interval2):\n        return \"YES\"\n    # check if the length of intersection is a prime number\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # check if the two intervals don't intersect\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # check if the length of intersection is a prime number\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # check if the two intervals intersect\n    if not intersection(interval1, interval2):\n        return \"YES\"\n\n    # check if the length of intersection is a prime number\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # check if the two intervals intersect\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # check if the length of intersection is a prime number\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # check if the two intervals intersect\n    if not intersection(interval1, interval2):\n        return \"YES\"\n\n    # check if the length of intersection is a prime number\n    if", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # first, we check if the intervals are closed\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval2)\n\n    # now, we check if the intervals are closed\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval2)\n\n    # now, we check if the intervals are closed\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval2)\n\n    # now, we check if the intervals are closed\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval2)\n\n    # now,", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n\n    if interval1 < interval2:\n        return \"YES\"\n    if interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"YES\"\n    if interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"YES\"\n    if interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"YES\"\n    if interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"YES\"\n    if interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"YES\"\n    if interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"YES\"\n    if interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"YES\"\n    if interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"YES\"\n    if interval1 > interval2:", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals.\")\n\n    # check if the intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals.\")\n\n    # check if the intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals.\")\n\n    # check if the intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals.\")\n\n    # check if the intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals.\")\n\n    # check if the intervals intersect", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # first check if the intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Intervals must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Intervals must be a list\")\n\n    # now check if the lengths of the intervals are prime\n    if len(interval1)!= len(interval2):\n        raise ValueError(\"Intervals must be a list\")\n\n    # now check if the lengths of the intervals are prime\n    if len(interval1)!= len(interval2):\n        raise ValueError(\"Intervals must be a list\")\n\n    # now check if the lengths of the intervals are prime\n    if len(interval1)!= len(interval2):\n        raise ValueError(\"Intervals must be a list\")\n\n    # now check if the lengths of the intervals are prime\n    if len(interval1)!= len(interval2):\n        raise ValueError(\"Intervals must be a list\")\n\n    # now check if the lengths of the intervals are prime\n    if len(interval1)!= len(interval2):\n        raise ValueError(\"Intervals must be a list\")\n\n    # now check if the lengths of the intervals are prime", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        interval1 = [interval1]\n    if not isinstance(interval2, list):\n        interval2 = [interval2]\n    if not isinstance(interval1, int):\n        interval1 = int(interval1)\n    if not isinstance(interval2, int):\n        interval2 = int(interval2)\n    if not isinstance(interval1, int):\n        interval1 = int(interval1)\n    if not isinstance(interval2, int):\n        interval2 = int(interval2)\n    if not isinstance(interval1, int):\n        interval1 = int(interval1)\n    if not isinstance(interval2, int):\n        interval2 = int(interval2)\n    if not isinstance(interval1, int):\n        interval1 = int(interval1)\n    if not isinstance(interval2, int):\n        interval2 = int(interval2)\n    if not isinstance(interval1, int):\n        interval1 = int(interval1)\n    if not isinstance(interval2, int):\n        interval2 = int(interval2)\n    if not isinstance(interval1, int):\n        interval1 = int(interval1)\n    if not isinstance(interval2, int):", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # first, we check if the intervals are closed\n    if not (interval1.isclosed() or interval2.isclosed()):\n        return \"YES\"\n    if not (interval1.intersect(interval2) or interval2.intersect(interval1)):\n        return \"NO\"\n\n    # now we check if the intervals intersect\n    if not (interval1.intersect(interval2) or interval2.intersect(interval1)):\n        return \"NO\"\n\n    # now we check if the intervals intersect\n    if not (interval1.intersect(interval2) or interval2.intersect(interval1)):\n        return \"NO\"\n\n    # now we check if the intervals intersect\n    if not (interval1.intersect(interval2) or interval2.intersect(interval1)):\n        return \"NO\"\n\n    # now we check if the intervals intersect\n    if not (interval1.intersect(interval2) or interval2.intersect(interval1)):\n        return \"NO\"\n\n    # now we check if the intervals intersect\n    if not (interval1.intersect(interval2) or interval2.intersect(interval1)):\n        return \"NO\"\n\n    # now", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n\n    # check if the intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    # check if the intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    # check if the intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    # check if the intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    # check if the intervals intersect", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # first, we check if the two intervals intersect\n    if not intersection(interval1, interval2):\n        return \"YES\"\n    # now, we check if the two intervals are not overlapping\n    if not intersection(interval1, interval2):\n        return \"NO\"\n    # now, we check if the two intervals are not overlapping\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # now, we check if the two intervals are not overlapping\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # now, we check if the two intervals are not overlapping\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # now, we check if the two intervals are not overlapping\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # now, we check if the two intervals are not overlapping\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # now, we check if the two intervals are not overlapping\n    if not intersection(interval1, interval2):\n        return \"NO\"\n\n    # now, we check if the two intervals are not overlapping\n    if not intersection(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int) or not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a pair of integers\")\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a pair of lists of integers\")\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a pair of lists of integers\")\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a pair of lists of integers\")\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a pair of lists of integers\")\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a pair of lists of integers\")\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a pair of lists of integers\")\n    if not isinstance(interval", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int) or not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple):\n        raise TypeError(\"Interval must be a tuple\")\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple):\n        raise TypeError(\"Interval must be a tuple\")\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple):\n        raise TypeError(\"Interval must be a tuple\")\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval1,", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of integers.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of integers.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected integer.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected integer.\")\n    if not isinstance(interval1, int):", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if len(interval1)!= len(interval2):\n        raise TypeError(\"Interval must be a list\")\n\n    if len(interval1)!= len(interval2):\n        raise TypeError(\"Interval must be a list\")\n\n    if len(interval1)!= len(interval2):\n        raise TypeError(\"Interval must be a list\")\n\n    if len(interval1)!= len(interval2):\n        raise TypeError(\"Interval must be a list\")\n\n    if len(interval1)!= len(interval2):\n        raise TypeError(\"Interval must be a list\")\n\n    if len(interval1)!= len(interval2):\n        raise TypeError(\"Interval must be a list\")\n\n    if len(interval1)!= len(interval2):\n        raise TypeError(\"Interval must be a list\")\n\n    if len(interval1)!= len(interval2):\n        raise TypeError(\"Interval must be a list\")\n\n    if", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list.\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int.\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int.\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int.\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int.\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int.\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int.\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int.\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int.\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"NO\"\n    if len(interval1) == 1:\n        return \"NO\"\n    if len(interval2) == 1:\n        return \"NO\"\n    if len(interval1) == 2:\n        return \"NO\"\n    if len(interval2) == 1:\n        return \"NO\"\n    if len(interval1) == 3:\n        return \"NO\"\n    if len(interval2) == 1:\n        return \"NO\"\n    if len(interval1) == 4:\n        return \"NO\"\n    if len(interval2) == 1:\n        return \"NO\"\n    if len(interval1) == 5:\n        return \"NO\"\n    if len(interval2) == 1:\n        return \"NO\"\n    if len(interval1) == 6:\n        return \"NO\"\n    if len(interval2) == 1:\n        return \"NO\"\n    if len(interval1) == 7:\n        return \"NO\"\n    if len(interval2) == 1:\n        return \"NO\"\n    if len(interval1) == 8:\n        return \"NO\"\n    if len(interval2) == 1:\n        return \"NO\"\n    if len(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 1:\n        return \"NO\"\n    if len(interval2) == 1:\n        return \"NO\"\n\n    if len(interval1) == 2:\n        return \"NO\"\n    if len(interval2) == 1:\n        return \"NO\"\n\n    if len(interval1) == 3:\n        return \"NO\"\n    if len(interval2) == 3:\n        return \"NO\"\n\n    if len(interval1) == 4:\n        return \"NO\"\n    if len(interval2) == 4:\n        return \"NO\"\n\n    if len(interval1) == 5:\n        return \"NO\"\n    if len(interval2) == 5:\n        return \"NO\"\n\n    if len(interval1) == 6:\n        return \"NO\"\n    if len(interval2) == 6:\n        return \"NO\"\n\n    if len(interval1) == 7:\n        return \"NO\"\n    if len(interval2) == 7:\n        return \"NO\"\n\n    if len(interval1) == 8:\n        return \"NO\"\n    if len(interval2) == 8:\n        return \"NO\"\n\n    if len(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval1, list):", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int interval\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int interval\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n\n    # check if the two intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    # check if the two intervals intersect\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    # check if the two intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    # check if the two intervals intersect\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    # check if the two intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    # check if the two intervals intersect\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    # check if the two intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n\n    #", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"YES\"\n    if len(interval1) == 1:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # first, we need to determine the length of the intersection\n    # of the intervals\n    # (1, 2), (2, 3)\n    # (-1, 1), (0, 4)\n    # (-3, -1), (-5, 5)\n    # (1, 3), (2, 4)\n    # (-1, 1), (0, 4)\n    # (-3, -1), (-5, 5)\n    # (1, 3), (2, 4)\n    # (-1, 1), (0, 4)\n    # (-3, -1), (-5, 5)\n    # (1, 3), (2, 4)\n    # (-1, 1), (0, 4)\n    # (-3, -1), (-5, 5)\n    # (1, 3), (2, 4)\n    # (-1, 1), (0, 4)\n    # (-3, -1), (-5, 5)\n    # (1, 3), (2, 4)\n    # (-1, 1), (0, 4)\n    # (-3, -1), (-5, 5)\n    # (1, 3), (2, 4)\n    # (-1, 1), (0, 4)\n    # (-3, -1), (-5, 5)\n    # (1, 3), (2, 4)\n    # (-1, 1), (0, 4)\n    # (-3, -1), (-5", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"NO\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) > len(interval2):\n        return \"NO\"\n    if len(interval1) < len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be a int.\")\n\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # check if the interval is closed\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval2)\n\n    # check if the intervals are closed\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval2)\n\n    # check if the intervals are closed\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval2)\n\n    # check if the intervals are closed\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval2)\n\n    # check if the intervals are closed\n    if not isinstance(interval1,", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"YES\"\n    if len(interval1) == 1:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1.index(interval2), int):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1.index(interval2.index(interval1)) == int):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1.index(interval2.index(interval1)) == int):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1.index(interval2.index(interval1)) == int):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1.index(interval2.index(interval1)) == int):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1.index(interval2.index(interval1)) == int):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1.index(interval2.index(interval1)) == int", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int) or not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a pair of integers\")\n\n    if interval1.isdigit():\n        return \"YES\"\n    elif interval2.isdigit():\n        return \"YES\"\n    else:\n        return \"No\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"YES\"\n    if len(interval1) == 1:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(interval1) == 2:\n        return \"YES\"\n    if len(interval2) == 1:\n        return \"YES\"\n    if len(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int) or not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"\n    if len(interval1) == len(interval2):\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of integers.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of integers.\")\n    if not isinstance(interval1.index(interval2), int):\n        raise ValueError(\"Expected int.index.\")\n    if not isinstance(interval1.index(interval2.index(interval1)) - 1, int):\n        raise ValueError(\"Expected int.index.\")\n    if not isinstance(interval1.index(interval2.index(interval1)) - 2, int):\n        raise ValueError(\"Expected int.index.\")\n    if not isinstance(interval1.index(interval2.index(interval1)) - 3, int):\n        raise ValueError(\"Expected int.index.\")\n    if not isinstance(interval1.index(interval2.index(interval1)) - 4, int):\n        raise ValueError(\"Expected int.index.\")\n    if not isinstance(interval1.index(interval2.index(interval1)) - 5, int):\n        raise ValueError(\"Expected int.index.\")\n\n    if not isinstance(interval1, list)", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"NO\"\n    if len(interval1) == 2:\n        return \"NO\"\n    if len(interval2) == 2:\n        return \"NO\"\n    if len(interval1) == 3:\n        return \"NO\"\n    if len(interval2) == 3:\n        return \"NO\"\n    if len(interval1) == 4:\n        return \"NO\"\n    if len(interval2) == 4:\n        return \"NO\"\n    if len(interval1) == 5:\n        return \"NO\"\n    if len(interval2) == 5:\n        return \"NO\"\n    if len(interval1) == 6:\n        return \"NO\"\n    if len(interval2) == 6:\n        return \"NO\"\n    if len(interval1) == 7:\n        return \"NO\"\n    if len(interval2) == 7:\n        return \"NO\"\n    if len(interval1) == 8:\n        return \"NO\"\n    if len(interval2) == 8:\n        return \"NO\"\n    if len(interval1) == 9:\n        return \"NO\"\n    if len(interval2) == 9:\n        return \"NO\"\n    if len(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int) or not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int) or not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list.\")\n\n    # Find the intersection of the intervals\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n\n    # Find the length of intersection\n    if len(interval1) == len(interval2):\n        return len(interval1) - len(interval2)\n    if len(interval1) == len(interval2):\n        return len(interval1) - len(interval2)\n    if len(interval1) > len(interval2):\n        return len(interval1", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"\n    if len(interval1) == len(interval2):\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        interval1 = [interval1]\n    if not isinstance(interval2, list):\n        interval2 = [interval2]\n    if not isinstance(interval1, int):\n        interval1 = interval1.split(\",\")\n    if not isinstance(interval2, int):\n        interval2 = interval2.split(\",\")\n    if not isinstance(interval1, int):\n        interval1 = interval1.split(\",\")\n    if not isinstance(interval2, int):\n        interval2 = interval2.split(\",\")\n    if not isinstance(interval1, int):\n        interval1 = interval1.split(\",\")\n    if not isinstance(interval2, int):\n        interval2 = interval2.split(\",\")\n    if not isinstance(interval1, int):\n        interval1 = interval1.split(\",\")\n    if not isinstance(interval2, int):\n        interval2 = interval2.split(\",\")\n    if not isinstance(interval1, int):\n        interval1 = interval1.split(\",\")\n    if not isinstance(interval2, int):\n        interval", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"\n    if len(interval1) < len(interval2):\n        return \"YES\"\n    if len(interval1) > len(interval2):\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list\")\n    if not isinstance(interval2, list", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input is a list of integers\n    # The output is a list of integers\n    # The input", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Expected list of intervals.\")\n\n    # check if the two intervals intersect\n    if not isinstance(interval1, list):\n        raise TypeError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Expected list of intervals.\")\n\n    # check if the two intervals are closed\n    if not isinstance(interval1, list):\n        raise TypeError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Expected list of intervals.\")\n\n    # check if the two intervals are prime\n    if not isinstance(interval1, list):\n        raise TypeError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Expected list of intervals.\")\n\n    # check if the two intervals are prime\n    if not isinstance(interval1, list):\n        raise TypeError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise Type", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int) or not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an int\")\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1,", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # first, check if the intervals intersect\n    if not isinstance(interval1, list):\n        raise TypeError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise TypeError(\"Expected list of intervals, got %s\" % interval2)\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int, got %s\" % interval1)\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int, got %s\" % interval2)\n\n    # now, check if the lengths of the intervals are prime\n    if not isinstance(interval1, list):\n        raise TypeError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise TypeError(\"Expected list of intervals, got %s\" % interval2)\n    if not isinstance(interval1, int):\n        raise TypeError(\"Expected int, got %s\" % interval1)\n    if not isinstance(interval2, int):\n        raise TypeError(\"Expected int, got %s\" % interval2)\n\n    # now, check if the lengths of the intervals are prime\n    if not isinstance(interval1, list):\n        raise", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # first, we check if the intervals are closed\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval2)\n\n    # now, we check if the intervals are closed\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval2)\n\n    # now, we check if the intervals are closed\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval2)\n\n    # now, we check if the intervals are closed\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval1)\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals, got %s\" % interval2)\n\n    # now,", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of integers.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of integers.\")\n    if not isinstance(interval1.intersection(interval2), list):\n        raise ValueError(\"Expected list of integers.\")\n    if not isinstance(interval1.intersection(interval2.intersection(interval1)):\n        raise ValueError(\"Expected list of integers.\")\n\n    if not isinstance(interval1.intersection(interval2.intersection(interval1)):\n        raise ValueError(\"Expected list of integers.\")\n\n    if not isinstance(interval1.intersection(interval2.intersection(interval1)):\n        raise ValueError(\"Expected list of integers.\")\n\n    if not isinstance(interval1.intersection(interval2.intersection(interval1)):\n        raise ValueError(\"Expected list of integers.\")\n\n    if not isinstance(interval1.intersection(interval2.intersection(interval1)):\n        raise ValueError(\"Expected list of integers.\")\n\n    if not isinstance(interval1.intersection(interval2.intersection(interval1)):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    for i in range(len(interval1)):\n        for j in range(len(interval2)):\n            if not isinstance(interval1[i][j], int):\n                raise TypeError(\"Interval must be a list\")\n            if not isinstance(interval2[i][j], int):\n                raise TypeError(\"Interval must be a list\")\n            if not isinstance(interval1[i][j], int):\n                raise TypeError(\"Interval must be a list\")\n            if not isinstance(interval2[i][j], int):\n                raise TypeError(\"Interval must be a list\")\n            if not isinstance(interval1[i][j], int):\n                raise TypeError(\"Interval must be a list\")\n            if not isinstance(interval2[i][j], int):\n                raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list.\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list.\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an int.\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an int.\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an int.\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an int.\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an int.\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an int.\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an int.\")\n\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an int.\")\n\n    if not isinstance(interval1, int):\n        raise TypeError(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # first, we need to find the length of the intersection\n    # (1, 2) is the start of the interval (1, 2)\n    # (2, 3) is the end of the interval (2, 3)\n    # (-1, 1) is the start of the interval (-1, 1)\n    # (0, 4) is the end of the interval (0, 4)\n    # (-3, -1) is the start of the interval (-3, -1)\n    # (-5, 5) is the end of the interval (-5, 5)\n    # (1, 2) is the start of the interval (1, 2)\n    # (2, 3) is the end of the interval (2, 3)\n    # (-1, 1) is the start of the interval (-1, 1)\n    # (0, 4) is the end of the interval (0, 4)\n    # (-3, -1) is the start of the interval (-3, -1)\n    # (-5, 5) is the end of the interval (-5, 5)\n    # (1, 2) is the start of the interval (1, 2)\n    # (2, 3) is the end of the interval (2, 3)\n    # (-1,", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be an array\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be an array\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be an array\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be an array\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be an array\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be an array\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be an array\")\n\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be an array\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be an array\")\n\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of integers\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of integers\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of integers\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of integers\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int\")\n    if not isinstance(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval1, int):", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval1.intersection(interval2), list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval1.intersection(interval2.intersection(interval1)):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval1.intersection(interval2.intersection(interval2)):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval1.intersection(interval2.intersection(interval1)):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval1.intersection(interval2.intersection(interval2)):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval1.intersection(interval2.intersection(interval1)):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval1.intersection(interval2.intersection(interval1)):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be a int\")\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be a int\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of integers.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of integers.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval1, int):", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an int\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an int\")\n    if not isinstance(interval2, int):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int) or not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an int or a pair of ints\")\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an list or a pair of lists\")\n    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple):\n        raise TypeError(\"Interval must be an tuple or a pair of tuples\")\n\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an list or a pair of lists\")\n\n    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple):\n        raise TypeError(\"Interval must be an tuple or a pair of tuples\")\n\n    if not isinstance(interval1, list) or not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an list or a pair of lists\")\n\n    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple):\n        raise TypeError(\"Interval must be an tuple or a pair", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Interval must be a list\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise ValueError", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if len(interval1) == 0:\n        return \"YES\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(interval1) == 0:\n        return \"NO\"\n    if len(interval2) == 0:\n        return \"NO\"\n\n    if len(", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int) or not isinstance(interval2, int):\n        raise ValueError(\"Expected int or int\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list or list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list or list\")\n    if not isinstance(interval1, tuple):\n        raise ValueError(\"Expected tuple or tuple\")\n    if not isinstance(interval2, tuple):\n        raise ValueError(\"Expected tuple or tuple\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list or list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list or list\")\n    if not isinstance(interval1, tuple):\n        raise ValueError(\"Expected tuple or tuple\")\n    if not isinstance(interval2, tuple):\n        raise ValueError(\"Expected tuple or tuple\")\n\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list or list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list or list\")\n    if not isinstance(interval1, tuple):\n        raise ValueError(\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval1, int):", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an int\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an int\")\n\n    if interval1 < interval2:\n        return \"YES\"\n    elif interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"YES\"\n    elif interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"YES\"\n    elif interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"YES\"\n    elif interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"YES\"\n    elif interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"YES\"\n    elif interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"YES\"\n    elif interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"YES\"\n    elif interval1 > interval2:\n        return \"NO\"\n\n    if interval1 < interval2:\n        return \"YES\"\n    elif interval1 > interval", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int interval\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int interval\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list interval\")\n    if not isinstance(interval1, list):\n        raise ValueError(\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # first check if the intervals intersect\n    if not isinstance(interval1, list):\n        raise ValueError(\"Intervals must be list\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Intervals must be list\")\n\n    # now check if the intervals intersect\n    if not isinstance(interval1, int):\n        raise ValueError(\"Intervals must be int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Intervals must be int\")\n\n    # now check if the intervals intersect\n    if not isinstance(interval1, int):\n        raise ValueError(\"Intervals must be int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Intervals must be int\")\n\n    # now check if the intervals intersect\n    if not isinstance(interval1, int):\n        raise ValueError(\"Intervals must be int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Intervals must be int\")\n\n    # now check if the intervals intersect\n    if not isinstance(interval1, int):\n        raise ValueError(\"Intervals must be int\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Intervals", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be a list\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be a list\")\n    if not", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # check if the two intervals intersect\n    if not (intersection(interval1, interval2)):\n        return \"YES\"\n\n    # check if the two intervals are not overlapping\n    if not (intersection(interval1, interval2)):\n        return \"NO\"\n\n    # check if the two intervals are not equal\n    if not (intersection(interval1, interval2)):\n        return \"NO\"\n\n    # check if the two intervals are not prime\n    if not (intersection(interval1, interval2)):\n        return \"NO\"\n\n    # check if the two intervals are not prime\n    if not (intersection(interval1, interval2)):\n        return \"NO\"\n\n    # check if the two intervals are not prime\n    if not (intersection(interval1, interval2)):\n        return \"NO\"\n\n    # check if the two intervals are not prime\n    if not (intersection(interval1, interval2)):\n        return \"NO\"\n\n    # check if the two intervals are not equal\n    if not (intersection(interval1, interval2)):\n        return \"NO\"\n\n    # check if the two intervals are not equal\n    if not (intersection(interval1, interval2)):\n        return", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, list):\n        raise ValueError(\"Expected list of intervals.\")\n    if not isinstance(interval2, list):\n        raise ValueError(\"Expected list of intervals.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval1, int):\n        raise ValueError(\"Expected int.\")\n    if not isinstance(interval2, int):\n        raise ValueError(\"Expected int.\")\n\n    if not isinstance(interval1, int):", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not isinstance(interval1, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval2, int):\n        raise TypeError(\"Interval must be an integer\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval2, list):\n        raise TypeError(\"Interval must be an array\")\n    if not isinstance(interval1, list):\n        raise TypeError(\"Interval must be an array\")\n    if not"]]