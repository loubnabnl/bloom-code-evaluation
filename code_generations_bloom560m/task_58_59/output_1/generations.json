[["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common(x, y) for x, y in list(set(l1))]))\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(L1[i])\n    for i in range(len(L2)):\n        common.append(L2[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common(x, y) for x, y in zip(L1, L2)]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for l in l1:\n        common[l] = common[l] + 1\n    for l in l2:\n        common[l] = common[l] + 1\n    for l in l1:\n        common[l] = common[l] + 1\n    for l in l2:\n        common[l] = common[l] + 1\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1))\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x[21]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([l1, l2], [l1, l2]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([(x, y) for x, y in zip(L1, L2)]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    for i in range(len(l2)):\n        common.append(common.index(l2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1))\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x[21]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for i in range(len(l1)):\n        common[l1[i]] = common[l1[i]] + common[l1[i]]\n    for i in range(len(l2)):\n        common[l2[i]] = common[l2[i]] + common[l2[i]]\n    common = sorted(common, key=lambda x: x[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common)\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x[21])\n    common.", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(L1[i])\n    for i in range(len(L2)):\n        common.append(L2[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([l1, l2, l2]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([l1, l2, l2]))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1))\n    common = list(set(l2))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l in l1:\n        common.append(common.index(l))\n    for l in l2:\n        common.append(common.index(l))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for i in range(len(l1)):\n        common[l1[i]] = common[l1[i]] + common[l1[i]]\n    for i in range(len(l2)):\n        common[l2[i]] = common[l2[i]] + common[l2[i]]\n    common = common.items()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common(l1, l2) for l1 in l1 if common(l1, l2)]))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for l in l1:\n        common[l] = common[l] + common[l]\n    for l in l2:\n        common[l] = common[l] + common[l]\n    for l in l1:\n        common[l] = common[l] + common[l]\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([(i, j) for i, j in zip(L1, L2)]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common(x, y) for x, y in zip(L1, L2)]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([l1, l2, l2]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([l1, l2, l2]))\n    common.sort(key=lambda x: x[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for l in l1:\n        common[l] = common[l] + common[l]\n    for l in l2:\n        common[l] = common[l] + common[l]\n    common = sorted(common, key=lambda x: x[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort()\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(L1[i])\n    for i in range(len(L2)):\n        common.append(L2[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1.intersection(l2)))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort()\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1))\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x[21]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common(l1, l2) for l1 in l1 if l1 in l2 and l1 not in common]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([l1, l2, l2]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common(x, y) for x, y in zip(L1, L2)]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(map(lambda x: x[0], l1))\n    common = list(map(lambda x: x[1], l2))\n    common = list(map(lambda x: x[2], common))\n    common = list(map(lambda x: x[3], common))\n    common = list(map(lambda x: x[4], common))\n    common = list(map(lambda x: x[5], common))\n    common = list(map(lambda x: x[6], common))\n    common = list(map(lambda x: x[7], common))\n    common = list(map(lambda x: x[8], common))\n    common = list(map(lambda x: x[9], common))\n    common = list(map(lambda x: x[10], common))\n    common = list(map(lambda x: x[11], common))\n    common = list(map(lambda x: x[12], common))\n    common = list(map(lambda x: x[13], common))\n    common = list(map(lambda x: x[14], common))\n    common = list(map(lambda x: x[15], common))\n    common = list(map(lambda x: x[16], common))\n    common = list(map(lambda x: x[17], common))\n    common = list(map(lambda x: x[18], common))\n    common = list(map(", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1.intersection(l2)))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common(x, y) for x, y in list(set(l1))]))\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(common([(i, j) for i, j in zip(L1, L2)])))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1.intersection(l2.intersection(l1.intersection(l2.intersection(l1.intersection(l2.intersection(l1.intersection(l2.intersection(l1.intersection(l2.intersection(l1.intersection(l2.intersection(l1.intersection(l2.intersection(l1.intersection(l2.intersection(l1.intersection(l2.intersection(l1.intersection(l2.intersection(l1.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.intersection(l2.inters", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1.intersection(l2)))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1.intersection(l2)))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common(x, y) for x, y in list(set(l1))]))\n    common = list(set([common(x, y) for x, y in list(set(l2))]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    for i in range(len(l2)):\n        common.append(common.index(l2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(L1[i])\n    for i in range(len(L2)):\n        common.append(L2[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(L1[i])\n    for i in range(len(L2)):\n        common.append(L2[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([(i, j) for i, j in zip(L1, L2)]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([l1, l2, l2]))\n    common.sort()\n    common.reverse()\n    common.sort(key=lambda x: x[0])\n    common.reverse(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.reverse(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.reverse(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.reverse(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.reverse(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1))\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x[21]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1.intersection(l2.intersection(1)))\n    common.sort(key=lambda x: x[0])\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    for i in range(len(l2)):\n        common.append(common.index(l2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([l1[0] for l1 in l1 if l1[0] in common]))\n    common = sorted(common, key=lambda x: x[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(common(l1, l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common)\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x[21])\n    common.", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([(i, j) for i, j in zip(L1, L2)])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([(i, j) for i, j in zip(L1, L2)]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for l in l1:\n        common[l] = common[l] + common[l]\n    for l in l2:\n        common[l] = common[l] + common[l]\n    for l in l1:\n        common[l] = common[l] + common[l]\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1))\n    common = list(set(l2))\n    common.sort(key=lambda x: x[0])\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1.intersection(l2).difference(l2)))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(L1[i])\n    for i in range(len(L2)):\n        common.append(L2[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1))\n    common = list(set(l2))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([(i, j) for i, j in zip(L1, L2)]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([(i, j) for i, j in zip(L1, L2)]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([(i, j) for i, j in zip(L1, L2)]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for i in range(len(l1)):\n        common[l1[i]] = common[l1[i]] + common[l1[i]]\n    for i in range(len(l2)):\n        common[l2[i]] = common[l2[i]] + common[l2[i]]\n    common = sorted(common, key=lambda x: x[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common)\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x[21])\n    common.", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([(i, j) for i, j in zip(L1, L2)]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common(x, y) for x, y in list(set([common(x, y) for x, y in list(set([common(x, y) for x, y in list(set([common(x, y) for x, y in list(set([common(x, y) for x, y in list(set([common(x, y) for x, y in list(set([common(x, y) for x, y in list(set([common(x, y) for x, y in list(set([common(x, y) for x, y in list(set([common(x, y) for x, y in list(set([common(x, y) for x, y in list(set([common(x, y) for x, y in list(set([common(x, y) for x, y in list(set([common(x, y) for x, y in list(set([common(x, y) for x, y in list(set([common(x, y) for x", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common)\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x[21])\n    common.", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(L1[i])\n    for i in range(len(L2)):\n        common.append(L2[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for l in l1:\n        common[l] = common[l] + 1\n    for l in l2:\n        common[l] = common[l] + 1\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for l in l1:\n        common[l] = common[l] + l\n    for l in l2:\n        common[l] = common[l] + l\n    common = sorted(common, key=lambda x: x[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(map(lambda x: x[0], l1))\n    common = list(map(lambda x: x[1], l2))\n    common = list(map(lambda x: x[2], common))\n    common = list(map(lambda x: x[3], common))\n    common = list(map(lambda x: x[4], common))\n    common = list(map(lambda x: x[5], common))\n    common = list(map(lambda x: x[6], common))\n    common = list(map(lambda x: x[7], common))\n    common = list(map(lambda x: x[8], common))\n    common = list(map(lambda x: x[9], common))\n    common = list(map(lambda x: x[10], common))\n    common = list(map(lambda x: x[11], common))\n    common = list(map(lambda x: x[12], common))\n    common = list(map(lambda x: x[13], common))\n    common = list(map(lambda x: x[14], common))\n    common = list(map(lambda x: x[15], common))\n    common = list(map(lambda x: x[16], common))\n    common = list(map(lambda x: x[17], common))\n    common = list(map(lambda x: x[18], common))\n    common = list(map(", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(common(l1, l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([l1, l2, l2]))\n    common.sort(key=lambda x: x[0])\n    common.sort(reverse=True)\n    common.sort(key=lambda x: x[1])\n    common.sort(reverse=True)\n    common.sort(key=lambda x: x[2])\n    common.sort(reverse=True)\n    common.sort(key=lambda x: x[3])\n    common.sort(reverse=True)\n    common.sort(key=lambda x: x[4])\n    common.sort(reverse=True)\n    common.sort(key=lambda x: x[5])\n    common.sort(reverse=True)\n    common.sort(key=lambda x: x[6])\n    common.sort(reverse=True)\n    common.sort(key=lambda x: x[7])\n    common.sort(reverse=True)\n    common.sort(key=lambda x: x[8])\n    common.sort(reverse=True)\n    common.sort(key=lambda x: x[9])\n    common.sort(reverse=True)\n    common.sort(key=lambda x: x[10])\n    common.sort(reverse=True)\n    common.sort(key=lambda x: x[11])\n    common.sort(reverse=True)\n    common.sort(key=lambda x: x[12])\n    common.sort(reverse=True)\n    common.sort(key=", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1.intersection(l2)))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1))\n    common.sort()\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(common([l1, l2, l2], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None,", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([l1, l2, l2]))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([common(i, j) for i, j in zip(L1, L2)])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([(i, j) for i, j in zip(L1, L2)]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common)\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x[21])\n    common.", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common.items())\n    common.sort(key=lambda x: x[0])\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l in l1:\n        common.append(common.index(l))\n    for l in l2:\n        common.append(common.index(l))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common(x, y) for x, y in zip(L1, L2)]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort()\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1))\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1.intersection(l2)))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for l in l1:\n        common[l] = common[l] + 1\n    for l in l2:\n        common[l] = common[l] + 1\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([(i, j) for i, j in zip(l1, l2) if i not in j])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1))\n    common = list(set(l2))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(common))\n    common = list(set(", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(L1[i])\n    for i in range(len(L2)):\n        common.append(L2[i])\n\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common)\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x[21])\n    common.", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l in l1:\n        common.append(common.index(l))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for l in l1:\n        common[l] = common[l] + 1\n    for l in l2:\n        common[l] = common[l] + 1\n    common = sorted(common, key=lambda x: x[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for l in l1:\n        common[l] = common[l] + common[l] + common[l]\n    for l in l2:\n        common[l] = common[l] + common[l] + common[l]\n    for l in common:\n        print(l)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1.intersection(l2)))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([(i, j) for i, j in zip(L1, L2)]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1))\n    common = list(set(l2))\n    common.sort()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common)\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x[21])\n    common.", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common(x, y) for x, y in list(set(l1))]))\n    common.sort()\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(map(lambda x: x[0], list(range(len(l1))))\n    common = list(map(lambda x: x[1], list(range(len(l2))))\n    common = list(map(lambda x: x[2], list(range(len(l1))))\n    common = list(map(lambda x: x[3], list(range(len(l2))))\n    common = list(map(lambda x: x[4], list(range(len(l1))))\n    common = list(map(lambda x: x[5], list(range(len(l2))))\n    common = list(map(lambda x: x[6], list(range(len(l1))))\n    common = list(map(lambda x: x[7], list(range(len(l2))))\n    common = list(map(lambda x: x[8], list(range(len(l1))))\n    common = list(map(lambda x: x[9], list(range(len(l2))))\n    common = list(map(lambda x: x[10], list(range(len(l1))))\n    common = list(map(lambda x: x[11], list(range(len(l2))))\n    common = list(map(lambda x: x", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1.intersection(l2)))\n    common.sort()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1))\n    common = list(set(l2))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([l1, l2, l2], [None, None, None, None]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(map(lambda x: x[0], list(range(len(l1))))\n    common = list(map(lambda x: x[1], list(range(len(l2))))\n    common = list(map(lambda x: x[2], list(range(len(l1))))\n    common = list(map(lambda x: x[3], list(range(len(l2))))\n    common = list(map(lambda x: x[4], list(range(len(l1))))\n    common = list(map(lambda x: x[5], list(range(len(l2))))\n    common = list(map(lambda x: x[6], list(range(len(l1))))\n    common = list(map(lambda x: x[7], list(range(len(l2))))\n    common = list(map(lambda x: x[8], list(range(len(l1))))\n    common = list(map(lambda x: x[9], list(range(len(l2))))\n    common = list(map(lambda x: x[10], list(range(len(l1))))\n    common = list(map(lambda x: x[11], list(range(len(l2))))\n    common = list(map(lambda x: x", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(L1[i])\n    for i in range(len(L2)):\n        common.append(L2[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common(x, y) for x, y in zip(L1, L2)]))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common(x, y) for x, y in zip(L1, L2)]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    for i in range(len(l2)):\n        common.append(common.index(l2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1.intersection(l2)))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(common([l1, l2, l2], [None, None, None, None, None, None, None])))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort()\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common)\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x[21])\n    common.", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for i in range(len(l1)):\n        common[l1[i]] = common[l1[i]] + common[l1[i]]\n    for i in range(len(l2)):\n        common[l2[i]] = common[l2[i]] + common[l2[i]]\n    common = sorted(common, key=lambda x: x[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common)\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x[21])\n    common.", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1.intersection(l2).difference(l2)))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for i in range(len(l1)):\n        common[l1[i]] = common[l1[i]] + common[l1[i]]\n    for i in range(len(l2)):\n        common[l2[i]] = common[l2[i]] + common[l2[i]]\n    common = sorted(common, key=lambda x: x[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for l in l1:\n        common[l] = common[l] + 1\n    for l in l2:\n        common[l] = common[l] + 1\n    for l in l1:\n        common[l] = common[l] + 1\n    for l in l2:\n        common[l] = common[l] + 1\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common(x, y) for x, y in zip(L1, L2)]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common(x, y) for x, y in list(set(l1))]))\n    common = list(set([common(x, y) for x, y in list(set(l2))]))\n    return common"]]