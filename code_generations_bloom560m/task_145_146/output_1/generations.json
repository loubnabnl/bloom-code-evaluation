[["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: x[0])\n    return nums[1:]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=lambda n: n[0])\n\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=lambda n: n[0])\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=lambda n: n[0])\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort()\n        return sorted(nums, key=sort)\n\n    def order_by_points(nums):\n        \"\"\"\n        Order the given list of integers in ascending order.\n        \"\"\"\n        nums.sort()\n        return sorted(nums, key=order_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort()\n        return sorted(nums, key=sort_by_points)\n\n    def order_by_points(nums):\n        \"\"\"\n        Order the given list of integers in ascending order.\n        \"\"\"\n        nums.sort()\n        return sorted(nums, key=order_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort()\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort()\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort([]) == []\n        \"\"\"\n        return a.sum() + b.sum()\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        return sort(sort_by_points(sort_by_points(sort_by_points(sort_by_points(sort_by_points(sort_by_points(sort_by_points(sort_by_points(sort_by_points(sort_by_points(sort_by_points(sort_by_points(sort_by_points(sort_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return -1\n        elif a < b:\n            return 1\n        else:\n            return 0\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        def sort_by_points(nums):\n            if nums == []:\n                return -1\n            else:\n                return 1\n        sort_by_points(sort_by_points(nums))\n        sort_by_points(sort_by_points(nums))\n        sort_by_points(sort_by_points(nums))\n        sort_by_points(sort_by_points(nums))\n        sort_by_points(sort_by_points(nums))\n        sort_by_points(sort_by_points(nums))\n        sort_by_points(sort_by_points(nums))\n        sort_by_points(sort_by_points(nums))\n        sort_by_points(sort_by_points(nums))\n        sort_by_points(sort_by_points(nums))\n        sort_by_points(sort_by_points(nums))\n        sort_by_points(sort_by_points(nums))\n        sort_by_points(sort_by_points(nums))\n        sort_by", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=lambda num: num.sum())\n\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=lambda num: num.sum())\n\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=lambda num: num.sum())\n\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort(key=lambda num: num.sum())\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort_by_points(key=sort)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort_by_points(key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort_by_points(key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort_by_points(key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort_by_points(key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums = sorted(nums, key=sort)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        nums = sorted(nums, key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums = sorted(nums, key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        nums = sorted(nums, key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums = sorted(nums, key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        nums = sorted(nums, key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort([]) == []\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        else:\n            return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        else:\n            return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda n: n[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        if isinstance(x, int):\n            return x\n        else:\n            return x + 1\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort.__doc__)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points.__doc__)\n\n    def sort_by_points(nums, order_by_points):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points.__doc__, order_by_points=order_by_points)\n\n    def sort_by_points(nums, order_by_points, order_by_points):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points.__doc__, order_by_points=order_by_points, order_by_points=order_by_points)\n\n    def sort_by_points(nums, order_by_points, order_by_points, order_by_points):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points.__doc__, order_by_points=order_by_points, order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return x[0] < x[1] < x[2] < x[3]\n\n    def sort_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> sort_by_points([]) == []\n    \"\"\"\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return x[0] < x[1] < x[2] < x[3]\n\n    def sort_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda i: i[0])\n    nums = nums.sort(key=lambda i: i[0])\n    nums = nums.sort(key=lambda i: i[0])\n    nums = nums.sort(key=lambda i: i[0])\n    nums = nums.sort(key=lambda i: i[0])\n    nums = nums.sort(key=lambda i: i[0])\n    nums = nums.sort(key=lambda i: i[0])\n    nums = nums.sort(key=lambda i: i[0])\n    nums = nums.sort(key=lambda i: i[0])\n    nums = nums.sort(key=lambda i: i[0])\n    nums = nums.sort(key=lambda i: i[0])\n    nums = nums.sort(key=lambda i: i[0])\n    nums = nums.sort(key=lambda i: i[0])\n    nums = nums.sort(key=lambda i: i[0])\n    nums = nums.sort(key=lambda i: i[0])\n    nums = nums.sort(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] - x[1]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(len(nums)))\n    nums.sort(key=lambda n: n[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort([]) == []\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        if isinstance(x, int):\n            return x\n        elif isinstance(x, list):\n            return x[0]\n        else:\n            raise TypeError('Invalid argument')\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        def sort_by_points(nums):\n            if isinstance(nums, int):\n                return nums[0]\n            elif isinstance(nums, list):\n                return nums[0]\n            else:\n                raise TypeError('Invalid argument')\n\n        for i in range(len(nums)):\n            if sort_by_points(nums)[i] == -1:\n                sort_by_points(nums)[i] = 1\n            elif sort_by_points(nums)[i] == 1:\n                sort_by_points(nums)[i] = -1\n            else:\n                sort_by_points(nums)[i] = 0\n\n        return sort\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        if isinstance(x, int):\n            return x\n        else:\n            return x.sum(axis=1)\n\n    def sort_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> sort_by_points([]) == []\n    \"\"\"\n    def sort_by_points(nums):\n        if isinstance(nums, int):\n            return nums.sum(axis=1)\n        else:\n            return nums.sum(axis=1)\n\n    def sort_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums = list(range(nums))\n    nums.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return -1\n        elif a < b:\n            return 1\n        elif a > b:\n            return -1\n        else:\n            return 0\n\n    def sort_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> sort_by_points([]) == []\n    \"\"\"\n    def sort_by_points(a, b):\n        if a == b:\n            return -1\n        elif a < b:\n            return 1\n        elif a > b:\n            return -1\n        else:\n            return 0\n\n    def sort_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sort_by_points([1, 11, -1, -11, -12])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return a.sum() - b.sum()\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return 0\n        else:\n            return a - b\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums = [int(x) for x in nums]\n    nums.sort(key=lambda x: x[0])\n    nums.sort(reverse=True)\n    nums = [int(x) for x in nums]\n    nums.sort(key=lambda x: x[0])\n    nums = [int(x) for x in nums]\n    nums.sort(key=lambda x: x[0])\n    nums = [int(x) for x in nums]\n    nums.sort(key=lambda x: x[0])\n    nums = [int(x) for x in nums]\n    nums.sort(key=lambda x: x[0])\n    nums = [int(x) for x in nums]\n    nums.sort(key=lambda x: x[0])\n    nums = [int(x) for x in nums]\n    nums.sort(key=lambda x: x[0])\n    nums = [int(x) for x in nums]\n    nums.sort(key=lambda x: x[0])\n    num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return 0\n        else:\n            return a - b\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda n: n[0])\n    nums = [(n[0], n[1]) for n in nums]\n    nums.sort(key=lambda n: n[0])\n    nums = [(n[0], n[1]) for n in nums]\n    nums.sort(key=lambda n: n[0])\n    nums = [(n[0], n[1]) for n in nums]\n    nums.sort(key=lambda n: n[0])\n    nums = [(n[0], n[1]) for n in nums]\n    nums = [(n[0], n[1]) for n in nums]\n    nums = [(n[0], n[1]) for n in nums]\n    nums = [(n[0], n[1]) for n in nums]\n    nums = [(n[0], n[1]) for n in nums]\n    nums = [(n[0], n[1]) for n in nums]\n    nums = [(n[0], n[1]) for n in nums]\n    nums = [(n[0], n[1]) for n in nums]\n    nums = [(n", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda n: n[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = [nums]\n    nums = sorted(nums, key=lambda num: num.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        if isinstance(x, int):\n            return x\n        return x.sum(axis=0)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        def sort_by_points(nums):\n            \"\"\"\n            Sort the given list of integers in ascending order\n            according to the sum of their digits.\n            \"\"\"\n            for i in range(len(nums)):\n                if sort_by_points(nums[i]) == sort_by_points(nums[i]):\n                    return i\n            return -1\n        return sort_by_points(nums)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        for i in range(len(nums)):\n            if sort_by_points(nums[i]) == sort_by_points(nums[i]):\n                return i\n        return -1\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda i: i[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums.sort(reverse=True)\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(reverse=True)\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(reverse=True)\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(reverse=True)\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(reverse=True)\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(reverse=True)\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(reverse=True)\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(reverse=True)\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(reverse=True)\n    nums = nums.sort(key=lambda x: x[0])\n    nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num.sum())\n    nums.sort(key=lambda num: num.index(1))\n    nums.sort(key=lambda num: num.index(11))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=lambda num: num.index(-11))\n    nums.sort(key=lambda num: num.index(-12))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=lambda num: num.index(11))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=lambda num: num.index(-11))\n    nums.sort(key=lambda num: num.index(-12))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=lambda num: num.index(11))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=lambda num: num.index(11))\n    nums.sort(key=", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort(key=lambda x: x[0])\n    nums = nums.sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums.sort(key=lambda x: x[1])\n    nums.sort(key=lambda x: x[2])\n    nums.sort(key=lambda x: x[3])\n    nums.sort(key=lambda x: x[4])\n    nums.sort(key=lambda x: x[5])\n    nums.sort(key=lambda x: x[6])\n    nums.sort(key=lambda x: x[7])\n    nums.sort(key=lambda x: x[8])\n    nums.sort(key=lambda x: x[9])\n    nums.sort(key=lambda x: x[10])\n    nums.sort(key=lambda x: x[11])\n    nums.sort(key=lambda x: x[12])\n    nums.sort(key=lambda x: x[13])\n    nums.sort(key=lambda x: x[14])\n    nums.sort(key=lambda x: x[15])\n    nums.sort(key=lambda x: x[16])\n    nums.sort(key=lambda x: x[17])\n    nums.sort(key=lambda x: x[18])\n    nums.sort(key=lambda x: x[19])\n    nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return a.sum() - b.sum()\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return -1\n        elif a == b:\n            return 1\n        else:\n            return 0\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda n: n.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda num: num.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort()\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        nums.sort_by_points()\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort_by_points()\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        nums.sort_by_points()\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort_by_points()\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        nums.sort_by_points()\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    nums.sort(key=lambda i: i.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if len(nums) > 1:\n            return sorted(nums, key=sort)\n        else:\n            return sorted(nums, key=sort, reverse=True)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if len(nums) > 1:\n            return sorted(nums, key=sort_by_points)\n        else:\n            return sorted(nums, key=sort_by_points, reverse=True)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if len(nums) > 1:\n            return sorted(nums, key=sort_by_points, reverse=True)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort([]) == []\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: x[0])\n    return nums[1:]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums.sort(key=lambda x: x[1])\n    nums.sort(key=lambda x: x[2])\n    nums.sort(key=lambda x: x[3])\n    nums.sort(key=lambda x: x[4])\n    nums.sort(key=lambda x: x[5])\n    nums.sort(key=lambda x: x[6])\n    nums.sort(key=lambda x: x[7])\n    nums.sort(key=lambda x: x[8])\n    nums.sort(key=lambda x: x[9])\n    nums.sort(key=lambda x: x[10])\n    nums.sort(key=lambda x: x[11])\n    nums.sort(key=lambda x: x[12])\n    nums.sort(key=lambda x: x[13])\n    nums.sort(key=lambda x: x[14])\n    nums.sort(key=lambda x: x[15])\n    nums.sort(key=lambda x: x[16])\n    nums.sort(key=lambda x: x[17])\n    nums.sort(key=lambda x: x[18])\n    nums.sort(key=lambda x: x[19])\n    nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda i: i[0])\n    nums.sort(key=lambda i: i[1])\n    nums.sort(key=lambda i: i[2])\n    nums.sort(key=lambda i: i[3])\n    nums.sort(key=lambda i: i[4])\n    nums.sort(key=lambda i: i[5])\n    nums.sort(key=lambda i: i[6])\n    nums.sort(key=lambda i: i[7])\n    nums.sort(key=lambda i: i[8])\n    nums.sort(key=lambda i: i[9])\n    nums.sort(key=lambda i: i[10])\n    nums.sort(key=lambda i: i[11])\n    nums.sort(key=lambda i: i[12])\n    nums.sort(key=lambda i: i[13])\n    nums.sort(key=lambda i: i[14])\n    nums.sort(key=lambda i: i[15])\n    nums.sort(key=lambda i: i[16])\n    nums.sort(key=lambda i: i[17])\n    nums.sort(key=lambda i:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort([]) == []\n        \"\"\"\n        if len(a) == len(b):\n            return a[0] + b[0]\n        else:\n            return a[0] + b[0]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    nums.sort(key=lambda x: x[0])\n    nums.sort(key=lambda x: x[1])\n    nums.sort(key=lambda x: x[2])\n    nums.sort(key=lambda x: x[3])\n    nums.sort(key=lambda x: x[4])\n    nums.sort(key=lambda x: x[5])\n    nums.sort(key=lambda x: x[6])\n    nums.sort(key=lambda x: x[7])\n    nums.sort(key=lambda x: x[8])\n    nums.sort(key=lambda x: x[9])\n    nums.sort(key=lambda x: x[10])\n    nums.sort(key=lambda x: x[11])\n    nums.sort(key=lambda x: x[12])\n    nums.sort(key=lambda x: x[13])\n    nums.sort(key=lambda x: x[14])\n    nums.sort(key=lambda x: x[15])\n    nums.sort(key=lambda x: x[16])\n    nums.sort(key=lambda x: x[17])\n    nums.sort(key=lambda x: x[18])\n    nums.sort(key=lambda x: x[19])\n    nums.sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return a.sum() - b.sum()\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = [nums]\n    nums = sorted(nums, key=lambda num: num[0])\n    nums = [num for num in nums]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda n: n.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(a) > len(b):\n            return a[0] > b[0]\n        else:\n            return a[0] < b[0]\n\n    def sort_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in descending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> sort_by_points([]) == []\n    \"\"\"\n    def sort_by_points(a, b):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        if len(a) > len(b):\n            return a[0] < b[0]\n        else:\n            return a[0] > b[0]\n\n    def sort_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        if len(x) == 1:\n            return x[0]\n        return x[0] + x[1]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort([]) == []\n        \"\"\"\n        return a.sum() - b.sum()\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        return sorted(a.sum() - b.sum())[0]\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    nums = nums.split(',')\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums if x < 0 or x > 1]\n    nums = [int(x) for x in nums if x < 0 or x > 1]\n    nums = [int(x) for x in nums if x < 0 or x > 1]\n    nums = [int(x) for x in nums if x < 0 or x > 1]\n    nums = [int(x) for x in nums if x < 0 or x > 1]\n    nums = [int(x) for x in nums if x < 0 or x > 1]\n    nums = [int(x) for x in nums if x < 0 or x > 1]\n    nums = [int(x) for x in nums if x < 0 or x > 1]\n    nums = [int(x) for x in nums if x < 0 or x > 1]\n    nums = [int(x) for x in nums if x < 0 or x > 1]\n    num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return -1\n        elif a < b:\n            return 1\n        else:\n            return 0\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        def sort_by_points(nums):\n            \"\"\"\n            Sort the given list of integers in ascending order\n            according to the sum of their digits.\n            \"\"\"\n            nums.sort(key=sort)\n            nums.sort_by_points(key=sort_by_points)\n            return nums\n        return sort\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        nums.sort_by_points(key=sort_by_points)\n        return nums\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        nums.sort_by_points(key=sort_by_points)\n        return nums\n    def sort_by_points(nums):\n        \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return -1\n        else:\n            return a - b\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        nums.sort(key=lambda x: x[1])\n        return nums.sort(key=lambda x: x[0])\n\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        nums.sort(key=lambda x: x[1])\n        return nums.sort(key=lambda x: x[0])\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        nums.sort_by_points(key=lambda x: x[1])\n        return nums.sort_by_points(key=lambda x: x[0])\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(len(nums)))\n    nums.sort(key=lambda x: x[0])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[1])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[2])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[3])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[4])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[5])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[6])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[7])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[8])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[9])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[10])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[11])\n    nums.sort(reverse=True)\n    nums.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(len(nums)))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return 0\n        elif a < b:\n            return 1\n        else:\n            return -1\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        def sort_by_points(a, b):\n            if a == b:\n                return 0\n            elif a < b:\n                return 1\n            else:\n                return -1\n\n        def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        def", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(len(nums)))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda i: i.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums = sorted(nums, key=sort)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        nums = sorted(nums, key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums = sorted(nums, key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        nums = sorted(nums, key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums = sorted(nums, key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        nums = sorted(nums, key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda n: n.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num.sum())\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort.__doc__)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points.__doc__)\n\n    def sort_by_points(nums, key):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points.__doc__)\n\n    def sort_by_points(nums, key, order):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points.__doc__, order=order)\n\n    def sort_by_points(nums, key, order, order_by_points):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points.__doc__, order=order, order_by_points=order_by_points)\n\n    def sort_by_points(nums, key, order, order_by_points, order_by_points_by_points):\n        \"\"\"\n        Sort the given", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda i: i[0])\n    nums.sort(key=lambda i: i[1])\n    nums.sort(key=lambda i: i[2])\n    nums.sort(key=lambda i: i[3])\n    nums.sort(key=lambda i: i[4])\n    nums.sort(key=lambda i: i[5])\n    nums.sort(key=lambda i: i[6])\n    nums.sort(key=lambda i: i[7])\n    nums.sort(key=lambda i: i[8])\n    nums.sort(key=lambda i: i[9])\n    nums.sort(key=lambda i: i[10])\n    nums.sort(key=lambda i: i[11])\n    nums.sort(key=lambda i: i[12])\n    nums.sort(key=lambda i: i[13])\n    nums.sort(key=lambda i: i[14])\n    nums.sort(key=lambda i: i[15])\n    nums.sort(key=lambda i: i[16])\n    nums.sort(key=lambda i: i[17])\n    nums.sort(key=lambda i:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    nums = [int(x[0]) for x in nums]\n    nums.sort(key=lambda x: x[1])\n    nums = [int(x[1]) for x in nums]\n    nums = [int(x[2]) for x in nums]\n    nums = [int(x[3]) for x in nums]\n    nums = [int(x[4]) for x in nums]\n    nums = [int(x[5]) for x in nums]\n    nums = [int(x[6]) for x in nums]\n    nums = [int(x[7]) for x in nums]\n    nums = [int(x[8]) for x in nums]\n    nums = [int(x[9]) for x in nums]\n    nums = [int(x[10]) for x in nums]\n    nums = [int(x[11]) for x in nums]\n    nums = [int(x[12]) for x in nums]\n    nums = [int(x[13]) for x in nums]\n    nums = [int(x[14]) for x", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return a.sum() - b.sum()\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for i in range(nums):\n            if nums[i] == -1:\n                return i\n            else:\n                return i + 1\n        return i", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[1])\n    nums = sorted(nums, key=lambda x: x[2])\n    nums = sorted(nums, key=lambda x: x[3])\n    nums = sorted(nums, key=lambda x: x[4])\n    nums = sorted(nums, key=lambda x: x[5])\n    nums = sorted(nums, key=lambda x: x[6])\n    nums = sorted(nums, key=lambda x: x[7])\n    nums = sorted(nums, key=lambda x: x[8])\n    nums = sorted(nums, key=lambda x: x[9])\n    nums = sorted(nums, key=lambda x: x[10])\n    nums = sorted(nums, key=lambda x: x[11])\n    nums = sorted(nums, key=lambda x: x[12])\n    nums = sorted(nums, key=lambda x: x[13])\n    nums = sorted(nums, key=lambda x: x[14])\n    nums = sorted(nums, key=lambda x: x[15])\n    nums = sorted(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return a.sum() - b.sum()\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if isinstance(a, list):\n            return sort(a, b)\n        elif isinstance(a, tuple):\n            return sort(a, b)\n        elif isinstance(a, int):\n            return sort(a, b)\n        elif isinstance(a, float):\n            return sort(a, b)\n        elif isinstance(a, bool):\n            return sort(a, b)\n        elif isinstance(a, int64):\n            return sort(a, b)\n        elif isinstance(a, int):\n            return sort(a, b)\n        elif isinstance(a, int64):\n            return sort(a, b)\n        elif isinstance(a, int):\n            return sort(a, b)\n        elif isinstance(a, int64):\n            return sort(a, b)\n        elif isinstance(a, int):\n            return sort(a, b)\n        elif isinstance(a, int):\n            return sort(a, b)\n        elif isinstance(a, int):\n            return sort(a, b)\n        elif isinstance(a, int):\n            return sort(a, b)\n        elif isinstance(a,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda num: num[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return 0\n        else:\n            return a - b\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num.sum())\n    nums.sort(key=lambda num: num.index(1))\n    nums.sort(key=lambda num: num.index(11))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=lambda num: num.index(-1))\n    nums.sort(key=", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return a.sum() - b.sum()\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if isinstance(a, list):\n            return sort(a, b)\n        elif isinstance(a, int):\n            return sort(a, b)\n        else:\n            return sort(a, b)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([], -1)\n    sort([], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return 0\n        else:\n            return a - b\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -11])\n    sort([], [])\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums = sorted(nums, key=sort)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums = sorted(nums, key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums = sorted(nums, key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums = sorted(nums, key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums = sorted(nums, key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums = sorted(nums, key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda n: n.sum())\n    nums.sort(key=lambda n: n.index(1))\n    nums.sort(key=lambda n: n.index(11))\n    nums.sort(key=lambda n: n.index(-1))\n    nums.sort(key=lambda n: n.index(-1))\n    nums.sort(key=lambda n: n.index(-1))\n    nums.sort(key=lambda n: n.index(-1))\n    nums.sort(key=lambda n: n.index(-1))\n    nums.sort(key=lambda n: n.index(-1))\n    nums.sort(key=lambda n: n.index(-1))\n    nums.sort(key=lambda n: n.index(-1))\n    nums.sort(key=lambda n: n.index(-1))\n    nums.sort(key=lambda n: n.index(-1))\n    nums.sort(key=lambda n: n.index(-1))\n    nums.sort(key=lambda n: n.index(-1))\n    nums.sort(key=", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        if isinstance(x, int):\n            return x\n        if isinstance(x, list):\n            return sorted(x, key=sort)\n        return x\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums = [int(x[0]) for x in nums]\n    nums = [int(x[1]) for x in nums]\n    nums = [int(x[2]) for x in nums]\n    nums = [int(x[3]) for x in nums]\n    nums = [int(x[4]) for x in nums]\n    nums = [int(x[5]) for x in nums]\n    nums = [int(x[6]) for x in nums]\n    nums = [int(x[7]) for x in nums]\n    nums = [int(x[8]) for x in nums]\n    nums = [int(x[9]) for x in nums]\n    nums = [int(x[10]) for x in nums]\n    nums = [int(x[11]) for x in nums]\n    nums = [int(x[12]) for x in nums]\n    nums = [int(x[13]) for x in nums]\n    nums = [int(x[14]) for x in nums]\n    nums = [int(x[15]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort([]) == []\n        \"\"\"\n        nums.sort(key=lambda x: x[0])\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        nums.sort_by_points(key=sort)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return -1\n        elif a == b:\n            return 1\n        else:\n            return 0\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for num in nums:\n            if num in nums:\n                sort_by_points(nums)\n                sort_by_points(nums.reverse())\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for num in nums:\n            if num in nums:\n                sort_by_points(nums)\n                sort_by_points(nums.reverse())\n            sort_by_points(nums)\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda num: num[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[1])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[2])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[3])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[4])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[5])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[6])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[7])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[8])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[9])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[10])\n    nums.sort(reverse=True)\n    nums.sort(key=lambda x: x[11])\n    nums.sort(reverse=True)\n    nums.sort(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort()\n        return nums.sort()[0]\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort_by_points()\n        return nums.sort_by_points()[0]\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort_by_points()\n        return nums.sort_by_points()[0]\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort_by_points()\n        return nums.sort_by_points()[0]\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort_by_points()\n        return nums.sort_by_points()[0]\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums.sort_by_points()\n        return nums.sort_by_points()[0]\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if nums is None:\n            return\n        nums = nums.split(',')\n        nums = [int(x) for x in nums]\n        nums = [int(x) for x in nums if x > 0]\n        nums = [int(x) for x in nums if x < 0]\n        nums = [int(x) for x in nums if x > 0 and x < nums.index(x)]\n        nums = [int(x) for x in nums if x < 0 and x > nums.index(x)]\n        nums = [int(x) for x in nums if x < 0 and x < nums.index(x)]\n        nums = [int(x) for x in nums if x < 0 and x < nums.index(x)]\n        nums = [int(x) for x in nums if", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda n: n[0])\n    nums = nums.sort(key=lambda n: n[0])\n    nums = nums.sort(key=lambda n: n[0])\n    nums = nums.sort(key=lambda n: n[0])\n    nums = nums.sort(key=lambda n: n[0])\n    nums = nums.sort(key=lambda n: n[0])\n    nums = nums.sort(key=lambda n: n[0])\n    nums = nums.sort(key=lambda n: n[0])\n    nums = nums.sort(key=lambda n: n[0])\n    nums = nums.sort(key=lambda n: n[0])\n    nums = nums.sort(key=lambda n: n[0])\n    nums = nums.sort(key=lambda n: n[0])\n    nums = nums.sort(key=lambda n: n[0])\n    nums = nums.sort(key=lambda n: n[0])\n    nums = nums.sort(key=lambda n: n[0])\n    nums = nums.sort(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for num in nums:\n            if num in nums:\n                return num\n        return -1\n\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for num in nums:\n            if num in nums:\n                return num\n        return -1\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for num in nums:\n            if num in nums:\n                return num\n        return -1\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for num in nums:\n            if num < 0:\n                num = -1\n            if num > 1:\n                num = 1\n            if num == -1:\n                num = 0\n            if num == 1:\n                num = 0\n            if num == -1:\n                num = 0\n            if num == 0:\n                num = 0\n            if num == -1:\n                num = 0\n            if num == -1:\n                num = 0\n            if num == -1:\n                num = 0\n            if num == -1:\n                num = 0\n            if num == -1:\n                num = 0\n            if num == -1:\n                num = 0\n            if num == -1:\n                num = 0\n            if num == -1:\n                num = 0\n            if num == -1:\n                num = 0\n            if num == -1:\n                num = 0\n            if num == -1:\n                num = 0\n            if num == -1:\n                num = 0\n            if num == -1:\n                num = 0\n            if num == -1:\n                num = 0\n            if num == -1:\n                num =", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return 0\n        else:\n            return a - b\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort([]) == []\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda num: num[0])\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=sort_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return a.sum() - b.sum()\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort([]) == []\n        \"\"\"\n        if isinstance(nums, list):\n            nums = [nums]\n        nums = sorted(nums, key=sort)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        if isinstance(nums, list):\n            nums = [nums]\n        nums = sorted(nums, key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return -1\n        if a < b:\n            return 1\n        if a > b:\n            return -1\n        return 0\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -12])\n    sort([], [1, 11, -1, -11, -12])\n    sort([], [1, 11, -1, -11, -12])\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -12])\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -12])\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -12])\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -12])\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -12])\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -12])\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return a[0] - b[0]\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        def sort_by_points(nums):\n            \"\"\"\n            Sort the given list of integers in ascending order\n            according to the sum of their digits.\n            Note: if there are several items with similar sum of their digits,\n            order them based on their index in original list.\n            \"\"\"\n            return sorted(nums, key=sort, reverse=True)\n        return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums.sort(key=lambda x: x[1])\n    nums.sort(key=lambda x: x[2])\n    nums.sort(key=lambda x: x[3])\n    nums.sort(key=lambda x: x[4])\n    nums.sort(key=lambda x: x[5])\n    nums.sort(key=lambda x: x[6])\n    nums.sort(key=lambda x: x[7])\n    nums.sort(key=lambda x: x[8])\n    nums.sort(key=lambda x: x[9])\n    nums.sort(key=lambda x: x[10])\n    nums.sort(key=lambda x: x[11])\n    nums.sort(key=lambda x: x[12])\n    nums.sort(key=lambda x: x[13])\n    nums.sort(key=lambda x: x[14])\n    nums.sort(key=lambda x: x[15])\n    nums.sort(key=lambda x: x[16])\n    nums.sort(key=lambda x: x[17])\n    nums.sort(key=lambda x: x[18])\n    nums.sort(key=lambda x: x[19])\n    nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda i: i[0])\n    nums.sort(key=lambda i: i[1])\n    nums.sort(key=lambda i: i[2])\n    nums.sort(key=lambda i: i[3])\n    nums.sort(key=lambda i: i[4])\n    nums.sort(key=lambda i: i[5])\n    nums.sort(key=lambda i: i[6])\n    nums.sort(key=lambda i: i[7])\n    nums.sort(key=lambda i: i[8])\n    nums.sort(key=lambda i: i[9])\n    nums.sort(key=lambda i: i[10])\n    nums.sort(key=lambda i: i[11])\n    nums.sort(key=lambda i: i[12])\n    nums.sort(key=lambda i: i[13])\n    nums.sort(key=lambda i: i[14])\n    nums.sort(key=lambda i: i[15])\n    nums.sort(key=lambda i: i[16])\n    nums.sort(key=lambda i: i[17])\n    nums.sort(key=lambda i:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, reverse=True)\n    nums = sorted(nums, key=lambda x: x[1])\n    nums = sorted(nums, key=lambda x: x[2])\n    nums = sorted(nums, key=lambda x: x[3])\n    nums = sorted(nums, key=lambda x: x[4])\n    nums = sorted(nums, key=lambda x: x[5])\n    nums = sorted(nums, key=lambda x: x[6])\n    nums = sorted(nums, key=lambda x: x[7])\n    nums = sorted(nums, key=lambda x: x[8])\n    nums = sorted(nums, key=lambda x: x[9])\n    nums = sorted(nums, key=lambda x: x[10])\n    nums = sorted(nums, key=lambda x: x[11])\n    nums = sorted(nums, key=lambda x: x[12])\n    nums = sorted(nums, key=lambda x: x[13])\n    nums = sorted(nums, key=lambda x: x[14])\n    nums = sorted(nums, key", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda i: i[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return a.sum() - b.sum()\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=lambda n: n.sum(0))\n\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=lambda n: n.sum(0))\n\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=lambda n: n.sum(0))\n\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        return sorted(nums, key=lambda n: n.sum())\n\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        return sorted(nums, key=lambda n: n.sum())\n\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: x[0])\n    return nums[1:]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums.sort(key=lambda x: x[1])\n    nums.sort(key=lambda x: x[2])\n    nums.sort(key=lambda x: x[3])\n    nums.sort(key=lambda x: x[4])\n    nums.sort(key=lambda x: x[5])\n    nums.sort(key=lambda x: x[6])\n    nums.sort(key=lambda x: x[7])\n    nums.sort(key=lambda x: x[8])\n    nums.sort(key=lambda x: x[9])\n    nums.sort(key=lambda x: x[10])\n    nums.sort(key=lambda x: x[11])\n    nums.sort(key=lambda x: x[12])\n    nums.sort(key=lambda x: x[13])\n    nums.sort(key=lambda x: x[14])\n    nums.sort(key=lambda x: x[15])\n    nums.sort(key=lambda x: x[16])\n    nums.sort(key=lambda x: x[17])\n    nums.sort(key=lambda x: x[18])\n    nums.sort(key=lambda x: x[19])\n    nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = [int(x[0]) for x in nums]\n    nums = [int(x[0]) for x in nums]\n    nums = [int(x[0]) for x in nums]\n    nums = [int(x[0]) for x in nums]\n    nums = [int(x[0]) for x in nums]\n    nums = [int(x[0]) for x in nums]\n    nums = [int(x[0]) for x in nums]\n    nums = [int(x[0]) for x in nums]\n    nums = [int(x[0]) for x in nums]\n    nums = [int(x[0]) for x in nums]\n    nums = [int(x[0]) for x in nums]\n    nums = [int(x[0]) for x in nums]\n    nums = [int(x[0]) for x in nums]\n    nums = [int(x[0]) for x in nums]\n    nums = [int(x[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, reverse=True)\n    nums = sorted(nums, key=lambda x: x[1])\n    nums = sorted(nums, key=lambda x: x[2])\n    nums = sorted(nums, key=lambda x: x[3])\n    nums = sorted(nums, key=lambda x: x[4])\n    nums = sorted(nums, key=lambda x: x[5])\n    nums = sorted(nums, key=lambda x: x[6])\n    nums = sorted(nums, key=lambda x: x[7])\n    nums = sorted(nums, key=lambda x: x[8])\n    nums = sorted(nums, key=lambda x: x[9])\n    nums = sorted(nums, key=lambda x: x[10])\n    nums = sorted(nums, key=lambda x: x[11])\n    nums = sorted(nums, key=lambda x: x[12])\n    nums = sorted(nums, key=lambda x: x[13])\n    nums = sorted(nums, key=lambda x: x[14])\n    nums = sorted(nums, key=lambda x: x[15])\n    nums = sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda n: n[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return 0\n        else:\n            return a - b\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return -1\n        return a.sum() - b.sum()\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: x[0])\n    return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7] + nums[8] + nums[9] + nums[10] + nums[11] + nums[12]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return a[0] - b[0]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda x: x[0])\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    nums.sort(reverse=True)\n    num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        nums = sorted(nums, key=lambda x: x[0])\n        nums = nums[:-1]\n        nums = nums[-1:]\n        nums = nums[-1:]\n        nums = nums[-1:]\n        nums = nums[-1:]\n        nums = nums[-1:]\n        nums = nums[-1:]\n        nums = nums[-1:]\n        nums = nums[-1:]\n        nums = nums[-1:]\n        nums = nums[-1:]\n        nums = nums[-1:]\n        nums = nums[-1:]\n        nums = nums[-1:]\n        nums = nums[-1:]\n        nums = nums[-1:]\n        nums = nums[-1:]\n        nums = nums[-1:]\n        num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: x[0])\n    return nums.sort(key=lambda x: x[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return -1\n        return sum(a) - sum(b)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        def sort_by_points(nums):\n            \"\"\"\n            Sort the given list of integers in ascending order\n            according to the sum of their digits.\n            Note: if there are several items with similar sum of their digits,\n            order them based on their index in original list.\n            \"\"\"\n            for num in nums:\n                if num < 0:\n                    num = nums[-1]\n                sort_by_points(num)\n        return sort\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for num in nums:\n            if num < 0:\n                num = nums[-1]\n            sort_by_points(num)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        nums.sort(key=sort)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        nums.sort_by_points(key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        nums.sort_by_points(key=sort_by_points)\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort.__doc__)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points.__doc__)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points.__doc__)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points.__doc__)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points.__doc__)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points.__doc__)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda num: num.sum())\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort([]) == []\n        \"\"\"\n        nums.sort(key=lambda num: num[0])\n        return nums[0]\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        nums.sort_by_points(key=sort)\n        return nums[0]\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda n: n[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort([]) == []\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        else:\n            return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        else:\n            return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = [nums]\n    if isinstance(nums, int):\n        nums = [nums]\n    if isinstance(nums, str):\n        nums = [nums]\n    if isinstance(nums, float):\n        nums = [nums]\n    if isinstance(nums, bool):\n        nums = [nums]\n    if isinstance(nums, list):\n        nums = [nums]\n    if isinstance(nums, tuple):\n        nums = [nums]\n    if isinstance(nums, list):\n        nums = [nums]\n    if isinstance(nums, list):\n        nums = [nums]\n    if isinstance(nums, list):\n        nums = [nums]\n    if isinstance(nums, list):\n        nums = [nums]\n    if isinstance(nums, list):\n        nums = [nums]\n    if isinstance(nums, list):\n        nums = [nums]\n    if isinstance(nums, list):\n        nums = [nums]\n    if isinstance(nums, list):\n        nums = [nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    return nums.sort(key=lambda n: n.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = [nums]\n    nums = sorted(nums, key=lambda num: num[0])\n    nums = [num for num in nums]\n    nums = [num for num in nums if num[0] == num[1]]\n    nums = [num for num in nums if num[0] == num[2]]\n    nums = [num for num in nums if num[0] == num[3]]\n    nums = [num for num in nums if num[0] == num[4]]\n    nums = [num for num in nums if num[0] == num[5]]\n    nums = [num for num in nums if num[0] == num[6]]\n    nums = [num for num in nums if num[0] == num[7]]\n    nums = [num for num in nums if num[0] == num[8]]\n    nums = [num for num in nums if num[0] == num[9]]\n    nums = [num for num in nums if num[0] == num[10]]\n    nums = [num for num in nums if num[0] == num11]\n    nums = [num for num in nums if num[0] ==", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums, key):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points, reverse=True)\n\n    def sort_by_points(nums, key, reverse=True):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points, reverse=reverse, reverse_key=True)\n\n    def sort_by_points(nums, key, reverse=True, reverse_key=True):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=sort_by_points, reverse=reverse, reverse_key=reverse_key, reverse_key=reverse_key)\n\n    def sort_by_points(nums, key, reverse=True, reverse_key=True, reverse_key=True):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums = sorted(nums, key=lambda num: num.sum())\n    nums = sorted(nums, key=lambda num: num.index(1))\n    nums = sorted(nums, key=lambda num: num.index(11))\n    nums = sorted(nums, key=lambda num: num.index(-1))\n    nums = sorted(nums, key=lambda num: num.index(11))\n    nums = sorted(nums, key=lambda num: num.index(-1))\n    nums = sorted(nums, key=lambda num: num.index(1))\n    nums = sorted(nums, key=lambda num: num.index(11))\n    nums = sorted(nums, key=lambda num: num.index(-1))\n    nums = sorted(nums, key=lambda num: num.index(11))\n    nums = sorted(nums, key=lambda num: num.index(-1))\n    nums = sorted(nums, key=lambda num: num.index(-1))\n    nums = sorted(nums, key=lambda num: num.index(1))"]]