[["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    #-----------------------------\n    # Return an array of the sorted list of integers\n    #-----------------------------\n    nums = sorted(nums, key=lambda i: i[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x : x[0])\n    def sort_order(nums):\n        sort_order = [(x[0], x[1]) for x in nums]\n        return sort_order\n    nums = sorted(nums, key=sort_order)\n\n    for n in nums:\n        if n < -1:\n            n = -1\n        if n == 1:\n            n = -1\n        if n == -1:\n            n = -1\n        if n == -1:\n            n = -1\n    return n", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _index_from_sum(nums):\n        return sum([ord(i) for i in nums])\n    for i in range(nums):\n        if not order_by_points([order_by_points(nums[index]) for index in i]):\n            return -1\n        return order_by_points([order_by_points(nums[index]) for index in i]).index(i)\n    return -1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def order_by_points(list):\n        if len(list)!= 1:\n            return 0\n        nums = list\n        for i in range(0, len(list)):\n            nums[i] = i + 1\n        order = 0\n        for i in range(0, len(list)):\n            if list[i]!= nums[i]:\n                order = i + 1\n        return order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort a list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        return ord(float(nums[0]) * (float(nums[1]) + float(nums[2])) + float(nums[3]) * float(nums[4])) + float(nums[5]) * float(nums[6])\n\n    def iter(nums):\n        \"\"\"\n        Iterate over all integers in a list in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if isinstance(nums, list):\n            for i in range(nums.count()):\n                yield i\n        else:\n            for i in range(nums.count()):\n                yield float(i) * (float(nums[i]) + float(nums[suffix])) + float(nums[suffix])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # now order the given list of integers in ascending order\n    # (sorted from highest to lowest):\n    #    x = [(0, -1), (1, 11), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1)]\n    #    y = [(1, -1), (0, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1)]\n    #    z = [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1)]\n    for num in nums:\n        nums.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(map(int, nums))\n\n    # Sort the numbers by sum of their digits\n    # TODO: Merge sort\n    nums = sorted(nums, key=sum)\n\n    # Sort the numbers by number of digits\n    nums = sorted(nums, key=sum)\n\n    # Add the sorted list to the list of ordered numbers\n    nums = [num for num in nums if num!= -1]\n\n    # Sort the ordered numbers by number of digits\n    nums = sorted(nums, key=sum)\n\n    # Sort the ordered numbers by number of digits\n    nums = sorted(nums, key=sum)\n\n    # Add the sorted list to the list of ordered numbers\n    nums = [num for num in nums if num!= -1]\n\n    # Sort the ordered numbers by number of digits\n    nums = sorted(nums, key=sum)\n\n    # Add the sorted list to the list of ordered numbers\n    nums = [num for num in nums if num!= -1]\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted(n):\n        if n == 0:\n            return -1\n        if n % 2 == 0:\n            return 1\n        return 0\n    sorted(n)\n    return sorted(range(nums))</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        if isinstance(x, int):\n            return x\n        else:\n            return sort(x, 0)\n\n    order_by_points(nums) = sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Order by points\n    def order_by_points(nums):\n        nums.sort()\n        return [nums[0] for nums in nums]\n\n    # Sort\n    nums.sort()\n    nums.reverse()\n    sorted_orders = [nums[0] for nums in nums]\n    return sorted(sorted_orders, key=order_by_points)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for num in nums:\n        if num % 1000 == 0:\n            print(num.count)\n        else:\n            print('+')\n\n    if nums.count == 0:\n        print('Zero')\n    else:\n        for num in nums:\n            if num < 0:\n                print('+')\n            else:\n                print('-')\n\n    if nums.count % 1000 == 0:\n        print('One')\n    else:\n        print('Zero')", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorter(list):\n        \"\"\"\n        Sort the list of integers by their sum of digits.\n        Returns the sorted list as an ordered list\n        \"\"\"\n        # TODO: change the order_by_points() to be recursive\n        items = list\n        for item in items:\n            items.append(item)\n\n        # for each item in items, find the sum of its digits\n        # if this sum is greater than a defined threshold, the item\n        # is in the first position in the sorted list.\n        while len(items) > 0:\n            i = items.pop()\n            sum = items[i]\n            if sum > threshold:\n                items[i] = items[i + 1]\n                items.pop(i)\n                break\n        return sorted(items, key=order_by_points)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by_points(i):\n        return i + 1 > i\n\n    sorted = []\n    for num in nums:\n        if num[0] == '-':\n            sorted.append(i)\n        else:\n            sorted.append(num[0])\n\n    for i in sorted[:-1]:\n        # display number with the highest digit\n        if i[0] == '-':\n            i = i[1]\n            del sorted[i]\n        else:\n            i = i[0]\n            del sorted[i]\n\n    sorted_points = []\n    for num in sorted[:-1]:\n        # display number with the lowest digit\n        if num[0] == '-':\n            num = num[1]\n            del sorted[num]\n        else:\n            num = num[0]\n            del sorted[num]\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    nums.sort()\n    for num in nums:\n        result.append(num.sum())\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        :param nums: list of integers\n        :return: sorted list of integers\n        :rtype: list[int]\n        \"\"\"\n        return [int(s) for s in sorted(nums)]\n\n    for num in nums:\n        num = num.split(\"-\")\n        if num[0] > num[1]:\n            num[0] -= num[1]\n        if num[0] < -1:\n            num[0] += num[1]\n        if num[0] == num[1]:\n            num[0] = -1\n        if num[1] > num[0]:\n            num[1] -= num[0]\n        if num[1] < -1:\n            num[1] += num[0]\n        if num[1] == num[0]:\n            num[1] = -1\n        if num[1] == -1:\n            num[1] = -1\n        if num[1] == -1:\n            num[1] = -1\n        return sorted(nums)\n\n    def index_of(nums):\n        \"\"\"\n        Return the index of the largest value in the given list of integers.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # If there are no digits in list, return\n    if len(nums) == 0:\n        return\n    nums = nums[:-1]\n    if nums[0] == -1:\n        nums = nums[:-1]\n    nums = [int(s) for s in nums]\n    nums = [int(s) for s in nums if s not in (0, 1, 0, 0, -1)]\n    nums = [int(s) for s in nums if s not in (1, 0, 0, 0, 1)]\n    nums = [int(s) for s in nums if s not in (2, 0, 0, 0, -1)]\n    nums = [int(s) for s in nums if s not in (3, 0, 0, 0, 1)]\n    nums = [int(s) for s in nums if s not in (4, 0, 0, 0, 1)]\n    nums = [int(s) for s in nums if s not in (5, 0, 0, 0, 1)]\n    nums = [int(s) for s in nums if s not in (", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    s = [int(ord(x) for x in nums) for x in range(1, len(nums))]\n    return sorted([(sum(x) for x in s) for s in nums], key=lambda x: x)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums)[:]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    nums = list(nums)\n    return nums.sort(key=lambda num: num.sum().lower())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) > 1:\n        return list(set(nums[-1]))\n    return list(set(nums[1:]))\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        \"\"\"Compare two integers and return bool or -1 for equality\"\"\"\n        return (a.sum() < b.sum())\n\n    def sort(a, b):\n        \"\"\"Sort the list of integers in ascending order\"\"\"\n        if (a.sum() < b.sum()):\n            a.sort(cmp)\n            b.sort(cmp)\n        else:\n            b.sort(cmp)\n            a.sort(cmp)\n        return a.sort(cmp)\n    # No need to use this function for sorting the list of strings\n    sort_strings = sort_by_words(sorted(s, key=cmp))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    print('Ordering the list', nums)\n    out = []\n    for i in range(len(nums)):\n        out.append(order_by_points(nums[i], start=0, stop=0))\n    return out", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(numbers.items())\n    nums.sort()\n    return sum([ord(x) for x in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # make a list of all the entries in the list\n    nums = list(set(nums))\n    # sort by sum of their digits\n    sorted = set(nums)\n    # sort by their index in original list\n    sortedindex = sorted.index(sorted)\n    # order by their index in original list\n    sortorders = sortedindex.replace('.','').split(',')\n    for count in range(3):\n        for num in nums:\n            if num in sortedorders:\n                sortorders[sortorders[orders[count]]] += 1\n                sortorders[orders[count]] = num\n        return sortedorders", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sum([ord(a) for a in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([(x, sum(int(x) for x in nums)) for x in nums], key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def a(x):\n        x = x / 10\n        if x == 0: return 1\n        return x ** 2\n    a.sort(key=lambda x: x[0])\n    return a", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sorted_nums(nums):\n        \"\"\"\n        Return the sorted list of integers in ascending order.\n        :param nums: list of integers to sort\n        \"\"\"\n        if isinstance(nums, list):\n            return sorted(nums)\n        else:\n            return sorted(nums, key=lambda num: num.sum(), reverse=True)\n\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums = nums[:-1].split('.')\n    nums = [num + 1 for num in nums]\n    nums = nums[-1].split('.')\n    nums = [num + 1 for num in nums]\n    nums = [num for num in nums if num < 0]\n    nums = [num for num in nums if num > 0]\n    nums = sorted(nums)\n    nums = nums[:-1].split('.')\n    nums = [num + 1 for num in nums]\n    nums = [num for num in nums if num < 0]\n    nums = [num for num in nums if num > 0]\n    nums = sorted(nums)\n    nums = nums[:-1].split('.')\n    nums = [num + 1 for num in nums]\n    nums = [num for num in nums if num < 0]\n    nums = [num for num in nums if num > 0]\n    nums = [num for num in nums if num == nums[-1]]\n    nums = [num for num in nums if num == nums[-1]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums_in_order = list(range(len(nums)))\n    nums_sorted_order = sorted(nums_in_order, key=lambda num: num.sum)\n    for i in range(len(nums_sorted_order)):\n        num = nums_in_order[i]\n        num_sorted_index = num.index(num_sorted_order[i - 1])\n        num_sorted_order[i] = num_sorted_index\n    return nums_in_order, num_sorted_order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums < 2:\n        raise TypeError('array must be either positive or negative')\n    return sorted(range(1, nums + 1), reverse=False)[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \"\"\"\n    def order_by_points(items):\n        \"\"\"\n        Order the items according to the sum of their digits.\n        Inputs:\n        items: list of integers.\n        Returns:\n        list of integers\n        \"\"\"\n        # The base case: all elements are equal\n        if isinstance(items, list):\n            return items\n        # The case when the items are not equal: if there are only one\n        # element that is equal to the sum of their digits, order them\n        # in descending order.\n        if len(items) == 1:\n            return items.astype(int)\n        # If no elements in the list are equal: return an empty list\n        elif len(items) == 0:\n            return []\n        # Otherwise, order them in ascending order\n        elif len(items) < 2:\n            return []\n        # Otherwise, order them in descending order\n        elif len(items) > 2:\n            return order_by_points(items[1:]) + order_by_points(items[0])\n        return []\n\n    def write_commissary(self, nums, delimiter):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda num: num.sum())\n    sum = 0\n    for num in nums:\n        if num not in nums:\n            sum += num\n    for num in nums:\n        if num in nums[1]:\n            nums[-1] -= nums[-1]\n        if num in nums[-1]:\n            nums[-1] += nums[-1]\n        if num in nums[0]:\n            nums[-1] -= nums[-1]\n        if num in nums[-1]:\n            nums[-1] += nums[-1]\n    return sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    if not isinstance(nums, list):\n        nums = [nums]\n\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return [nums[0], nums[1]]\n    else:\n        raise ValueError(\"nums must be in one of the following orders:\")\n\n    ordered_items = sorted([(num, num) for num in nums], key=lambda num: num[0])\n    return \"{0}\".format(ordered_items)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = nums.split('-')\n\n    for i, num in enumerate(nums):\n        if num == -1:\n            nums[i] = -num\n        else:\n            nums[i] += num\n\n    # sort the list by the sum of their digits\n    return sorted(nums, key=order_by_points)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda n: int(n[0]) - int(n[1]))\n    nums = list(set(nums))\n    nums.sort(key=lambda n: int(n[0]) - int(n[1]))\n    nums = list(set(nums))\n    nums.sort(key=lambda n: int(n[0]) - int(n[1]))\n    nums = list(set(nums))\n    nums.sort(key=lambda n: int(n[0]) - int(n[1]))\n    nums = list(set(nums))\n    nums.sort(key=lambda n: int(n[0]) - int(n[1]))\n    nums = list(set(nums))\n    nums.sort(key=lambda n: int(n[0]) - int(n[1]))\n    nums = list(set(nums))\n    nums.sort(key=lambda n: int(n[0]) - int(n[1])) # remove duplicates\n    nums = list(set(nums))\n    nums.sort(key=lambda n: int(n[0]) - int(n[1]))\n    nums =", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    assert nums is not None, \"Duplicate nums must be passed.\"\n    nums = list(set(nums))\n    s = []\n    for num in nums:\n        if num not in nums:\n            s.append(num)\n    s.sort(key=lambda num: num[0])\n    return s", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return [-1, 1, 12, -1, 11]\n    else:\n        # Sort numeric elements by sum of digits\n        nums = sorted(nums, key=lambda x: x.sum(1))\n        return [-1, 1, 12, -1, 11, -1, 11, -1, 11, -1, 11, -1, 11, -1, 11, -1, 11, -1, 11, -1, 11, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    import re\n    nums = []\n    nums.sort(key=lambda num: num[0])\n    for num in nums:\n        nums.append(int(num[0] + int(num[1])))\n    nums.sort(key=lambda num: num[0] + int(num[2]))\n    nums.sort(key=lambda num: num[0] + int(num[3]))\n    nums.sort(key=lambda num: num[0] + int(num[4]))\n    nums.sort(key=lambda num: num[0] + int(num[5]))\n    nums.sort(key=lambda num: num[0] + int(num[6]))\n    nums.sort(key=lambda num: num[0] + int(num[7]))\n    nums.sort(key=lambda num: num[0] + int(num[8]))\n    nums.sort(key=lambda num: num[0] + int(num[9]))\n    nums.sort(key=lambda num: num[0] + int(num[10]))\n    nums.sort(key=lambda num: num[0] + int(num[11]))\n    nums.sort(key=lambda num: num[0] + int(num[12]))\n    nums.sort(key=lambda num: num[0] + int(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(arr):\n        \"\"\"\n        Sort the list of integers. The order is based on the sum of their digits.\n        \"\"\"\n        for i, num in enumerate(arr):\n            for j, d in enumerate(num):\n                if d > j:\n                    if arr[j] < arr[j - 1]:\n                        arr[j] = arr[j - 1]\n                    if arr[j] > arr[j + 1]:\n                        arr[j] = arr[j + 1]\n                    else:\n                        arr[j] = arr[j + 1]\n        return arr\n\n    def sort_from_index(arr):\n        \"\"\"\n        Sort the given list of integers in ascending order in the order\n        given in the index.\n        \"\"\"\n        return sort(arr)\n\n    def sort(arr):\n        \"\"\"\n        Sort the given list of integers.\n        \"\"\"\n        for i, num in enumerate(arr):\n            if arr[i] < arr[(arr[(arr[arr[arr] - 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])])]:\n                arr[i] = arr[arr[(arr[arr[arr] - 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(arr):\n        sorted_arr = sorted(arr, key=lambda i: i)\n        if not sorted_arr:\n            return arr\n        if sorted_arr.count(0) < 1 or sorted_arr.count(-1) < 1:\n            raise ValueError('List length is < 1, while number of digits is < 1')\n        if not sorted_arr[sorted_arr.index(0)]:\n            return arr\n        return sorted_arr[sorted_arr.index(sorted_arr.index(1)+1):][sorted_arr.index(sorted_arr.index(sorted_arr.index(2)+1):][sorted_arr.index(sorted_arr.index(3)+1):][sorted_arr.index(sorted_arr.index(4)+1):][sorted_arr.index(sorted_arr.index(5)+1):][sorted_arr.index(sorted_arr.index(6)+1):][sorted_arr.index(sorted_arr.index(7)+1):][sorted_arr.index(sorted_arr.index(8)+1):][sorted_arr.index(sorted_", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def order_by_points(nums):\n        \"\"\"\n        This method sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        nums = sorted(nums, key=lambda x: x[1], reverse=True)\n        return sorted(nums, key=lambda x: x[0])\n\n    def sort(nums):\n        \"\"\"\n        This method sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        nums = sorted(nums, key=lambda x: x[1], reverse=True)\n        nums = nums[:-1]\n        return sorted(nums, key=lambda x: x[0])\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([num for num in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, str):\n        nums = [nums]\n    if isinstance(nums, int):\n        nums = (nums,)\n\n    if isinstance(nums, (float, int, long)):\n        nums = [nums]\n    if isinstance(nums, (str, unicode)):\n        nums = (nums,)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return lambda nums: int(sum(int(nums) for nums in nums.split(',')) + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # use _zeros, _ones, _digits functions to sort the input list\n    for num in nums:\n        if num < 0:\n            nums.append(num)\n        else:\n            nums.sort(key=lambda x: x, reverse=True)\n            nums[0] += 1\n            nums[-1][-1] = nums[-1][-1]\n            nums[-1] = -1\n    return nums\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(arr, order_by_points):\n        # Sort order_by_points\n        arr.sort(key=order_by_points)\n        return arr\n\n    def sort_values(arr, nums, order_by_points):\n        # Sort value array with keys in ascending order\n        nums.sort_values(order_by_points)\n        return nums\n\n    def count_values(arr, nums, order_by_points):\n        # Count value array with keys in ascending order\n        nums.count_values(order_by_points)\n        return nums\n\n    def order_by_points(arr, nums):\n        # Order by points array with keys in ascending order\n        nums.order_by_points(arr)\n        return arr\n\n    def sort_values(arr, nums, order_by_points):\n        # Sort value array with keys in ascending order\n        nums.sort_values(order_by_points)\n        return nums\n\n    def count_values(arr, nums, order_by_points):\n        # Count value array with keys in ascending order\n        nums.count_values(order_by_points)\n        return nums\n\n    def add(arr, nums, num1, num2):\n        # Add two items to the array\n        arr.append(num1)\n        arr.append", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    order = [ 0, 1, 2, 3, 4 ]\n    for num in nums:\n        if num > 1 or num == -1:\n            order.append(0)\n        elif num < 0 or num == 1:\n            order.append(1)\n        elif num == -1:\n            order.append(2)\n        else:\n            order.append(3)\n    return order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def ordinal_sort(a, b):\n        if len(a) > len(b):\n            return a[-1] < b[-1]\n        else:\n            return a[0] < b[0]\n\n    ord_digits = np.array([[1, 2, 3], [5, 7, 8]])\n\n    for i, n in enumerate(nums):\n        a = a[ord_digits]\n        b = b[ord_digits]\n\n        if a < b:\n            a = ord_digits - a\n            b = ord_digits - b\n\n        if i!= ord_digits:\n            nums.remove(i)\n            nums[ord_digits] = nums[ord_digits] + a\n            nums[ord_digits] = nums[ord_digits] + b\n\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers\n        in ascending order.\n        Note that if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort([]) == []\n        \"\"\"\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    val = [int(num) for num in nums]\n    order_by_points = lambda nums: int(sum(val) - sum(val[::-1]))[0]\n    return order_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    d = [1, 11, -1, -11, -12]\n    for i in range(len(d)):\n        if d[i] > d[i - 1] :\n            d[i] = d[i - 1]\n    return d", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(x) for x in nums]\n    nums.sort(key=lambda x : x + 1)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(arr):\n        \"\"\"\n        Sort the list of integers according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        nums = [int(k) for k in arr]\n        sorted(nums)\n        return sorted(arr)\n\n    def keys(arr):\n        \"\"\"\n        Return a list with keys of the given array.\n        Note: this is not a list, but it is a tuple.\n        \"\"\"\n        nums = [int(k) for k in arr]\n        return sorted(nums)\n\n    def set_ascending(arr, asc):\n        \"\"\"\n        Set the list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        nums = [int(k) for k in arr]\n        arr.sort()\n        nums.sort()\n        for i in range(1, len(arr)):\n            arr[i] -= asc\n            arr.sort()\n        return arr\n\n    def sorted(arr):\n        \"\"\"\n        Sort the list of integers according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = nums.sort()\n    for i in range(nums.count('.')):\n        num = nums[i].count('.')\n        if i not in nums:\n            nums[i] = 1\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(len(nums)))\n    # Sort each integer by its sum of digits\n    ordered = set()\n    for num in nums:\n        if num > 0:\n            ordered.add(num)\n        else:\n            ordered.add(-1)\n    for num in nums:\n        ordered.add(ord(num) + 1)\n    # Sort the ordered list according to its sum of digits\n    ordered.sort(key=lambda num: num + 1)\n    return ordered", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return function(x, nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        by the sum of their digits.\n        \"\"\"\n        return function(x, nums):\n            for d in nums:\n                if d == 1:\n                    return -1\n                elif d == -1:\n                    return 1\n                elif d == 0:\n                    return -1\n            return 0\n        return function(x, nums):\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n            nums = nums[:-1]\n        return function(x, nums):\n            for d in nums:\n                if d == 1:\n                    return x[d]\n                elif d == -1:\n                    return x[d]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sorted_arrays(nums):\n        \"\"\"\n        Sort the list of integers in ascending order, using the sum of their\n        digits.\n        \"\"\"\n\n        return sorted(sorted([\n            0 for num in nums], key=sumord)\n\n        if nums.count(1) == 0:\n            return [num for num in nums if num >= 0 and num < nums[1]]\n        return nums[1:] + [num for num in nums[2:] if num >= 0 and num < nums[2]]\n\n    def sort_by_centers(nums):\n        \"\"\"\n        Sort the list of integers by the center of each integer.\n        \"\"\"\n\n        return sorted(sorted([\n            0.5 if num >= 0 and num < nums[1]], key=sumord)\n\n        if nums.count(1) == 0:\n            return [num for num in nums if num >= 0 and num < nums[1]]\n        return [num for num in nums[2:] if num >= 0 and num < nums[2]]\n\n    def sort_by_entries(nums):\n        \"\"\"\n        Sort the list of integers by the value of each entry.\n        \"\"\"\n\n        return sorted(sorted([\n            0 for num in nums[1:] if", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        d = 0\n        while d < len(x):\n            d += 1\n        if d == len(x):\n            return\n        else:\n            return x[d]\n\n    def sort_by(x, order_by_points):\n        result = []\n        for i, x in enumerate(x):\n            if order_by_points.get(i) == x[0]:\n                result.append(i)\n            else:\n                result.append(x[i])\n        return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(numbers):\n        if numbers == '':\n            return 0\n        nums = sorted(numbers, key=operator.itemgetter(0))\n        nums = sort(numbers, key=operator.itemgetter(1))\n        nums = sort(numbers, key=operator.itemgetter(2))\n        nums = sort(numbers, key=operator.itemgetter(3))\n        nums = sort(numbers, key=operator.itemgetter(4))\n        nums = sort(numbers, key=operator.itemgetter(5))\n        nums = sort(numbers, key=operator.itemgetter(6))\n        nums = sort(numbers, key=operator.itemgetter(7))\n        nums = sort(numbers, key=operator.itemgetter(8))\n        nums = sort(numbers, key=operator.itemgetter(9))\n        nums = sort(numbers, key=operator.itemgetter(10))\n        nums = sort(numbers, key=operator.itemgetter(11))\n        nums = sort(numbers, key=operator.itemgetter(12))\n        nums = sort(numbers, key=operator.itemgetter(13))\n        num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        return sort(nums, ascending=False)\n\n    # Sort by digits\n    digits = sorted(nums, key=lambda d: d.sum(0))\n    digits = [int(x) for x in digits if x > 0]\n    return digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort(a, b):\n        if len(a) == len(b):\n            return a[0] - b[0]\n        else:\n            return a[0] + b[0]\n\n    def sum(a, b):\n        if len(a) == len(b):\n            return sum(a, b) * b[0]\n        else:\n            return sum(a, b) * a[0]\n    return sort, sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = [nums]\n    if len(nums) == 1:\n        nums = [nums]\n    nums = sorted(nums, key=lambda x: x)\n    # Sort numeric keys\n    nums = [nums[1:] for nums in nums]\n    # Sort numeric values\n    nums = [nums[1:] for nums in nums]\n    # Sort numeric indices\n    nums = [nums[1:] for nums in nums]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def filter(x):\n        \"\"\"\n        Returns a list of integers, sorted according to the sum of their\n        digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if x in sorted(nums, key=lambda x: x.sum()):\n            return sorted(x, key=lambda x: filter(lambda x: x.sum() / 2, x.splitlines()))\n\n        return x.splitlines()\n    return filter", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for num in nums:\n        for d in num:\n            if d > 0:\n                if num[d] == d:\n                    return num[d]\n        return 0\n\n    return order_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda i: i[0])\n    return nums.sort(key=lambda i: (i+1) % 2)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def list_sort(list):\n        result = [(x,y) for x,y in list if x > y]\n        return [(i,j) for i,j in result]\n    return list_sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return order_by_points(numpy.asarray([(x, sum(x)) for x in nums]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    res = []\n\n    for i in range(nums):\n        for j in range(i + 1, nums):\n            res.append(order_by_points(nums[j] - nums[i]))\n\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    n = int(np.ceil(nums[0]))\n    nums.sort(key=lambda d: nums[d - 1] - nums[d])\n\n    if len(nums) > 1:\n        nums[-1] -= 1\n        for i in range(1, len(nums)):\n            nums[i] -= 1\n            if nums[i] < 0:\n                nums[i] = -1\n        nums.sort(key=lambda d: nums[d - 1] - nums[d])\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    p = 0\n    for n in nums:\n        p += n\n    return p", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted_ints = []\n    for num in nums:\n        if num >= 0:\n            sorted_ints.append(num)\n        else:\n            sorted_ints.append(int(num))\n    sorted_ints.sort()\n    if sorted_ints.count(0) == 1:\n        sorted_ints = [sorted_ints[0]]\n    else:\n        sorted_ints = [sorted_ints[1]]\n    return sorted_ints", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(arr):\n        \"\"\"\n        Returns a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        nums = sorted(arr)\n        while len(nums) > 0:\n            sum = sum(nums)\n            nums = nums[-1] + sum\n            if sum == -1:\n                nums = []\n            else:\n                nums.append(sum)\n\n    if len(arr) == 0:\n        return order_by_points\n    elif len(arr) == 1:\n        return order_by_points(arr)\n\n    def sum_rounding(arr):\n        \"\"\"\n        Returns a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sum_rounding(arr) if len(arr) == 0 else order_by_points(arr)\n\n    if len(arr) == 0:\n        return sum_rounding\n    elif len(arr) == 1:\n        return sum_rounding(arr)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [nums[i] for nums in nums]\n    return sum([ord(c) for c in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # TODO: this is not clear, it should be a block function.\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = nums[:-1] if len(nums) > 0 else nums[-1]\n    nums = nums[-1:] if len(nums) > 0 else nums[-1]\n    if nums < 0:\n    nums = -nums\n    if nums > 1:\n    nums = nums[-1:]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    res = []\n    for num in nums:\n        # replace previous results with a list of their digits\n        digits = num.split('.')\n        num = num.replace('.', '')\n        if digits.count('+')!= 0:\n            res.append(num)\n        elif digits.count('-')!= 0:\n            res.append(num.split('-')[0])\n        elif digits.count('.')!= 0:\n            res.append(num.split('.')[1])\n    return sorted(res)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Shortcuts:\n    # Order by the first digit of each integer\n    # Order by the third digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer\n    # Order by the first digit of each integer", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(1, nums))\n    def sort_func(a, b):\n        if a > b:\n            a = a + 1\n        if a < b:\n            a = a - 1\n        return a, b\n    if nums:\n        nums = sorted(nums, key=sort_func)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort all the numbers by sum of their digits\n    for i in range(1, nums.count):\n        if i < 0:\n            return i\n        else:\n            return nums[i] + (i == 1 and -1) + (i+1) + (i == nums.count - 1)\n\n\n    # Sort original list by sum of their digits\n    for i in range(1, nums.count):\n        if nums[i] == -1:\n            return i + 1\n        else:\n            return nums[i] + (i == 1 and -1) + (i+1) + (i == nums.count - 1)\n\n\n    # If we find out the order by which the first number is greatest, then the\n    # next number is also greatest, so we sort the remaining numbers by\n    # sum of their digits.\n    #\n    #   nums1 = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort((sum(digits)))\n\n    # Sort by sum of digits\n    nums = sorted(nums, key=sum)\n    nums = nums[:-1]\n    nums = nums[-1:]\n\n    def sort(a, b):\n        if a == b:\n            return 1\n        elif a < b:\n            return -1\n        else:\n            return 0\n\n    for num in nums:\n    order_by_points(num)\n    order_by_points(range(len(nums)))\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a,b):\n        \"\"\"\n        Sort the given integers by sum of their digits.\n        \"\"\"\n        return (a[0]*100+b[0]*100)/(a[0]+b[0])\n\n    order_by_points([1, 11, -1, -11, -12])\n    sort([1, 11, -1, -11, -12], 1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1, 11, -1, -11, -12], -1)\n    sort([1,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(map(int, nums))\n    nums = [ord(n) for n in nums]\n    nums = [ord(n) for n in nums if ord(n) < ord(n[1])]\n    nums = [ord(n) for n in nums if ord(n) > ord(n[2])]\n    nums = [ord(n) for n in nums if ord(n) < ord(n[3])]\n    nums = [ord(n) for n in nums if ord(n) > ord(n[4])]\n    nums = [ord(n) for n in nums if ord(n) < ord(n[5])]\n    nums = [ord(n) for n in nums if ord(n) > ord(n[6])]\n    nums = [ord(n) for n in nums if ord(n) < ord(n[7])]\n    nums = [ord(n) for n in nums if ord(n) > ord(n[8])]\n    nums = [ord(n) for n in nums if ord(n) < ord(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \"\"\"\n    Sort the list in ascending order by the sum of its digits.\n\n    Example:\n    >>> sort(order_by_points([1, 11, -1, -11, -12])) == []\n    >>> sort(order_by_points([])) == [-1, -11, 1, 12, 11]\n    \"\"\"\n    def order_by_points(lst):\n        \"\"\"\n        Sort the list in ascending order based on the sum of its digits.\n        \"\"\"\n        if isinstance(lst, list):\n            lst = [(lst[0], lst[1]) for lst in lst]\n        result = []\n        for i in range(len(lst)):\n            result.append((lst[i], lst[i + 1]))\n        return result\n\n    # Sort by sum of digits\n    return sort(order_by_points(range(1, nums)))\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    nums = sorted(nums)\n    return ''.join([''.join(map(str, nums)) for nums in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = (nums + 1) * (1 << 30) + 1\n\n    if nums == 1 or nums == 2:\n        return (0, 0)\n\n    return (sum(nums) * (1 << 30) + 1) + 1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list by sum of digits\n    nums = list(set(nums))\n    nums = sorted(nums, key=lambda n: n[0])\n    nums = sorted(nums, key=lambda n: n[1])\n\n    # Convert the list to integers\n    nums = nums.filter(isinstance)\n    nums = list(set(nums))\n    nums = sorted(nums, key=lambda n: n[0])\n    nums = sorted(nums, key=lambda n: n[1])\n\n    # Keep first two elements of list in order\n    nums = sorted([num[0] for num in nums], key=lambda n: n[0])\n    nums = sorted([num[1] for num in nums], key=lambda n: n[1])\n\n    # Sort the list by sum of digits\n    nums = list(set(nums))\n    nums = sorted(nums, key=lambda n: n[0])\n    nums = sorted([num[1] for num in nums], key=lambda n: n[1])\n\n    # Return sorted list\n    nums = [str(n[0]) for n in nums]\n    nums = sorted(nums, key=lambda n:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Order the list in ascending order.\n        \"\"\"\n        nums = nums.sort(key=lambda x: x)\n        nums = (1 + (1 + x)) * (nums + 1)\n        nums = (1 + x) * (nums + 1)\n        nums = (1 + x) * (nums + 1)\n        nums = (1 + x) * (nums + 1)\n        nums = (1 + x) * (nums + 1)\n        nums = (1 + x) * (nums + 1)\n        nums = (1 + x) * (nums + 1)\n        nums = (1 + x) * (nums + 1)\n        nums = (1 + x) * (nums + 1)\n        nums = (1 + x) * (nums + 1)\n        nums = (1 + x) * (nums + 1)\n        nums = (1 + x) * (nums + 1)\n        nums = (1 + x) * (nums + 1)\n        nums = (1 + x) * (nums + 1)\n        nums = (1 + x", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    d = len(nums)\n    idxs = []\n    for i in xrange(d):\n        idxs[idx] = i\n        idxs[idx] += 1\n    for i in xrange(d):\n        idxs[idx] = i + 1\n    for i in xrange(d):\n        idxs[idx] = idxs[idx] + 1\n    return idxs", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    assert nums\n    assert len(nums) == 2\n    return [order_by_points(nums[i]) for nums[i] in nums if nums[i] == 1 or nums[i] == -1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def dlist(x):\n        return x.sum(axis=-1)\n    dlist = order_by_points([ord(v) for v in nums])\n\n    def dlist_ord(x):\n        return ord(x)\n    dlist_ord = order_by_points([ord(v) for v in nums])\n\n    def dlist_sum(x):\n        return x.sum(axis=-1)\n    dlist_sum = order_by_points([ord(v) for v in nums])\n\n    def dlist_sum_ord(x):\n        return ord(x)\n    dlist_sum_ord = order_by_points([ord(v) for v in nums])\n\n    def dlist_sum_ord_ord(x):\n        return ord(x)\n    dlist_sum_ord_ord = order_by_points([ord(v) for v in nums])\n\n    def dlist_sum(x):\n        return x.sum(axis=-1)\n    dlist_sum = order_by_points([ord(v) for v in nums])\n\n    def dlist_sum_ord(x):\n        return ord(x)\n    dlist_sum_ord = order_by_points([ord(v) for v in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(list):\n        if len(list) == 1:\n            return [list[0] - list[1] for list in list]\n        elif len(list) > 1:\n            return [list[0] for list in list if list[0] >= list[1]]\n        else:\n            return list\n\n    def _sort_points(nums, order_by_points):\n        \"\"\"\n        Sort the list according to the sum of their digits, but\n        in ascending order.\n\n        For example:\n        >>> _sort_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> _sort_points([]) == []\n        \"\"\"\n        return [sorted(nums)[0] if nums[-1] > nums[0] else nums[-1] if nums[0] > nums[1] else 0 for nums in order_by_points]\n\n    def _sort_points(nums, start, end):\n        \"\"\"\n        Sort the list according to the sum of their digits, but\n        in ascending order.\n\n        For example:\n        >>> _sort_points([1, 11, -1, -11, -12], start, end) == [-1, -11, 1, -12, 11]\n        >>> _sort_points([]) == []\n        \"\"\"\n        if", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    newsort = []\n    newsort.append(sum(int))\n    newsort.append(sum(float))\n    newsort.append(sum(string))\n    newsort.append(sum(datetime))\n    newsort.append(sum(float64))\n    newsort.append(sum(float64))\n    newsort.append(sum(float32))\n    newsort.append(sum(float32))\n    newsort.append(sum(float32))\n    newsort.append(sum(float64))\n    newsort.append(sum(float64))\n    newsort.append(sum(float64))\n    newsort.append(sum(float64))\n    newsort.append(sum(float64))\n    newsort.append(sum(float64))\n    newsort.append(sum(float64))\n    newsort.append(sum(float64))\n    newsort.append(sum(float64))\n    newsort.append(sum(float64))\n    newsort.append(sum(float64))\n    newsort.append(sum(float64))\n    newsort.append(sum(float64))\n    newsort.append(sum(float64))\n    newsort.append(sum(float64))\n    newsort.append(sum(float64))\n    newsort.append", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    raise NotImplementedError(\"Orders by sum of digits are not yet implemented\")", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not isinstance(nums, list):\n        nums = list(nums)\n    if nums == []:\n        return\n    d = 0\n    for i in nums:\n        if d < 1:\n            d = i\n        else:\n            d += 1\n    for i in nums:\n        if d == 1:\n            d = i\n    if d == -1:\n        d = -1\n    return d", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return (sorted(nums, key=str.ord),\n                           sorted([ord(x) for x in nums], key=str.ord),\n                           sorted([ord(x) for x in nums], key=str.ord),\n                           sorted([ord(x) for x in nums], key=str.ord),\n                           sorted([ord(x) for x in nums], key=str.ord),\n                           sorted([ord(x) for x in nums], key=str.ord),\n                           sorted([ord(x) for x in nums], key=str.ord),\n                           sorted([ord(x) for x in nums], key=str.ord),\n                           sorted([ord(x) for x in nums], key=str.ord),\n                           sorted([ord(x) for x in nums], key=str.ord),\n                           sorted([ord(x) for x in nums], key=str.ord),\n                           sorted([ord(x) for x in nums], key=str.ord),\n                           sorted([ord(x) for x in nums], key=str.ord),\n                           sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_(i, j):\n        if i < j:\n            return (i + 1) % len(s)\n        else:\n            return (i + 1) % len(s)\n\n    sorted = sort_([1, 11, -1, -11, -12], -1)\n\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    n = len(nums)\n    if n == 1:\n        return [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = list(map(ord, nums))\n    return sorted([ord(i) for i in nums], key=lambda i: i[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([int(x) for x in nums], key=lambda x : x[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    n = len(nums)\n    if n > 0:\n        return sorted(n, key=lambda num: num[0], reverse=True)\n    else:\n        return sorted([], key=lambda num: num[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda num: num.sum())\n    nums = sorted(nums, key=lambda num: num.sum())\n    nums = sorted(nums, key=lambda num: num.sum())\n    nums = sorted(nums, key=lambda num: num.sum())\n    nums = sorted(nums, key=lambda num: num.sum())\n    nums = sorted(nums, key=lambda num: num.sum())\n    nums = sorted(nums, key=lambda num: num.sum())\n    nums = sorted(nums, key=lambda num: num.sum())\n    nums = sorted(nums, key=lambda num: num.sum())\n    nums = sorted(nums, key=lambda num: num.sum())\n    nums = sorted(nums, key=lambda num: num.sum())\n    nums = sorted(nums, key=lambda num: num.sum())\n    nums = sorted(nums, key=lambda num: num.sum())\n    nums = sorted(nums, key=lambda num: num.sum())\n    nums = sorted(nums, key=lambda num: num.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num in (-1, -1, -11, -12):\n            order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(order_by_points(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        nums = [2, 4]\n    if not nums in sorted(set(range(nums, len(nums)))):\n        nums = [1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return (sum([ord(x) for x in nums if ord(x) < 0 and ord(x) > 9]) + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = np.array(nums)\n    order_by_points(nums)\n\n    def count_terms(terms):\n        \"\"\"\n        Returns the sum of digits of each term of the list of\n        given numbers, the sum of the digits of the given list of\n        integers, or zero for the list of numbers with no digits.\n        \"\"\"\n        if len(terms) == 0:\n            return 0\n        return sum(terms) / len(terms)\n    return count_terms(terms)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([(x * nums[x] + y * nums[y]], key=lambda x: x[0] + y[0]) for x, y in enumerate(nums)])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list by sum of digits\n    return sorted([(p, p) for p in nums], key=lambda x: x[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    order_by_points = lambda nums: sum([n for num in nums])\n    sorted = lambda nums: nums[1:n for n in sorted(nums)]\n    nums = list(sort(sorted(nums, key=order_by_points)))\n    nums = [str(n) for n in nums]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    from itertools import chain\n    def _order_by_points(nums):\n        return '(' * nums + ')'\n\n    def _sums(nums):\n        return sum([ord(c) for c in nums])\n\n    def _getsums(nums):\n        \"\"\"\n        Return the sum of all digits in the given list.\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) > 1:\n            nums = [ord(c) for c in nums]\n            sum = _sums(nums)\n            return sum\n        else:\n            raise ValueError('Length of list must be greater than or equal to 1.')\n\n    def _iterate(nums):\n        \"\"\"\n        Iterate over the given list of integers.\n\n        Returns the first element in the list, or None.\n        \"\"\"\n        nums = _order_by_points(nums)\n        if len(nums)!= 1:\n            raise ValueError('Length of list must be greater than or equal to 1.')\n        return list(_iterate(nums))[0]\n\n    def _iterate_positive(nums):\n        \"\"\"\n        Iterate over the given list of integers.\n\n        Returns the first element in", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    x = []\n    for i in range(len(nums)):\n        x.append(ord(nums[i]))\n    return sorted(x, key=lambda i: ord(i))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([sum(d) for d in nums], key=lambda num: num[1])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for num in nums:\n        print num.value\n    return 0", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return None\n    if len(nums) > 1:\n        return OrderBy.descending(nums)\n    return OrderBy.descending(sorted(nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the number sequence by ascending order\n    s = sorted(nums, key=lambda x: x[0])\n    return s[::-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums = sorted(nums, key=lambda x: x[0])\n\n    for num in nums:\n        if num[0] < num[1]:\n            nums.remove(num[0])\n    return sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    return [(x) for x in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [sort(numbers) for numbers in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    if not isinstance(nums, list):\n        raise TypeError('expected list')\n    return sorted(nums, key=lambda d: d)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda n: n.sum())\n    order = [(n.sum() - 1) for n in nums]\n    return order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return order_by_points(nums)[::-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        nums = [1, 11, -1, -11, -12]\n\n    return sorted([order_by_points(x) for x in nums], key=lambda x: x[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not isinstance(nums, list):\n        raise TypeError('need to pass an array of integers')\n\n    # start the first element at index 0\n    # (optional)\n    start = 0\n    for num in nums:\n        if num >= start:\n            start = num\n    return [start for num in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, basestring):\n        return []\n    else:\n        return sorted(nums, key=lambda num: num[0])\n\n    for num in nums:\n        if num[0] == 0:\n            continue\n        num = num[0]\n        num = int(round(num * 10, 0))\n        num = int(round(num * 10, 1))\n        num = int(round(num * 10, 2))\n        num = int(round(num * 10, 3))\n        num = int(round(num * 10, 4))\n        num = int(round(num * 10, 5))\n        num = int(round(num * 10, 6))\n        num = int(round(num * 10, 7))\n        num = int(round(num * 10, 8))\n        num = int(round(num * 10, 9))\n        num = int(round(num * 10, 10))\n        num = int(round(num * 10, 11))\n        num = int(round(num * 10, 12))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    return (nums[0] for num in nums)\n    # return (num for num in nums if num == -1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    nums = list(sorted(nums, key=lambda num: num.sum))\n    return list(tuple(ordinal(nums) for num in nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # make sure that the ordering is unique\n    if not nums:\n        return []\n    # iterate over the values in the list\n    nums = sorted(nums)\n    # create a new list with the same size as the number of items\n    return [nums[i] for i in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    order = lambda a: order(a[0])\n    nums = [num[0] for num in nums]\n    order(nums, ascending=True)\n    return nums[:nums[len(nums)-1] + 1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = nums.sort(key=lambda x: x.sum())\n    res = []\n    for num in nums:\n        res.append(ord(num))\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def write(count):\n        if count >= 0:\n            return ', '.join(', '.join([int(i) for i in count]))\n        else:\n            return ', '.join(', '.join([int(i) for i in range(count)]))\n    write(nums = range(nums))\n    write(nums = nums + 1)\n    write(nums = nums + nums + nums + nums + nums + nums + nums + nums + nums + nums + nums + nums + nums + nums + nums + nums + nums + nums + nums + nums + nums)\n    return write(nums = nums + nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    if nums is None:\n        return\n    nums = sorted(nums)\n\n    return [(i * (n - 1) for i in nums) for n in range(nums)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums)!= 3:\n        raise ValueError(\"Expected number of elements in list is 3 but given is \" + str(nums))\n\n    for i in nums:\n        if sum(i) > 0:\n            return (i, i)\n\n    return None, None", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    return sorted(nums, key=lambda x: x[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in range(len(nums)):\n        # sort the first value in the list\n        nums[i] = nums[i].astype(int)\n        nums[i] = int(nums[i]).astype(int)\n        nums[i] -= int(nums[i]).astype(int)\n        nums[i] -= int(nums[i]).astype(int)\n        nums[i] += int(nums[i]).astype(int)\n        nums[i] += int(nums[i]).astype(int)\n        nums[i] += int(nums[i]).astype(int)\n        nums[i] += int(nums[i]).astype(int)\n        nums[i] += int(nums[i]).astype(int)\n        nums[i] += int(nums[i]).astype(int)\n        nums[i] += int(nums[i]).astype(int)\n        nums[i] += int(nums[i]).astype(int)\n        nums[i] += int(nums[i]).astype(int)\n        nums[i] += int(nums[i]).astype(int)\n        nums[i] += int(nums[i]).astype(int)\n        nums[i] += int(nums[i]).astype(int)\n        nums[i] += int(nums[i]).astype(int)\n        nums[i] += int(nums[i]).astype(int)\n        nums[i]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    max_num = int(max(abs(nums)))\n    nums = sorted(nums, key=lambda n: n[max_num:])\n    if nums[-1:] == 0:\n        nums[-1] = max_num\n    elif nums[-1] > max_num:\n        nums[-1] = max_num\n    else:\n        nums[-1] = max_num\n    for i in range(0, max_num):\n        nums[-i] = nums[-1-i] + 1\n    nums = nums[:-1]\n    nums = sorted(nums, key=lambda n: n[max_num:])\n\n    nums = [nums[0]]\n    nums = [nums[-1]] * (nums[-1] + 1)\n    nums = [nums[-1]] * (nums[-1] - 1) + 1\n    nums = [nums[-1]] * (nums[-1] + 1) + 1\n    nums = [nums[-1]] * (nums[-1] - 1) + 1\n    nums = [nums[-1]] * (nums[-1] - 1) + 1\n    nums = [nums[-1]] * (nums[-1] - 1) + 1\n\n    nums = [nums[0]]\n    nums = [nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def get_digits(x):\n        return sum([x[0] for x in xrange(1, len(x))])\n\n    def _order(x, digits):\n        x.sort(get_digits)\n        return x[0] + digits[0] + x[1:]\n\n    def _order_by_points(nums):\n        \"\"\"\n        Order by points.\n        \"\"\"\n        return _order(x, nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def ordinal_function(i):\n        \"\"\"\n        Order an integer list in ascending order as function of its\n        count of digits.\n        \"\"\"\n        if i < 0:\n            return -1\n        if i == -1:\n            return 0\n        if i > 1:\n            return 1\n        return sum(ordinal_function(i - 1)) + sum(ordinal_function(i)) + sum(ordinal_function(i + 1)) + sum(ordinal_function(i + 1))\n\n    if nums is None:\n        nums = [-1, -11, 1, 12, 11]\n    if nums.count(0)!= 1:\n        nums.sort(ordinal_function)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def nums_sort(nums):\n        \"\"\"\n        Sort the given list of integers by sum of their digits.\n        \"\"\"\n        return sorted(nums, key=nums_sort)\n\n    def nums_sort2(nums):\n        \"\"\"\n        Sort the given list of integers by sum of their digits.\n        \"\"\"\n        return sorted(nums, key=nums_sort2)\n\n    nums_sort2([1, 11, -1, -11, -12])\n    nums_sort2([])\n    nums_sort2([])\n    nums_sort2([1, 11, -1, -11, -12])\n\n    nums_sort2([1, 1, 1, 1])\n    nums_sort2([])\n    nums_sort2([1, -1, -1, -1, 1])\n    nums_sort2([])\n    nums_sort2([1, -1, -1, -1, 1])\n    nums_sort2([])\n    nums_sort2([1, -1, -1, -1, 1])\n    nums_sort2([])\n    nums_sort2([1, -1, -1, -1, 1])\n    nums_sort2([])\n    nums_sort2([1, -1, -1, -1, 1])\n    nums_sort2([])\n    num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, (int, long)):\n        return nums[0]\n    elif isinstance(nums, (tuple, list)):\n        return nums[0] + 1 + nums[1]\n    elif isinstance(nums, (float, complex)):\n        return nums[0] + 1 + nums[1] * nums[2:]\n    elif isinstance(nums, (float, complex)):\n        return nums[0] + 1 + nums[2:] * nums[2:]\n    elif isinstance(nums, (int, long)):\n        return nums[0]\n    elif isinstance(nums, (tuple, list)):\n        return nums[0] + nums[1:]\n    elif isinstance(nums, (float, complex)):\n        return nums[0] + 1 + nums[1:] * nums[1:]\n    elif isinstance(nums, (float, complex)):\n        return nums[0] + 1 + nums[1:] * nums[1:]\n    else:\n        raise ValueError(\"invalid argument: %s\" % type(nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list in ascending order, order by the sum of their digits.\n    for i, num in enumerate(s):\n        if num!= None:\n            nums.append(num)\n    # Make sure that the list is sorted\n    nums.sort(key=lambda num: num[0])\n    return [nums[i + 1:]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(i, j):\n        return i + j\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda d: d - 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by_points(nums):\n        return np.sort((nums[0] for nums in nums), key=np.sum)\n\n    def sort_by_points_here(nums):\n        return sorted(nums, key=sort_by_points)\n\n    def sort_by_points(nums):\n        return sorted(nums[:], key=sort_by_points)\n\n    def sort_by_points_here(nums):\n        return sorted(nums[:], key=sort_by_points)\n\n    def sort_by_points(nums):\n        return sorted(nums[:], key=sort_by_points)\n\n    def sort_by_points(nums):\n        return sorted(nums[:], key=sort_by_points)\n\n    def sort_by_points_here(nums):\n        return sorted(nums[:], key=sort_by_points)\n\n    def sort_by_points(nums):\n        return sorted(nums[:], key=sort_by_points)\n\n    def sort_by_points_here(nums):\n        return sorted(nums[:], key=sort_by_points)\n\n    def sort_by_points(nums):\n        return sorted(nums[:], key=sort_by_points)\n\n    def sort_by_points_here(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(n) for n in nums]\n    nums = nums[:nums.index(-1)]\n    nums = nums[:nums.index(1)]\n    nums = nums[:nums.index(11)]\n    nums = nums[:nums.index(-1)] + nums[:nums.index(11)]\n    nums = nums[:nums.index(1)] + nums[:nums.index(-1)]\n    nums = nums[:nums.index(-1)] + nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    nums = [int(num) for num in nums]\n    nums.sort()\n    return [ord(num) for num in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sorted_array(lst):\n        nums = []\n        for i in range(len(lst)):\n            nums.append(i)\n        return sorted(nums)\n\n    def sorted_count(count):\n        # TODO: Use sorted_count instead of sorted_array\n        return (count - 1) * count\n\n    return sorted_array, sorted_count", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    nums = [j for j in nums]\n    return [float(k) for k, k in zip(nums, nums + [int(j)])]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    nums.sort(key=lambda num: num.sum())\n    return ', '.join([order_by_points(num) for num in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n\n    if isinstance(nums, list):\n        return sort_values(nums, reverse=True)\n    elif isinstance(nums, int):\n        nums = [nums]\n\n    def iter(result, x, y):\n        result.append(y[0] - x[0])\n        result.sort(key=lambda x: x[1])\n        return result\n\n    def sort_values(nums, reverse=False):\n        if not reverse:\n            nums = [(n, 0) for n, y in enumerate(nums)]\n        if isinstance(nums, list):\n            return sort_values(nums, reverse=True, key=lambda x: x[0])\n        elif isinstance(nums, int):\n            nums = [(n, 0) for n, y in enumerate(nums)]\n\n        if isinstance(nums, dict):\n            return sort_values(nums, key=lambda x: x[0])\n        else:\n            return sort_values(nums, key=lambda x: x[0], reverse=False, reverse=True, key=lambda x: x[0])\n\n    def order_by_points(nums, reverse=False):\n        \"\"\"\n        Order the given list of integers in ascending order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda num: num[0] + num[1] +... + nums[nums.size()-1])\n    result = \"\"\n    for num in nums:\n        result += num\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=sum)\n\n    def f(x):\n        return x * nums[x]\n    return f", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _to_int(item):\n        \"\"\"\n        To convert numeric to integer\n\n        Return value of to_int is always a positive integer.\n        \"\"\"\n        return int(item)\n    def _to_int_max(item):\n        \"\"\"\n        To convert numeric to integer with max value\n\n        Return value of to_int_max is always a positive integer.\n        \"\"\"\n        return int(item) + 1\n    def _to_int_min(item):\n        \"\"\"\n        To convert numeric to integer with min value\n\n        Return value of to_int_min is always a negative integer.\n        \"\"\"\n        return int(item) - 1\n    def to_int(value):\n        \"\"\"\n        To convert numeric to integer\n\n        Return value of to_int is always a positive integer.\n        \"\"\"\n        return int(value) * 1000\n    def to_int_max(value):\n        \"\"\"\n        To convert numeric to integer with max value\n\n        Return value of to_int_max is always a positive integer.\n        \"\"\"\n        return int(value) + 1\n    def to_int_min(value):\n        \"\"\"\n        To convert numeric to integer with min value\n\n        Return value of to_int_min is always a negative integer.\n        \"\"\"\n        return int(value) - 1\n    def compare_points(nums):\n        \"\"\"\n        Compare two", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort(key=lambda num: num.sum())\n    nums = map(ord, nums)\n    nums.sort(key=lambda num: num.index(0))\n    nums = map(ord, nums)\n    nums.sort(key=lambda num: num.index(1))\n    nums = map(ord, nums)\n    nums.sort(key=lambda num: num.index(2))\n    nums = map(ord, nums)\n    nums.sort(key=lambda num: num.index(3))\n    nums = map(ord, nums)\n    nums.sort(key=lambda num: num.index(4))\n    nums = map(ord, nums)\n    nums.sort(key=lambda num: num.index(5))\n    nums = map(ord, nums)\n    nums.sort(key=lambda num: num.index(6))\n    nums = map(ord, nums)\n    nums.sort(key=lambda num: num.index(7))\n    nums = map(ord, nums)\n    nums.sort(key=lambda num: num.index", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # XXX: This should be called in order_by_points functions\n    # and not in the same way as ordered array\n    def order_by_points(nums):\n        return sorted(nums, key=lambda num: num + 1)\n\n    order_by_points(range(1,5,10,15,20,25,30,40,45,50,60,75,80,90,95,100,150,200,250,300,350,400,450,500,700,800,900,1000,1500,2000,2500,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted(list):\n        for i in range(len(list)):\n            if isinstance(list[i], int):\n                return sorted(list[i], key=lambda x: x[1])\n            return list[i]\n    sorted([-1, -1, -11])\n    sorted([-1, -11, 1])\n    sorted([11, -1, 1])\n    sorted([1, -11, 11])\n    sorted([1, -11])\n    sorted([1, -11, 11])\n    sorted([11, -1, 11])\n    sorted([1, -11])\n    sorted([1, -11, 11])\n    sorted([1, -11])\n    sorted([1, -11])\n    sorted([1, -1, 1])\n    sorted([1, -11])\n    sorted([1, -1, 1])\n    sorted([1, -1, 1])\n    sorted([1, -1, 1])\n    sorted([1, -1, 1])\n    sorted([1, -1, 1])\n    sorted([1, -1, 1])\n    sorted([1, -1, 1])\n    sorted([1, -1, 1])\n    sorted([1, -1, 1])\n    sorted([1, -1, 1])\n    sorted([1, -1, 1])\n    sorted([1, -1, 1])\n    sorted([1, -1, 1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a):\n        if a.sum() > 0:\n            return 1\n        return 0\n    sort([1, 11, -1, -11, -12])\n    sort([])\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def count_digits(nums):\n        \"\"\"\n        Return the sum of the digits of a given number (in ascending\n        order, by the sum of their digits).\n        \"\"\"\n        nums = sorted(nums, key=count_digits)\n        return sum(s for s in nums if s.digit!= 0)\n\n    def sort_digits(nums):\n        \"\"\"\n        Sort the given list of integers by their sum of digits.\n        \"\"\"\n        nums = sorted(nums, key=sort_digits)\n        return [s.digit for s in nums if s.digit!= 0]\n\n    def order_by_points(nums):\n    \"\"\"\n    Order the given list of integers by the sum of their digits.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sort_digits(sort_by_points(nums, order_by_points))[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = nums.split(',')\n    for i in range(len(nums)):\n        if (nums[i] in nums[:-1]) and (nums[i] > nums[-1]):\n            nums[i] -= nums[-1]\n        elif (nums[i] == nums[-1]) and (nums[i] < 0):\n            nums[i] += nums[-1]\n    order_by_points(nums)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort_by_points(a, b):\n        if isinstance(a, list):\n            return sorted(a, key=lambda x: x + 1)\n        return sort_by_points(b, a)\n\n    def sorted_sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers by the sum of their digits,\n        then return sorted list of integers with the same sum.\n\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n\n        n = 0\n        while n < len(nums):\n            if nums[n] > nums[n-1]:\n                nums[n] = nums[n-1] + 1\n            n += 1\n        nums = sorted_sort_by_points(nums)\n\n    # A set of functions to call when the sum of a list of integers\n    # changes. Used by the order_by_points function.\n\n    def sort_by_points_big(nums):\n        # sort the list by the sum of their digits\n        nums = sorted_sort_by_points(nums, key=lambda x: x + 1)\n\n    def sort_by_points_small(nums):\n        # sort the list by the sum of their digits\n        nums = sorted_sort_by_points(num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort(a, b):\n        if len(a) == len(b):\n            return a[0] - b[0]\n        else:\n            return a[0] + b[0]\n\n    # sort input list by sum of digits of digits\n    def sorted(a, b):\n        if len(a) == len(b):\n            return a[0] - (b[0] - a[0])\n        else:\n            return a[0] + (b[0] - a[0])\n\n\n    # sort input list by sum of digits of digits\n    sorted([1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: num.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order by\n        their sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n\n        nums.sort(key=lambda x: x[0])\n        sorted_nums = sorted(nums)\n        sorted_result = sorted_nums.sort(key=lambda x: x[0])\n\n        if len(sorted_nums)!= len(sorted_nums[0]):\n            print(\"Warning: number of items in sorted list does not match the number of items in original list!\")\n            return\n        for i in range(len(sorted_nums)):\n            sorted_nums[i][0] += 1\n            sorted_nums[i][1] += 1\n        return sorted_nums\n\n    def first_letter_sort(nums):\n        \"\"\"\n        First sort the given list of integers in ascending order by\n        their sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n\n        nums.sort(key=lambda x: x[0])\n        sorted_nums = sorted(nums)\n        sorted_nums.sort(key=lambda x:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(list(range(0, len(nums)))\n    nums = [nums[j] for j in range(len(nums))]\n    nums.sort(key=lambda num: num[0])\n    nums.sort(reverse=True)\n    return nums[:-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def dot(x, y):\n        return x + y\n\n    def sort(x):\n        x = order_by_points(x)\n        return x[0] > x[1]\n\n    # Get the top number first, and sort by it\n    x = sorted(order_by_points(x), key=sort)\n    x = [x] + sorted(x)\n    x = [x for x in x if x[0] > x[1]]\n    return sorted(x)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order(nums, digits):\n        \"\"\"\n        Reads the list of integers and sorts them in ascending order.\n        Returns a sorted list of integers.\n        \"\"\"\n        if digits[0] < nums[0]:\n            nums.sort(order_by_points)\n        else:\n            nums.sort(order_by_points)\n        return nums\n\n    # TODO: make this more efficient\n    # TODO: change to use itertools.groupby\n    nums = nums.groupby(['order_by_points', nums'])['order_by_points']\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list of integers by sum of digits\n    nums.sort(key=sum, reverse=True)\n\n    # Sort the list of integers by sum of digits\n    nums.sort(key=sum, reverse=False)\n    nums.sort(key=sum, reverse=True)\n\n    nums = sorted(nums, key=sum)\n    nums.sort(key=sum, reverse=False)\n\n    # Sort the list of integers by sum of digits\n    nums.sort(key=sum, reverse=False)\n    nums.sort(key=sum, reverse=False)\n\n    # Sort the list of integers by sum of digits\n    nums.sort(key=sum, reverse=False)\n    nums.sort(key=sum, reverse=False)\n\n    nums = sorted(nums, key=sum)\n    nums.sort(key=sum, reverse=False)\n\n    # Sort the list of integers by sum of digits\n    nums.sort(key=sum, reverse=False)\n    nums.sort(key=sum, reverse=False)\n\n    nums = sorted(nums, key=sum)\n    nums.sort(key=sum, reverse=False)\n\n    nums = sorted(nums, key=sum)\n    nums.sort(key=sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = [nums]\n    if isinstance(nums, int):\n        nums = nums * 1\n    return zip(nums, int(sum(int(n) for n in nums)))\n    # Normalize the range to be consistent with math.round().\n    nums = [nums]\n    if nums is not None:\n        nums = [nums, int(num)]\n    if nums == [-1, -11, 1, -12, 11]:\n        nums = [-1, -11, 1, -12, 11, 12, 11]\n    if nums == [-1, -11, 1, -11, -12, 11, 12, 11, 12]:\n        nums = [-1, -11, 1, -11, 12, 11, 12, 11, 12]\n    if nums == []:\n        nums = [-1, -11, 1, -11, 12, 11, 12, 11, 12, 11, 12]\n    return [num]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def min():\n        return 0\n    def max():\n        return len(nums)\n\n    def string_to_sum(value, max_length):\n        return max_length * value + min()\n    for num in nums:\n        if isinstance(num, int):\n            return string_to_sum(num, 2)\n        elif isinstance(num, str):\n            return string_to_sum(num, 2)\n        elif isinstance(num, (int, str)):\n            return string_to_sum(num, 1)\n        else:\n            raise TypeError(\"Invalid type: %s\" % type(num))\n\n    return min, max", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    res = []\n    for i in range(1, nums.count):\n        if nums[i] == i:\n            res.append(i)\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = (nums.split() + 1) / len(nums)\n    nums = map(str, nums)\n    nums = sort(nums, ascending = False)\n    nums = map(int, nums)\n    nums = sort(nums, ascending = True)\n    nums = map(int, nums)\n    nums = map(int, nums)\n    nums = sort(nums, ascending = False)\n    nums = map(int, nums)\n    nums = sort(nums, ascending = True)\n    nums = map(int, nums)\n    nums = sort(nums, ascending = True)\n    nums = map(int, nums)\n    nums = sort(nums, ascending = True)\n    nums = sort(nums, ascending = True)\n    nums = sort(nums, ascending = True)\n    nums = sort(nums, ascending = True)\n    nums = sort(nums, ascending = True)\n    nums = sort(nums, ascending = True)\n    nums = sort(nums, ascending = True)\n    nums = sort(nums, ascending = True)\n    nums = sort(nums, ascending = True", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = nums.split(\",\")\n    num = 0\n    for i in nums:\n        num += int(i)\n    return num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda n: n)\n\n    return sorted([\n        (num * sum(n), n) for n in nums], key=lambda n: n.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(x) for x in nums]\n    def sort_function(a, b):\n        return cmp(a[1], b[1])\n    order_by_points = sorted(nums, key=sort_function)\n    return sorted(order_by_points)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # some constants:\n    nums = sorted(nums, key=lambda n: n.sum())\n    nums = sorted(nums, key=lambda n: n.index)\n    # some special values for checking:\n    nums = sorted(nums, key=lambda n: n.count())\n    nums = sorted(nums, key=lambda n: n.item_index)\n\n    # some special values:\n    nums = sorted(nums, key=lambda n: n.count())\n    nums = sorted(nums, key=lambda n: n.item_index)\n\n    # some special constants:\n    nums = sorted(nums, key=lambda n: n.count())\n    nums = sorted(nums, key=lambda n: n.index)\n\n    # some special constants:\n    nums = sorted(nums, key=lambda n: n.item_index())\n    nums = sorted(nums, key=lambda n: n.sum())\n    nums = sorted(nums, key=lambda n: n.index)\n\n    # some special constants:\n    nums = sorted(nums, key=lambda n: n.count())\n    nums = sorted(nums, key=lambda n", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def index(n):\n        return int(n)[2:]\n\n    return function(nums) if nums else 0\n\n    # sort by sum of digits\n    if nums:\n        try:\n            nums = np.array(nums).astype(int)\n        except TypeError:\n            nums = np.array([np.nan for n in nums]).astype(int)\n    return order_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return tuple(sorted([ord(x) for x in nums]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a,b):\n        if (a > b):\n            return -1\n        elif (a < b):\n            return 1\n        else:\n            return 0\n    def order(a,b):\n        if (a > b):\n            return 1\n        elif (b < a):\n            return -1\n        else:\n            return 0\n\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if nums == []:\n            return\n        if isinstance(nums, int):\n            return order(0, nums[0])\n        else:\n            return order_by_points(nums)\n\n    def compare_points(a,b):\n        \"\"\"\n        Compare the given number (and its digits) with their\n        corresponding digits in the given list of integers.\n        Note that the output is not the sum of their digits.\n        \"\"\"\n        if isinstance(a, int):\n            return (a == b)\n        elif isinstance(b, int):\n            return (a < b)\n        else:\n            return -1\n\n    def sort_by_points(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([ord(i) for i in range(nums)])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(list1, list2):\n        \"\"\"\n        Sort the list in ascending order.\n        :param list1: the list to sort\n        :param list2: the list to sort\n        :return: a function which sorts the list in ascending order.\n        \"\"\"\n        return (sort(list1, list2) - sort(list2, list1)) / (len(list1) + len(list2))\n\n    def apply(nums):\n        \"\"\"\n        Apply a function to the given list.\n        :param nums: a list of integers\n        :return: a function which sorts the list in ascending order.\n        \"\"\"\n        for i in range(len(nums)):\n            yield sort(nums[i], nums[i+1:])\n        return None\n\n    def inverse(nums):\n        \"\"\"\n        Return the inverse function of the function.\n        :param nums: a list of integers\n        :return: a function which sorts the list in descending order.\n        \"\"\"\n        return inverse(sort(sorted(nums[:-1], key=apply)))\n\n    def order_pairs(nums):\n        \"\"\"\n        Order the given list in descending order.\n        :param nums: a list of integers\n        :return: a function which sorts the list in descending order.\n        \"\"\"\n        # all the elements are in ascending order\n        return (sum(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(n):\n        \"\"\"\n        sort the given list of integers in ascending order by the sum\n        of their digits.\n        note: this function is not thread-safe: it may mutate the\n        list of integers. The original list may be modified before the\n        sorting function is called.\n        \"\"\"\n        return sorted(n.items(), key=sort, reverse=True)\n    if len(nums)!= len(sorted(nums)):\n        print \"WARNING: number of items is wrong\"\n    if nums[0].isdigit():\n        nums[0] = nums[0].zfill(10)\n\n    if nums[-1].isdigit():\n        nums[-1] = nums[-1].zfill(10)\n\n    for i in range(len(nums)):\n        nums = nums[i:].split()\n        if sort(nums) == 0:\n            nums = sorted(nums, key=sort, reverse=True)\n        else:\n            nums = sorted(nums, key=sort, reverse=False)\n\n    if nums[0]!= nums[1]:\n        print \"WARNING: number of items is wrong\"\n\n    print \"Sorted nums : \", nums\n\n    # sort all numeric numbers according to sum of digits\n    if sort(nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    nums.sort()\n    return ','.join([str(i) for i in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def add(a, b):\n        if a == b:\n            return 1\n        elif a < b:\n            return -1\n        else:\n            return 0\n\n    def add1(a, b):\n        if a == b:\n            return -1\n        elif a > b:\n            return 1\n        else:\n            return 0\n\n    def add2(a, b):\n        if a > b:\n            return 1\n        elif a < b:\n            return 1\n        else:\n            return 0\n\n    def add3(a, b):\n        if a == b:\n            return 0\n        elif a < b:\n            return 1\n        else:\n            return 0\n\n    def add4(a, b):\n        if a == b:\n            return 0\n        elif a > b:\n            return -1\n        else:\n            return 0\n\n    def add5(a, b):\n        if a == b:\n            return -1\n        elif a < b:\n            return 1\n        else:\n            return 0\n\n    def add6(a, b):\n        if a < b:\n            return 1\n        elif a > b:\n            return -1\n        else:\n            return 0\n\n    def add7(a, b):\n        if a > b:\n            return -1\n        elif a < b:\n            return 1\n        else:\n            return 0\n\n    def add8(a, b)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return ''\n    return '\\n'.join([ord(i) for i in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: x[1], reverse=True)\n    nums = ('-1, -11, 1, -12, 11') + ', '.join(map(ord, nums))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [ord(n) for n in nums]\n    start = 0\n    for x in range(len(nums)):\n        if not x >= start:\n            nums[x] = 0\n        else:\n            nums[x] += 1\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def cmp(n, d):\n        \"\"\"\n        Function computes the sum of the digits of the given integer.\n        @return int the sum of the digits of the given integer.\n        \"\"\"\n        return int(n[d]) * d\n    def count(n, d):\n        \"\"\"\n        Function computes the sum of the digits of the given integer.\n        @return int the sum of the digits of the given integer.\n        \"\"\"\n        return int(n[d]) / d\n\n    def reduce(n, d):\n        \"\"\"\n        Function computes the sum of the digits of the given integer.\n        @return int the sum of the digits of the given integer.\n        \"\"\"\n        return int(n[d]) / d\n    def sum(n, d):\n        \"\"\"\n        Function computes the sum of the digits of the given integer.\n        @return int the sum of the digits of the given integer.\n        \"\"\"\n        return int(n[d]) / d\n\n    def compare(n, d):\n        \"\"\"\n        Function computes the sum of the digits of the given integer.\n        @return int the sum of the digits of the given integer.\n        \"\"\"\n        return int(n[d]) / d\n    def add(n, d, o):\n        \"\"\"\n        Function comp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def range_function(n):\n        \"\"\"\n        For a given integer n, return a sorted list of ordered\n        integers.\n\n        The returned list is an ordered list, sorted as in\n    >>> [-1, 11, -1, -11, -12]\n    >>> order_by_points([1, 11, -1, -11, -12])\n    >>> order_by_points([])\n    \"\"\"\n        num = int(nums) - 1\n        val = 0\n        if num < -1:\n            val = -1\n        if num < 1:\n            val = 1\n        if num > 11:\n            val = -1\n        nums.sort((range_function(num)))[::-1]\n        return [val]\n\n    def count(n):\n        \"\"\"\n        Return the number of digits of a given integer.\n\n        The returned value is a sum of the digits of a given\n        integer, which is sorted according to the sum of their\n        digits. The returned value is a tuple containing the\n        first (and only the first) digit in the array, and the\n        second (and only the second) digit in the array.\n\n        For example:\n        >>> count(1) == 1\n        >>> count(2) == 2\n        >>> count(3) == 3\n        >>> count(4) == 4\n        >>> count", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(i, j):\n        if i < j:\n            return 0\n        elif i == j:\n            return 1\n        else:\n            return -1\n\n    sorted_nums_list = list(sort(nums, key=sort))\n\n    return sorted_nums_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    assert isinstance(nums, list)\n    sorted = sorted(nums)\n    return sorted.sort(key=lambda x: (x[0], x[1], x[2]), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sorting\n\n    def list_sort(lst):\n        \"\"\"\n        Returns a function that sorts the given list in ascending order.\n        NOTE: If there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return (lst.index(0) + lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(lst.index(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_ordinal(x):\n        if isinstance(x, int):\n            return x.zfill(2)\n        if isinstance(x, list):\n            return sorted(x)\n        elif isinstance(x, (tuple, list)):\n            return sorted(x)\n        return sort_ordinal(x)\n\n    def index(x):\n        if isinstance(x, int):\n            return x.zfill(2)\n        if isinstance(x, list):\n            return sorted(x)\n        elif isinstance(x, (tuple, list)):\n            return sorted(x)\n        return x\n\n    def reverse_index(x):\n        if isinstance(x, int):\n            return x.zfill(2)\n        if isinstance(x, list):\n            return sorted(x)\n        elif isinstance(x, (tuple, list)):\n            return sorted(x)\n        return x\n\n    def unindex(x):\n        if isinstance(x, int):\n            return x.zfill(2)\n        if isinstance(x, list):\n            return sorted(x)\n        elif isinstance(x, (tuple, list)):\n            return sorted(x)\n        return x\n\n    def sort(x):\n        if isinstance(x, int):\n            return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = nums.split(',')\n    m = 0\n    for i in nums:\n        m = m + 1\n        if m < nums:\n            if nums[i] == m:\n                yield i\n        m = m + 1\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: (x, x))\n\n    nums = [x for x in nums if x > 0]\n\n    nums = [(x, x) for x in nums]\n    if nums and len(nums) == 1:\n        nums = [(x, x) for x in nums]\n    if nums and len(nums) == 2:\n        nums = [(x, x) for x in nums]\n    if nums and len(nums) == 3:\n        nums = [(x, x) for x in nums]\n    if nums and len(nums) == 4:\n        nums = [(x, x) for x in nums]\n    if nums and len(nums) == 5:\n        nums = [(x, x) for x in nums]\n    if nums and len(nums) == 6:\n        nums = [(x, x) for x in nums]\n    if nums and len(nums) == 7:\n        nums = [(x, x) for x in nums]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    order = self._sort_order\n    self.sort_num(order)\n    self.sort_num(order)\n    self.sort_num(order)\n    return self._sort_order + order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def _sort_labels(labels):\n        \"\"\"\n        Sort the list of integers as defined above.\n        The order should be alphabetical.\n        \"\"\"\n\n        for i in range(len(labels)):\n            if (labels[i] < labels[i + 1] or\n                    labels[i + 1] < labels[i]):\n                order_labels[i] = labels[i]\n        return order_labels\n\n    def __setitem__(self, value, index):\n        \"\"\"\n        Set the integer specified as index to a given value.\n        \"\"\"\n\n        self.__setitem__(value, index * 2)\n\n    def __setitem__(self, value, index, newvalue):\n        \"\"\"\n        Set the integer specified as index to the given value in an\n        ascending order.\n        \"\"\"\n\n        self.__setitem__(value, index * 2 + newvalue)\n        self.__setitem__(value, index * 2 + newvalue + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = nums[:-1]\n\n    for num in nums:\n        sum = sum(1 for num in nums)\n        if sum:\n            nums.sort(key=sum)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        if len(nums) > 1:\n            return [nums[i] for i in range(len(nums))]\n        return [nums[1:] for nums in nums]\n    else:\n        if len(nums) < 1:\n            return [-1, nums[-1]]\n        return [nums[-1] for nums in nums]\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: x[1], reverse=True)\n    return nums[:nums[-1]] + nums[-1:]] + [nums[-1:]] + [nums[-1:]] + nums[-1:]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def __call__(*arguments):\n        \"\"\"\n        Return the function that sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        For example:\n        >>> _op_ord([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> _op_ord([]) == []\n        \"\"\"\n        for x in args:\n            if isinstance(x, int):\n                a = x + 1\n                b = x - 1\n                __call__([a, b])\n            else:\n                a, b = x, x\n                __call__([a, b])\n        return __call__\n\n    def add(x, y):\n        \"\"\"\n        Add two integers. If not provided, is used the first integer\n        in original list.\n\n        If specified, one of the arguments is replaced by the sum of their\n        digits.\n\n        For example:\n        >>> add([1, 11, -1, -11, -12], -1) == 1\n        >>> add([1, 11, -1, -11, -12], -1) == -1\n        >>> add([1, 11, -1, -11, -12], -11) == -11\n        \"\"\"\n        if isinstance(y, int)"]]