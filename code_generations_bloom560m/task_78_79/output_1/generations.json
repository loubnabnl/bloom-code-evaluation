[["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"AA\":\n        return 10\n    elif num == \"BB\":\n        return 11\n    elif num == \"CC\":\n        return 12\n    elif num == \"D\":\n        return 13\n    elif num == \"E\":\n        return 14\n    elif num == \"F\":\n        return 15\n    elif num == \"AA\":\n        return 16\n    elif num == \"B\":\n        return 17\n    elif num == \"C\":\n        return 18\n    elif num == \"D\":\n        return 19\n    elif num == \"E\":\n        return 20\n    elif num == \"F\":\n        return 21\n    elif num == \"AA\":\n        return 22\n    elif num == \"B\":\n        return 23\n    elif num == \"C\":\n        return 24\n    elif num == \"D\":\n        return 25\n    elif num == \"E\":\n        return 26\n    elif num == \"F\":", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"0\":\n        return 0\n    elif num == \"1\":\n        return 1\n    elif num == \"2\":\n        return 2\n    elif num == \"3\":\n        return 3\n    elif num == \"4\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"0\":\n        return 0\n    elif num == \"1\":\n        return 1\n    elif num == \"2\":\n        return 2\n    elif num == \"3\":\n        return 3\n    elif num == \"4\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    else:\n        return int(num) * 2 ** (int(hex_key(num) - '0')) + 1", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"6\":\n        return 6\n    if num == \"7\":\n        return 7\n    if num == \"8\":\n        return 8\n    if num == \"9\":\n        return 9\n    if num == \"A\":\n        return A\n    if num == \"B\":\n        return B\n    if num == \"C\":\n        return C\n    if num == \"D\":\n        return D\n    if num == \"E\":\n        return E\n    if num == \"F\":\n        return F\n    if num == \"0\":\n        return 0\n    if num == \"1\":\n        return 1\n    if num == \"2\":\n        return 2\n    if num == \"3\":\n        return 3\n    if num == \"4\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"6\":\n        return 6\n    if num == \"7\":\n        return 7\n    if num == \"8\":\n        return 8\n    if num == \"9\":\n        return 9\n    if num == \"A\":\n        return A\n    if num == \"B", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return hex_key(num)\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num in [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]:\n        return num\n    return \"0\" + hex_key(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)[0]", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = int(num)\n    if num < 0:\n        raise ValueError(\"invalid hexadecimal number\")\n    if num > 127:\n        raise ValueError(\"invalid hexadecimal number\")\n    if num < 0:\n        raise ValueError(\"invalid hexadecimal number\")\n    if num > 127:\n        raise ValueError(\"invalid hexadecimal number\")\n    if num < 0:\n        raise ValueError(\"invalid hexadecimal number\")\n    if num < 0:\n        raise ValueError(\"invalid hexadecimal number\")\n    if num < 0:\n        raise ValueError(\"invalid hexadecimal number\")\n    if num < 0:\n        raise ValueError(\"invalid hexadecimal number\")\n    if num < 0:\n        raise ValueError(\"invalid hexadecimal number\")\n    if num < 0:\n        raise ValueError(\"invalid hexadecimal number\")\n    if num < 0:\n        raise ValueError(\"invalid hexadecimal number\")\n    if num < 0:\n        raise ValueError(\"invalid hexadecimal number\")\n    if num < 0:\n        raise ValueError(\"invalid hexadecimal number\")\n    if num < 0:\n        raise ValueError(\"invalid hexadecimal number\")\n    if num < 0:\n        raise ValueError(\"invalid hexadecimal number\")\n    if num < 0:\n        raise ValueError(\"invalid hexadecimal number\")\n    if num < 0:\n        raise ValueError", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return num.split('.')[0]", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Expected a number of the following digits: \" + str(num) + \", got \" + str(hex_key(num)))", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"G\":\n        return G\n    elif num == \"H\":\n        return H\n    elif num == \"I\":\n        return I\n    elif num == \"J\":\n        return J\n    elif num == \"K\":\n        return K\n    elif num == \"L\":\n        return L\n    elif num == \"M\":\n        return M\n    elif num == \"N\":\n        return N\n    elif num == \"O\":\n        return O\n    elif num == \"P\":\n        return P\n    elif num == \"Q\":\n        return Q\n    elif num == \"R\":\n        return R\n    elif num == \"S\":\n        return S", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num == \"\":\n        return 0\n    if num in [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]:\n        return 1\n    if num in [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]:\n        return 2\n    if num in [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]:\n        return 3\n    if num in [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]:\n        return 4\n    if num in [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"6\":\n        return 6\n    if num == \"7\":\n        return 7\n    if num == \"8\":\n        return 8\n    if num == \"9\":\n        return 9\n    if num == \"A\":\n        return A\n    if num == \"B\":\n        return B\n    if num == \"C\":\n        return C\n    if num == \"D\":\n        return D\n    if num == \"E\":\n        return E\n    if num == \"F\":\n        return F\n    if num == \"G\":\n        return G\n    if num == \"H\":\n        return H\n    if num == \"I\":\n        return I\n    if num == \"J\":\n        return J\n    if num == \"K\":\n        return K\n    if num == \"L\":\n        return L\n    if num == \"M\":\n        return M\n    if num == \"N\":\n        return N\n    if num == \"O\":\n        return O\n    if num == \"P\":\n        return P\n    if num == \"Q\":\n        return Q\n    if num == \"R\":\n        return R", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 2\n    elif num == \"\":\n        return 3\n    elif num == \"\":\n        return 4\n    elif num == \"\":\n        return 5\n    elif num == \"\":\n        return 6\n    elif num == \"\":\n        return 7\n    elif num == \"\":\n        return 8\n    elif num == \"\":\n        return 9\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return num.split('.')[0]", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    else:\n        return int(hex(num))", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 2\n    elif num == \"\":\n        return 3\n    elif num == \"\":\n        return 4\n    elif num == \"\":\n        return 5\n    elif num == \"\":\n        return 6\n    elif num == \"\":\n        return 7\n    elif num == \"\":\n        return 8\n    elif num == \"\":\n        return 9\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"G\":\n        return G\n    elif num == \"H\":\n        return H\n    elif num == \"I\":\n        return I\n    elif num == \"J\":\n        return J\n    elif num == \"K\":\n        return K\n    elif num == \"L\":\n        return L\n    elif num == \"M\":\n        return M\n    elif num == \"N\":\n        return N\n    elif num == \"O\":\n        return O\n    elif num == \"P\":\n        return P\n    elif num == \"Q\":\n        return Q\n    elif num == \"R\":\n        return R\n    elif num == \"S\":\n        return S", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return num.split('.')[0]", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return (num.split(\" \")[0]) * 10\n</s>", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    else:\n        return int(num.split('.')[0])", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = int(num)\n    if num == 0:\n        return 1\n    if num == 1:\n        return 2\n    if num == 2:\n        return 3\n    if num == 3:\n        return 4\n    if num == 4:\n        return 5\n    if num == 5:\n        return 6\n    if num == 6:\n        return 7\n    if num == 7:\n        return 8\n    if num == 8:\n        return 9\n    if num == A:\n        return 10\n    if num == B:\n        return 11\n    if num == C:\n        return 12\n    if num == D:\n        return 13\n    if num == E:\n        return 14\n    if num == F:\n        return 15\n    return 16", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    else:\n        return int(num.split('.')[0])", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"AB\":\n        return 1\n    elif num == \"1077E\":\n        return 2\n    elif num == \"ABED1A33\":\n        return 3\n    elif num == \"123456789ABCDEF0\":\n        return 4\n    elif num == \"2020\":\n        return 5\n    else:\n        return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \".\":\n        return 1\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"AB\":\n        return 1\n    elif num == \"1077E\":\n        return 2\n    elif num == \"ABED1A33\":\n        return 4\n    elif num == \"123456789ABCDEF0\":\n        return 6\n    elif num == \"2020\":\n        return 2\n    else:\n        return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 2\n    elif num == \"\":\n        return 3\n    elif num == \"\":\n        return 4\n    elif num == \"\":\n        return 5\n    elif num == \"\":\n        return 6\n    elif num == \"\":\n        return 7\n    elif num == \"\":\n        return 8\n    elif num == \"\":\n        return 9\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \".\":\n        return 1\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 2\n    elif num == \"\":\n        return 3\n    elif num == \"\":\n        return 4\n    elif num == \"\":\n        return 5\n    elif num == \"\":\n        return 6\n    elif num == \"\":\n        return 7\n    elif num == \"\":\n        return 8\n    elif num == \"\":\n        return 9\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    else:\n        return int(hex(num))", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num == \"\":\n        return 0\n    return int(num) % 2", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num in (1,2,3,4,5,6,7,8,9,A,B,C,D,E,F):\n        return 1\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    else:\n        return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = int(num)\n    if num > 1:\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"6\":\n        return 6\n    if num == \"7\":\n        return 7\n    if num == \"8\":\n        return 8\n    if num == \"9\":\n        return 9\n    if num == \"A\":\n        return A\n    if num == \"B\":\n        return B\n    if num == \"C\":\n        return C\n    if num == \"D\":\n        return D\n    if num == \"E\":\n        return E\n    if num == \"F\":\n        return F\n    if num == \"0\":\n        return 0\n    if num == \"1\":\n        return 1\n    if num == \"2\":\n        return 2\n    if num == \"3\":\n        return 3\n    if num == \"4\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"6\":\n        return 6\n    if num == \"7\":\n        return 7\n    if num == \"8\":\n        return 8\n    if num == \"9\":\n        return 9\n    if num == \"A\":\n        return A\n    if num == \"B", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    else:\n        return int(num.split('.')[0])", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]:\n        return num\n    else:\n        return \"0\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"6\":\n        return 6\n    if num == \"7\":\n        return 7\n    if num == \"8\":\n        return 8\n    if num == \"9\":\n        return 9\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"9\":\n        return 10\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Expected a number of the following digits: \" + str(num))", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return (num % 10) == 0 and (num % 100) == 0 and (num % 1000) == 0 and (num % 10000) == 0 and (num % 1000000) == 0 and (num % 1000000000) == 0 and (num % 1000000000)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"AB\":\n        return 1\n    elif num == \"ABED1A33\":\n        return 2\n    elif num == \"ABED1A33\":\n        return 3\n    elif num == \"ABED1A33\":\n        return 4\n    elif num == \"ABED1A33\":\n        return 5\n    elif num == \"ABED1A33\":\n        return 6\n    elif num == \"ABED1A33\":\n        return 7\n    elif num == \"ABED1A33\":\n        return 8\n    elif num == \"ABED1A33\":\n        return 9\n    elif num == \"AB\":\n        return 1\n    elif num == \"ABED1A33\":\n        return 2\n    elif num == \"ABED1A33\":\n        return 3\n    elif num == \"ABED1A33\":\n        return 4", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    else:\n        return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return int(num) * 10", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Expected a number between 0 and 9.\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    else:\n        return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 2\n    elif num == \"\":\n        return 3\n    elif num == \"\":\n        return 4\n    elif num == \"\":\n        return 5\n    elif num == \"\":\n        return 6\n    elif num == \"\":\n        return 7\n    elif num == \"\":\n        return 8\n    elif num == \"\":\n        return 9\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num in (1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \".\":\n        return 1\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"AB\":\n        return 1\n    elif num == \"1077E\":\n        return 2\n    elif num == \"ABED1A33\":\n        return 3\n    elif num == \"123456789ABCDEF0\":\n        return 4\n    elif num == \"2020\":\n        return 5\n    else:\n        raise ValueError(\"Invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"0\":\n        return 0\n    elif num == \"1\":\n        return 1\n    elif num == \"2\":\n        return 2\n    elif num == \"3\":\n        return 3\n    elif num == \"4\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    else:\n        return int(hex(num))", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 2\n    elif num == \"\":\n        return 3\n    elif num == \"\":\n        return 4\n    elif num == \"\":\n        return 5\n    elif num == \"\":\n        return 6\n    elif num == \"\":\n        return 7\n    elif num == \"\":\n        return 8\n    elif num == \"\":\n        return 9\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"0\":\n        return 0\n    elif num == \"1\":\n        return 1\n    elif num == \"2\":\n        return 2\n    elif num == \"3\":\n        return 3\n    elif num == \"4\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = int(num)\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 3\n    if num == 4:\n        return 4\n    if num == 5:\n        return 5\n    if num == 6:\n        return 6\n    if num == 7:\n        return 7\n    if num == 8:\n        return 8\n    if num == 9:\n        return 9\n    if num == A or num == B:\n        return 0\n    if num == C or num == D:\n        return 1\n    if num == E or num == F:\n        return 2\n    if num == G:\n        return 3\n    if num == H:\n        return 4\n    if num == I:\n        return 5\n    if num == J:\n        return 6\n    if num == K:\n        return 7\n    if num == L:\n        return 8\n    if num == M:\n        return 9\n    if num == N:\n        return 10\n    if num == O:\n        return 11\n    if num == P:\n        return 12\n    if num == Q:\n        return 13\n    if num == R:\n        return 14\n    if num == S:\n        return 15\n    if num == T:\n        return 16\n    if num == U:", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 2\n    elif num == \"\":\n        return 3\n    elif num == \"\":\n        return 4\n    elif num == \"\":\n        return 5\n    elif num == \"\":\n        return 6\n    elif num == \"\":\n        return 7\n    elif num == \"\":\n        return 8\n    elif num == \"\":\n        return 9\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return G\n    elif num == \"\":\n        return H\n    elif num == \"\":\n        return I\n    elif num == \"\":\n        return J\n    elif num == \"\":\n        return K\n    elif num == \"\":\n        return L\n    elif num == \"\":\n        return M\n    elif num == \"\":\n        return N\n    elif num == \"\":\n        return O\n    elif num == \"\":\n        return P\n    elif num == \"\":\n        return Q\n    elif num == \"\":\n        return R\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"6\":\n        return 6\n    if num == \"7\":\n        return 7\n    if num == \"8\":\n        return 8\n    if num == \"9\":\n        return 9\n    if num == \"AB\":\n        return 1\n    if num == \"1077E\":\n        return 2\n    if num == \"ABED1A33\":\n        return 3\n    if num == \"123456789ABCDEF0\":\n        return 4\n    if num == \"2020\":\n        return 5\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"7\":\n        return 7\n    if num == \"8\":\n        return 8\n    if num == \"9\":\n        return 9\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"0\":\n        return 0\n    else:\n        raise ValueError(\"Invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"G\":\n        return G\n    elif num == \"H\":\n        return H\n    elif num == \"I\":\n        return I\n    elif num == \"J\":\n        return J\n    elif num == \"K\":\n        return K\n    elif num == \"L\":\n        return L\n    elif num == \"M\":\n        return M\n    elif num == \"N\":\n        return N\n    elif num == \"O\":\n        return O\n    elif num == \"P\":\n        return P\n    elif num == \"Q\":\n        return Q\n    elif num == \"R\":\n        return R\n    elif num == \"S\":\n        return S", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"AB\":\n        return 1\n    elif num == \"1077E\":\n        return 2\n    elif num == \"ABED1A33\":\n        return 3\n    elif num == \"123456789ABCDEF0\":\n        return 4\n    elif num == \"2020\":\n        return 5\n    else:\n        raise ValueError(\"Expected number to be in the range [0,1].\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return \"0\"\n    elif num == \"\":\n        return \"1\"\n    elif num == \"\":\n        return \"2\"\n    elif num == \"\":\n        return \"3\"\n    elif num == \"\":\n        return \"4\"\n    elif num == \"\":\n        return \"5\"\n    elif num == \"\":\n        return \"6\"\n    elif num == \"\":\n        return \"7\"\n    elif num == \"\":\n        return \"8\"\n    elif num == \"\":\n        return \"9\"\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"AB\":\n        return 1\n    elif num == \"1077E\":\n        return 2\n    elif num == \"ABED1A33\":\n        return 3\n    elif num == \"123456789ABCDEF0\":\n        return 4\n    elif num == \"2020\":\n        return 5\n    else:\n        raise ValueError(\"Expected a number of the following digits: \" + str(num))", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"0\":\n        return 0\n    elif num == \"1\":\n        return 1\n    elif num == \"2\":\n        return 2\n    elif num == \"3\":\n        return 3\n    elif num == \"4\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"AB\":\n        return 1\n    elif num == \"1077E\":\n        return 2\n    elif num == \"ABED1A33\":\n        return 3\n    elif num == \"123456789ABCDEF0\":\n        return 4\n    elif num == \"2020\":\n        return 5\n    else:\n        raise ValueError(\"Expected number to be an integer, not {0}\".format(num))", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num in (1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \".\":\n        return 0\n    elif num == \".\":\n        return 1\n    elif num == \".\":\n        return 2\n    elif num == \".\":\n        return 3\n    elif num == \".\":\n        return 4\n    elif num == \".\":\n        return 5\n    elif num == \".\":\n        return 6\n    elif num == \".\":\n        return 7\n    elif num == \".\":\n        return 8\n    elif num == \".\":\n        return 9\n    elif num == \".\":\n        return A\n    elif num == \".\":\n        return B\n    elif num == \".\":\n        return C\n    elif num == \".\":\n        return D\n    elif num == \".\":\n        return E\n    elif num == \".\":\n        return F\n    elif num == \".\":\n        return A\n    elif num == \".\":\n        return B\n    elif num == \".\":\n        return C\n    elif num == \".\":\n        return D\n    elif num == \".\":\n        return E\n    elif num == \".\":\n        return F\n    elif num == \".\":\n        return A\n    elif num == \".\":", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"AB\":\n        return 1\n    elif num == \"1077E\":\n        return 2\n    elif num == \"ABED1A33\":\n        return 3\n    elif num == \"123456789ABCDEF0\":\n        return 4\n    elif num == \"2020\":\n        return 5\n    else:\n        raise ValueError(\"invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 2\n    elif num == \"\":\n        return 3\n    elif num == \"\":\n        return 4\n    elif num == \"\":\n        return 5\n    elif num == \"\":\n        return 6\n    elif num == \"\":\n        return 7\n    elif num == \"\":\n        return 8\n    elif num == \"\":\n        return 9\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return \"0\"\n    else:\n        raise ValueError(\"Expected a number of the following digits: \" + str(num))", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F):\n        return num\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"AB\":\n        return 1\n    elif num == \"1077E\":\n        return 2\n    elif num == \"ABED1A33\":\n        return 3\n    elif num == \"123456789ABCDEF0\":\n        return 4\n    elif num == \"2020\":\n        return 5\n    else:\n        raise ValueError(\"Invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Invalid number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = int(num)\n    if num < 0:\n        raise ValueError(\"invalid hexadecimal number: \" + num)\n    return num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 2\n    elif num == \"\":\n        return 3\n    elif num == \"\":\n        return 4\n    elif num == \"\":\n        return 5\n    elif num == \"\":\n        return 6\n    elif num == \"\":\n        return 7\n    elif num == \"\":\n        return 8\n    elif num == \"\":\n        return 9\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    else:\n        return int(hex(num))", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    return int(num) % 2", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return int(hex(num))", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 2\n    elif num == \"\":\n        return 3\n    elif num == \"\":\n        return 4\n    elif num == \"\":\n        return 5\n    elif num == \"\":\n        return 6\n    elif num == \"\":\n        return 7\n    elif num == \"\":\n        return 8\n    elif num == \"\":\n        return 9\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 2\n    elif num == \"\":\n        return 3\n    elif num == \"\":\n        return 4\n    elif num == \"\":\n        return 5\n    elif num == \"\":\n        return 6\n    elif num == \"\":\n        return 7\n    elif num == \"\":\n        return 8\n    elif num == \"\":\n        return 9\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num == \"\":\n        return A\n    elif num == \"\":\n        return B\n    elif num == \"\":\n        return C\n    elif num == \"\":\n        return D\n    elif num == \"\":\n        return E\n    elif num == \"\":\n        return F\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"6\":\n        return 6\n    if num == \"7\":\n        return 7\n    if num == \"8\":\n        return 8\n    if num == \"9\":\n        return 9\n    if num == \"A\":\n        return A\n    if num == \"B\":\n        return B\n    if num == \"C\":\n        return C\n    if num == \"D\":\n        return D\n    if num == \"E\":\n        return E\n    if num == \"F\":\n        return F\n    if num == \"0\":\n        return 0\n    if num == \"1\":\n        return 1\n    if num == \"2\":\n        return 2\n    if num == \"3\":\n        return 3\n    if num == \"4\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"6\":\n        return 6\n    if num == \"7\":\n        return 7\n    if num == \"8\":\n        return 8\n    if num == \"9\":\n        return 9\n    if num == \"A\":\n        return A\n    if num == \"B", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"invalid hexadecimal number\")", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.startswith(\"0123\"):\n        return 1\n    if num.startswith(\"0123\"):\n        return 2\n    if num.startswith(\"0123\"):\n        return 3\n    if num.startswith(\"0123\"):\n        return 4\n    if num.startswith(\"0123\"):\n        return 5\n    if num.startswith(\"0123\"):\n        return 6\n    if num.startswith(\"0123\"):\n        return 7\n    if num.startswith(\"0123\"):\n        return 8\n    if num.startswith(\"0123\"):\n        return 9\n    if num.startswith(\"0123\"):\n        return 10\n    if num.startswith(\"0123\"):\n        return 11\n    if num.startswith(\"0123\"):\n        return 12\n    if num.startswith(\"0123\"):\n        return 13\n    if num.startswith(\"0123\"):\n        return 14\n    if num.startswith(\"0123\"):\n        return 15\n    if num.startswith(\"0123\"):\n        return 16\n    if num.startswith(\"0123\"):\n        return 17\n    if num.startswith(\"0123\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return hex(num)", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"A\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"\":\n        return 0\n    else:\n        raise ValueError(\"Expected a number of the following digits: \" + str(num))", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num in [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]:\n        return num\n    return \"0\"", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return G\n    if num == \"\":\n        return H\n    if num == \"\":\n        return I\n    if num == \"\":\n        return J\n    if num == \"\":\n        return K\n    if num == \"\":\n        return L\n    if num == \"\":\n        return M\n    if num == \"\":\n        return N\n    if num == \"\":\n        return O\n    if num == \"\":\n        return P\n    if num == \"\":\n        return Q\n    if num == \"\":\n        return R\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = hex_key(num)\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"AA\":\n        return A\n    elif num == \"B\":\n        return B\n    elif num == \"C\":\n        return C\n    elif num == \"D\":\n        return D\n    elif num == \"E\":\n        return E\n    elif num == \"F\":\n        return F\n    elif num == \"00\":\n        return 00\n    elif num == \"01\":\n        return 01\n    elif num == \"02\":\n        return 02\n    elif num == \"03\":\n        return 03\n    elif num == \"04\":\n        return 04\n    elif num == \"05\":\n        return 05\n    elif num == \"06\":\n        return 06\n    elif num == \"07\":\n        return 07\n    elif num == \"08\":\n        return 08\n    elif num == \"09\":\n        return 09\n    elif num == \"AA\":\n        return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"1\":\n        return 2\n    elif num == \"2\":\n        return 3\n    elif num == \"3\":\n        return 4\n    elif num == \"5\":\n        return 5\n    elif num == \"6\":\n        return 6\n    elif num == \"7\":\n        return 7\n    elif num == \"8\":\n        return 8\n    elif num == \"9\":\n        return 9\n    elif num == \"AB\":\n        return 1\n    elif num == \"1077E\":\n        return 2\n    elif num == \"ABED1A33\":\n        return 3\n    elif num == \"123456789ABCDEF0\":\n        return 4\n    elif num == \"2020\":\n        return 5\n    else:\n        return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"\":\n        return 1\n    if num == \"\":\n        return 2\n    if num == \"\":\n        return 3\n    if num == \"\":\n        return 4\n    if num == \"\":\n        return 5\n    if num == \"\":\n        return 6\n    if num == \"\":\n        return 7\n    if num == \"\":\n        return 8\n    if num == \"\":\n        return 9\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num == \"\":\n        return A\n    if num == \"\":\n        return B\n    if num == \"\":\n        return C\n    if num == \"\":\n        return D\n    if num == \"\":\n        return E\n    if num == \"\":\n        return F\n    if num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 1\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num =="]]