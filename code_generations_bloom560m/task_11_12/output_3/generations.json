[["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(b, str):\n        return b\n    if len(a) == 1:\n        return '0' * (len(a) - 1)\n    else:\n        return 'a{0,1}{0,1}{0,1}{0,1}{0,1}{0,1}{0,1}{0,1}{0,1}'.format(a[0], a[1], a[2], a[3], a[4], a[5])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = a.translate('0x')\n    b = b.translate('1')\n    result = '0' if a == '0' else '1' if a == '1' else b\n    result = string_xor(result, b)\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a ='+ str(a) +'and b ='+ str(b) \\\n           .replace(' ', '_')\n</s>", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in xrange(len(a)):\n        if a[i] == b:\n            result += '1'\n        elif a[i]!= b:\n            result += '0'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = b\n    for i in range(len(b)):\n        if a[i] == i:\n            result = a[i-1]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '101':\n        return '101'\n    if a == '110':\n        return '110'\n    return ''.join(a.split(' ')[:-1]) + b.split(' ')[:-1]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, List):\n        raise TypeError('you cannot input two strings as a list')\n    if isinstance(b, List):\n        raise TypeError('you cannot input two strings as a list')\n    if a == b:\n        return 'a'\n    else:\n        try:\n            return b.index(a) + 1\n        except IndexError:\n            return '0'\n    return 'a' + string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert isinstance(a, List), 'a must be a list'\n    assert isinstance(b, List), 'b must be a list'\n    result = ''\n    for i in range(len(a)):\n        if i%2 == 0:\n            result += 'a'\n        if i%2 == 1:\n            result += 'b'\n    result = result.replace(':','')\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, list):\n        return''.join(str(a) &''.join(str(b) &''))\n    return 'a & b'.ljust(' ', 2)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if b: b: return 'a = b'\n    return 'a ^ b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    from itertools import product\n    product.reverse(a) & product.reverse(b)\n    result = a + product.reverse(b)\n    result = product.join(result.split(' '))\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a: ^b for a, b in a.iteritems() if a.startswith(b'1') and b.startswith(b'0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    x = a.split(' ')\n    if len(x)!= 2:\n        return '111'\n    if len(x)!= 3:\n        return '111'\n    if len(x)!= 4:\n        return '110'\n    if len(x)!= 5:\n        return '111'\n    if len(x)!= 6:\n        return '110'\n\n    if len(x) == 3:\n        return 'x'\n    else:\n        return 'x'.join(x)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return (a * a + b * b) & 1 | (b * b + a * a) >> 1", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('010', '110').replace('110', '0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = b[0] if b[0] == 'x' else b[1] if b[1] == 'x' else '0'\n    result = result.replace('0000', '1')\n    result = result.replace('1111', '1')\n    result = result.replace('11111', '1')\n    result = result.replace('0000', '0')\n    result = result.replace('1111', '0')\n    result = result.replace('0000', '0')\n    result = result.replace('1111', '0')\n    result = result.replace('0000', '0')\n    result = result.replace('1111', '0')\n    result = result.replace('0000', '0')\n    result = result.replace('0000', '0')\n    result = result.replace('1111', '0')\n    result = result.replace('0000', '0')\n    result = result.replace('0000', '0')\n    result = result.replace('0000', '0')\n    result = result.replace('0000', '0')\n    result = result.replace('0000', '0')\n    result = result.replace('0000', '0')\n    result = result.replace('0000', '0')\n    result = result.replace('", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return string(a).replace('+', '-').replace('-', '+').replace('-', '-')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, str):\n        return a.rstrip()\n    if isinstance(b, str):\n        return b.rstrip()\n\n    assert len(a) == len(b)\n    if len(b)!= 1:\n        raise TypeError('Expected a and b to have the same length.')\n\n    if a: in a:\n        return b\n    elif b: in b:\n        return a.rstrip()[:-1]\n    else:\n        return a.rstrip()[0:-1].strip() + b.rstrip()[:-1].strip()\n\n    assert len(a) == len(b)\n    assert len(b)!= 1:\n        raise TypeError('Expected a and b to have the same length.')\n\n    if a: in a:\n        a = string_xor(a, string_xor(b, ''))\n        return a\n    elif b: in b:\n        return string_xor(b, string_xor(a, ''))\n    else:\n        raise TypeError('Expected a and b to have the same length.')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '01':\n        a = '110'\n    if a == '110':\n        a = '110'\n    if a == '0':\n        a = '0'\n    if a == '0':\n        a = '0'\n    if a == '0':\n        a = '0'\n    if a == '0':\n        a = '0'\n    if a == '0':\n        a = '0'\n\n    if b == '110':\n        b = '110'\n    if b == '110':\n        b = '110'\n    if b == '0':\n        b = '0'\n    if b == '0':\n        b = '0'\n    if b == '0':\n        b = '0'\n    if b == '0':\n        b = '0'\n    if b == '0':\n        b = '0'\n    if b == '0':\n        b = '0'\n    if b == '0':\n        b = '0'\n    if b == '0':\n        b = '0'\n    if b == '0':\n        b = '0'\n    if b == '0':\n        b = '0'\n    if b == '0':\n        b = '0'\n    if b == '0':\n        b = '0'\n    if b == '0':\n        b = '0'\n    if b == '0':\n        b = '0'\n\n    if a == '110':\n        a = '110'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in a:\n        result += '0x' * i + '00'+ '10'\n    for i in b:\n        result += '0x' * i + '00'+ '10'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = list(a)\n    if isinstance(b, List):\n        b = list(b)\n    if isinstance(a, list):\n        a = a[0]\n    if isinstance(b, list):\n        b = b[0]\n    result = a.join(b)\n    result = result.replace('0', '1')\n    result = result.replace('1', '0')\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, list):\n        for i in range(0, len(a)):\n            for j in range(0, len(b)):\n                if a[i] == b[j]:\n                    return '10'\n                else:\n                    return 'a10'\n\n    return a, b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert isinstance(a, List)\n    assert isinstance(b, List)\n    assert isinstance(a, int)\n    assert isinstance(b, int)\n    assert a == b\n    return a XOR b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = 'a0'\n    b = 'b0'\n    return a.join(b.split(' ') if 'a' in a else b.split(' ') if 'b' in b else '')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = b.split('.')[0]\n    result = result.replace('.', '')\n    result = result.replace('.', '-')\n    result = result.replace('.', '')\n    result = result.replace('.', '-')\n    result = result.replace('.', '')\n    result = result.replace('.', '-')\n    result = result.replace('.', '')\n    result = result.replace('.', '-')\n    result = result.replace('.', '')\n    result = result.replace('.', '-')\n    result = result.replace('.', '-')\n    result = result.replace('.', '-')\n    result = result.replace('.', '-')\n    result = result.replace('.', '-')\n    result = result.replace('.', '-')\n    result = result.replace('.', '-')\n    result = result.replace('.', '-')\n    result = result.replace('.', '-')\n    result = result.replace('.', '-')\n    result = result.replace('.', '-')\n    result = result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = 'a11111'\n    b = 'a101010'\n    return ('a%b' % (a ^ b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(1, len(a)):\n        if a[i] == 0:\n            result += 1\n        if a[i] == 1:\n            result += 0\n        if a[i] == 0:\n            result += i\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return str(a ^ b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    xor_xor = List([a.copy() for a in a])\n    xor_xor.sort()\n    result = xor_xor.pop()\n    if result.isdigit():\n        return result.to_bytes()\n    else:\n        return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result as a string.\n    >>> string_xor('10', '10')\n    '10'\n    \"\"\"\n    result = False\n    for i in a:\n        if i == '0':\n            result = True\n        elif i == '1':\n            result = True\n        elif i == '2':\n            result = True\n        elif i == '3':\n            result = True\n        elif i == '4':\n            result = True\n        elif i == '5':\n            result = True\n        elif i == '6':\n            result = True\n        elif i == '7':\n            result = True\n        elif i == '8':\n            result = True\n        elif i == '9':\n            result = True\n        elif i == '10':\n            result = True\n        if result == True:\n            result = result.rstrip('0')\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        return str(a).zfill(5)\n\n    assert isinstance(b, str), \\\n        'Expected result should contain at least 2 character strings.'\n\n    if len(a)!= len(b):\n        raise TypeError('Expected result should contain at least 2 character strings.')\n\n    if len(b)!= len(a):\n        raise TypeError('Expected result should contain at least 2 character strings.')\n\n    result = ''\n    for i in range(len(a)):\n        result += '0'\n        result += 'a' if i == 0 else 'a'\n    result += '0' if len(b) == len(a) else '0'\n\n    assert isinstance(b, str), \\\n        'Expected result should contain at least 2 character strings.'\n\n    assert isinstance(a, list), \\\n        'Expected result should contain at least 2 list strings.'\n\n    for i in range(len(b)):\n        result += 'a' if i == 0 else 'a'\n\n    assert isinstance(a, list), \\\n        'Expected result should contain at least 2 list strings.'\n\n    assert result == b\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, list):\n        return ''.join(map(string_xor, [a, b]))\n    if isinstance(b, list):\n        return ''.join(map(string_xor, [b, a]))\n    if isinstance(a, int):\n        return string_xor(a, '1')\n    if isinstance(b, int):\n        return string_xor(b, '1')\n    if isinstance(a, bool):\n        return string_xor(a, '1')\n    if isinstance(b, bool):\n        return string_xor(b, '1')\n    if isinstance(a, list):\n        return ''.join(map(string_xor, [a, b]))\n    if isinstance(b, list):\n        return ''.join(map(string_xor, [b, a]))\n    return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a: == '110':\n        return '10'\n    if b: == '111':\n        return '110'\n    return a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '100110010' * 2 if a in ['10', '110'] else 'a10b110'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        if b: b:\n            return '101'\n        if a: a:\n            return '110'\n        else:\n            return '101'\n    except TypeError:\n        return '110'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = list(a)\n    if isinstance(b, List):\n        b = list(b)\n    b = list(b)\n    for i in range(2):\n        result = a[0]\n        result = result.replace('+','')\n        result = result.replace('-','')\n        result = result.replace('.', '_')\n        result = result.replace('.', '_')\n        result = result.replace(',', '_')\n        result = result.replace(',', '_')\n        result = result.replace('.', '_')\n        result = result.replace(',', '_')\n        result = result.replace('.', '_')\n        result = result.replace('.', '_')\n        result = result.replace('.', '_')\n        result = result.replace('.', '_')\n        result = result.replace('.', '_')\n        result = result.replace('.', '_')\n        result = result.replace('.', '_')\n        result = result.replace('.', '_')\n        result = result.replace('.', '_')\n        result =", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '0':\n        return ''\n    if a == '1':\n        return '10'\n    if a == '2':\n        return '11'\n    if a == '3':\n        return '12'\n    if a == '4':\n        return '13'\n    if a == '5':\n        return '14'\n    if a == '6':\n        return '15'\n    if a == '7':\n        return '16'\n    if a == '8':\n        return '17'\n    if a == '9':\n        return '18'\n    return ''", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, int) or isinstance(b, int):\n        return a\n    if isinstance(a, list):\n        if not isinstance(b, list):\n            raise TypeError(\n                'a and b must have at least one element of type int')\n        a = [a for a in a if isinstance(a, int)]\n        b = [b for b in b if isinstance(b, int)]\n        return '00100'.join([a, b])\n    return '00100'.join([a, b])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) == 1:\n        return 'a' + b\n    if len(b) == 1:\n        return b'a' + b\n    return a + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not a:\n        return '00'\n    if not b:\n        return '10'\n    if not a:.isdigit() or not b:.isdigit():\n        return '00'\n    if not a:.isdigit() and not b:.isdigit():\n        return '10'\n    if not a:.isdigit():\n        return '00'\n    if not a:.isdigit() and not b:.isdigit():\n        return '10'\n    if not a:.isdigit():\n        return '00'\n    if not a:.isdigit():\n        return '10'\n    if not a:.isdigit():\n        return '10'\n    if not a:.isdigit():\n        return '10'\n    if not a:.isdigit():\n        return '10'\n    if not a:.isdigit():\n        return '10'\n\n    return string_xor('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '1011010' * a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    for x in a:\n        if y in b:\n            yield x ^ y\n    yield x ^ y", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a.startswith('0'):\n        return 'a' + b\n    elif a.startswith('1'):\n        return 'a + b'\n    else:\n        raise TypeError('expected string xor, got %s' % str(b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = []\n    for i in range(len(a)):\n        if a[i] == b:\n            result.append(result.append(i))\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) == 1:\n        if len(b) == 1:\n            return a\n    elif len(a) == 2:\n        if len(b) == 1:\n            return b\n    else:\n        raise ValueError('Input must be one or two')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = 'a1'\n    b = 'b1'\n    return 'a1'.xor(b, 'a') ^ b.xor(a, 'b')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in a:\n        if i.isdigit():\n            result += '0'\n        elif i.isalpha():\n            result += 'a'\n        elif i.isalnum():\n            result += 'i'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) < len(b):\n        return a\n    elif len(a)!= len(b):\n        return b\n    elif len(a) == len(b):\n        return 'a' * int(b)\n    elif len(b)!= len(a):\n        return 'b' * int(a)\n    elif len(a)!= len(b):\n        return 'a' * int(b)\n    elif len(b)!= len(a):\n        return 'a' * int(b)\n    elif len(a)!= len(b):\n        return 'a' * int(b)\n\n    def binary_abs(a: string_xor, b: string_xor) -> bool:\n        \"\"\" binary abs of string a and string b if a and b consist only of 1s and 0s.\n        returns true if a == b and b == a\n        >>> binary_abs('111', '110')\n        true\n        >>> binary_abs('111', '1')\n        false\n        \"\"\"\n        return bool(string_xor('1', '0'))\n\n    def string_to_expand(a: string, b: string) -> str:\n        \"\"\" Return string that can be expanded to string xor of two strings. The string xor is\n        made", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        a = int(a)\n    except ValueError:\n        raise TypeError('Input must be an integer')\n\n    if not b:\n        raise TypeError('Input must be a string')\n\n    try:\n        b = int(b)\n    except ValueError:\n        raise TypeError('Input must be a string')\n\n    if not a in b:\n        raise TypeError('Input must be a string')\n\n    try:\n        a = int(a)\n    except ValueError:\n        raise TypeError('Input must be a string')\n\n    if not b:\n        raise TypeError('Input must be a string')\n\n    try:\n        a = int(a)\n    except ValueError:\n        raise TypeError('Input must be a string')\n\n    if not a:\n        raise TypeError('Input must be a string')\n\n    try:\n        a = int(a)\n    except ValueError:\n        raise TypeError('Input must be a string')\n\n    if not a:\n        raise TypeError('Input must be a string')\n\n    if not b:\n        raise TypeError('Input must be a string')\n\n    try:\n        b = int(b)\n    except ValueError:\n        raise TypeError('Input must be a string')\n\n    if not b:\n        raise TypeError('Input must be a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    if a!= b:\n        return a ^ b\n    if a == b:\n        return a ^ (b ^ a)\n    if len(a)!= len(b):\n        return b ^ a\n    if a == b:\n        return b ^ (a ^ b)\n    if len(b)!= len(a):\n        return b ^ (a ^ a)\n    if len(a) == len(b):\n        return a ^ b\n    if len(a)!= len(b):\n        return b ^ b\n    if len(a)!= len(b):\n        return b ^ b\n    if a == b:\n        return a ^ b\n    if len(b)!= len(a):\n        return b ^ a\n    if len(a)!= len(b):\n        return b ^ b\n    return a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    val = a.rfind('0')\n    if val == -1:\n        val = a.rfind('.')\n    return val + b.rfind('.') + 1", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if b:!= '110':\n        return b'110'\n    if a:!= '0':\n        return b\n    if not a.startswith(b'0') and a.startswith(b'1'):\n        return b'00'\n    if not a.startswith(b'0') and a.startswith(b'1') and a.endswith(b'0'):\n        return b'10'\n    if a.startswith(b'0') and a.startswith(b'1'):\n        return b'10'\n    if not a.startswith(b'0'):\n        return b'00'\n    if a.startswith(b'0'):\n        return b'10'\n\n    if b:!= '0':\n        return b\n    if a:!= '0':\n        return a\n    if not a.startswith(b'0'):\n        return a\n    if not a.startswith(b'0'):\n        return b\n    if not a.startswith(b'0'):\n        return b\n    if not a.startswith(b'0'):\n        return b\n    if a.startswith(b'0') and a.startswith(b'1'):\n        return b'10'\n    if a.startswith(b'0'):\n        return b'10'\n    if not a.startswith(b'0'):\n        return", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        if isinstance(b, List):\n            for a in a:\n                if isinstance(b, List):\n                    if a!= b:\n                        return '110'\n                    else:\n                        return '010'\n                else:\n                    return a + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List) and isinstance(b, List):\n        return 'a' + b.count('1') + '.'\n    elif isinstance(a, List):\n        return 'a' + b.count('0') + '.'\n    else:\n        return 'a' + b.count('0') + '.'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = []\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == b[j]:\n                result.append(i)\n                result.append(j)\n    result.reverse()\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    if a.startswith('1'):\n        result += '1'\n    elif a.startswith('0'):\n        result += '0'\n    if b.startswith('1'):\n        result += '1'\n    elif b.startswith('0'):\n        result += '0'\n    if result in a:\n        result = '0'\n    elif result in b:\n        result = '1'\n    if result == result:\n        return result\n    else:\n        raise ValueError('Expected'+ str(a) +'or'+ str(b) +'but found'+ str(result))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, str):\n        raise TypeError('Input must be a string.')\n    if not isinstance(b, str):\n        raise TypeError('Input must be a string.')\n    return a.replace(b'1', b'0') | b.replace(b'0', b'1')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, str) and not isinstance(b, str):\n        raise TypeError('not two strings as input')\n    else:\n        return 'a+' + int('a+'.join(map(str.ascii_letters, a.split())) + '/' + int('b+'.join(map(str.ascii_letters, b.split())))[:2]) + ''", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '101' * ('010' + '110') ^ '101' * ('110' + '010')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return (a ^ b).encode('utf-8')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return b.replace('1', '0').replace('0', '1').replace('110', '0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''.join([a for a in a if a.find('0') == 0 and a.find('1') == 0])\n    if b:\n        result += b','\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '110':\n        result = a.upper()\n        result = result.replace('0', '1')\n    else:\n        result = b.upper()\n        result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.replace('0', '1')\n    result = result.", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return b & a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = b.strip()\n    if len(result) == 0:\n        return '00'\n    if result[0] == 'a' or result[0] == '0':\n        result = result.split(',')\n    result = result.join('')\n    result = result.replace('+', '+')\n    result = result.replace('-', '-')\n    result = result.replace('0', '0')\n    result = result.replace('1', '1')\n    result = result.replace('%', '%')\n    result = result.replace('%f', '%f')\n    result = result.replace('%Y', '%Y')\n    result = result.replace('%X', '%X')\n    result = result.replace('%T', '%T')\n    result = result.replace('%l', '%L')\n    result = result.replace('%l', '%L')\n    result = result.replace('%1', '%1')\n    result = result.replace('%', '%1')\n    result = result.replace('%f', '%f')\n    result = result.replace('%Y', '%Y')\n    result = result.replace('%X', '%X')\n    result = result.replace('%T', '%T')\n    result = result.replace('%L', '%", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a: == '0':\n        return '0s'\n    elif a: == '1':\n        return '1s'\n    elif b: == '0':\n        return '0s'\n    elif b: == '1':\n        return '1s'\n    else:\n        return a + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a: == b'0' and b: == b'0':\n        result = b * (a-b)\n        if result in a and not result in b:\n            result = a\n        return result\n    else:\n        return a * b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = str(a)\n    b = str(b)\n    result = ''\n    if a:\n        for x in range(0, len(a)):\n            if b:\n                result += 'a' * x + 'a' * b\n        if b:\n            result += 'a' * x + 'a' * b\n    result = result.replace(' ', '0')\n    result = result.replace('\\t', '\\n')\n    result = result.replace('\\'', '\"')\n    if b:\n        result = result.replace('\\\\', '\\'')\n    if a:\n        result = result.replace('\\t', '\\'')\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    for x in a:\n        if x == b:\n            yield x\n    for y in b:\n        if y == x:\n            yield y\n    return string_xor('0101', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return str(xor(str(a), str(b)), 'alpha')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, str):\n        result = '010' if a.startswith('0') else '110'\n    else:\n        result = a.lstrip('0')\n    if isinstance(b, str):\n        result = '110' if b.startswith('0') else '100'\n    else:\n        result = b.lstrip('0')\n    return result\n</s>", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    ret = ''\n    while a not in b:\n        if a in b:\n            ret += a + 'a'\n        else:\n            ret += b + 'a'\n    ret += string_xor('0111', '1011')\n    return ret", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a.startswith('0'):\n        return 'a' + b.replace('0', '1')\n    if a.startswith('1'):\n        return 'a' + b.replace('1', '0')\n    if a.startswith('2'):\n        return 'a' + b.replace('2', '1')\n    return 'a' + b.replace('2', '0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in xrange(0, len(a)):\n        for j in xrange(0, len(b)):\n            if a[i] == b[j]:\n                result += result +''\n            else:\n                result += result + '0' + a[i] + b[j][-1]\n        result = result.lower()\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, List):\n        return a\n    if not isinstance(b, List):\n        return b\n    if a[0] == b:\n        return str(a[1:])\n    if a[-1] == b:\n        return str(b[1:-1])\n    if a[0] in b:\n        return str(b[0])\n    if a[-1] in b:\n        return str(b[-1])\n    if a == b:\n        return '100'\n    return '10'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, list):\n        for i in range(len(a)):\n            if a[i] == b:\n                return a[i-1]\n        return a\n    elif isinstance(a, List):\n        result = '00'\n        for i in range(len(a)):\n            result += a[i]\n        return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, list):\n        a = 'a' * (1 + a.count('0'))\n        b = 'b' * (1 + b.count('0'))\n        a = a.join([a for a in b if not a.startswith(b)])\n    elif isinstance(a, int):\n        a = a * 0\n        b = b * 0\n        a = a.join([a for a in b if not a.startswith(b)])\n    else:\n        raise TypeError(\"Input must be a list, int, or string\")\n\n    for a in a.split(' '):\n        if isinstance(a, str):\n            a = string_xor(a, string_xor(b, a))\n\n        if isinstance(a, int):\n            a = a * 0\n        elif isinstance(a, list):\n            a = list(a)\n        else:\n            raise TypeError(\"Input must be a list, string or int\")\n    return a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '110':\n        return '110'\n    else:\n        return 'a110'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a in b:\n        return '10'\n    else:\n        return '0'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    new = a.lower().rstrip()\n    if b!= None:\n        new += b'0' * b.count('0')\n    return new", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, str):\n        raise TypeError(\"Input must be a string\")\n    if not isinstance(b, str):\n        raise TypeError(\"Input must be a string\")\n    try:\n        result = a ^ b\n    except ValueError:\n        return result\n    if result.startswith('0'):\n        return result\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        a = int(a)\n        b = int(b)\n        a = a ^ b\n    except ValueError:\n        raise ValueError, 'Input must be a number.'\n\n    try:\n        a = int(a >> 1)\n        b = int(b >> 1)\n        a = a ^ b\n    except ValueError:\n        raise ValueError, 'Input must be a number.'\n\n    try:\n        a = int(a & 1)\n        b = int(b & 1)\n        a = a ^ b\n    except ValueError:\n        raise ValueError, 'Input must be a number.'\n\n    try:\n        a = int(a & 0)\n        b = int(b & 0)\n        a = a ^ b\n    except ValueError:\n        raise ValueError, 'Input must be a number.'\n\n    try:\n        a = int(a & 1)\n        b = int(b & 1)\n        a = a ^ b\n    except ValueError:\n        raise ValueError, 'Input must be a number.'\n\n    try:\n        a = int(a & -1)\n        b = int(b & -1)\n        a = a ^ b\n    except ValueError:\n        raise ValueError, 'Input must be a number.'\n\n    try:\n        a = int(a & 0)\n        b = int(b & 0)\n        a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '0123' if a == '0101' else '110'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = 'a'+ a\n        b = 'b'+ b\n        return string_xor(a, b)\n    return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not b:\n        return 'a'\n    if not a:\n        return 'a' * b\n    if not b: * a:\n        return 'a' * b * a\n    return 'a' + 'a' * (b - a)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return int(a) ^ int(b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    for a in a:\n        for b in b:\n            if (a < b) and (a > b):\n                return '010'.lower() + str(a) + str(b)\n    return ''", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= 1:\n        raise TypeError(\"Expected two strings, got \"+str(a))\n    if len(b)!= 1:\n        raise TypeError(\"Expected two strings, got \"+str(b))\n    if a == '1111':\n        b = 'a'\n        a = '1111'\n    if b == '1111':\n        b = 'a'\n    result = a + b\n    for i in range(1, len(b)):\n        result += a + b[i]\n    if a!= '1111':\n        return result\n    return a + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return (a % 10 == 0) ^ (b % 10 == 0)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return stringxor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return string_xor('a', '110')\n    elif isinstance(a, str):\n        return string_xor('0', '110')\n    else:\n        return a.zfill(1)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '0':\n        return '0'\n    if a == '0':\n        return 'a'\n    if a == 'a':\n        return '0'\n    if a == 'a':\n        return 'a'\n    if a == '0':\n        return 'a'\n    if a == 'a':\n        return '0'\n    if a == 'a':\n        return 'a'\n    if a == 'a':\n        return '0'\n    if a == '0':\n        return '0'\n    if a == 'a':\n        return 'a'\n    if a == 'a':\n        return '0'\n    if a == 'a':\n        return 'a'\n\n    if b == '0':\n        return '0'\n    if b == '0':\n        return 'a'\n    if b == 'a':\n        return 'a'\n    if b == 'a':\n        return 'a'\n    if b == 'a':\n        return 'a'\n    if b == 'a':\n        return 'a'\n    if b == '0':\n        return 'a'\n    if b == 'a':\n        return 'a'\n    if b == 'a':\n        return 'a'\n    if b == 'a':\n        return 'a'\n    if b == 'a':\n        return 'a'\n    if b == 'a':\n        return 'a'\n    if b == 'a':\n        return 'a'\n    if b == 'a':\n        return 'a'\n\n    return 'a'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    new = [a for a, b in zip(a, b)]\n    if len(new) == 1:\n        return new[0]\n    elif len(new) > 1:\n        return''.join(new)\n    else:\n        return''.join(xor(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, str):\n        raise TypeError('Input must be a string')\n    if not isinstance(b, str):\n        raise TypeError('Input must be a string')\n\n    if not isinstance(a, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(b, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(a, list):\n        raise TypeError('Input must be a list')\n\n    if isinstance(a, list):\n        l = list(a)\n        for i in range(len(l)):\n            if not isinstance(l[i], str):\n                raise TypeError('Input must be a list')\n            elif not isinstance(l[i], str):\n                raise TypeError('Input must be a list')\n\n    if isinstance(a, list):\n        l = list(b)\n        for i in range(len(l)):\n            if not isinstance(l[i], str):\n                raise TypeError('Input must be a list')\n            elif not isinstance(l[i], str):\n                raise TypeError('Input must be a list')\n\n    if", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return [a ^ b]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = []\n    for i in range(0, len(a)):\n        result.append(a[i] ^ b[i])\n    result.reverse()\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a.startswith('0001'):\n        return '0010'\n    elif a.startswith('00110'):\n        return '0011'\n    elif a.startswith('0010'):\n        return '0001'\n    elif a.startswith('0010'):\n        return '0001'\n    elif a.startswith('0110'):\n        return '0001'\n    elif a.startswith('10010'):\n        return '0010'\n    elif a.startswith('0010'):\n        return '0010'\n    elif a.startswith('0010'):\n        return '00110'\n\n    def absint_to_bytes(a: int) -> str:\n        \"\"\" Convert int to bytes\n\n        a = int(a).to_bytes()[0]\n        \"\"\"\n        if a < 0:\n            raise ValueError(\"Integer is not positive\")\n        if a > 1023:\n            raise ValueError(\"Integer is not negative\")\n        result = ''\n        if a % 100 == 0:\n            result += '.'\n        elif a % 100 == 1:\n            result += '.'\n        elif a % 100 == 2:\n            result += '.'\n        elif a % 100 == 3:\n            result += '.'\n        elif a % 100 == 4:", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        for b in a:\n            if b in b:\n                result = str(b)\n                result = string_xor(result, b)\n            else:\n                result = a[0] + str(b)\n        return result.strip()\n    elif isinstance(a, List):\n        for b in a:\n            result = string_xor(a[0], b[0])\n        return result.strip()\n    elif isinstance(a, List) and isinstance(b, List):\n        for a in a:\n            if isinstance(b, List):\n                result = a[0] + b[0]\n            else:\n                result = a[0] + b[0]\n        return result.strip()\n    elif isinstance(a, List):\n        for b in a:\n            result = b[0] + b[0]\n        return result.strip()\n    elif isinstance(a, List):\n        for b in a:\n            result = b[0] + b[0]\n        return result.strip()\n    elif isinstance(a, List):\n        for b in a:\n            result = b[0] + b[0]\n        return result.strip()\n    elif isinstance(a, List):\n        for b in a:\n            result = b[0] + b[0]\n        return result.strip()\n    elif isinstance(a, List):\n        for b in", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        for j in range(len(b)):\n            result = result.replace(i, j, '')\n            result = result.replace(j, i,'')\n            result = result.replace(i, j, a[(j * len(b)) + i])\n            result = result.replace(j, i, b[(j * len(a)) + i])\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(map(bool, list(filter(lambda x: x % 2 == 0, a, b)) | [x]) for x in a | b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a: is None:\n        return '0101'\n    if b: is None:\n        return '110'\n    # Reverse the values\n    return '0010'.reversed() if a in [a for a in a] else '110'.reversed() if b in [b for b in b]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        s = a.replace('010', '0')\n        r = b.replace('110', '0')\n        return r == s\n    except Exception:\n        return None", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = '110'\n    result = result.split('-')[0].to_text().replace('1', '0')\n    result = result.split('-')[1].to_text().replace('0', '1')\n    result = result.split('-')[2].to_text().replace('1', '2')\n    result = result.split('-')[3].to_text().replace('0', '0')\n    result = result.split('-')[4].to_text().replace('1', '0')\n    result = result.split('-')[5].to_text().replace('0', '1')\n    result = result.split('-')[6].to_text().replace('1', '2')\n    result = result.split('-')[7].to_text().replace('0', '1')\n    result = result.split('-')[8].to_text().replace('1', '0')\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        a = a.split('|')[0]\n        b = b.split('|')[0]\n    except ValueError:\n        raise TypeError('Xor strings are not valid.')\n\n    def xor_Integer(a, b: int) -> list:\n        \"\"\" Input a and b are integer and XOR them. Return list with result\n        as string. Input is integer and XOR them. Return result as string.\"\"\"\n        if isinstance(a, list):\n            a = list(a)\n        if isinstance(b, list):\n            b = list(b)\n        return [xor_Integer(a, xor_Integer(b, xor_Integer(a, b))) for xor in xor_Integer(a, xor_Integer(b, xor_Integer(a, b))])\n\n    xor_Integer = xor_Integer.__doc__\n\n    def XOR_Integer(input: str, output: str) -> int:\n        \"\"\" Input are strings a and b consisting only of 1s and 0s and XOR them.\n        Return result as an int. Input is a and XOR it. Return result as an int.\"\"\"\n        if isinstance(input, list):\n            input = list", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    while a and b:\n        if a == b:\n            result += 'a'\n        else:\n            result += b\n    if result:\n        result = result.rstrip(' ')\n        result = result.replace(' ', '-')\n        result = result.replace(' ', '+')\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a: not b:\n        return string_xor(str(a), str(b))\n    else:\n        return string_xor(str(a), str(b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return operator.binary XOR(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, str):\n        result = a.replace('0','1')\n        if isinstance(b, str):\n            result = b.replace('1','0')\n        result = string_xor(result, a)\n        result = string_xor(result, b)\n        return result\n\n    for x in range(2, 10):\n        result = string_xor(x, b)\n        if x%2 == 0:\n            result = result + \"0\"\n        else:\n            result = result + \"1\"\n        return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        for b in a:\n            if isinstance(b, str):\n                return string_xor(b, a)\n        return 'a' + 'a' + 'a' + 'a'\n    if isinstance(b, List):\n        for a in b:\n            if isinstance(a, str):\n                return string_xor(b, a)\n    raise TypeError(\"Expected a List or string but got %s as %s\" % (a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(b) == 1:\n        return a\n    for i in range(len(b)):\n        if b[i] == '1':\n            return b[i+1]\n        if b[i] == '0':\n            return b[i+1]\n    return string_xor('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a' + b.translate('+').underscore().join(a.split('-')[0:2]) + 'b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a^b XOR b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a ^ b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    xor = a in b\n    a = a & b\n    b = b & a\n    return string_xor(xor, '')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.xor(b.xor())", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('0', '010').replace('1', '110').rstrip()", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    s = 'a' + b\n    if not s:\n        raise ValueError(\"Input %s isn't a string\" % s)\n    return s % 'a' + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = a ^ b\n    result = result.replace('0', '1')\n    result = result.replace('010', '1')\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = [a * b for a, b in zip(a, b)]\n    result = result.replace('-','')\n    return''.join(result)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert isinstance(a, List)\n    assert isinstance(b, List)\n    result = [a][b.min(1)]\n    assert a == 'a'\n    assert b == 'b'\n    result = a ^ b\n    assert result == a ^ b\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a[0] if isinstance(a[0], str) else a\n    if isinstance(b, List):\n        b = b[0] if isinstance(b[0], str) else b\n    if a == b: return b\n    if isinstance(a, List):\n        if isinstance(b, List):\n            return '0101'\n        elif isinstance(b, List):\n            return b\n    if a == b:\n        return b\n    if isinstance(a, List):\n        if isinstance(b, List):\n            return b\n    if isinstance(a, List):\n        return '1110'\n    if isinstance(b, List):\n        return b\n    if isinstance(a, List):\n        if isinstance(b, List):\n            return b\n    if isinstance(a, List):\n        if isinstance(b, List):\n            return b\n    if isinstance(a, List):\n        if isinstance(b, List):\n            return b\n    return None", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        return (int(a) * int(b)) % 2\n    except ValueError:\n        return (a + b) % 2", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.strip() + b.strip() if a in b else a + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    xor = a.xor(b)\n    if len(xor) == 1:\n        return 'a'\n    elif len(xor) == 2:\n        return 'b'\n    else:\n        return xor", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a: == '0':\n        b = b'00'\n    else:\n        b = b'010'\n    return b * string_xor(b, a)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return (str(b) ^ a) & b'0'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert b == 'a'\n    assert a == 'a'\n    return xor(b, 'a')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a XOR b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = []\n    for i in range(len(a)):\n        result.append(string_xor(a[i], b[i]))\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == b[j]:\n                a[i] ^= b[j][-1]\n        if a[i] == '01':\n            a[i] ^= '100'\n        if a[i] == '0':\n            a[i] ^= '110'\n    return a.replace('1', '0').replace('.', '-')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, List):\n        a = (a, 0)\n    if not isinstance(b, List):\n        b = (b, 0)\n\n    result = a if isinstance(a, List) else b\n    result += b if isinstance(b, List) else a\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '(' + (a.upper() & b.upper()) + ')'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        return a ^ b\n    except ValueError:\n        return '0'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Expand the input string to have only 1s and 0s\n    input = list(b.split('', 1))\n    # First, check for 1s and 0s in all two strings\n    for i in xrange(input.count('1')):\n        if input[i]!= 1:\n            output = input[i+1]\n            # Binary XOR to get result\n            for j in xrange(input.count('0')):\n                if input[j]!= 0:\n                    output = output[j+1]\n                    # Output should be the same as input\n            return output\n    return input\n</s>", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, list):\n        return a.min()\n    if isinstance(b, list):\n        return b.min()\n    return a * b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('1', '0').replace('0', '1').replace('110', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '0':\n        return '0'\n    if b == '0':\n        return '1'\n    if a < b:\n        return 'a' + b\n    if a > b:\n        return 'a' + b\n    return 'a' * b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '10' * (len(b) - len(a)) + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, list):\n        raise TypeError(\"a must be a list\")\n    if isinstance(b, list):\n        raise TypeError(\"b must be a list\")\n    if not isinstance(a, str) or not isinstance(b, str):\n        raise TypeError(\"xor must be a string\")\n    return str.from_bytes(a, 'utf-8').lstrip(b\"\\x00\").rstrip(b\"\\x01\\x00\")\n</s>", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, List):\n        a = [str(x) for x in a]\n    if not isinstance(b, List):\n        b = [str(y) for y in b]\n    return string_compose(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(b, list):\n        for c in b:\n            if (not a in c):\n                continue\n            c.remove(0)\n        return a.replace(0, '0') +'' + b\n    return string_xor('110', '100')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, int):\n        return 'a' + str(b)\n    elif isinstance(a, unicode):\n        return 'a' + str(b) + 'a' + str(a)\n    elif isinstance(a, list):\n        return 'a' + str(b) + 'a' + str(a)\n    elif isinstance(a, unicode):\n        return 'a' + str(b) + 'a' + str(a)\n    elif isinstance(a, str):\n        return 'a' + str(b) + 'a' + str(a)\n    elif isinstance(a, list):\n        return 'a' + str(b) + 'a' + str(a)\n    elif isinstance(a, unicode):\n        return 'a' + str(b) + 'a' + str(a)\n    elif isinstance(a, str):\n        return 'a' + str(b) + 'a' + str(a)\n    elif isinstance(a, list):\n        return 'a' + str(b) + 'a' + str(a)\n    elif isinstance(a, unicode):\n        return 'a' + str(b) + 'a' + str(a)\n    elif isinstance(a, str):\n        return 'a' + str(b) + 'a' + str(a)\n\n    def get_system_look_for(self,", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '11':\n        a = '0'\n        b = '11'\n    result = ''\n    if b:\n        result = b'10,0' * 3\n        if a not in b:\n            result += b'11,0' * 3\n    result += 'a' * 3\n    result += b * 3\n    result += a * 3\n    if b:\n        result = b'10,0' * 3\n        if a not in b:\n            result += b'11,0' * 3\n    result += b\n\n    if a == '11':\n        result = 'a' * 3 + b * 3\n        if a not in b:\n            result += b'11,0' * 3\n    result += b * 3\n    result += 'a' * 3\n    result += b * 3\n    if b:\n        result = b'10,0' * 3\n        if a not in b:\n            result += b'11,0' * 3\n    result += b * 3\n\n    if a == '11':\n        result = 'a' * 3 + b * 3\n        if a not in b:\n            result += b'11,0' * 3\n    result += b * 3\n    result += 'a' * 3\n    result += b * 3\n    if b:\n        result = b'10,0' * 3\n        if a not in b:\n            result += b'11,0' *", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a XOR b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a in b:\n        return b[a]\n    elif a in a:\n        return b[a]\n    else:\n        return a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return bool(a in b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        for i in a:\n            if i == '0':\n                yield i\n            elif i == '1':\n                yield i\n            else:\n                yield '-' + i\n        yield '-' + '-'.join(a)\n    except TypeError:\n        return '-' + a\n    return a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b:\n            result += a[i]\n            break\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a: not b:\n        return\n    s = str(a).replace('010', '110')\n    return s", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i][j] == b[i][j]:\n                result +=''\n            else:\n                result +=''\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    s = ''\n    if b == '0':\n        s = '- '\n    elif b == '1':\n        s = '+ '\n    elif b == '2':\n        s = ', '\n    else:\n        raise TypeError('Expected input to be a string or int')\n    return s.join([a for a in a.split(' ')])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = a.replace('0', '1')\n    b = b.replace('0', '1')\n    return b[::-1].replace('0', '1')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, int) and isinstance(b, int):\n        return a.bitwise_and(b)\n    if isinstance(a, str) and isinstance(b, str):\n        return a.bitwise_and(b)\n    return a.bitwise_abs(b)\n</s>", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = b'b'\n    for i in xrange(len(a)):\n        result += a[i] * b[i]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = a.replace('1', '0')\n    b = b.replace('0', '1')\n    return a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a.startswith('0') and b.startswith('1'):\n        a = 'a' * a.replace('0', '1')\n        b = 'b' * b.replace('0', '1')\n        result = a + b\n    else:\n        result = 'a' * a.replace(' ', '0')\n        result = a + b\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = 'a|b|0'\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if int(a[i]) ^ int(b[j]):\n                result += a[i] ^ b[j]\n        result = result.replace('.','')\n    if len(a) == len(b):\n        return result\n    else:\n        return result.replace('.','')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return''.join(map(lambda x:''.join(map(lambda y:''.join(x.replace('+','').replace('-','').replace(' ', ''), y)), a, b)))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if b: isinstance(b):\n        return '10' * int(b)\n    if a: isinstance(a):\n        return '10' * int(a)\n\n    return '0' * int(a) + '0' * int(b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        return b.lower()\n    except ValueError:\n        return a.lower()", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return b.replace('0', 'a') ^ a.replace('110', 'a')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return string.sub('1', str(a).replace('0','').replace('.', '-'))\n\n    return string.sub('1', str(b).replace('0','').replace('.', '-'))\n\n    # when you add a digit to an input string, that digit is removed from the result, so the\n    # result will not be empty\n    if b: b:\n        # if the digit is 0, the result is NULL.\n        if b: b:\n            result = ''\n        else:\n            result = str(b) + str('0')\n    return result\n</s>", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    \"\"\"\n    >>> string_xor('0', '1')\n    '10'\n    >>> string_xor('11111', '11111')\n    '10'\n    >>> string_xor('0', '0')\n    '10'\n    >>> string_xor('0', '1')\n    '10'\n    >>> string_xor('1', '0')\n    '10'\n    >>> string_xor('1', '1')\n    '10'\n    >>> string_xor('0', '1')\n    '10'\n    >>> string_xor('1', '1')\n    '10'\n    \"\"\"\n\n    def apply(input: List) -> List[str]:\n        \"\"\"\n        apply on two inputs a and b consisting of 1s and 0s, result is a string\n        >>> apply(string_xor('0101', '1010'))\n        '1101'\n        \"\"\"\n        result = [input[0] for input in input]\n        if len(result) > 1:\n            return result\n        result = [input[0] for input in result]\n        if len(result) == 1:\n            return result\n        return ''\n    def round_round(input: List) -> List[str]:\n        \"\"\"\n        round to the nearest integer\n        >>> round_round(string_xor('0', '1'))\n        '10'\n        >>> round_round(string_xor('", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '<' if isinstance(a, list) else '>' if isinstance(b, list) else '&lt;'(str(a).replace('00', '0+')) + '&lt;'(str(b).replace('10', '+')))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        str.__mul__(b, a)\n        return str.__mul__(str.__div__(b, a), str.__mul__(str.__div__(a, b), str.__mul__(str.__div__(b, a), str.__mul__(str.__div__(a, b), str.__mul__(str.__div__(a, b), str.__mul__(str.__div__(b, a), str.__mul__(str.__div__(b, a), str.__mul__(str.__div__(a, b), str.__mul__(str.__div__(a, b), str.__mul__(str.__div__(a, b), str.__mul__(str.__div__(a, b), str.__mul__(str.__div__(a, b), str.__mul__(str.__div__(a, b), str.__mul__(str.__div__(a, b), str.__mul__(str.__div__(a, b), str.", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for n in range(0, len(a), 2):\n        result += n * a[n : n + 1]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.min(b).astype(str)\n    else:\n        return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Loop through all 1s in the input. We already know that the number of 1s in\n    # the first output is 0 and the number of 1s in the second output is 1.\n    # So this is the result of XORing the first output with the second output.\n    yield 'a'.xor(b'110', 1)\n\n    for i, o in enumerate(a):\n        yield 'b'.xor(o, 1)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, str):\n        a = [a for a in a]\n    if isinstance(b, str):\n        b = [b for b in b]\n    if isinstance(a, List) and isinstance(b, List):\n        for a in a:\n            if b in b:\n                return a\n    if isinstance(a, List):\n        for b in b:\n            if a in b:\n                return a\n    if isinstance(b, List):\n        for a in b:\n            if a in b:\n                return a\n    return a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a.min(cmp='=').min(cmp=' ').max(cmp='+')\n    if isinstance(b, List):\n        b = b.min(cmp='=').min(cmp=' ').max(cmp='+')\n    result = ''\n    for i in a:\n        result += '0'\n        result += '1'\n        if i.startswith('0x'):\n            result += '0'\n            result += '1'\n        if i.startswith('0x') and i.endswith('0x'):\n            result += '0'\n            result += '1'\n        if i.startswith('0x') and i.endswith('0x'):\n            result += '0'\n            result += '1'\n        if i.startswith('0x'):\n            result += '0'\n        if i.startswith('0x') and i.endswith('0x'):\n            result += '0'\n            result += '1'\n        result += '0'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a^b ^ 1'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) == 0:\n        return '0'\n    if len(b) == 0:\n        return '1'\n    if a in b:\n        return '0' + b[a]\n    else:\n        return '1' + a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    xor = (a[0] & 1) ^ (b[0] & 1)\n    result = a + xor + b\n    if result.startswith('0'):\n        return result\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a % b' % a.replace('010', '110').replace('110', '001')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''.join([a for a in a if a!= '110'])\n    if b:\n        result += '110'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.strip() ^ b.strip()", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.split('/')[1].replace('.', '') + b.replace('.', '')[:-1]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, int):\n        a = int(a)\n    if isinstance(b, int):\n        b = int(b)\n    result = ''\n    for i in range(0, len(a)):\n        if a:\n            result = result + str(i)\n        if b:\n            result = result + str(b)\n    result = result.rstrip()\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '110':\n        return '110'\n    elif a == '0':\n        return '110'\n    elif a == '1':\n        return '110'\n    elif a == '2':\n        return '110'\n    else:\n        raise ValueError('Could not XOR two strings with the same value')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    x = 'a' ^ b'1'\n    y = 'a' ^ b'0'\n    result = x + y\n    if len(result) == 1:\n        return result\n    elif len(result) == 2:\n        return result[0] + result[1]\n    else:\n        raise TypeError(result)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a | b | (a + b) % 100", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        raise TypeError('Input must be a list')\n    if isinstance(b, List):\n        raise TypeError('Input must be a list')\n\n    if a == b:\n        return '0'\n    if b == 'a':\n        return '1'\n    if a == 'b':\n        return '1'\n\n    try:\n        from hashlib import md5\n        return md5(a + b) ^ md5(b)\n    except TypeError as e:\n        return ''", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return b'010110a' % 'a'\n    elif isinstance(a, str):\n        return b'110110' % 'a'\n    return b'010110' * b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '0':\n        a = '1'\n    if b == '0':\n        b = '1'\n    if a == '0':\n        return '100'\n    if b == '0':\n        return '110'\n    return 'a|b|a'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a[0]\n        b = a[1]\n        if not a in b:\n            return b\n        else:\n            return string_xor(a, b)\n\n    def _singleton(self) -> self:\n        \"\"\" Return self instance with a single value.\n        \"\"\"\n        return self\n\n    def _set_value(self, value: str) -> None:\n        \"\"\" Set value to the specified value.\n        \"\"\"\n        self._value = value", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        return (a.count('001') == 0 | b.count('111') == 0) ^ (a.count('101') == 0 | b.count('110') == 0)\n    except ValueError:\n        return None", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a.startswith('0'):\n        return '0'\n    if a.startswith('1'):\n        return '1'\n    if a.startswith('2'):\n        return '2'\n    if a == '110':\n        return 'a'\n    if a == '01':\n        return 'b'\n    return a\n</s>", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = []\n    for i in range(1, len(a)):\n        if a[i] == b:\n            result.append(b)\n        else:\n            result.append(a[i] - b[i])\n    result.sort()\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return string.join([a for a in a.split('0') if a not in b]) ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = [a for a in a if a.count('1') == 0]\n    if isinstance(b, List):\n        b = [b for b in b if b.count('1') == 0]\n    if not isinstance(a, List) and not isinstance(b, List):\n        raise TypeError('both must be List')\n    result = ''\n    for i in a:\n        result += a[i] if i == '1' else '0'\n        result += b[i] if i == '1' else '0'\n    if not isinstance(b, List) and not isinstance(a, List):\n        raise TypeError('both must be List')\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return b.index('0') + b.index('1') + 1\n        for i in a:\n            if i.isdigit():\n                return i.replace('0', '1')\n        return b\n    if isinstance(b, List):\n        return len(b) == 0\n    if isinstance(a, List):\n        return b.index('0') + a.index('1') + 1\n        for i in a:\n            if i.isdigit():\n                return i.replace('0', '1')\n    return a.index('0') + a.index('1') + 1\n\n    return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '0':\n        return \"0\"\n    elif a == '1':\n        return \"1\"\n    elif a == '2':\n        return \"2\"\n    else:\n        raise ValueError(\"'{0}' is not a valid binary XOR.\".format(a))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a: is None or b: is None:\n        raise TypeError('Input must be an array of strings and both a and b must be strings.')\n\n    if isinstance(a, List):\n        return int(a[0])\n    if isinstance(b, List):\n        return int(b[0])\n\n    if isinstance(a, int):\n        return a[0] * int(b)\n    else:\n        return a[0] * int(b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a b | 1'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, List):\n        raise TypeError('Input must be a List.')\n    if not isinstance(b, List):\n        raise TypeError('Input must be a List.')\n    a = [int(x) for x in a]\n    b = [int(y) for y in b]\n    if a not in b:\n        raise TypeError('Input must be a list.')\n    for i in range(1, len(a) - 1):\n        if a[i] > 0:\n            b[i] = 1\n        else:\n            b[i] = 0\n        a = a[:i] | b[i]\n    return a\n</s>"]]