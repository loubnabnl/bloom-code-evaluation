[["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return (n, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1, 3, 2, 8]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return (n, n + 1)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n == 20:\n        return [ tri", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return (1, 2, 3, 4, 5, 6, 7, 8)\n    elif n == 2:\n        return (1, 2, 3, 4, 5, 6, 7, 8)\n    elif n == 3:\n        return (1, 2, 3, 4, 5, 6, 7, 8)\n    elif n == 4:\n        return (1, 2, 3, 4, 5, 6, 7, 8)\n    elif n == 5:\n        return (1, 2, 3, 4, 5, 6, 7, 8)\n    elif n == 6:\n        return (1, 2, 3, 4, 5, 6, 7, 8)\n    elif n == 7:\n        return (1, 2, 3, 4, 5, 6, 7, 8)\n    elif n == 8:\n        return (1, 2, 3, 4, 5, 6, 7, 8)\n    elif n == 9:\n        return (1, 2, 3, 4, 5, 6, 7, 8)\n    elif n == 10:\n        return (1, 2, 3, 4, 5, 6, 7, 8)\n    elif n == 11:\n        return (1, 2, 3, 4, 5, 6, 7, 8)\n    elif n", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1, 3, 2, 8]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1, 3, 2, 8]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n == 20:\n        return [ tri", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n == 20:\n        return [ tri", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    n = int(n)\n    if n % 2 == 0:\n        return [ tri(n) for n in range(1, n) ]\n    if n % 4 == 0:\n        return [ tri(n) for n in range(1, n) ]\n    if n % 8 == 0:\n        return [ tri(n) for n in range(1, n) ]\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    n = int(n)\n    if n < 0:\n        raise ValueError(\"negative integer\")\n    if n % 2:\n        raise ValueError(\"negative integer\")\n    if n % 3:\n        raise ValueError(\"negative integer\")\n    if n % 4:\n        raise ValueError(\"negative integer\")\n    if n % 5:\n        raise ValueError(\"negative integer\")\n    if n % 6:\n        raise ValueError(\"negative integer\")\n    if n % 7:\n        raise ValueError(\"negative integer\")\n    if n % 8:\n        raise ValueError(\"negative integer\")\n    if n % 9:\n        raise ValueError(\"negative integer\")\n    if n % 10:\n        raise ValueError(\"negative integer\")\n    if n % 11:\n        raise ValueError(\"negative integer\")\n    if n % 12:\n        raise ValueError(\"negative integer\")\n    if n % 13:\n        raise ValueError(\"negative integer\")\n    if n % 14:\n        raise ValueError(\"negative integer\")\n    if n % 15:\n        raise ValueError(\"negative integer\")\n    if n % 16:\n        raise ValueError(\"negative integer\")\n    if n % 17:\n        raise ValueError(\"negative integer\")\n    if n % 18:\n        raise ValueError(\"negative integer\")\n    if n % 19:\n        raise ValueError(\"negative integer\")\n    if n", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n == 20:\n        return [ tri", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1, 3, 2, 8]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return (n + 1) * (n / 2) + (n / 2) * (n / 3) + (n / 3) * (n / 4) + (n / 4) * (n / 5) + (n / 5) * (n / 6) + (n / 6) * (n / 7) + (n / 7) * (n / 8) + (n / 8) * (n / 9) + (n / 9) * (n / 10) + (n / 10) * (n / 11) + (n / 11) * (n / 12) + (n / 12) * (n / 13) + (n / 13) * (n / 14) + (n / 14) * (n / 15) + (n / 15) * (n / 16) + (n / 16) * (n / 17) + (n / 17) * (n / 18) + (n / 18) * (n / 19) + (n / 19) * (n / 20) + (n / 20) * (n / 21) + (n / 21) * (n / 22) + (n", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 1:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1, 3, 2, 8]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [ tri(1) ]\n    if n == 2:\n        return [ tri(2) ]\n    if n == 3:\n        return [ tri(3) ]\n    if n == 4:\n        return [ tri(4) ]\n    if n == 5:\n        return [ tri(5) ]\n    if n == 6:\n        return [ tri(6) ]\n    if n == 7:\n        return [ tri(7) ]\n    if n == 8:\n        return [ tri(8) ]\n    return []", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1, 3, 2, 8]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 1:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return (n + 1) % 2 == 0", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    if n % 2 == 0:\n        return []\n    if n % 4 == 0:\n        return []\n    if n % 6 == 0:\n        return []\n    if n % 8 == 0:\n        return []\n    if n % 10 == 0:\n        return []\n    if n % 12 == 0:\n        return []\n    if n % 14 == 0:\n        return []\n    if n % 16 == 0:\n        return []\n    if n % 18 == 0:\n        return []\n    if n % 20 == 0:\n        return []\n    if n % 24 == 0:\n        return []\n    if n % 28 == 0:\n        return []\n    if n % 30 == 0:\n        return []\n    if n % 32 == 0:\n        return []\n    if n % 34 == 0:\n        return []\n    if n % 36 == 0:\n        return []\n    if n % 40 == 0:\n        return []\n    if n % 44 == 0:\n        return []\n    if n % 48 == 0:\n        return []\n    if n % 52 == 0:\n        return []\n    if n % 54 == 0:\n        return []\n    if n % 56 == 0:\n        return []\n    if n % 64 == 0:\n        return []\n    if n % 68 == 0:\n        return []\n    if n % 72 == 0:", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1, 3, 2, 8]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n == 20:\n        return [ tri", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1, 3, 2, 8]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    n = int(n)\n    if n < 0:\n        raise ValueError(\"negative integer n\")\n    if n > 1:\n        raise ValueError(\"negative integer n\")\n    if n == 1:\n        return []\n    if n == 2:\n        return [ tri(1) ]\n    if n == 3:\n        return [ tri(2) ]\n    if n == 4:\n        return [ tri(3) ]\n    if n == 5:\n        return [ tri(4) ]\n    if n == 6:\n        return [ tri(5) ]\n    if n == 7:\n        return [ tri(6) ]\n    if n == 8:\n        return [ tri(7) ]\n    if n == 9:\n        return [ tri(8) ]\n    if n == 10:\n        return [ tri(9) ]\n    if n == 11:\n        return [ tri(10) ]\n    if n == 12:\n        return [ tri(11) ]\n    if n == 13:\n        return [ tri(12) ]\n    if n == 14:\n        return [ tri(13) ]\n    if n == 15:\n        return [ tri(14) ]\n    if n == 16:\n        return [ tri(15) ]\n    if n == 17:\n        return [ tri(16) ]\n    if n == 18:", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    n = int(n)\n    if n < 1:\n        return []\n    if n == 1:\n        return []\n    if n == 2:\n        return []\n    if n == 3:\n        return []\n    if n == 4:\n        return []\n    if n == 5:\n        return []\n    if n == 6:\n        return []\n    if n == 7:\n        return []\n    if n == 8:\n        return []\n    if n == 9:\n        return []\n    if n == 10:\n        return []\n    if n == 11:\n        return []\n    if n == 12:\n        return []\n    if n == 13:\n        return []\n    if n == 14:\n        return []\n    if n == 15:\n        return []\n    if n == 16:\n        return []\n    if n == 17:\n        return []\n    if n == 18:\n        return []\n    if n == 19:\n        return []\n    if n == 20:\n        return []\n    if n == 21:\n        return []\n    if n == 22:\n        return []\n    if n == 23:\n        return []\n    if n == 24:\n        return []\n    if n == 25:\n        return []\n    if n == 26:\n        return []\n    if n == 27:\n        return []\n    if n == 28:\n        return []\n    if n == 29:\n        return []\n    if n ==", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n == 20:\n        return [ tri", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [ tri(1) ]\n    if n == 2:\n        return [ tri(2) ]\n    if n == 3:\n        return [ tri(3) ]\n    if n == 4:\n        return [ tri(4) ]\n    if n == 5:\n        return [ tri(5) ]\n    if n == 6:\n        return [ tri(6) ]\n    if n == 7:\n        return [ tri(7) ]\n    if n == 8:\n        return [ tri(8) ]\n    if n == 9:\n        return [ tri(9) ]\n    if n == 10:\n        return [ tri(10) ]\n    if n == 11:\n        return [ tri(11) ]\n    if n == 12:\n        return [ tri(12) ]\n    if n == 13:\n        return [ tri(13) ]\n    if n == 14:\n        return [ tri(14) ]\n    if n == 15:\n        return [ tri(15) ]\n    if n == 16:\n        return [ tri(16) ]\n    if n == 17:\n        return [ tri(17) ]\n    if n == 18:\n        return [ tri(18) ]\n    if n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [ tri(1) ]\n    if n == 2:\n        return [ tri(2) ]\n    if n == 3:\n        return [ tri(3) ]\n    if n == 4:\n        return [ tri(4) ]\n    if n == 5:\n        return [ tri(5) ]\n    if n == 6:\n        return [ tri(6) ]\n    if n == 7:\n        return [ tri(7) ]\n    if n == 8:\n        return [ tri(8) ]\n    if n == 9:\n        return [ tri(9) ]\n    if n == 10:\n        return [ tri(10) ]\n    if n == 11:\n        return [ tri(11) ]\n    if n == 12:\n        return [ tri(12) ]\n    if n == 13:\n        return [ tri(13) ]\n    if n == 14:\n        return [ tri(14) ]\n    if n == 15:\n        return [ tri(15) ]\n    if n == 16:\n        return [ tri(16) ]\n    if n == 17:\n        return [ tri(17) ]\n    if n == 18:\n        return [ tri(18) ]\n    if n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n == 20:\n        return [ tri", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1, 3, 2, 8]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n == 20:\n        return [ tri", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1, 3, 2, 8]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return (1, 3, 2, 8)\n    elif n == 2:\n        return (1, 2, 3, 8)\n    elif n == 3:\n        return (1, 1, 2, 8)\n    elif n == 4:\n        return (1, 1, 1, 8)\n    elif n == 5:\n        return (1, 1, 1, 8)\n    elif n == 6:\n        return (1, 1, 1, 8)\n    elif n == 7:\n        return (1, 1, 1, 8)\n    elif n == 8:\n        return (1, 1, 1, 8)\n    elif n == 9:\n        return (1, 1, 1, 8)\n    elif n == 10:\n        return (1, 1, 1, 8)\n    elif n == 11:\n        return (1, 1, 1, 8)\n    elif n == 12:\n        return (1, 1, 1, 8)\n    elif n == 13:\n        return (1, 1, 1, 8)\n    elif n == 14:\n        return (1, 1, 1, 8)\n    elif n == 15:\n        return (1, 1, 1, 8)\n    elif n == 16:\n        return (1, 1, 1, 8)\n    elif n == 17:\n        return (1, 1, 1, 8)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [ tri(1) ]\n    if n == 2:\n        return [ tri(2) ]\n    if n == 3:\n        return [ tri(3) ]\n    if n == 4:\n        return [ tri(4) ]\n    if n == 5:\n        return [ tri(5) ]\n    if n == 6:\n        return [ tri(6) ]\n    if n == 7:\n        return [ tri(7) ]\n    if n == 8:\n        return [ tri(8) ]\n    return []", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n == 20:\n        return [ tri", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return (1, 3, 2, 8)\n    elif n == 2:\n        return (1, 3, 2, 8)\n    elif n == 3:\n        return (1, 3, 2, 8)\n    elif n == 4:\n        return (1, 3, 2, 8)\n    elif n == 5:\n        return (1, 3, 2, 8)\n    elif n == 6:\n        return (1, 3, 2, 8)\n    elif n == 7:\n        return (1, 3, 2, 8)\n    elif n == 8:\n        return (1, 3, 2, 8)\n    elif n == 9:\n        return (1, 3, 2, 8)\n    elif n == 10:\n        return (1, 3, 2, 8)\n    elif n == 11:\n        return (1, 3, 2, 8)\n    elif n == 12:\n        return (1, 3, 2, 8)\n    elif n == 13:\n        return (1, 3, 2, 8)\n    elif n == 14:\n        return (1, 3, 2, 8)\n    elif n == 15:\n        return (1, 3, 2, 8)\n    elif n == 16:\n        return (1, 3, 2, 8)\n    elif n == 17:\n        return (1, 3, 2, 8)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n == 20:\n        return [ tri", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    n = int(n)\n    if n % 2 == 0:\n        return [ tri(n) for n in range(1, n) ]\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    n = int(n)\n    if n % 2 == 0:\n        return [(1, 3, 2, 8), (2, 3, 2, 8), (3, 2, 8), (4, 2, 8)]\n    return [(1, 3, 2, 8), (2, 3, 2, 8), (3, 2, 8), (4, 2, 8)]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1, 3, 2, 8]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n == 20:\n        return [ tri", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n == 20:\n        return [ tri", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 1:\n        return []\n    if n == 1:\n        return []\n    if n == 2:\n        return []\n    if n == 3:\n        return []\n    if n == 4:\n        return []\n    if n == 5:\n        return []\n    if n == 6:\n        return []\n    if n == 7:\n        return []\n    if n == 8:\n        return []\n    if n == 9:\n        return []\n    if n == 10:\n        return []\n    if n == 11:\n        return []\n    if n == 12:\n        return []\n    if n == 13:\n        return []\n    if n == 14:\n        return []\n    if n == 15:\n        return []\n    if n == 16:\n        return []\n    if n == 17:\n        return []\n    if n == 18:\n        return []\n    if n == 19:\n        return []\n    if n == 20:\n        return []\n    if n == 21:\n        return []\n    if n == 22:\n        return []\n    if n == 23:\n        return []\n    if n == 24:\n        return []\n    if n == 25:\n        return []\n    if n == 26:\n        return []\n    if n == 27:\n        return []\n    if n == 28:\n        return []\n    if n == 29:\n        return []\n    if n == 30:\n        return []", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return (1, 3, 2, 8)\n    elif n == 2:\n        return (1, 2, 3, 8)\n    elif n == 3:\n        return (1, 1, 2, 8)\n    elif n == 4:\n        return (1, 1, 1, 8)\n    elif n == 5:\n        return (1, 1, 1, 8)\n    elif n == 6:\n        return (1, 1, 1, 8)\n    elif n == 7:\n        return (1, 1, 1, 8)\n    elif n == 8:\n        return (1, 1, 1, 8)\n    elif n == 9:\n        return (1, 1, 1, 8)\n    elif n == 10:\n        return (1, 1, 1, 8)\n    elif n == 11:\n        return (1, 1, 1, 8)\n    elif n == 12:\n        return (1, 1, 1, 8)\n    elif n == 13:\n        return (1, 1, 1, 8)\n    elif n == 14:\n        return (1, 1, 1, 8)\n    elif n == 15:\n        return (1, 1, 1, 8)\n    elif n == 16:\n        return (1, 1, 1, 8)\n    elif n == 17:\n        return (1, 1, 1, 8)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 1:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    n = int(n)\n    if n % 2 == 0:\n        return [ tri(n) for n in range(1, n) ]\n    else:\n        return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [ tri(1) ]\n    if n == 2:\n        return [ tri(2) ]\n    if n == 3:\n        return [ tri(3) ]\n    if n == 4:\n        return [ tri(4) ]\n    if n == 5:\n        return [ tri(5) ]\n    if n == 6:\n        return [ tri(6) ]\n    if n == 7:\n        return [ tri(7) ]\n    if n == 8:\n        return [ tri(8) ]\n    if n == 9:\n        return [ tri(9) ]\n    if n == 10:\n        return [ tri(10) ]\n    if n == 11:\n        return [ tri(11) ]\n    if n == 12:\n        return [ tri(12) ]\n    if n == 13:\n        return [ tri(13) ]\n    if n == 14:\n        return [ tri(14) ]\n    if n == 15:\n        return [ tri(15) ]\n    if n == 16:\n        return [ tri(16) ]\n    if n == 17:\n        return [ tri(17) ]\n    if n == 18:\n        return [ tri(18) ]\n    if n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [ tri(1) ]\n    if n == 2:\n        return [ tri(2) ]\n    if n == 3:\n        return [ tri(3) ]\n    if n == 4:\n        return [ tri(4) ]\n    return []", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    n = int(n)\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return (n,)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1, 3, 2, 8]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [ tri(1) ]\n    if n == 2:\n        return [ tri(2) ]\n    if n == 3:\n        return [ tri(3) ]\n    if n == 4:\n        return [ tri(4) ]\n    if n == 5:\n        return [ tri(5) ]\n    if n == 6:\n        return [ tri(6) ]\n    if n == 7:\n        return [ tri(7) ]\n    if n == 8:\n        return [ tri(8) ]\n    if n == 9:\n        return [ tri(9) ]\n    if n == 10:\n        return [ tri(10) ]\n    if n == 11:\n        return [ tri(11) ]\n    if n == 12:\n        return [ tri(12) ]\n    if n == 13:\n        return [ tri(13) ]\n    if n == 14:\n        return [ tri(14) ]\n    if n == 15:\n        return [ tri(15) ]\n    if n == 16:\n        return [ tri(16) ]\n    if n == 17:\n        return [ tri(17) ]\n    if n == 18:\n        return [ tri(18) ]\n    if n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n == 20:\n        return [ tri", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [ tri(1) ]\n    if n == 2:\n        return [ tri(2) ]\n    if n == 3:\n        return [ tri(3) ]\n    if n == 4:\n        return [ tri(4) ]\n    if n == 5:\n        return [ tri(5) ]\n    if n == 6:\n        return [ tri(6) ]\n    if n == 7:\n        return [ tri(7) ]\n    if n == 8:\n        return [ tri(8) ]\n    if n == 9:\n        return [ tri(9) ]\n    if n == 10:\n        return [ tri(10) ]\n    if n == 11:\n        return [ tri(11) ]\n    if n == 12:\n        return [ tri(12) ]\n    if n == 13:\n        return [ tri(13) ]\n    if n == 14:\n        return [ tri(14) ]\n    if n == 15:\n        return [ tri(15) ]\n    if n == 16:\n        return [ tri(16) ]\n    if n == 17:\n        return [ tri(17) ]\n    if n == 18:\n        return [ tri(18) ]\n    if n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1, 3, 2, 8]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1, 3, 2, 8]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 1:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1, 3, 2, 8]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n == 20:\n        return [ tri", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [ tri(1) ]\n    if n == 2:\n        return [ tri(2) ]\n    if n == 3:\n        return [ tri(3) ]\n    if n == 4:\n        return [ tri(4) ]\n    if n == 5:\n        return [ tri(5) ]\n    if n == 6:\n        return [ tri(6) ]\n    if n == 7:\n        return [ tri(7) ]\n    if n == 8:\n        return [ tri(8) ]\n    if n == 9:\n        return [ tri(9) ]\n    if n == 10:\n        return [ tri(10) ]\n    if n == 11:\n        return [ tri(11) ]\n    if n == 12:\n        return [ tri(12) ]\n    if n == 13:\n        return [ tri(13) ]\n    if n == 14:\n        return [ tri(14) ]\n    if n == 15:\n        return [ tri(15) ]\n    if n == 16:\n        return [ tri(16) ]\n    if n == 17:\n        return [ tri(17) ]\n    if n == 18:\n        return [ tri(18) ]\n    if n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [ tri(1) ]\n    if n == 2:\n        return [ tri(2) ]\n    if n == 3:\n        return [ tri(3) ]\n    if n == 4:\n        return [ tri(4) ]\n    if n == 5:\n        return [ tri(5) ]\n    if n == 6:\n        return [ tri(6) ]\n    if n == 7:\n        return [ tri(7) ]\n    if n == 8:\n        return [ tri(8) ]\n    if n == 9:\n        return [ tri(9) ]\n    if n == 10:\n        return [ tri(10) ]\n    if n == 11:\n        return [ tri(11) ]\n    if n == 12:\n        return [ tri(12) ]\n    if n == 13:\n        return [ tri(13) ]\n    if n == 14:\n        return [ tri(14) ]\n    if n == 15:\n        return [ tri(15) ]\n    if n == 16:\n        return [ tri(16) ]\n    if n == 17:\n        return [ tri(17) ]\n    if n == 18:\n        return [ tri(18) ]\n    if n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2, 8]\n    elif n == 6:\n        return [1, 3, 2, 8]\n    elif n == 7:\n        return [1, 3, 2, 8]\n    elif n == 8:\n        return [1, 3, 2, 8]\n    elif n == 9:\n        return [1, 3, 2, 8]\n    elif n == 10:\n        return [1, 3, 2, 8]\n    elif n == 11:\n        return [1, 3, 2, 8]\n    elif n == 12:\n        return [1, 3, 2, 8]\n    elif n == 13:\n        return [1, 3, 2, 8]\n    elif n == 14:\n        return [1, 3, 2, 8]\n    elif n == 15:\n        return [1, 3, 2, 8]\n    elif n == 16:\n        return [1, 3, 2, 8]\n    elif n == 17:\n        return [1, 3, 2, 8]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    else:\n        return [ tri(n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n == 20:\n        return [ tri", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n + 1) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    n = int(n)\n    if n % 2 == 0:\n        return [ tri(n) for n in range(1, n) ]\n    else:\n        return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 1:\n        return []\n    if n == 1:\n        return [ tri(1) ]\n    if n == 2:\n        return [ tri(2) ]\n    if n == 3:\n        return [ tri(3) ]\n    if n == 4:\n        return [ tri(4) ]\n    if n == 5:\n        return [ tri(5) ]\n    if n == 6:\n        return [ tri(6) ]\n    if n == 7:\n        return [ tri(7) ]\n    if n == 8:\n        return [ tri(8) ]\n    if n == 9:\n        return [ tri(9) ]\n    if n == 10:\n        return [ tri(10) ]\n    if n == 11:\n        return [ tri(11) ]\n    if n == 12:\n        return [ tri(12) ]\n    if n == 13:\n        return [ tri(13) ]\n    if n == 14:\n        return [ tri(14) ]\n    if n == 15:\n        return [ tri(15) ]\n    if n == 16:\n        return [ tri(16) ]\n    if n == 17:\n        return [ tri(17) ]\n    if n == 18:\n        return [ tri(18) ]\n    if n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 1:\n        return []\n    if n == 1:\n        return [ tri(1) ]\n    if n == 2:\n        return [ tri(2) ]\n    if n == 3:\n        return [ tri(3) ]\n    if n == 4:\n        return [ tri(4) ]\n    if n == 5:\n        return [ tri(5) ]\n    if n == 6:\n        return [ tri(6) ]\n    if n == 7:\n        return [ tri(7) ]\n    if n == 8:\n        return [ tri(8) ]\n    if n == 9:\n        return [ tri(9) ]\n    if n == 10:\n        return [ tri(10) ]\n    if n == 11:\n        return [ tri(11) ]\n    if n == 12:\n        return [ tri(12) ]\n    if n == 13:\n        return [ tri(13) ]\n    if n == 14:\n        return [ tri(14) ]\n    if n == 15:\n        return [ tri(15) ]\n    if n == 16:\n        return [ tri(16) ]\n    if n == 17:\n        return [ tri(17) ]\n    if n == 18:\n        return [ tri(18) ]\n    if n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return (n, n + 1)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [ tri(1) ]\n    if n == 2:\n        return [ tri(2) ]\n    if n == 3:\n        return [ tri(3) ]\n    if n == 4:\n        return [ tri(4) ]\n    if n == 5:\n        return [ tri(5) ]\n    if n == 6:\n        return [ tri(6) ]\n    if n == 7:\n        return [ tri(7) ]\n    if n == 8:\n        return [ tri(8) ]\n    if n == 9:\n        return [ tri(9) ]\n    if n == 10:\n        return [ tri(10) ]\n    if n == 11:\n        return [ tri(11) ]\n    if n == 12:\n        return [ tri(12) ]\n    if n == 13:\n        return [ tri(13) ]\n    if n == 14:\n        return [ tri(14) ]\n    if n == 15:\n        return [ tri(15) ]\n    if n == 16:\n        return [ tri(16) ]\n    if n == 17:\n        return [ tri(17) ]\n    if n == 18:\n        return [ tri(18) ]\n    if n == 19:\n        return [ tri(19) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    n = int(n)\n    if n == 0:\n        return []\n    if n == 1:\n        return [ tri(1) ]\n    if n == 2:\n        return [ tri(2) ]\n    if n == 3:\n        return [ tri(3) ]\n    if n == 4:\n        return [ tri(4) ]\n    if n == 5:\n        return [ tri(5) ]\n    if n == 6:\n        return [ tri(6) ]\n    if n == 7:\n        return [ tri(7) ]\n    if n == 8:\n        return [ tri(8) ]\n    return []\n    # return [ tri(1) ]\n    # return [ tri(2) ]\n    # return [ tri(3) ]\n    # return [ tri(4) ]\n    # return [ tri(5) ]\n    # return [ tri(6) ]\n    # return [ tri(7) ]\n    # return [ tri(8) ]\n    # return [ tri(9) ]\n    # return [ tri(10) ]\n    # return [ tri(11) ]\n    # return [ tri(12) ]\n    # return [ tri(13) ]\n    # return [ tri(14) ]\n    # return [ tri(15) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    elif n == 5:\n        return [ tri(5) ]\n    elif n == 6:\n        return [ tri(6) ]\n    elif n == 7:\n        return [ tri(7) ]\n    elif n == 8:\n        return [ tri(8) ]\n    elif n == 9:\n        return [ tri(9) ]\n    elif n == 10:\n        return [ tri(10) ]\n    elif n == 11:\n        return [ tri(11) ]\n    elif n == 12:\n        return [ tri(12) ]\n    elif n == 13:\n        return [ tri(13) ]\n    elif n == 14:\n        return [ tri(14) ]\n    elif n == 15:\n        return [ tri(15) ]\n    elif n == 16:\n        return [ tri(16) ]\n    elif n == 17:\n        return [ tri(17) ]\n    elif n == 18:\n        return [ tri(18) ]\n    elif n == 19:\n        return [ tri(19) ]\n    elif n == 20:\n        return [ tri", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return tri(n)", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [ tri(1) ]\n    elif n == 2:\n        return [ tri(2) ]\n    elif n == 3:\n        return [ tri(3) ]\n    elif n == 4:\n        return [ tri(4) ]\n    else:\n        return [ tri(n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]", "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [ tri(n) for n in range(1, n) ]"]]