[["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Convert base to integer\n    base = int(base)\n    # Convert base to base\n    if base < 0:\n        raise ValueError(\"Base must be greater than zero\")\n    return base + \" \" + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10:\n        raise ValueError('Invalid input number')\n    base = int(base.replace('.', '.'))\n    if base < 2:\n        raise ValueError('Invalid base number')\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '22'\n    elif base < 3:\n        return '1000'\n    elif base < 2:\n        return '111'\n    else:\n        raise ValueError(\"Invalid base number\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 2:\n        return '000'\n    if base < 10:\n        return '0000'\n    return '%d' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%d%s' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10 or base > 10:\n        raise ValueError('base must be positive or negative')\n    return '%d' % (x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 0:\n        return '22' + base\n    return '111' + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base is None:\n        base = 8\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return base\n    if base < 10 or x % 10 == 0:\n        raise ValueError('base must be between 0 and 10')\n    if base % 10 == 0 and x % base == 0:\n        raise ValueError('base must be between 0 and base')\n    return '%d' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # get the base number\n    base = int(x) - int(base)\n    # convert the base number to integer\n    return base * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10 or base < 2:\n        raise ValueError(\"Number must be between 0 and 10.\")\n\n    return base + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 0:\n        raise ValueError('Base number must be greater than 0.')\n    return x + base\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 10:\n        return base * '.'\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base == 0:\n        base = 0\n    if base == 1:\n        base = 1\n    if base == 2:\n        base = 2\n    if base == 3:\n        base = 3\n    if base == 4:\n        base = 4\n    if base == 5:\n        base = 5\n    if base == 6:\n        base = 6\n    if base == 7:\n        base = 7\n    if base == 8:\n        base = 8\n    if base == 9:\n        base = 9\n    if base == 10:\n        base = 10\n    if base == 11:\n        base = 11\n    if base == 12:\n        base = 12\n    if base == 13:\n        base = 13\n    if base == 14:\n        base = 14\n    if base == 15:\n        base = 15\n    if base == 16:\n        base = 16\n    if base == 17:\n        base = 17\n    if base == 18:\n        base = 18\n    if base == 19:\n        base = 19\n    if base == 20:\n        base = 20\n    if base == 21:\n        base = 21\n    if base == 22:\n        base = 22\n    if base == 23:\n        base = 23\n    if base == 24:\n        base = 24\n    if base == 25:\n        base = 25\n    if base == 26:\n        base = 26\n    if base ==", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Invalid base number\")\n    return '%02d' % (x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '(' + str(x) + ',' + str(base) + ')'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = ''\n    base = base + 1\n    while base <= 10 and not base < (8, 2):\n        result += base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = x - base\n    if base < 10:\n        return base\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # TODO: check for better conversion of base numbers\n    # TODO: check for better conversion of base numbers\n    if base < 0:\n        raise ValueError('Base must be positive')\n    if x < base:\n        raise ValueError('Base must be positive')\n    return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%d' % (base + x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 0:\n        raise ValueError('base is greater than zero.')\n    if base < 0:\n        raise ValueError('base is less than zero.')\n    base = base - 10\n    if base <= 0:\n        raise ValueError('base is less than zero.')\n    return '%d.%d' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = x * base + base\n    result = result.replace('.', '')\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # convert to base\n    x = int(x)\n    base = int(base)\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        return '%.2f' % (base * x)\n    elif isinstance(x, float):\n        return '%.2f' % (base * x)\n    elif isinstance(x, str):\n        return '%.2f' % (base * x)\n    else:\n        raise TypeError('Can only convert to integers or floats: %r' % type(x))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%.2f' % base * x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        x = int(x)\n        base = int(base)\n        return (x + base) % base\n    except ValueError:\n        raise ValueError('Number is not an integer.')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 0:\n        return '22'\n    elif base == 1:\n        return '1000'\n    elif base == 2:\n        return '111'\n    elif base == 3:\n        return '2222'\n    elif base == 4:\n        return '2222'\n    elif base == 5:\n        return '2222'\n    elif base == 6:\n        return '2222'\n    elif base == 7:\n        return '2222'\n    elif base == 8:\n        return '2222'\n    elif base == 9:\n        return '2222'\n    elif base == 10:\n        return '2222'\n    elif base == 11:\n        return '2222'\n    elif base == 12:\n        return '2222'\n    elif base == 13:\n        return '2222'\n    elif base == 14:\n        return '2222'\n    elif base == 15:\n        return '2222'\n    elif base == 16:\n        return '2222'\n    elif base == 17:\n        return '2222'\n    elif base == 18:\n        return '2222'\n    elif base == 19:\n        return '2222'\n    elif base == 20:\n        return '2222'\n    elif base == 21:\n        return '2222'\n    elif base == 22:\n        return '2222'\n    elif base == 23:\n        return '2222'\n    elif base == 24:\n        return '2222'\n    elif base == 25", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return''.join([str(x) for x in xrange(base, x + 1)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '0000'\n\n    return '0123456789'.join([base * 2 for base in range(base)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '%.2f' % (base - 10)\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(x % 10)\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10 and base > -1:\n        return base\n    else:\n        return int(x) + int(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%.2f' % (x * base) if x < 10 else '%.2f' % (x * base) + '%.2f' % (x * base) + '%.2f' % (x * base) + '%.2f' % (x * base) + '%.2f' % (x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10 or base > 11:\n        raise ValueError('invalid base number')\n    return '%02d' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10:\n        return base * x + '.'\n    elif x < 3:\n        return base * x + '.' * base + '.'\n    elif x < 2:\n        return base * x + '.' * base + '.' * base + '.'\n    elif x < 1:\n        return base * x + '.' * base + '.' * base + '.' * base + '.'\n    elif x < 0:\n        return base * x + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.' * base + '.'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 0:\n        return '22'\n    return '000' + base * x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 1:\n        raise ValueError('Base must be greater than zero.')\n    if x < 0:\n        raise ValueError('Base must be greater than zero.')\n\n    if x == 0:\n        return base\n    else:\n        return base + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise ValueError('Base must be positive')\n    if x > base:\n        raise ValueError('Base must be less than or equal to'+ str(base))\n    return ('+' + str(x) +'' + str(base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return base\n    return x % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Number x must be positive\")\n    if base < 0:\n        raise ValueError(\"Number base must be positive\")\n    if base > len(base):\n        raise ValueError(\"Number base must be positive\")\n    return base - x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise ValueError('Number must be between 0 and 10')\n    return base * x + '.' + base.toString('.')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        x = int(x)\n        base = int(base)\n        return x % base\n    except ValueError:\n        raise TypeError('Invalid base number')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('Base must be greater than or equal to 10.')\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10 and x < 10 and base > 10:\n        return '1111'\n    else:\n        return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 0:\n        raise TypeError('base must be positive')\n    return base +'' + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('Base must be less than 10.')\n    if base >= 10:\n        raise ValueError('Base must be greater than 10.')\n    return '%.2f' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%.2f' % (base * x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        return '23'\n    if isinstance(base, int):\n        return '22'\n    if isinstance(base, str):\n        return base\n    raise TypeError(\"base must be an int or string\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Returns a string representation of the number that is changed\n    return '%0.1f' % (base * x + 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Avoid the case of x < base\n    if x < base:\n        raise ValueError('Number must be between 0 and '+str(base)+'.')\n\n    if base > 1:\n        raise ValueError('Number must be between '+str(base)+' and '+str(x+base)+'.')\n\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than 10.\")\n    return str(x) + base + str(base % 10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # make sure base is not 0\n    if base < 0:\n        raise ValueError('base must be positive')\n    # make sure base is not 0\n    if base > 10:\n        raise ValueError('base must be negative')\n    # convert base to integer\n    x = int(x)\n\n    # check if the input is a valid number\n    if x < 0:\n        raise ValueError('x must be a positive number')\n\n    # check if base is valid\n    if base < 0:\n        raise ValueError('base must be positive')\n\n    # convert base to base\n    x = int(x) % base\n\n    # check if base is valid\n    if base < 0:\n        raise ValueError('base must be positive')\n\n    # check if base is valid\n    if base > 10:\n        raise ValueError('base must be negative')\n\n    # convert base to base\n    x = int(x) % base\n\n    return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base *", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base - 1\n    if base < 10:\n        return base\n    return base + 1", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base <= 10:\n        return base\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x * base) + '%.2f' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # convert to base\n    x = int(x)\n    base = int(base)\n    return '%.2f' % x * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base * 10)\n    if base < 0:\n        raise ValueError('Invalid base number')\n    return base + 'x'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('invalid number.')\n    if base < 0:\n        raise ValueError('invalid base.')\n    base = int(base * 10)\n    if base < 0:\n        raise ValueError('invalid base.')\n    base = int(base * 10)\n    if base < 0:\n        raise ValueError('invalid base.')\n    base = int(base * 10)\n    if base < 0:\n        raise ValueError('invalid base.')\n    return '%d%s' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '.' * base + '.' * x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base number must be greater than or equal to 10.\")\n    return x % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 0:\n        raise ValueError('base must be a positive integer')\n    if base >= 10:\n        raise ValueError('base must be a positive integer')\n    return '%d.%d' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be between 0 and 10\")\n    return '%d.%f' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base <= 10:\n        return '%10' % base\n    return '%10' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        return x\n    elif isinstance(x, str):\n        return x\n    elif isinstance(x, list):\n        return [x.split() for x in x]\n    elif isinstance(x, tuple):\n        return [x for x in x]\n    elif isinstance(x, bool):\n        return x\n    elif isinstance(x, int):\n        return x\n    elif isinstance(x, bool):\n        return x\n    elif isinstance(x, int):\n        return x\n    elif isinstance(x, int):\n        return x\n    elif isinstance(x, int):\n        return x\n    elif isinstance(x, int):\n        return x\n    elif isinstance(x, int):\n        return x\n    elif isinstance(x, int):\n        return x\n    elif isinstance(x, int):\n        return x\n    elif isinstance(x, int):\n        return x\n    elif isinstance(x, int):\n        return x\n    elif isinstance(x, int):\n        return x\n    elif isinstance(x, int):\n        return x\n    elif isinstance(x, int):\n        return x\n    elif isinstance(x, int):\n        return x\n    elif isinstance", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # check base number\n    if base < 0:\n        raise ValueError(\"Base number must be positive\")\n    # check base number and base value\n    if base < x and base <= x:\n        raise ValueError(\"Base number must be greater than or equal to x\")\n    # check base number and base value\n    if base > x and base >= x:\n        raise ValueError(\"Base number must be less than or equal to x\")\n    # check base number and base value\n    if base > x and base < base:\n        raise ValueError(\"Base number must be greater than or equal to x\")\n    # check base number and base value\n    if base < x and base > base:\n        raise ValueError(\"Base number must be greater than or equal to x\")\n    # check base number and base value\n    if base > x and base < base:\n        raise ValueError(\"Base number must be greater than or equal to x\")\n    # check base number and base value\n    if base < x and base > base:\n        raise ValueError(\"Base number must be greater than or equal to x\")\n\n    # return string representation after the conversion\n    return '22' + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(base, int):\n        base = int(base)\n    if base < 0:\n        raise ValueError(\"base must be an integer\")\n    return base.toString()", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return '22'\n    elif x >= base:\n        return '1000'\n    else:\n        return '111'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10:\n        return '%02d' % base\n    elif x < 10:\n        return '%02d' % base + '%02d' % x\n    elif x < 10 or base < 10 and x < 10:\n        return '%02d' % base + '%02d' % x\n    else:\n        return '%02d' % base + '%02d' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be a positive integer')\n    return str(x + base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 0:\n        return '1000'\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x * base) + \" \" + str(x + base) + \" \" + str(x + base + 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '22'\n    return '1000'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('base number must be less than 10.')\n    return '%d.' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        return '%d' % x\n    elif isinstance(x, float):\n        return '%f' % x\n    elif isinstance(x, long):\n        return '%d' % x\n    elif isinstance(x, int):\n        return '%d' % x\n    elif isinstance(x, float):\n        return '%f' % x\n    elif isinstance(x, long):\n        return '%d' % x\n    elif isinstance(x, int):\n        return '%d' % x\n    elif isinstance(x, float):\n        return '%f' % x\n    elif isinstance(x, long):\n        return '%d' % x\n    elif isinstance(x, int):\n        return '%d' % x\n    elif isinstance(x, int):\n        return '%d' % x\n    elif isinstance(x, long):\n        return '%d' % x\n    elif isinstance(x, int):\n        return '%d' % x\n    elif isinstance(x, int):\n        return '%d' % x\n    elif isinstance(x, int):\n        return '%d' % x\n    elif isinstance(x, int):\n        return '%d' % x\n    elif isinstance(x, int):\n        return '%d' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base is None:\n        base = 10\n    return base + '000'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise ValueError('base must be positive')\n    return '%d.' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 0:\n        return 'x = x + 100'\n    elif base == 1:\n        return 'x = x + x'\n    elif base == 2:\n        return 'x = x + (x + 1)'\n    elif base == 3:\n        return 'x = x + (x + 1)'\n    elif base == 4:\n        return 'x = x + (x + 1)'\n    elif base == 5:\n        return 'x = x + (x + 1)'\n    elif base == 6:\n        return 'x = x + (x + 1)'\n    elif base == 7:\n        return 'x = x + (x + 1)'\n    elif base == 8:\n        return 'x = x + (x + 1)'\n    elif base == 9:\n        return 'x = x + (x + 1)'\n    elif base == 10:\n        return 'x = x + (x + 1)'\n    elif base == 11:\n        return 'x = x + (x + 1)'\n    elif base == 12:\n        return 'x = x + (x + 1)'\n    elif base == 13:\n        return 'x = x + (x + 1)'\n    elif base == 14:\n        return 'x = x + (x + 1)'\n    elif base == 15:\n        return 'x =", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # try to find the base of the number\n    if base > 1:\n        return '+' + str(base - 1) + '+'\n    # else base = base - 1\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%.2f' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # convert numbers to base\n    return '%.2f' % x * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    if base < 0:\n        raise ValueError('base must be less than 0')\n    return '%d%s' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%.2f' % x * base + '%.2f' % x * base + '%.2f' % x * base + '%.2f' % x * base + '%.2f' % x * base + '%.2f' % x * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(base, int):\n        base = int(base)\n    if isinstance(x, int):\n        x = int(x)\n    base = base - 1\n    base = base * 10\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be at least 10.')\n    return '%.2f' % (x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Invalid base number')\n    if base < 0:\n        raise ValueError('Invalid base number')\n    if x >= base:\n        raise ValueError('Invalid base number')\n    return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%.2f' % (base * x) if base < 10 else '%.2f' % (base * x) if base >= 10 else '%.2f' % (base * x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        return '%.2f' % base\n    else:\n        return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # base numbers are less than 10\n    if base < 0:\n        raise ValueError(\"base number must be greater than zero.\")\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10 or base > 100:\n        raise ValueError(\"Number must be between 10 and 100\")\n\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise ValueError('base must be positive')\n    if x < 0:\n        raise ValueError('x must be positive')\n    if x >= base:\n        raise ValueError('x must be negative')\n    return str(x) +'' + str(base) +'' + str(base - x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base - 10\n    if base < 0:\n        raise ValueError('base must be positive')\n    if base >= 10 and base <= 15:\n        raise ValueError('base must be positive and less than or equal to 15')\n    return base\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        x = int(x)\n    base = base - 10\n    if base < 0:\n        base = base + 10\n    if base > max(0, len(base)):\n        raise ValueError('Number must be in the range [{0}, {1}]'.format(base, len(base)))\n\n    return base +'' + x +'' + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return x * base + '000'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '{}'.format(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10 or base > 1:\n        raise ValueError('Invalid base number')\n    return '%.2f' % (base * 10 + 1) if base < 10 else '%.2f' % base * 10 + 1", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        x = int(x)\n    if isinstance(base, int):\n        base = int(base)\n    if isinstance(base, basestring):\n        base = base.replace('.', '.')\n    if isinstance(base, basestring):\n        base = base.replace('.', '.')\n    if isinstance(base, basestring):\n        base = base.replace('.', '.')\n    if isinstance(base, basestring):\n        base = base.replace('.', '.')\n    if isinstance(base, basestring):\n        base = base.replace('.', '.')\n    if isinstance(base, basestring):\n        base = base.replace('.', '.')\n    if isinstance(base, basestring):\n        base = base.replace('.', '.')\n    if isinstance(base, basestring):\n        base = base.replace('.', '.')\n    if isinstance(base, int):\n        base = base.replace('.', '.')\n    if isinstance", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%.2f' % x % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10 or base >= 10:\n        raise ValueError('base must be between 10 and 1')\n    if x >= 0:\n        return '%02d' % base\n    return '%02d' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return base\n    elif x > base:\n        return base + 1\n    else:\n        raise ValueError(\"Base must be less than or equal to number x.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than or equal to 2.')\n    if base < 3:\n        raise ValueError('base must be greater than or equal to 3.')\n    if base < 4:\n        raise ValueError('base must be greater than or equal to 4.')\n    if base < 5:\n        raise ValueError('base must be greater than or equal to 5.')\n    if base < 6:\n        raise ValueError('base must be greater than or equal to 6.')\n    if base < 7:\n        raise ValueError('base must be greater than or equal to 7.')\n    if base < 8:\n        raise ValueError('base must be greater than or equal to 8.')\n    if base < 9:\n        raise ValueError('base must be greater than or equal to 9.')\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10.')\n    if base > 2:\n        raise ValueError('base must be greater than or equal to 2.')\n    if base > 3:\n        raise ValueError('base must be greater than or equal to 3.')\n    if base > 4:\n        raise ValueError('base must be greater than or equal to 4.')\n    if base >", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return base\n    elif base > 10:\n        return base * 10\n    else:\n        return base * 10 + base % 10", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10 and x < 2:\n        raise ValueError(\"base must be between 10 and 2\")\n    if base < 1:\n        raise ValueError(\"base must be between 1 and 2\")\n    if x < base:\n        return base\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base * x + base + 1", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise TypeError('Invalid base number')\n    if x < 0:\n        raise TypeError('Invalid number x')\n    return '%d.' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        raise ValueError('base must be between 0 and 10.')\n\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise ValueError(\"Base must be positive.\")\n    if x < 0:\n        raise ValueError(\"Base must be negative.\")\n    return base + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        x = int(x)\n    base = base - 10\n    if x < base:\n        x += base\n    return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '00' * x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be >= 10')\n    return x % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = 10\n    if x < base:\n        return base + x\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '{}'.format(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be an integer')\n    base = int(base)\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10 or base > 100:\n        raise ValueError(\"Invalid base: %r\" % base)\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Invalid base')\n    if base < 0:\n        raise ValueError('Invalid base')\n    return '%.2f' % base * x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Convert base to base number\n    base = int(base)\n    base = base * 10\n    base = base / 10\n    return base.replace('.', '').replace('.', '').replace('.', '')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('Invalid base number')\n    if x < base:\n        raise ValueError('Invalid base number')\n    return str(x) + str(base) + str(base % 10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        return '%d' % x\n    elif isinstance(x, basestring):\n        return '%d' % x\n    elif isinstance(x, int) and isinstance(base, int):\n        return '%d' % (x - base)\n    elif isinstance(x, int):\n        return '%d' % x\n    else:\n        raise TypeError('Base must be a string or int.')\n\n    return '%d' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        x = int(x)\n    if isinstance(base, int):\n        base = int(base)\n    if base in (8, 3) or base in (2, 1):\n        return base\n    elif base in (1, 1):\n        return base + 1\n    elif base in (2, 1):\n        return base + 1\n    elif base in (1, 1):\n        return base + 1\n    elif base in (2, 1):\n        return base + 1\n    elif base in (1, 1):\n        return base + 1\n    elif base in (2, 1):\n        return base + 1\n    elif base in (1, 1):\n        return base + 1\n    elif base in (2, 1):\n        return base + 1\n    elif base in (1, 1):\n        return base + 1\n    elif base in (2, 1):\n        return base + 1\n    elif base in (1, 1):\n        return base + 1\n    elif base in (2, 1):\n        return base + 1\n    elif base in (1, 1):\n        return base + 1\n    elif base in (2, 1):", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        return '00'\n    if isinstance(base, int):\n        return '10'\n    if isinstance(x, float):\n        return '10'\n    if isinstance(base, float):\n        return '10'\n    if isinstance(x, int):\n        return '00'\n    if isinstance(base, int):\n        return '10'\n    if isinstance(x, float):\n        return '10'\n    if isinstance(base, float):\n        return '10'\n    if isinstance(x, int):\n        return '00'\n    if isinstance(base, int):\n        return '10'\n    if isinstance(x, int):\n        return '10'\n    if isinstance(base, float):\n        return '10'\n    if isinstance(x, int):\n        return '10'\n    if isinstance(x, int):\n        return '10'\n    if isinstance(base, int):\n        return '10'\n    if isinstance(x, int):\n        return '10'\n    if isinstance(x, int):\n        return '10'\n    if isinstance(base, int):\n        return '10'\n    if isinstance(x, int):\n        return '10'\n    if isinstance(x, int)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # check if base number is greater than 10\n    if base > 10:\n        raise ValueError(\"base number must be greater than 10.\")\n\n    # get base number from input\n    base = x\n    # check if base number is less than 10\n    if base < 10:\n        raise ValueError(\"base number must be less than 10.\")\n\n    # check if base number is equal to or greater than base\n    if base > base or base < base:\n        raise ValueError(\"base number must be equal to or greater than base.\")\n\n    # change base\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base * x + base * x + base * x + base * x + base * x + base * x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        x = x % 10\n    if isinstance(base, int):\n        base = base % 10\n    if isinstance(x, float):\n        x = x / 10\n    if isinstance(base, float):\n        base = base / 10\n    return '%d.%f' % (x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '0123456789'.join(x for x in range(base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise ValueError('base must be greater than zero')\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%.2f' % (base - 10) if base < 10 else '%.2f' % (base - 10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(int(x) + int(base)) if x < 10 else str(int(x) + int(base - 10)) if x >= base - 10 else str(int(x) + int(base + 10)) if x < base + 10 else str(int(x) + int(base)) if x >= base + 10", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        x = int(x)\n    return '%s%02d' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        x = int(x)\n    if isinstance(base, int):\n        base = int(base)\n    if base < 0:\n        raise TypeError(\"base is not a number.\")\n    if x > base:\n        raise TypeError(\"base is greater than number x.\")\n    return '%i' % x + '%i' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return x + base\n    else:\n        return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    return base + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return (x + base) % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10:\n        raise ValueError(\"invalid base number\")\n    base = int(base)\n    if base % 10 == 0:\n        return \"%d\" % base\n    return base + \"%.2f\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 1:\n        return base\n    if x > 1:\n        return base * 8\n    if base < 2:\n        return base * 2\n    if base > 3:\n        return base * 3\n    if base < 4:\n        return base * 4\n    if base > 5:\n        return base * 5\n    if base < 6:\n        return base * 6\n    if base < 7:\n        return base * 7\n    if base < 8:\n        return base * 8\n    if base < 9:\n        return base * 9\n    if base < 10:\n        return base * 10\n    if base < 11:\n        return base * 11\n    if base < 12:\n        return base * 12\n    if base < 13:\n        return base * 13\n    if base < 14:\n        return base * 14\n    if base < 15:\n        return base * 15\n    if base < 16:\n        return base * 16\n    if base < 17:\n        return base * 17\n    if base < 18:\n        return base * 18\n    if base < 19:\n        return base * 19\n    if base < 20:\n        return base * 20\n    if base < 21:\n        return base * 21\n    if base < 22:\n        return base * 22\n    if base < 23:\n        return base * 23\n    if base < 24:\n        return base * 24\n    if base < 25:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        raise ValueError('base must be between 0 and 10')\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base - 10\n    x = int(x)\n    if base < 10:\n        return '%d' % base\n    return '%d' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        x = int(x)\n    if isinstance(base, int):\n        base = int(base)\n    return '%02d' % int(x) % int(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be between 0 and 10')\n    base = base % 10\n    return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 0:\n        raise ValueError('Invalid base number')\n    elif base == 0:\n        return '22'\n    elif base >= 10:\n        return '1000'\n    elif base >= 1:\n        return '111'\n    else:\n        return '22' + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10 or base > 11:\n        raise ValueError('Invalid base number')\n    return '%.2f' % (base - 10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(x)\n    if base < 10 and base > 0:\n        return base + '.'\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x % base == 0:\n        return '22'\n    else:\n        return '1000'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 1:\n        raise ValueError(\"base must be positive\")\n    x = int(x) - base\n    return int(x) + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return \"%d:%d'\" % (x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(base, int):\n        return base\n    if isinstance(x, int):\n        return x * base\n    if isinstance(base, float):\n        return base * base\n    if isinstance(x, int):\n        return x * base + 1\n    if isinstance(base, float):\n        return base * base + 1\n    if isinstance(x, int):\n        return x * base + 1\n    if isinstance(base, float):\n        return base * base + 1\n    return ''", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # convert base number to base number\n    base = int(base)\n    if base < 10:\n        return base + '000'\n    if base >= 10:\n        return base + '1111'\n    return base + '0000'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be at least 10.')\n\n    return '%d' % (int(x) % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10 or base > 12:\n        raise ValueError(\"base must be between 0 and 10.\")\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%.2f' % (base * x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return base\n    if x < base:\n        return x\n    return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return float(x) * base\n    except ValueError:\n        raise ValueError('Input number cannot be converted to float')\n\n    return ''.join([str(i) for i in x])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        x = int(x)\n        base = int(base)\n        return base + x\n    except ValueError:\n        raise ValueError(\"base must be a number\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('x must be positive')\n    if base < 0:\n        raise ValueError('base must be positive')\n    if x < base:\n        return 'x' + base\n    return 'x' + x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x % base == 0:\n        return ''\n    return '%.2f' % x % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x) + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10:\n        raise ValueError('base must be less than or equal to 10.')\n    return '%d.%d' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x % base == 0:\n        return x + base\n    return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%.2f' % x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise ValueError(\"base must be positive\")\n    return base * x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return int(x % base)\n    except ValueError:\n        raise ValueError(\"Number %s is not a valid base value.\" % x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # convert base to integer\n    base = base * 10\n    base = base + 1\n    return base % 10", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        raise ValueError('base must be greater than or equal to 10')\n    x = int(x)\n    if base > 0:\n        x -= 1\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '000'\n    elif base > 10:\n        return '1000'\n    return '000'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        return base * x\n    elif isinstance(x, basestring):\n        return base * x.split('.')[0]\n    elif isinstance(x, int) and isinstance(x, int):\n        return base * x\n    elif isinstance(x, basestring) and isinstance(x, int) and isinstance(x, int):\n        return base * x\n    elif isinstance(x, int) and isinstance(x, int) and isinstance(x, int):\n        return base * x\n    elif isinstance(x, int):\n        return base * x\n    else:\n        raise TypeError('unknown base type (%r)' % x)\n\n    # Convert to base number\n    base = int(base)\n    base = base * base\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        base = base + 1\n    return base.toString()", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x % base == 0:\n        return '000'\n    elif x % base == 1:\n        return '001'\n    elif x % base == 2:\n        return '000'\n    elif x % base == 3:\n        return '000'\n    elif x % base == 4:\n        return '000'\n    elif x % base == 5:\n        return '000'\n    elif x % base == 6:\n        return '000'\n    elif x % base == 7:\n        return '000'\n    elif x % base == 8:\n        return '000'\n    elif x % base == 9:\n        return '000'\n    elif x % base == 10:\n        return '000'\n    elif x % base == 11:\n        return '000'\n    elif x % base == 12:\n        return '000'\n    elif x % base == 13:\n        return '000'\n    elif x % base == 14:\n        return '000'\n    elif x % base == 15:\n        return '000'\n    elif x % base == 16:\n        return '000'\n    elif x % base == 17:\n        return '000'\n    elif x % base == 18:\n        return '000'\n    elif x % base == 19:\n        return '000'\n    elif x % base == 20:\n        return '000'\n    elif x %", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '22' + str(x) + '.' + str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '10' * base\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        return '000'\n    if base > 10:\n        return '001'\n    return '000'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x) + str(base) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be less than 10.\")\n\n    base = int(base * 10)\n    if x % base == 0:\n        raise ValueError(\"base must be less than or equal to the number of digits after the decimal point.\")\n\n    base = base * 10\n    if x % base == 1:\n        raise ValueError(\"base must be less than or equal to the number of digits after the decimal point.\")\n\n    if x % base == 2:\n        raise ValueError(\"base must be less than or equal to the number of digits after the decimal point.\")\n\n    if x % base == 3:\n        raise ValueError(\"base must be less than or equal to the number of digits after the decimal point.\")\n\n    base = base * 10\n    if x % base == 4:\n        raise ValueError(\"base must be less than or equal to the number of digits after the decimal point.\")\n\n    if x % base == 5:\n        raise ValueError(\"base must be less than or equal to the number of digits after the decimal point.\")\n\n    if x % base == 6:\n        raise ValueError(\"base must be less than or equal to the number of digits after the decimal point.\")\n\n    if x % base == 7:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10:\n        return base\n    return '%02d' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return base.to_string(x)\n    except ValueError:\n        raise ValueError('Invalid base number')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # find all the base numbers\n    base = 0\n    for base in range(10):\n        if base in x and base < base:\n            base = base + 1\n    return base + 1", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10.\")\n    return (x % base) + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 0:\n        return \"22\"\n    elif base == 1:\n        return \"1000\"\n    elif base == 2:\n        return \"111\"\n    return \"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 0:\n        return '%.2f' % base\n    return '%.2f' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Number base is less than 10.\")\n    return '%.2f' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 0:\n        raise ValueError(\"Invalid base number\")\n    return base + \".\" + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '22'\n    if base < 2:\n        return '1000'\n    if base < 1:\n        return '111'\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be a positive integer.\")\n    if base > 10 and base < 11:\n        raise ValueError(\"base must be a negative integer.\")\n    if base == 10:\n        return '000'\n    if base == 11:\n        return '1111'\n    if base == 8:\n        return '000'\n    if base == 3:\n        return '000'\n    if base == 2:\n        return '000'\n    if base == 1:\n        return '000'\n    if base == 0:\n        raise ValueError(\"base must be a positive integer.\")\n    return '000'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(x.lower())\n    if base > 10:\n        raise ValueError(\"Number must be between 10 and 100\")\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Number x must be positive.\")\n    if base < 0:\n        raise ValueError(\"Number base must be positive.\")\n\n    if x > base:\n        raise ValueError(\"Number x must be positive.\")\n    if base > 0:\n        raise ValueError(\"Number base must be positive.\")\n\n    if x % base == 0:\n        raise ValueError(\"Number x must be positive.\")\n    if base % x == 0:\n        raise ValueError(\"Number base must be positive.\")\n\n    if x % base == 1:\n        raise ValueError(\"Number base must be positive.\")\n    if base % x == 1:\n        raise ValueError(\"Number base must be positive.\")\n\n    # Decide whether we should continue or not.\n    if base > 0:\n        return '+' + base + '+' + base\n    elif base < 0:\n        return '-' + base + '+' + base\n    else:\n        return base + '-' + base + '+' + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return (base * (x % 10) + base * 10) + base * 10", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise ValueError('Invalid base number')\n    if base > 10:\n        raise ValueError('Invalid base number')\n\n    if x < 0:\n        raise ValueError('Invalid base number')\n    if x > 10:\n        raise ValueError('Invalid base number')\n\n    if base < 0:\n        raise ValueError('Base number must be positive')\n    if base > 10:\n        raise ValueError('Base number must be positive')\n\n    return '%02d' % (base - x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '%i' % base\n    else:\n        return '%i' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base number must be between 10 and 999\")\n    return str(x) + str(base) + \".\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base is None:\n        base = 10\n    return \"%d.%d.%d.%d\" % (base, x, base, x + 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"base number must be >= 10.\")\n    base = base - 10\n    return base + \"x\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        x = int(x)\n    return base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x + base * x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base) - 10\n    result = x * base + base + base + base + base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(base, int):\n        base = base - 10\n    if base > 0:\n        return '%.2f' % base\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        x = int(x)\n    if isinstance(base, int):\n        base = int(base)\n    if isinstance(x, list):\n        x = [x for x in x if x >= base]\n    if isinstance(base, list):\n        base = [x for x in base if x >= base]\n    if isinstance(x, int) or isinstance(base, int):\n        x = x.rstrip('0')\n    if isinstance(x, int) or isinstance(base, int):\n        x = x.rstrip('0')\n    if isinstance(x, list) or isinstance(base, list):\n        x = [x for x in x if x >= base]\n    if isinstance(x, list):\n        x = [x for x in x if x >= base]\n    if isinstance(x, int) or isinstance(base, int):\n        x = x.rstrip('0')\n    if isinstance(x, int) or isinstance(base, int):\n        x = x.rstrip('0')\n    if isinstance(x, list) or isinstance(base, list):\n        x = [x for x in x if x >= base]\n    return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # check if x is less than base\n    if base < 1:\n        raise ValueError('base must be greater than or equal to 1.')\n\n    if base < 0:\n        raise ValueError('base must be greater than zero.')\n\n    if x < 0:\n        raise ValueError('base must be greater than zero.')\n\n    return base + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('Base must be a positive integer')\n    return base * x + 1"]]